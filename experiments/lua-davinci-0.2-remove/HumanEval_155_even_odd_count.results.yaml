language: lua
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 1, #tostring(num) do\n    local\
    \ digit = tonumber(tostring(num):sub(i, i))\n    if digit % 2 == 0 then\n    \
    \  even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n  \
    \  end\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sze9gsa.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp9sze9gsa.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        local digit = tonumber(string.sub(tostring(num), i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnn5lg__y.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpnn5lg__y.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  while num > 0 do\n    if num % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86a8rp6z.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp86a8rp6z.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if (num % 10) %\
    \ 2 == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp211c4sdq.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp211c4sdq.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3v_gafb.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpg3v_gafb.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        local digit = tonumber(string.sub(tostring(num), i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnn5lg__y.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpnn5lg__y.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = num // 10\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposu3la7_.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmposu3la7_.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        if tonumber(tostring(num):sub(i, i)) % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n    end\n    return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpip6qktxl.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpip6qktxl.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #num do\n        if\
    \ num[i] % 2 == 0 then\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz4aderge.lua:6:\
    \ attempt to get length of a number value (local 'num')\nstack traceback:\n\t\
    /tmp/tmpz4aderge.lua:6: in local 'candidate'\n\t/tmp/tmpz4aderge.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  while num > 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqliigfeo.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpqliigfeo.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if num % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgc5o9t60.lua:18:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpgc5o9t60.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphudoaz5b.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmphudoaz5b.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  while num > 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqliigfeo.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpqliigfeo.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    if num % 2 ==\
    \ 0 then\n      even_count = even_count + 1\n    else\n      odd_count = odd_count\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoer1mi_s.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpoer1mi_s.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        if tonumber(string.sub(tostring(num), i, i)) % 2 == 0 then\n        \
    \    even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7o5j_x_u.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp7o5j_x_u.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n\tlocal\
    \ even, odd = 0, 0\n\twhile num > 0 do\n\t\tif num % 2 == 0 then\n\t\t\teven =\
    \ even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum = math.floor(num /\
    \ 10)\n\tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wr4qqew.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp9wr4qqew.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2\
    \ == 0 then\n            even_count = even_count + 1\n        else\n         \
    \   odd_count = odd_count + 1\n        end\n    end\n    return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6swhqwwd.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp6swhqwwd.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2\
    \ == 0 then\n            even_count = even_count + 1\n        else\n         \
    \   odd_count = odd_count + 1\n        end\n    end\n    return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6swhqwwd.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp6swhqwwd.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxomreduu.lua:18:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpxomreduu.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = (num - digit) / 10\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29dfkjmu.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp29dfkjmu.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  while num > 0 do\n    if num % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86a8rp6z.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp86a8rp6z.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3v_gafb.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpg3v_gafb.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 1, #tostring(num) do\n    if\
    \ tonumber(tostring(num):sub(i, i)) % 2 == 0 then\n      even_count = even_count\
    \ + 1\n    else\n      odd_count = odd_count + 1\n    end\n  end\n  return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivrr2oqr.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpivrr2oqr.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdu4qlqo1.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpdu4qlqo1.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  while num > 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqliigfeo.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpqliigfeo.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdu4qlqo1.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpdu4qlqo1.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(string.sub(tostring(num),\
    \ i, i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7mwm4o1.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpm7mwm4o1.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdu4qlqo1.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpdu4qlqo1.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if num % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuxov8ght.lua:18:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuxov8ght.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        if num\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        num = math.floor(num /\
    \ 10)\n    end\n    return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp547929jn.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp547929jn.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixexnzah.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpixexnzah.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        if tonumber(tostring(num):sub(i, i)) % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n    end\n    return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpip6qktxl.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpip6qktxl.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #num do\n        if\
    \ num:sub(i, i) % 2 == 0 then\n            even_count = even_count + 1\n     \
    \   else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ even_count, odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyom8m7eq.lua:6:\
    \ attempt to get length of a number value (local 'num')\nstack traceback:\n\t\
    /tmp/tmpyom8m7eq.lua:6: in local 'candidate'\n\t/tmp/tmpyom8m7eq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if (num % 10) %\
    \ 2 == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp211c4sdq.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp211c4sdq.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for _, digit in ipairs(num_to_digits(num))\
    \ do\n        if digit % 2 == 0 then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n    end\n \
    \   return even_count, odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kv45xn1.lua:6:\
    \ attempt to call a nil value (global 'num_to_digits')\nstack traceback:\n\t/tmp/tmp7kv45xn1.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7kv45xn1.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = num // 10\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ja8brgt.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3ja8brgt.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  while num > 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqliigfeo.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpqliigfeo.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        if num % 2 == 0 then\n            even_count = even_count + 1\n     \
    \   else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ even_count, odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2vl9lxy.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpo2vl9lxy.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    local num_str = tostring(num)\n\
    \    for i = 1, #num_str do\n        local digit = tonumber(num_str:sub(i, i))\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ even_count, odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzze8vs8.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmptzze8vs8.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        if tonumber(tostring(num):sub(i, i)) % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n    end\n    return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpip6qktxl.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpip6qktxl.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2\
    \ == 0 then\n            even_count = even_count + 1\n        else\n         \
    \   odd_count = odd_count + 1\n        end\n    end\n    return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6swhqwwd.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp6swhqwwd.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphudoaz5b.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmphudoaz5b.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        local digit = tonumber(string.sub(tostring(num), i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnn5lg__y.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpnn5lg__y.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3v_gafb.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpg3v_gafb.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  while num > 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqliigfeo.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpqliigfeo.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3v_gafb.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpg3v_gafb.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if (num % 10) %\
    \ 2 == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp211c4sdq.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp211c4sdq.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n\tlocal\
    \ even, odd = 0, 0\n\twhile num > 0 do\n\t\tif num % 2 == 0 then\n\t\t\teven =\
    \ even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum = math.floor(num /\
    \ 10)\n\tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wr4qqew.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp9wr4qqew.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphudoaz5b.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmphudoaz5b.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        if (num % 2) == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ even_count, odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopecdtgt.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpopecdtgt.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit =\
    \ num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n  \
    \  else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kxn_4sv.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3kxn_4sv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        local digit = tonumber(string.sub(tostring(num), i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnn5lg__y.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpnn5lg__y.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphudoaz5b.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmphudoaz5b.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        local digit = tonumber(string.sub(tostring(num), i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnn5lg__y.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpnn5lg__y.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7q47ymz.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpj7q47ymz.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even = 0\n    local odd = 0\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3avngh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpql3avngh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num) do\n\
    \        local digit = tonumber(string.sub(tostring(num), i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnn5lg__y.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpnn5lg__y.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even_count = 0\n    local odd_count = 0\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyu3x2b.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuwyu3x2b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1a3rbjg.lua:19:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1a3rbjg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\nlocal function even_odd_count(num)\n    local\
    \ even, odd = 0, 0\n    while num > 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zf0kwz.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx6zf0kwz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014528
