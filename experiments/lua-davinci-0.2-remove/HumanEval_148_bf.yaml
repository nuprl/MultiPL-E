name: HumanEval_148_bf
language: lua
prompt: "-- There are eight planets in our solar system: the closerst to the Sun \n\
  -- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n-- Uranus,\
  \ Neptune.\n-- Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n-- The function should return a tuple containing all planets whose\
  \ orbits are \n-- located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n-- the proximity to the sun. \n-- The function should return an empty\
  \ tuple if planet1 or planet2\n-- are not correct planet names. \n-- Examples\n\
  local function bf(planet1, planet2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
  \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n  \
  \  lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
  \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
  \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
  \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
  \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local planets = {\n        \"Mercury\",\n        \"Venus\",\n \
    \       \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local p1 = 0\n    local\
    \ p2 = 0\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n \
    \           p1 = i\n        end\n        if v == planet2 then\n            p2\
    \ = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n\
    \    end\n    local res = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2\
    \ - 1 do\n            table.insert(res, planets[i])\n        end\n    else\n \
    \       for i = p2 + 1, p1 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    end\n    return res\nend", "    local planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    }\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets) do\n       \
    \ if v == planet1 then\n            p1 = i\n        end\n        if v == planet2\
    \ then\n            p2 = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n\
    \        return {}\n    end\n    local result = {}\n    for i = math.min(p1, p2),\
    \ math.max(p1, p2) do\n        table.insert(result, planets[i])\n    end\n   \
    \ return result\nend", "    local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2\n\
    \    for i, p in ipairs(planets) do\n        if p == planet1 then\n          \
    \  p1 = i\n        end\n        if p == planet2 then\n            p2 = i\n   \
    \     end\n    end\n    if p1 == nil or p2 == nil then\n        return {}\n  \
    \  end\n    local res = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 -\
    \ 1 do\n            table.insert(res, planets[i])\n        end\n    else\n   \
    \     for i = p2 + 1, p1 - 1 do\n            table.insert(res, planets[i])\n \
    \       end\n    end\n    return res\nend", "  local planets = {\n    \"Mercury\"\
    ,\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\"\
    ,\n    \"Uranus\",\n    \"Neptune\"\n  }\n  local start = 0\n  local finish =\
    \ 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then\n      start =\
    \ i\n    end\n    if v == planet2 then\n      finish = i\n    end\n  end\n  if\
    \ start == 0 or finish == 0 then\n    return {}\n  end\n  local result = {}\n\
    \  if start < finish then\n    for i = start + 1, finish - 1 do\n      table.insert(result,\
    \ planets[i])\n    end\n  else\n    for i = finish + 1, start - 1 do\n      table.insert(result,\
    \ planets[i])\n    end\n  end\n  return result\nend", "    local planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets) do\n\
    \        if v == planet1 then\n            p1 = i\n        end\n        if v ==\
    \ planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0 or p2\
    \ == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1, p2 =\
    \ p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n       \
    \ table.insert(res, planets[i])\n    end\n    return res\nend", "    local planets\
    \ = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"\
    Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n    \
    \    \"Neptune\"\n    }\n    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n    if p1 and p2 then\n        local t = {}\n        for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n            table.insert(t, planets[i])\n\
    \        end\n        return table.unpack(t)\n    end\n    return ()\nend", " \
    \   local planets = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    }\n    local p1, p2 = -1,\
    \ -1\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == -1 or p2 == -1 then\n        return {}\n \
    \   end\n    local res = {}\n    if p1 > p2 then\n        for i = p2, p1 do\n\
    \            table.insert(res, planets[i])\n        end\n    else\n        for\
    \ i = p1, p2 do\n            table.insert(res, planets[i])\n        end\n    end\n\
    \    return res\nend", "    local planets = {\n        \"Mercury\",\n        \"\
    Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n      \
    \  \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local p1\
    \ = 0\n    local p2 = 0\n    for i, v in ipairs(planets) do\n        if v == planet1\
    \ then\n            p1 = i\n        end\n        if v == planet2 then\n      \
    \      p2 = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return\
    \ {}\n    end\n    local t = {}\n    if p1 < p2 then\n        for i = p1 + 1,\
    \ p2 - 1 do\n            table.insert(t, planets[i])\n        end\n    else\n\
    \        for i = p2 + 1, p1 - 1 do\n            table.insert(t, planets[i])\n\
    \        end\n    end\n    return t\nend", "    local planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    }\n    local p1, p2 = -1, -1\n    for i, v in ipairs(planets) do\n     \
    \   if v == planet1 then\n            p1 = i\n        end\n        if v == planet2\
    \ then\n            p2 = i\n        end\n    end\n    if p1 == -1 or p2 == -1\
    \ then\n        return {}\n    end\n    local t = {}\n    for i = math.min(p1,\
    \ p2), math.max(p1, p2) do\n        table.insert(t, planets[i])\n    end\n   \
    \ return t\nend", "\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets)\
    \ do\n\t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\
    \t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\t\
    end\n\tlocal res = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\t\
    table.insert(res, planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\
    \t\t\ttable.insert(res, planets[i])\n\t\tend\n\tend\n\treturn res\nend", "   \
    \ local planets = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\"\
    ,\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\"\n    }\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend", "    local planets\
    \ = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"\
    Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n    \
    \    \"Neptune\"\n    }\n    local p1 = 0\n    local p2 = 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend", "    local\
    \ planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets) do\n  \
    \      if v == planet1 then\n            p1 = i\n        end\n        if v ==\
    \ planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0 or p2\
    \ == 0 then\n        return {}\n    end\n    local ret = {}\n    if p1 < p2 then\n\
    \        for i = p1 + 1, p2 - 1 do\n            table.insert(ret, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(ret,\
    \ planets[i])\n        end\n    end\n    return ret\nend", "    local planets\
    \ = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"\
    Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n    \
    \    \"Neptune\"\n    }\n    local p1 = 0\n    local p2 = 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend", "    local planets\
    \ = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"\
    Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n    \
    \    \"Neptune\"\n    }\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend", "\tlocal planets =\
    \ {\n\t\t\"Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\"\
    ,\n\t\t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\"\n\t}\n\tlocal p1 = 0\n\t\
    local p2 = 0\n\tfor i, v in ipairs(planets) do\n\t\tif v == planet1 then\n\t\t\
    \tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\t\
    if p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\tlocal ret = {}\n\tif p1 <\
    \ p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(ret, planets[i])\n\
    \t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(ret, planets[i])\n\
    \t\tend\n\tend\n\treturn ret\nend", "    local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n   \
    \ local p1, p2 = 0, 0\n    for i, v in ipairs(planets) do\n        if v == planet1\
    \ then\n            p1 = i\n        end\n        if v == planet2 then\n      \
    \      p2 = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return\
    \ {}\n    end\n    local res = {}\n    if p1 < p2 then\n        for i = p1 + 1,\
    \ p2 - 1 do\n            table.insert(res, planets[i])\n        end\n    else\n\
    \        for i = p2 + 1, p1 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    end\n    return res\nend", "    local planets = {'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n    local\
    \ p1, p2 = 0, 0\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n\
    \            p1 = i\n        end\n        if v == planet2 then\n            p2\
    \ = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n\
    \    end\n    local res = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2\
    \ - 1 do\n            table.insert(res, planets[i])\n        end\n    else\n \
    \       for i = p2 + 1, p1 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    end\n    return res\nend", "\tlocal planets = {\n\t\t\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \n\t}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif v == planet1\
    \ then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\
    \tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\t\
    if p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\
    \t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\
    \t\tend\n\tend\n\treturn res\nend", "\tlocal planets = {'Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\t\
    for i, v in ipairs(planets) do\n\t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\
    \t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 ==\
    \ 0 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\tif p1 < p2 then\n\t\tfor i\
    \ = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\telse\n\t\
    \tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\t\
    end\n\treturn res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
