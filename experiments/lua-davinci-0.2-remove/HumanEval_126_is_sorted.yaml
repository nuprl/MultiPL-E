name: HumanEval_126_is_sorted
language: lua
prompt: "-- Given a list of numbers, return whether or not they are sorted\n-- in\
  \ ascending order. If list has more than 1 duplicate of the same\n-- number, return\
  \ False. Assume no negative numbers and only integers.\n-- Examples\nlocal function\
  \ is_sorted(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n\
  \    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2,\
  \ 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n   \
  \ lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}),\
  \ false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}),\
  \ true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1,\
  \ 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: []
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
