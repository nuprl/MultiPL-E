name: HumanEval_30_get_positive
language: lua
prompt: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
  \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
  \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local ret = {}\n    for _, v in ipairs(l) do\n        if v > 0\
    \ then\n            table.insert(ret, v)\n        end\n    end\n    return ret\n\
    end", "    local res = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend",
  "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend", "    local res = {}\n    for _, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(res, v)\n        end\n \
    \   end\n    return res\nend", "    local ret = {}\n    for i, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(ret, v)\n        end\n \
    \   end\n    return ret\nend", "    local r = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "\tlocal r = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0\
    \ then\n\t\t\tr[#r+1] = v\n\t\tend\n\tend\n\treturn r\nend", "    local res =\
    \ {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "    local res = {}\n    for\
    \ _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "    local r = {}\n    for _, v in\
    \ ipairs(l) do\n        if v > 0 then\n            table.insert(r, v)\n      \
    \  end\n    end\n    return r\nend", "    local ret = {}\n    for i, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(ret, v)\n        end\n \
    \   end\n    return ret\nend", "  local res = {}\n  for _, v in ipairs(l) do\n\
    \    if v > 0 then\n      table.insert(res, v)\n    end\n  end\n  return res\n\
    end", "    local res = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend",
  "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend", "    local res = {}\n    for _, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(res, v)\n        end\n \
    \   end\n    return res\nend", "\tlocal r = {}\n\tfor i, v in ipairs(l) do\n\t\
    \tif v > 0 then\n\t\t\tr[#r+1] = v\n\t\tend\n\tend\n\treturn r\nend", "\tlocal\
    \ ret = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(ret,\
    \ v)\n\t\tend\n\tend\n\treturn ret\nend", "    local new_list = {}\n    for _,\
    \ v in ipairs(l) do\n        if v > 0 then\n            table.insert(new_list,\
    \ v)\n        end\n    end\n    return new_list\nend", "  local res = {}\n  for\
    \ _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(res, v)\n    end\n\
    \  end\n  return res\nend", "    local res = {}\n    for i, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(res, v)\n        end\n    end\n\
    \    return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
