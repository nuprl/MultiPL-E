language: lua
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    return a == 0\
    \ or a == 1 or a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or a == 343\
    \ or a == 512 or a == 729 or a == 1000 or a == 1331 or a == 1728 or a == 2197\
    \ or a == 2744 or a == 3375 or a == 4096 or a == 4913 or a == 5832 or a == 6859\
    \ or a == 8000 or a == 9261 or a == 10648 or a == 12167 or a == 13824 or a ==\
    \ 15625 or a == 17576 or a == 19683 or a == 21952 or a == 24389 or a == 27000\
    \ or a == 29791 or a == 32768 or a == 35937 or a == 39304 or a == 42875 or a ==\
    \ 46656 or a == 50653 or a == 54872 or a == 59319 or a == 64000 or a == 68921\
    \ or a == 74088 or a == 79507 or a == 85184 or a == 91125 or a == 97336 or a ==\
    \ 103823 or a == 110592 or a == 117649 or a == 125000 or a == 132651 or a == 140608\
    \ or a == 148877 or a == 157464 or a == 166375 or a == 175616 or a == 185193 or\
    \ a == 195112 or a == 205379 or a == 216000 or a == 226981 or a == 238328 or a\
    \ == 250047 or a == 262144 or a == 274625 or a == 287496 or a == 300763 or a ==\
    \ 314432 or a == 328509 or a == 343000 or a == 357911 or a == 373248 or a == 389017\
    \ or a == 405224 or a == 421875 or a == 438976 or a == 456533 or a == 474552 or\
    \ a == 493039 or a == 512000 or a == 531441 or a == 551368 or a == 571787 or a\
    \ == 592704 or a == 614125 or a == 636056 or a == 658503 or a == 681472 or a ==\
    \ 704969 or a == 729000 or a == 753571 or a == 778688 or a == 804357 or a == 830584\
    \ or a == 857375 or a == 88\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzekvei6n.lua:7: ''end'' expected (to close ''function'' at
    line 5) near ''lu''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    local x = math.sqrt(a)\n    return x == math.floor(x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31e1gx4g.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp31e1gx4g.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return a == 0 or a == 1 or a == 8 or a == 27 or a == 64 or a == 125 or a\
    \ == 216 or a == 343 or a == 512 or a == 729 or a == 1000 or a == 1331 or a ==\
    \ 1728 or a == 2197 or a == 2744 or a == 3375 or a == 4096 or a == 4913 or a ==\
    \ 5832 or a == 6859 or a == 8000 or a == 9261 or a == 10648 or a == 12167 or a\
    \ == 13824 or a == 15625 or a == 17576 or a == 19683 or a == 21952 or a == 24389\
    \ or a == 27000 or a == 29791 or a == 32768 or a == 35937 or a == 39304 or a ==\
    \ 42875 or a == 46656 or a == 50653 or a == 54872 or a == 59319 or a == 64000\
    \ or a == 68921 or a == 74088 or a == 79507 or a == 85184 or a == 91125 or a ==\
    \ 97336 or a == 103823 or a == 110592 or a == 117649 or a == 125000 or a == 132651\
    \ or a == 140608 or a == 148877 or a == 157464 or a == 166375 or a == 175616 or\
    \ a == 185193 or a == 195112 or a == 205379 or a == 216000 or a == 226981 or a\
    \ == 238328 or a == 250047 or a == 262144 or a == 274625 or a == 287496 or a ==\
    \ 300763 or a == 314432 or a == 328509 or a == 343000 or a == 357911 or a == 373248\
    \ or a == 389017 or a == 405224 or a == 421875 or a == 438976 or a == 456533 or\
    \ a == 474552 or a == 493039 or a == 512000 or a == 531441 or a == 551368 or a\
    \ == 571787 or a == 592704 or a == 614125 or a == 636056 or a == 658503 or a ==\
    \ 681472 or a == 704969 or a == 729000 or a == 753571 or a == 778688 or a == 804357\
    \ or a == 830584 or a == 8\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfcv6n2vr.lua:8: ''end'' expected (to close ''function'' at
    line 5) near ''lu''

    '
  stdout: ''
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.sqrt(a)\n\
    \    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp085lj1f6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp085lj1f6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mw226lq.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_mw226lq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mw226lq.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_mw226lq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.pow(a,\
    \ 1/3)\n    return math.floor(x) == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16s0eqv6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp16s0eqv6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mw226lq.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_mw226lq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nassert(iscube(8) == false)\nassert(iscube(27) == true)\n\
    assert(iscube(64) == true)\nassert(iscube(1) == true)\nassert(iscube(0) == true)\n\
    assert(iscube(125) == true)\nassert(iscube(-27) == true)\nassert(iscube(-64) ==\
    \ true)\nassert(iscube(-1) == true)\nassert(iscube(-125) == true)\nprint('OK')\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp6ktr5qcz.lua:10: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp6ktr5qcz.lua:10: in main chunk\n\t[C]: ?\n"
  stdout: ''
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprttdgbl6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprttdgbl6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprttdgbl6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprttdgbl6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mw226lq.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_mw226lq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local i = 1\n\
    \    while i * i * i <= a do\n        if i * i * i == a then\n            return\
    \ true\n        end\n        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85l6zl_y.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp85l6zl_y.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return a == x*x*x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_n3io8t.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw_n3io8t.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local b = math.sqrt(a)\n\
    \    return math.floor(b) == b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhhjyma8.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdhhjyma8.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n\t-- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsccb9umj.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpsccb9umj.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local t = math.sqrt(a)\n\
    \    return t * t * t == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06meadom.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp06meadom.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    return math.pow(math.floor(math.pow(a,\
    \ 1/3)), 3) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoeso3r9.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyoeso3r9.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n\tlocal b = math.floor(math.pow(a,\
    \ 1/3))\n\treturn a == b * b * b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw_kzau6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkw_kzau6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfqmrs7g.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkfqmrs7g.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code goes\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplov4a0to.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmplov4a0to.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h8rgha3.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4h8rgha3.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfqmrs7g.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkfqmrs7g.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    return math.floor(math.pow(a,\
    \ 1/3))^3 == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6pnrete.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj6pnrete.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h8rgha3.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4h8rgha3.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprttdgbl6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprttdgbl6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprttdgbl6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprttdgbl6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n  -- your code here\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_umv1_6p.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_umv1_6p.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local i = 1\n\
    \    while i * i * i <= a do\n        if i * i * i == a then\n            return\
    \ true\n        end\n        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85l6zl_y.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp85l6zl_y.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h8rgha3.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4h8rgha3.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h8rgha3.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4h8rgha3.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprttdgbl6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprttdgbl6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mw226lq.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_mw226lq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.sqrt(a)\n\
    \    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp085lj1f6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp085lj1f6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mw226lq.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_mw226lq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return a == x*x*x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_n3io8t.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw_n3io8t.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h8rgha3.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4h8rgha3.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h8rgha3.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4h8rgha3.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return math.pow(x, 3) == a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugh9jk0c.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpugh9jk0c.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprttdgbl6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprttdgbl6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h8rgha3.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4h8rgha3.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mw226lq.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_mw226lq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h8rgha3.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4h8rgha3.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code goes\
    \ here\n    local x = math.sqrt(a)\n    return x == math.floor(x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtt73gzj.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwtt73gzj.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return math.pow(math.floor(math.pow(a, 1/3)), 3) == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaihqt4ug.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaihqt4ug.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    local x = math.sqrt(a)\n    if x % 1 == 0 then\n        return true\n   \
    \ else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj2kht1g.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgj2kht1g.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfqmrs7g.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkfqmrs7g.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local n = math.floor(math.pow(a,\
    \ 1/3))\n    return n*n*n == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8d3apil6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8d3apil6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mw226lq.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_mw226lq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfqmrs7g.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkfqmrs7g.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return a == 1 or a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or\
    \ a == 343 or a == 512 or a == 729 or a == 1000 or a == 1331 or a == 1728 or a\
    \ == 2197 or a == 2744 or a == 3375 or a == 4096 or a == 4913 or a == 5832 or\
    \ a == 6859 or a == 8000 or a == 9261 or a == 10648 or a == 12167 or a == 13824\
    \ or a == 15625 or a == 17576 or a == 19683 or a == 21952 or a == 24389 or a ==\
    \ 27000 or a == 29791 or a == 32768 or a == 35937 or a == 39304 or a == 42875\
    \ or a == 46656 or a == 50653 or a == 54872 or a == 59319 or a == 64000 or a ==\
    \ 68921 or a == 74088 or a == 79507 or a == 85184 or a == 91125 or a == 97336\
    \ or a == 103823 or a == 110592 or a == 117649 or a == 125000 or a == 132651 or\
    \ a == 140608 or a == 148877 or a == 157464 or a == 166375 or a == 175616 or a\
    \ == 185193 or a == 195112 or a == 205379 or a == 216000 or a == 226981 or a ==\
    \ 238328 or a == 250047 or a == 262144 or a == 274625 or a == 287496 or a == 300763\
    \ or a == 314432 or a == 328509 or a == 343000 or a == 357911 or a == 373248 or\
    \ a == 389017 or a == 405224 or a == 421875 or a == 438976 or a == 456533 or a\
    \ == 474552 or a == 493039 or a == 512000 or a == 531441 or a == 551368 or a ==\
    \ 571787 or a == 592704 or a == 614125 or a == 636056 or a == 658503 or a == 681472\
    \ or a == 704969 or a == 729000 or a == 753571 or a == 778688 or a == 804357 or\
    \ a == 830584 or a == 857375 or a\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx4hdxhv5.lua:8: ''end'' expected (to close ''function'' at
    line 5) near ''lu''

    '
  stdout: ''
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfqmrs7g.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkfqmrs7g.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return a == x*x*x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_n3io8t.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw_n3io8t.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return a == x*x*x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_n3io8t.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw_n3io8t.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h8rgha3.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4h8rgha3.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return math.pow(x, 3) == a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugh9jk0c.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpugh9jk0c.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return a == 1 or a == 8 or a == 27 or a == 64 or a == 125 or a == 216 or\
    \ a == 343 or a == 512 or a == 729 or a == 1000 or a == 1331 or a == 1728 or a\
    \ == 2197 or a == 2744 or a == 3375 or a == 4096 or a == 4913 or a == 5832 or\
    \ a == 6859 or a == 8000 or a == 9261 or a == 10648 or a == 12167 or a == 13824\
    \ or a == 15625 or a == 17576 or a == 19683 or a == 21952 or a == 24389 or a ==\
    \ 27000 or a == 29791 or a == 32768 or a == 35937 or a == 39304 or a == 42875\
    \ or a == 46656 or a == 50653 or a == 54872 or a == 59319 or a == 64000 or a ==\
    \ 68921 or a == 74088 or a == 79507 or a == 85184 or a == 91125 or a == 97336\
    \ or a == 103823 or a == 110592 or a == 117649 or a == 125000 or a == 132651 or\
    \ a == 140608 or a == 148877 or a == 157464 or a == 166375 or a == 175616 or a\
    \ == 185193 or a == 195112 or a == 205379 or a == 216000 or a == 226981 or a ==\
    \ 238328 or a == 250047 or a == 262144 or a == 274625 or a == 287496 or a == 300763\
    \ or a == 314432 or a == 328509 or a == 343000 or a == 357911 or a == 373248 or\
    \ a == 389017 or a == 405224 or a == 421875 or a == 438976 or a == 456533 or a\
    \ == 474552 or a == 493039 or a == 512000 or a == 531441 or a == 551368 or a ==\
    \ 571787 or a == 592704 or a == 614125 or a == 636056 or a == 658503 or a == 681472\
    \ or a == 704969 or a == 729000 or a == 753571 or a == 778688 or a == 804357 or\
    \ a == 830584 or a == 857375 or a\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx4hdxhv5.lua:8: ''end'' expected (to close ''function'' at
    line 5) near ''lu''

    '
  stdout: ''
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.sqrt(a)\n\
    \    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp085lj1f6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp085lj1f6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprttdgbl6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprttdgbl6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code goes\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplov4a0to.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmplov4a0to.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mw226lq.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_mw226lq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mw226lq.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_mw226lq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h8rgha3.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4h8rgha3.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n  -- your code here\n\
    \  local x = math.sqrt(a)\n  if x == math.floor(x) then\n    return true\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27xg6gns.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp27xg6gns.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7appis31.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7appis31.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    \    local x = math.sqrt(a)\n    return x == math.floor(x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31e1gx4g.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp31e1gx4g.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\nlocal function iscube(a)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_614egud.lua:12:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_614egud.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
