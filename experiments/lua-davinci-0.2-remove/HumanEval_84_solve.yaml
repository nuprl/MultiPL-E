name: HumanEval_84_solve
language: lua
prompt: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
  -- Example\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
  -- Output:\n-- a string of binary number\nlocal function solve(N)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
  \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
  \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  while N > 0 do\n    sum = sum + N % 2\n    N = math.floor(N\
    \ / 2)\n  end\n  return sum\nend", "  local s = \"\"\n  while N > 0 do\n    s\
    \ = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n  end\n  return s\nend",
  "    local sum = 0\n    local binary = \"\"\n    while N > 0 do\n        local r\
    \ = N % 2\n        N = math.floor(N / 2)\n        binary = binary .. r\n     \
    \   sum = sum + r\n    end\n    return sum, binary\nend", "  local sum = 0\n \
    \ local binary = {}\n  local i = 1\n  while N > 0 do\n    local remainder = N\
    \ % 2\n    N = math.floor(N / 2)\n    binary[i] = remainder\n    i = i + 1\n \
    \ end\n  for i = 1, #binary do\n    sum = sum + binary[i]\n  end\n  return sum\n\
    end", "  local sum = 0\n  local binary = \"\"\n  while N > 0 do\n    local remainder\
    \ = N % 2\n    binary = remainder .. binary\n    N = math.floor(N / 2)\n  end\n\
    \  for i = 1, #binary do\n    sum = sum + tonumber(binary:sub(i, i))\n  end\n\
    \  return sum\nend", "    local sum = 0\n    while N > 0 do\n        sum = sum\
    \ + N % 2\n        N = math.floor(N / 2)\n    end\n    return sum\nend", "   \
    \ local sum = 0\n    while N > 0 do\n        sum = sum + N % 2\n        N = math.floor(N\
    \ / 2)\n    end\n    return sum\nend", "    local sum = 0\n    while N > 0 do\n\
    \        sum = sum + N % 2\n        N = math.floor(N / 2)\n    end\n    return\
    \ sum\nend", "    local sum = 0\n    while N > 0 do\n        sum = sum + N % 2\n\
    \        N = math.floor(N / 2)\n    end\n    return sum\nend", "    local s =\
    \ \"\"\n    while N > 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N\
    \ / 2)\n    end\n    return s\nend", "    local sum = 0\n    while N > 0 do\n\
    \        sum = sum + N % 2\n        N = math.floor(N / 2)\n    end\n    return\
    \ sum\nend", "  local sum = 0\n  while N > 0 do\n    sum = sum + N % 2\n    N\
    \ = math.floor(N / 2)\n  end\n  return sum\nend", "  local s = \"\"\n  repeat\n\
    \    local r = N % 2\n    s = r .. s\n    N = (N - r) / 2\n  until N == 0\n  return\
    \ s\nend", "  local binary = {}\n  local sum = 0\n  while N > 0 do\n    local\
    \ remainder = N % 2\n    N = math.floor(N / 2)\n    table.insert(binary, remainder)\n\
    \  end\n  for i = 1, #binary do\n    sum = sum + binary[i]\n  end\n  return sum\n\
    end", "    local sum = 0\n    while N > 0 do\n        sum = sum + N % 2\n    \
    \    N = math.floor(N / 2)\n    end\n    return sum\nend", "    local sum = 0\n\
    \    while N > 0 do\n        sum = sum + N % 2\n        N = math.floor(N / 2)\n\
    \    end\n    return sum\nend", "    local sum = 0\n    while N > 0 do\n     \
    \   sum = sum + (N % 2)\n        N = math.floor(N / 2)\n    end\n    return sum\n\
    end", "    local sum = 0\n    local binary = \"\"\n    while N > 0 do\n      \
    \  local r = N % 2\n        N = math.floor(N / 2)\n        sum = sum + r\n   \
    \     binary = tostring(r) .. binary\n    end\n    return sum, binary\nend", " \
    \   local s = 0\n    while N > 0 do\n        s = s + (N % 2)\n        N = math.floor(N\
    \ / 2)\n    end\n    return s\nend", "  local r = 0\n  while N > 0 do\n    r =\
    \ r + (N % 2)\n    N = math.floor(N / 2)\n  end\n  return r\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
