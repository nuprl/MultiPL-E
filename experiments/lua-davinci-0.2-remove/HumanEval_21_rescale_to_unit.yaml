name: HumanEval_21_rescale_to_unit
language: lua
prompt: "-- Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n-- such that the smallest number will become 0 and the largest\
  \ will become 1\nlocal function rescale_to_unit(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
  \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
  \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
  \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0,\
  \ 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0,\
  \ 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local rescaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled, (number - min) / range)\n    end\n    return\
    \ rescaled\nend", "  local min = math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ (number - min) / (max - min))\n  end\n  return result\nend", "  local min, max\
    \ = math.min(unpack(numbers)), math.max(unpack(numbers))\n  local range = max\
    \ - min\n  local rescaled = {}\n  for i, v in ipairs(numbers) do\n    rescaled[i]\
    \ = (v - min) / range\n  end\n  return rescaled\nend", "  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local result = {}\n  for i,v in ipairs(numbers)\
    \ do\n    result[i] = (v - min) / (max - min)\n  end\n  return result\nend", " \
    \   local min, max = numbers[1], numbers[1]\n    for _, n in ipairs(numbers) do\n\
    \        if n < min then min = n end\n        if n > max then max = n end\n  \
    \  end\n    local range = max - min\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(result, (n - min) / range)\n    end\n    return result\n\
    end", "\tlocal min = numbers[1]\n\tlocal max = numbers[1]\n\tfor i = 2, #numbers\
    \ do\n\t\tif numbers[i] < min then\n\t\t\tmin = numbers[i]\n\t\telseif numbers[i]\
    \ > max then\n\t\t\tmax = numbers[i]\n\t\tend\n\tend\n\tlocal result = {}\n\t\
    for i = 1, #numbers do\n\t\tresult[i] = (numbers[i] - min) / (max - min)\n\tend\n\
    \treturn result\nend", "  local min = numbers[1]\n  local max = numbers[1]\n \
    \ for _, n in ipairs(numbers) do\n    if n < min then\n      min = n\n    end\n\
    \    if n > max then\n      max = n\n    end\n  end\n  local result = {}\n  for\
    \ _, n in ipairs(numbers) do\n    table.insert(result, (n - min) / (max - min))\n\
    \  end\n  return result\nend", "    local min = math.min(unpack(numbers))\n  \
    \  local max = math.max(unpack(numbers))\n    local scale = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / scale)\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ scale = max - min\n    local result = {}\n    for _, num in ipairs(numbers)\
    \ do\n        table.insert(result, (num - min) / scale)\n    end\n    return result\n\
    end", "  local min = math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = (numbers[i] -\
    \ min) / (max - min)\n  end\n  return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ rescaled = {}\n    for _, number in ipairs(numbers) do\n        table.insert(rescaled,\
    \ (number - min) / range)\n    end\n    return rescaled\nend", "    local max\
    \ = math.max(unpack(numbers))\n    local min = math.min(unpack(numbers))\n   \
    \ local rescaled = {}\n    for i, v in ipairs(numbers) do\n        rescaled[i]\
    \ = (v - min) / (max - min)\n    end\n    return rescaled\nend", "    local min\
    \ = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n   \
    \ local scale = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / scale)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, number in ipairs(numbers) do\n        if number < min then\n            min\
    \ = number\n        end\n        if number > max then\n            max = number\n\
    \        end\n    end\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / (max - min))\n    end\n  \
    \  return result\nend", "    local min_number = math.min(unpack(numbers))\n  \
    \  local max_number = math.max(unpack(numbers))\n    local range = max_number\
    \ - min_number\n    local rescaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled, (number - min_number) / range)\n    end\n\
    \    return rescaled\nend", "  local min = math.min(unpack(numbers))\n  local\
    \ max = math.max(unpack(numbers))\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(result, (number - min) / (max - min))\n  end\n  return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, n in ipairs(numbers) do\n        if n < min then\n            min = n\n \
    \       end\n        if n > max then\n            max = n\n        end\n    end\n\
    \    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ diff = max - min\n    local rescaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled, (number - min) / diff)\n    end\n    return\
    \ rescaled\nend", "    local min = numbers[1]\n    local max = numbers[1]\n  \
    \  for _, n in ipairs(numbers) do\n        if n < min then\n            min =\
    \ n\n        end\n        if n > max then\n            max = n\n        end\n\
    \    end\n    local range = max - min\n    local result = {}\n    for _, n in\
    \ ipairs(numbers) do\n        table.insert(result, (n - min) / range)\n    end\n\
    \    return result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n\
    \    for i = 2, #numbers do\n        if numbers[i] < min then\n            min\
    \ = numbers[i]\n        elseif numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n    end\n    local result = {}\n    for i = 1, #numbers do\n   \
    \     result[i] = (numbers[i] - min) / (max - min)\n    end\n    return result\n\
    end", "    local min = numbers[1]\n    local max = numbers[1]\n    for _, number\
    \ in ipairs(numbers) do\n        if number < min then\n            min = number\n\
    \        end\n        if number > max then\n            max = number\n       \
    \ end\n    end\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        table.insert(result, (number - min) / (max - min))\n    end\n    return\
    \ result\nend", "    local min_number = math.min(unpack(numbers))\n    local max_number\
    \ = math.max(unpack(numbers))\n    local range = max_number - min_number\n   \
    \ local rescaled = {}\n    for _, number in ipairs(numbers) do\n        table.insert(rescaled,\
    \ (number - min_number) / range)\n    end\n    return rescaled\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if n < min then\n            min = n\n        end\n        if n\
    \ > max then\n            max = n\n        end\n    end\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ rescaled = {}\n    for i, v in ipairs(numbers) do\n        rescaled[i] = (v\
    \ - min) / range\n    end\n    return rescaled\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ rescaled = {}\n    for _, number in ipairs(numbers) do\n        table.insert(rescaled,\
    \ (number - min) / range)\n    end\n    return rescaled\nend", "\tlocal min_val\
    \ = math.min(unpack(numbers))\n\tlocal max_val = math.max(unpack(numbers))\n\t\
    local range = max_val - min_val\n\tlocal rescaled = {}\n\tfor i, v in ipairs(numbers)\
    \ do\n\t\trescaled[i] = (v - min_val) / range\n\tend\n\treturn rescaled\nend",
  "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local scale = max - min\n    local scaled = {}\n    for i, v in ipairs(numbers)\
    \ do\n        scaled[i] = (v - min) / scale\n    end\n    return scaled\nend",
  "    local min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        local\
    \ scaled = (number - min) / (max - min)\n        table.insert(result, scaled)\n\
    \    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ rescaled = {}\n    for i, v in ipairs(numbers) do\n        rescaled[i] = (v\
    \ - min) / range\n    end\n    return rescaled\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for i, v in ipairs(numbers) do\n        result[i] = (v - min)\
    \ / range\n    end\n    return result\nend", "    local min_number = math.min(unpack(numbers))\n\
    \    local max_number = math.max(unpack(numbers))\n    local result = {}\n   \
    \ for _, number in ipairs(numbers) do\n        table.insert(result, (number -\
    \ min_number) / (max_number - min_number))\n    end\n    return result\nend",
  "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "  local min = math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ (number - min) / (max - min))\n  end\n  return result\nend", "    local min,\
    \ max = math.min(unpack(numbers)), math.max(unpack(numbers))\n    local range\
    \ = max - min\n    for i, v in ipairs(numbers) do\n        numbers[i] = (v - min)\
    \ / range\n    end\n    return numbers\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for i = 2, #numbers do\n       \
    \ if numbers[i] < min then\n            min = numbers[i]\n        elseif numbers[i]\
    \ > max then\n            max = numbers[i]\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max\
    \ - min)\n    end\n    return result\nend", "    local min = numbers[1]\n    local\
    \ max = numbers[1]\n    for _, number in ipairs(numbers) do\n        if number\
    \ < min then\n            min = number\n        end\n        if number > max then\n\
    \            max = number\n        end\n    end\n    local result = {}\n    for\
    \ _, number in ipairs(numbers) do\n        table.insert(result, (number - min)\
    \ / (max - min))\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for i, v in ipairs(numbers) do\n        result[i] = (v - min)\
    \ / range\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local scale = max - min\n    local result = {}\n    for i, v in ipairs(numbers)\
    \ do\n        result[i] = (v - min) / scale\n    end\n    return result\nend",
  "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local rescaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled, (number - min) / range)\n    end\n    return\
    \ rescaled\nend", "    local min = math.min(unpack(numbers))\n    local max =\
    \ math.max(unpack(numbers))\n    local range = max - min\n    local rescaled =\
    \ {}\n    for i, number in ipairs(numbers) do\n        rescaled[i] = (number -\
    \ min) / range\n    end\n    return rescaled\nend", "    local min, max = math.min(unpack(numbers)),\
    \ math.max(unpack(numbers))\n    local scale = max - min\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) /\
    \ scale)\n    end\n    return result\nend", "  local min, max = numbers[1], numbers[1]\n\
    \  for _, n in ipairs(numbers) do\n    if n < min then min = n end\n    if n >\
    \ max then max = n end\n  end\n  local scale = 1 / (max - min)\n  local result\
    \ = {}\n  for _, n in ipairs(numbers) do\n    table.insert(result, (n - min) *\
    \ scale)\n  end\n  return result\nend", "\tlocal min = math.min(unpack(numbers))\n\
    \tlocal max = math.max(unpack(numbers))\n\tlocal range = max - min\n\tlocal result\
    \ = {}\n\tfor _, number in ipairs(numbers) do\n\t\ttable.insert(result, (number\
    \ - min) / range)\n\tend\n\treturn result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for i,\
    \ n in ipairs(numbers) do\n        result[i] = (n - min) / (max - min)\n    end\n\
    \    return result\nend", "    local min = math.min(unpack(numbers))\n    local\
    \ max = math.max(unpack(numbers))\n    local result = {}\n    for _, number in\
    \ ipairs(numbers) do\n        table.insert(result, (number - min) / (max - min))\n\
    \    end\n    return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] < min then\n\
    \            min = numbers[i]\n        elseif numbers[i] > max then\n        \
    \    max = numbers[i]\n        end\n    end\n    local result = {}\n    for i\
    \ = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n   \
    \ end\n    return result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n\
    \    for i = 2, #numbers do\n        if numbers[i] < min then\n            min\
    \ = numbers[i]\n        elseif numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n    end\n    local result = {}\n    for i = 1, #numbers do\n   \
    \     result[i] = (numbers[i] - min) / (max - min)\n    end\n    return result\n\
    end", "  local min = math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ (number - min) / (max - min))\n  end\n  return result\nend", "  local min =\
    \ math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ (number - min) / (max - min))\n  end\n  return result\nend", "    local min\
    \ = numbers[1]\n    local max = numbers[1]\n    for i = 2, #numbers do\n     \
    \   if numbers[i] < min then\n            min = numbers[i]\n        elseif numbers[i]\
    \ > max then\n            max = numbers[i]\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max\
    \ - min)\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(result, (number - min) /\
    \ (max - min))\n    end\n    return result\nend", "  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < min then\n\
    \      min = numbers[i]\n    elseif numbers[i] > max then\n      max = numbers[i]\n\
    \    end\n  end\n  local range = max - min\n  local result = {}\n  for i = 1,\
    \ #numbers do\n    result[i] = (numbers[i] - min) / range\n  end\n  return result\n\
    end", "    local min_number = math.min(unpack(numbers))\n    local max_number\
    \ = math.max(unpack(numbers))\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min_number) / (max_number - min_number))\n\
    \    end\n    return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] < min then\n\
    \            min = numbers[i]\n        elseif numbers[i] > max then\n        \
    \    max = numbers[i]\n        end\n    end\n    local scale = 1 / (max - min)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[i] = (numbers[i]\
    \ - min) * scale\n    end\n    return result\nend", "\tlocal min = numbers[1]\n\
    \tlocal max = numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\tif n < min then\n\
    \t\t\tmin = n\n\t\tend\n\t\tif n > max then\n\t\t\tmax = n\n\t\tend\n\tend\n\t\
    local scale = 1 / (max - min)\n\tlocal result = {}\n\tfor _, n in ipairs(numbers)\
    \ do\n\t\ttable.insert(result, (n - min) * scale)\n\tend\n\treturn result\nend",
  "    local min, max = math.min(unpack(numbers)), math.max(unpack(numbers))\n   \
    \ local scale = max - min\n    local result = {}\n    for i, v in ipairs(numbers)\
    \ do\n        result[i] = (v - min) / scale\n    end\n    return result\nend",
  "    local min = numbers[1]\n    local max = numbers[1]\n    for i = 2, #numbers\
    \ do\n        if numbers[i] < min then\n            min = numbers[i]\n       \
    \ elseif numbers[i] > max then\n            max = numbers[i]\n        end\n  \
    \  end\n    local result = {}\n    for i = 1, #numbers do\n        result[i] =\
    \ (numbers[i] - min) / (max - min)\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for i = 2, #numbers do\n \
    \       if numbers[i] < min then\n            min = numbers[i]\n        elseif\
    \ numbers[i] > max then\n            max = numbers[i]\n        end\n    end\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[i] = (numbers[i]\
    \ - min) / (max - min)\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < min then\n            min = numbers[i]\n        elseif numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for i,\
    \ number in ipairs(numbers) do\n        result[i] = (number - min) / (max - min)\n\
    \    end\n    return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min then\n\
    \            min = n\n        end\n        if n > max then\n            max =\
    \ n\n        end\n    end\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(result, (n - min) / (max - min))\n    end\n    return\
    \ result\nend", "    local min, max = math.min(unpack(numbers)), math.max(unpack(numbers))\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        result[i]\
    \ = (v - min) / (max - min)\n    end\n    return result\nend", "  local min =\
    \ math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ (number - min) / (max - min))\n  end\n  return result\nend", "    local min\
    \ = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n   \
    \ local scale = max - min\n    local scaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(scaled, (number - min) / scale)\n    end\n    return\
    \ scaled\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if n < min then\n            min = n\n        end\n        if n\
    \ > max then\n            max = n\n        end\n    end\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for _,\
    \ n in ipairs(numbers) do\n        table.insert(result, (n - min) / (max - min))\n\
    \    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(result, (number - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < min then\n            min = numbers[i]\n        elseif numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(result, (number - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < min then\n            min = numbers[i]\n        elseif numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ scale = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / scale)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local rescaled = {}\n    for i, n in ipairs(numbers)\
    \ do\n        rescaled[i] = (n - min) / range\n    end\n    return rescaled\n\
    end", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local span = max - min\n    local rescaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled, (number - min) / span)\n    end\n    return\
    \ rescaled\nend", "    local min = math.min(unpack(numbers))\n    local max =\
    \ math.max(unpack(numbers))\n    local scale = max - min\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        table.insert(result, (number\
    \ - min) / scale)\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ rescaled = {}\n    for _, number in ipairs(numbers) do\n        table.insert(rescaled,\
    \ (number - min) / range)\n    end\n    return rescaled\nend", "    local min\
    \ = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "\tlocal min\
    \ = numbers[1]\n\tlocal max = numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\
    \tif n < min then\n\t\t\tmin = n\n\t\tend\n\t\tif n > max then\n\t\t\tmax = n\n\
    \t\tend\n\tend\n\tlocal range = max - min\n\tlocal result = {}\n\tfor _, n in\
    \ ipairs(numbers) do\n\t\tresult[#result + 1] = (n - min) / range\n\tend\n\treturn\
    \ result\nend", "    local min_number = math.min(unpack(numbers))\n    local max_number\
    \ = math.max(unpack(numbers))\n    local range = max_number - min_number\n   \
    \ local rescaled = {}\n    for _, number in ipairs(numbers) do\n        table.insert(rescaled,\
    \ (number - min_number) / range)\n    end\n    return rescaled\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for i, v in ipairs(numbers)\
    \ do\n        result[i] = (v - min) / range\n    end\n    return result\nend",
  "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local scale = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / scale)\n    end\n    return\
    \ result\nend", "  local min = math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n\
    \  local result = {}\n  for i, v in ipairs(numbers) do\n    result[i] = (v - min)\
    \ / (max - min)\n  end\n  return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(result, (number - min) /\
    \ (max - min))\n    end\n    return result\nend", "\tlocal min = numbers[1]\n\t\
    local max = numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\tif n < min then\n\
    \t\t\tmin = n\n\t\tend\n\t\tif n > max then\n\t\t\tmax = n\n\t\tend\n\tend\n\t\
    local range = max - min\n\tlocal result = {}\n\tfor _, n in ipairs(numbers) do\n\
    \t\tresult[#result + 1] = (n - min) / range\n\tend\n\treturn result\nend", " \
    \   local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local scale = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / scale)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, number in ipairs(numbers) do\n        if number < min then\n            min\
    \ = number\n        end\n        if number > max then\n            max = number\n\
    \        end\n    end\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / (max - min))\n    end\n  \
    \  return result\nend", "  local min = numbers[1]\n  local max = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] < min then\n      min = numbers[i]\n\
    \    elseif numbers[i] > max then\n      max = numbers[i]\n    end\n  end\n  local\
    \ range = max - min\n  for i = 1, #numbers do\n    numbers[i] = (numbers[i] -\
    \ min) / range\n  end\nend", "    local min = math.min(unpack(numbers))\n    local\
    \ max = math.max(unpack(numbers))\n    local range = max - min\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "\tlocal min_number\
    \ = math.min(unpack(numbers))\n\tlocal max_number = math.max(unpack(numbers))\n\
    \tlocal range = max_number - min_number\n\tlocal rescaled = {}\n\tfor _, number\
    \ in ipairs(numbers) do\n\t\ttable.insert(rescaled, (number - min_number) / range)\n\
    \tend\n\treturn rescaled\nend", "    local min = numbers[1]\n    local max = numbers[1]\n\
    \    for i = 2, #numbers do\n        if numbers[i] < min then\n            min\
    \ = numbers[i]\n        elseif numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n    end\n    local result = {}\n    for i = 1, #numbers do\n   \
    \     result[i] = (numbers[i] - min) / (max - min)\n    end\n    return result\n\
    end", "  local min = math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n\
    \  return map(numbers, function(x) return (x - min) / (max - min) end)\nend",
  "    local min = numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if n < min then\n            min = n\n        end\n        if n\
    \ > max then\n            max = n\n        end\n    end\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local result = {}\n    for _, n in\
    \ ipairs(numbers) do\n        table.insert(result, (n - min) / (max - min))\n\
    \    end\n    return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min then\n\
    \            min = n\n        end\n        if n > max then\n            max =\
    \ n\n        end\n    end\n    local scale = max - min\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) /\
    \ scale)\n    end\n    return result\nend", "    local min, max = math.min(unpack(numbers)),\
    \ math.max(unpack(numbers))\n    local range = max - min\n    local rescaled =\
    \ {}\n    for _, n in ipairs(numbers) do\n        table.insert(rescaled, (n -\
    \ min) / range)\n    end\n    return rescaled\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local diff = max - min\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / diff)\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, number in ipairs(numbers) do\n       \
    \ if number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local rescaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled, (number - min) / range)\n    end\n    return\
    \ rescaled\nend", "  local min_number = math.min(unpack(numbers))\n  local max_number\
    \ = math.max(unpack(numbers))\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(result, (number - min_number) / (max_number - min_number))\n\
    \  end\n  return result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n\
    \    for _, n in ipairs(numbers) do\n        if n < min then\n            min\
    \ = n\n        end\n        if n > max then\n            max = n\n        end\n\
    \    end\n    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ range = max - min\n    local rescaled = {}\n    for i, n in ipairs(numbers)\
    \ do\n        rescaled[i] = (n - min) / range\n    end\n    return rescaled\n\
    end", "    local min = numbers[1]\n    local max = numbers[1]\n    for _, n in\
    \ ipairs(numbers) do\n        if n < min then\n            min = n\n        end\n\
    \        if n > max then\n            max = n\n        end\n    end\n    local\
    \ range = max - min\n    local result = {}\n    for _, n in ipairs(numbers) do\n\
    \        table.insert(result, (n - min) / range)\n    end\n    return result\n\
    end", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local scale = max - min\n    local result = {}\n    for i, v in ipairs(numbers)\
    \ do\n        result[i] = (v - min) / scale\n    end\n    return result\nend",
  "  local min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] < min then\n      min = numbers[i]\n    elseif numbers[i] >\
    \ max then\n      max = numbers[i]\n    end\n  end\n  local range = max - min\n\
    \  for i = 1, #numbers do\n    numbers[i] = (numbers[i] - min) / range\n  end\n\
    end", "    local min = numbers[1]\n    local max = numbers[1]\n    for _, n in\
    \ ipairs(numbers) do\n        if n < min then\n            min = n\n        end\n\
    \        if n > max then\n            max = n\n        end\n    end\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n\
    \        if n < min then\n            min = n\n        end\n        if n > max\
    \ then\n            max = n\n        end\n    end\n    local result = {}\n   \
    \ for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) / (max\
    \ - min))\n    end\n    return result\nend", "    local min = numbers[1]\n   \
    \ local max = numbers[1]\n    for _, number in ipairs(numbers) do\n        if\
    \ number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "  local min\
    \ = numbers[1]\n  local max = numbers[1]\n  for _, number in ipairs(numbers) do\n\
    \    if number < min then\n      min = number\n    elseif number > max then\n\
    \      max = number\n    end\n  end\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(result, (number - min) / (max - min))\n  end\n  return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, n in ipairs(numbers) do\n        if n < min then\n            min = n\n \
    \       end\n        if n > max then\n            max = n\n        end\n    end\n\
    \    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min,\
    \ max = numbers[1], numbers[1]\n    for _, n in ipairs(numbers) do\n        if\
    \ n < min then min = n end\n        if n > max then max = n end\n    end\n   \
    \ local range = max - min\n    for i, n in ipairs(numbers) do\n        numbers[i]\
    \ = (n - min) / range\n    end\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ rescaled = {}\n    for i, v in ipairs(numbers) do\n        rescaled[i] = (v\
    \ - min) / range\n    end\n    return rescaled\nend", "  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < min then\n\
    \      min = numbers[i]\n    elseif numbers[i] > max then\n      max = numbers[i]\n\
    \    end\n  end\n  local range = max - min\n  for i = 1, #numbers do\n    numbers[i]\
    \ = (numbers[i] - min) / range\n  end\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ range = max - min\n    local result = {}\n    for i, v in ipairs(numbers) do\n\
    \        result[i] = (v - min) / range\n    end\n    return result\nend", "  local\
    \ min, max = numbers[1], numbers[1]\n  for _, n in ipairs(numbers) do\n    if\
    \ n < min then min = n end\n    if n > max then max = n end\n  end\n  local scale\
    \ = 1 / (max - min)\n  local result = {}\n  for _, n in ipairs(numbers) do\n \
    \   table.insert(result, (n - min) * scale)\n  end\n  return result\nend", " \
    \   local min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for i = 2, #numbers do\n \
    \       if numbers[i] < min then\n            min = numbers[i]\n        elseif\
    \ numbers[i] > max then\n            max = numbers[i]\n        end\n    end\n\
    \    local scale = 1 / (max - min)\n    local result = {}\n    for i = 1, #numbers\
    \ do\n        result[i] = (numbers[i] - min) * scale\n    end\n    return result\n\
    end", "    local min_number = math.min(unpack(numbers))\n    local max_number\
    \ = math.max(unpack(numbers))\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min_number) / (max_number - min_number))\n\
    \    end\n    return result\nend", "\tlocal min = numbers[1]\n\tlocal max = numbers[1]\n\
    \tfor i = 2, #numbers do\n\t\tif numbers[i] < min then\n\t\t\tmin = numbers[i]\n\
    \t\telseif numbers[i] > max then\n\t\t\tmax = numbers[i]\n\t\tend\n\tend\n\tlocal\
    \ range = max - min\n\tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tresult[i]\
    \ = (numbers[i] - min) / range\n\tend\n\treturn result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "  local min\
    \ = numbers[1]\n  local max = numbers[1]\n  for _, number in ipairs(numbers) do\n\
    \    if number < min then\n      min = number\n    elseif number > max then\n\
    \      max = number\n    end\n  end\n  local scale = 1 / (max - min)\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ (number - min) * scale)\n  end\n  return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, number in ipairs(numbers) do\n       \
    \ if number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local rescaled = {}\n    for i, v in ipairs(numbers)\
    \ do\n        rescaled[i] = (v - min) / range\n    end\n    return rescaled\n\
    end", "    local min = numbers[1]\n    local max = numbers[1]\n    for _, n in\
    \ ipairs(numbers) do\n        if n < min then\n            min = n\n        end\n\
    \        if n > max then\n            max = n\n        end\n    end\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min_number\
    \ = math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min_number) / (max_number - min_number))\n    end\n    return result\n\
    end", "    local min, max = numbers[1], numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if n < min then min = n end\n        if n > max then max = n end\n\
    \    end\n    local range = max - min\n    local result = {}\n    for _, n in\
    \ ipairs(numbers) do\n        table.insert(result, (n - min) / range)\n    end\n\
    \    return result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n\
    \    for _, n in ipairs(numbers) do\n        if n < min then\n            min\
    \ = n\n        end\n        if n > max then\n            max = n\n        end\n\
    \    end\n    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ range = max - min\n    local rescaled = {}\n    for i, number in ipairs(numbers)\
    \ do\n        rescaled[i] = (number - min) / range\n    end\n    return rescaled\n\
    end", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local rescaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled, (number - min) / range)\n    end\n    return\
    \ rescaled\nend", "    local min = numbers[1]\n    local max = numbers[1]\n  \
    \  for _, n in ipairs(numbers) do\n        if n < min then\n            min =\
    \ n\n        end\n        if n > max then\n            max = n\n        end\n\
    \    end\n    local result = {}\n    for _, n in ipairs(numbers) do\n        result[#result\
    \ + 1] = (n - min) / (max - min)\n    end\n    return result\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        result[#result + 1] = (number - min) / range\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local scale = max - min\n    local result = {}\n    for i, v in ipairs(numbers)\
    \ do\n        result[i] = (v - min) / scale\n    end\n    return result\nend",
  "    local min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if n < min then\n            min = n\n        end\n        if n\
    \ > max then\n            max = n\n        end\n    end\n    local diff = max\
    \ - min\n    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / diff)\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, number in ipairs(numbers) do\n       \
    \ if number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if n < min then\n            min = n\n        end\n        if n\
    \ > max then\n            max = n\n        end\n    end\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < min then\n            min = numbers[i]\n        elseif numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    end\n    return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min then\n\
    \            min = n\n        end\n        if n > max then\n            max =\
    \ n\n        end\n    end\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(result, (n - min) / (max - min))\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ i = 2, #numbers do\n        if numbers[i] < min then\n            min = numbers[i]\n\
    \        elseif numbers[i] > max then\n            max = numbers[i]\n        end\n\
    \    end\n    local range = max - min\n    local result = {}\n    for i = 1, #numbers\
    \ do\n        result[i] = (numbers[i] - min) / range\n    end\n    return result\n\
    end", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local scale = max - min\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(result, (n - min) / scale)\n    end\n    return result\n\
    end", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local scale = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / scale)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local rescaled = {}\n    for i, v in ipairs(numbers)\
    \ do\n        rescaled[i] = (v - min) / range\n    end\n    return rescaled\n\
    end", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local rescaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        local rescaled_number = (number - min) / range\n        table.insert(rescaled,\
    \ rescaled_number)\n    end\n    return rescaled\nend", "    local min_number\
    \ = math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local range = max_number - min_number\n    local rescaled = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(rescaled, (number - min_number)\
    \ / range)\n    end\n    return rescaled\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local result = {}\n    for _, n in\
    \ ipairs(numbers) do\n        table.insert(result, (n - min) / (max - min))\n\
    \    end\n    return result\nend", "    local min, max = numbers[1], numbers[1]\n\
    \    for _, n in ipairs(numbers) do\n        if n < min then min = n end\n   \
    \     if n > max then max = n end\n    end\n    local result = {}\n    for _,\
    \ n in ipairs(numbers) do\n        table.insert(result, (n - min) / (max - min))\n\
    \    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ rescaled = {}\n    for _, number in ipairs(numbers) do\n        table.insert(rescaled,\
    \ (number - min) / range)\n    end\n    return rescaled\nend", "    local min,\
    \ max = math.min(unpack(numbers)), math.max(unpack(numbers))\n    local scale\
    \ = max - min\n    local result = {}\n    for i, v in ipairs(numbers) do\n   \
    \     result[i] = (v - min) / scale\n    end\n    return result\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min, max = math.min(unpack(numbers)), math.max(unpack(numbers))\n    local rescaled\
    \ = {}\n    for i, v in ipairs(numbers) do\n        rescaled[i] = (v - min) /\
    \ (max - min)\n    end\n    return rescaled\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < min then\n            min = numbers[i]\n        elseif numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    end\n    return result\nend", "    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for _, number in ipairs(numbers) do\n        if number < min\
    \ then\n            min = number\n        end\n        if number > max then\n\
    \            max = number\n        end\n    end\n    local result = {}\n    for\
    \ _, number in ipairs(numbers) do\n        table.insert(result, (number - min)\
    \ / (max - min))\n    end\n    return result\nend", "    local min, max = numbers[1],\
    \ numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min then min\
    \ = n end\n        if n > max then max = n end\n    end\n    local range = max\
    \ - min\n    for i, n in ipairs(numbers) do\n        numbers[i] = (n - min) /\
    \ range\n    end\nend", "    local min, max = numbers[1], numbers[1]\n    for\
    \ _, n in ipairs(numbers) do\n        if n < min then min = n end\n        if\
    \ n > max then max = n end\n    end\n    local range = max - min\n    local result\
    \ = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result, (n -\
    \ min) / range)\n    end\n    return result\nend", "  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local range = max - min\n  local rescaled\
    \ = {}\n  for i, number in ipairs(numbers) do\n    rescaled[i] = (number - min)\
    \ / range\n  end\n  return rescaled\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, v in ipairs(numbers) do\n        table.insert(result,\
    \ (v - min) / range)\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for i, v in ipairs(numbers) do\n        result[i] = (v - min)\
    \ / range\n    end\n    return result\nend", "    local min = numbers[1]\n   \
    \ local max = numbers[1]\n    for _, number in ipairs(numbers) do\n        if\
    \ number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local rescaled = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(rescaled, (number - min) / range)\n    end\n    return\
    \ rescaled\nend", "    local min = math.min(unpack(numbers))\n    local max =\
    \ math.max(unpack(numbers))\n    local range = max - min\n    local result = {}\n\
    \    for i, v in ipairs(numbers) do\n        result[i] = (v - min) / range\n \
    \   end\n    return result\nend", "    local min = numbers[1]\n    local max =\
    \ numbers[1]\n    for _, number in ipairs(numbers) do\n        if number < min\
    \ then\n            min = number\n        end\n        if number > max then\n\
    \            max = number\n        end\n    end\n    local result = {}\n    for\
    \ _, number in ipairs(numbers) do\n        table.insert(result, (number - min)\
    \ / (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local range = max - min\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / range)\n    end\n    return result\nend", "    local min_number\
    \ = math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local range = max_number - min_number\n    local rescaled = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(rescaled, (number - min_number)\
    \ / range)\n    end\n    return rescaled\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(result, (number - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local result = {}\n    for _, n in\
    \ ipairs(numbers) do\n        table.insert(result, (n - min) / (max - min))\n\
    \    end\n    return result\nend", "\tlocal min = numbers[1]\n\tlocal max = numbers[1]\n\
    \tfor _, number in ipairs(numbers) do\n\t\tif number < min then\n\t\t\tmin = number\n\
    \t\tend\n\t\tif number > max then\n\t\t\tmax = number\n\t\tend\n\tend\n\tlocal\
    \ result = {}\n\tfor _, number in ipairs(numbers) do\n\t\ttable.insert(result,\
    \ (number - min) / (max - min))\n\tend\n\treturn result\nend", "    local min\
    \ = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if n < min then\n            min = n\n        end\n        if n\
    \ > max then\n            max = n\n        end\n    end\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local scale = 1 / (max - min)\n  \
    \  local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) * scale)\n    end\n    return result\nend", "    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, number in ipairs(numbers) do\n       \
    \ if number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if n < min then\n            min = n\n        end\n        if n\
    \ > max then\n            max = n\n        end\n    end\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        table.insert(result, (n - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(result, (number - min) /\
    \ (max - min))\n    end\n    return result\nend", "    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local range = max - min\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / range)\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        table.insert(result,\
    \ (number - min) / (max - min))\n    end\n    return result\nend", "    local\
    \ min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        result[i]\
    \ = (number - min) / (max - min)\n    end\n    return result\nend", "    local\
    \ min = numbers[1]\n    local max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number < min then\n            min = number\n        end\n  \
    \      if number > max then\n            max = number\n        end\n    end\n\
    \    local scale = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / scale)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ i = 2, #numbers do\n        if numbers[i] < min then\n            min = numbers[i]\n\
    \        elseif numbers[i] > max then\n            max = numbers[i]\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #numbers do\n        result[i]\
    \ = (numbers[i] - min) / (max - min)\n    end\n    return result\nend", "  local\
    \ min = math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n \
    \ local result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ (number - min) / (max - min))\n  end\n  return result\nend", "    local min\
    \ = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n   \
    \ local scale = max - min\n    local result = {}\n    for i, v in ipairs(numbers)\
    \ do\n        result[i] = (v - min) / scale\n    end\n    return result\nend",
  "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, num in ipairs(numbers)\
    \ do\n        table.insert(result, (num - min) / range)\n    end\n    return result\n\
    end", "    local min = math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n\
    \    local range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, n in ipairs(numbers) do\n        if n < min then\n            min = n\n \
    \       end\n        if n > max then\n            max = n\n        end\n    end\n\
    \    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ math.min(unpack(numbers))\n    local max = math.max(unpack(numbers))\n    local\
    \ range = max - min\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(result, (number - min) / range)\n    end\n    return\
    \ result\nend", "    local min = numbers[1]\n    local max = numbers[1]\n    for\
    \ _, n in ipairs(numbers) do\n        if n < min then\n            min = n\n \
    \       end\n        if n > max then\n            max = n\n        end\n    end\n\
    \    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / (max - min))\n    end\n    return result\nend", "    local min =\
    \ numbers[1]\n    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n\
    \        if n < min then\n            min = n\n        end\n        if n > max\
    \ then\n            max = n\n        end\n    end\n    local range = max - min\n\
    \    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / range)\n    end\n    return result\nend", "  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local range = max - min\n  local rescaled\
    \ = {}\n  for _, number in ipairs(numbers) do\n    table.insert(rescaled, (number\
    \ - min) / range)\n  end\n  return rescaled\nend", "    local min_number = math.min(unpack(numbers))\n\
    \    local max_number = math.max(unpack(numbers))\n    local result = {}\n   \
    \ for _, number in ipairs(numbers) do\n        table.insert(result, (number -\
    \ min_number) / (max_number - min_number))\n    end\n    return result\nend",
  "  local min = math.min(unpack(numbers))\n  local max = math.max(unpack(numbers))\n\
    \  local result = {}\n  for i, v in ipairs(numbers) do\n    result[i] = (v - min)\
    \ / (max - min)\n  end\n  return result\nend", "\tlocal min, max = math.min(unpack(numbers)),\
    \ math.max(unpack(numbers))\n\tlocal range = max - min\n\tlocal result = {}\n\t\
    for i, v in ipairs(numbers) do\n\t\tresult[i] = (v - min) / range\n\tend\n\treturn\
    \ result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
