language: lua
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local min_removed = false\n\
    \    local max_removed = false\n    for i = 1, #lst do\n        if i % 2 == 1\
    \ then\n            if not min_removed then\n                table.insert(res,\
    \ min)\n                min_removed = true\n            else\n               \
    \ table.insert(res, max)\n                max_removed = true\n            end\n\
    \        else\n            if not max_removed then\n                table.insert(res,\
    \ max)\n                max_removed = true\n            else\n               \
    \ table.insert(res, min)\n                min_removed = true\n            end\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbay_7si4.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpbay_7si4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbay_7si4.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function strange_sort(lst, res)\n        if #lst == 0 then\n      \
    \      return res\n        end\n        local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        table.insert(res, min)\n        table.insert(res,\
    \ max)\n        table.remove(lst, table.index_of(lst, min))\n        table.remove(lst,\
    \ table.index_of(lst, max))\n        return strange_sort(lst, res)\n    end\n\
    \    return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp11hq5s85.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp11hq5s85.lua:10:\
    \ in function </tmp/tmp11hq5s85.lua:6>\n\t(...tail calls...)\n\t/tmp/tmp11hq5s85.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function min_max(lst)\n        local min, max = math.huge, -math.huge\n\
    \        for i = 1, #lst do\n            if lst[i] < min then\n              \
    \  min = lst[i]\n            end\n            if lst[i] > max then\n         \
    \       max = lst[i]\n            end\n        end\n        return min, max\n\
    \    end\n    local function remove_min_max(lst, min, max)\n        local new_lst\
    \ = {}\n        for i = 1, #lst do\n            if lst[i] ~= min and lst[i] ~=\
    \ max then\n                table.insert(new_lst, lst[i])\n            end\n \
    \       end\n        return new_lst\n    end\n    local function strange_sort(lst)\n\
    \        local new_lst = {}\n        while #lst > 0 do\n            local min,\
    \ max = min_max(lst)\n            table.insert(new_lst, min)\n            table.insert(new_lst,\
    \ max)\n            lst = remove_min_max(lst, min, max)\n        end\n       \
    \ return new_lst\n    end\n    return strange_sort(lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuf29xkj1.lua:44:\
    \ expected: {5, 9, 6, 8, 7}\nactual: {5, 9, 6, 8, 7, 7}\nstack traceback:\n\t\
    /tmp/tmpuf29xkj1.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function min_max(lst)\n        local min, max = math.min(table.unpack(lst)),\
    \ math.max(table.unpack(lst))\n        return min, max\n    end\n    local function\
    \ remove_min_max(lst, min, max)\n        local new_lst = {}\n        for i = 1,\
    \ #lst do\n            if lst[i] ~= min and lst[i] ~= max then\n             \
    \   table.insert(new_lst, lst[i])\n            end\n        end\n        return\
    \ new_lst\n    end\n    local function strange_sort(lst)\n        local new_lst\
    \ = {}\n        while #lst > 0 do\n            local min, max = min_max(lst)\n\
    \            table.insert(new_lst, min)\n            table.insert(new_lst, max)\n\
    \            lst = remove_min_max(lst, min, max)\n        end\n        return\
    \ new_lst\n    end\n    return strange_sort(lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xzndj8_.lua:36:\
    \ expected: {5, 9, 6, 8, 7}\nactual: {5, 9, 6, 8, 7, 7}\nstack traceback:\n\t\
    /tmp/tmp0xzndj8_.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while min <= max do\n        res[i]\
    \ = min\n        i = i + 1\n        res[i] = max\n        i = i + 1\n        min\
    \ = min + 1\n        max = max - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpldv4kbmc.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpldv4kbmc.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpldv4kbmc.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function strange_sort(lst,\
    \ res)\n        if #lst == 0 then return res end\n        local m = min(unpack(lst))\n\
    \        local M = max(unpack(lst))\n        local lst1 = {}\n        for i, v\
    \ in ipairs(lst) do\n            if v ~= m and v ~= M then\n                lst1[#lst1\
    \ + 1] = v\n            end\n        end\n        return strange_sort(lst1, {m,\
    \ M, unpack(res)})\n    end\n    return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6v7kcigj.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp6v7kcigj.lua:9:\
    \ in function </tmp/tmp6v7kcigj.lua:7>\n\t(...tail calls...)\n\t/tmp/tmp6v7kcigj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function find_min_max(lst)\n\
    \        local min, max = lst[1], lst[1]\n        for i = 2, #lst do\n       \
    \     if lst[i] < min then\n                min = lst[i]\n            elseif lst[i]\
    \ > max then\n                max = lst[i]\n            end\n        end\n   \
    \     return min, max\n    end\n    local function remove_min_max(lst, min, max)\n\
    \        local new_lst = {}\n        for i = 1, #lst do\n            if lst[i]\
    \ ~= min and lst[i] ~= max then\n                new_lst[#new_lst + 1] = lst[i]\n\
    \            end\n        end\n        return new_lst\n    end\n    local function\
    \ strange_sort(lst)\n        if #lst == 0 then\n            return {}\n      \
    \  end\n        local min, max = find_min_max(lst)\n        local new_lst = {min,\
    \ max}\n        local remaining = remove_min_max(lst, min, max)\n        return\
    \ new_lst .. strange_sort(remaining)\n    end\n    return strange_sort(lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz_sd6cmm.lua:34:\
    \ attempt to concatenate a table value (local 'new_lst')\nstack traceback:\n\t\
    /tmp/tmpz_sd6cmm.lua:34: in upvalue 'strange_sort'\n\t/tmp/tmpz_sd6cmm.lua:34:\
    \ in function </tmp/tmpz_sd6cmm.lua:27>\n\t(...tail calls...)\n\t/tmp/tmpz_sd6cmm.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        res[i] =\
    \ min\n        res[#lst - i + 1] = max\n        i = i + 1\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphzk6aivc.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphzk6aivc.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmphzk6aivc.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 0, 0\n    local min_found, max_found = false, false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        min_idx = lst:find(min)\n            min_found = true\n            table.insert(res,\
    \ min)\n            lst[min_idx] = nil\n        elseif not max_found then\n  \
    \          max_idx = lst:find(max)\n            max_found = true\n           \
    \ table.insert(res, max)\n            lst[max_idx] = nil\n        end\n      \
    \  if min_found and max_found then\n            min_found, max_found = false,\
    \ false\n            min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \            i = i + 1\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82d60cu_.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp82d60cu_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp82d60cu_.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local asc = true\n    local i = 1\n    while #lst > 0\
    \ do\n        local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \        if asc then\n            res[i] = min\n            table.remove(lst,\
    \ table.index_of(lst, min))\n        else\n            res[i] = max\n        \
    \    table.remove(lst, table.index_of(lst, max))\n        end\n        asc = not\
    \ asc\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbfaazwez.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpbfaazwez.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpbfaazwez.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local asc = true\n  while #lst > 0 do\n    if asc then\n      res[#res + 1]\
    \ = min\n      lst[min] = nil\n      min = math.min(unpack(lst))\n    else\n \
    \     res[#res + 1] = max\n      lst[max] = nil\n      max = math.max(unpack(lst))\n\
    \    end\n    asc = not asc\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm0uy8d90.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpm0uy8d90.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpm0uy8d90.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = 0\n    local max_index = 0\n  \
    \  for i, v in ipairs(lst) do\n        if v == min then\n            min_index\
    \ = i\n        elseif v == max then\n            max_index = i\n        end\n\
    \    end\n    local min_max = min_index > max_index\n    local i = 1\n    while\
    \ #lst > 0 do\n        if min_max then\n            table.insert(result, lst[max_index])\n\
    \            table.remove(lst, max_index)\n            min_max = false\n     \
    \   else\n            table.insert(result, lst[min_index])\n            table.remove(lst,\
    \ min_index)\n            min_max = true\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2nh3nv_n.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp2nh3nv_n.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2nh3nv_n.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min = math.min\n  local max = math.max\n  local function _strange_sort_list(lst,\
    \ acc)\n    if #lst == 0 then return acc end\n    local min_val, min_idx = min(lst)\n\
    \    local max_val, max_idx = max(lst)\n    if min_idx < max_idx then\n      table.remove(lst,\
    \ max_idx)\n      table.remove(lst, min_idx)\n    else\n      table.remove(lst,\
    \ min_idx)\n      table.remove(lst, max_idx)\n    end\n    table.insert(acc, min_val)\n\
    \    table.insert(acc, max_val)\n    return _strange_sort_list(lst, acc)\n  end\n\
    \  return _strange_sort_list(lst, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ex8mbs0.lua:12:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp4ex8mbs0.lua:12:\
    \ in function </tmp/tmp4ex8mbs0.lua:8>\n\t(...tail calls...)\n\t/tmp/tmp4ex8mbs0.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function strange_sort(lst, res)\n        if #lst == 0 then\n      \
    \      return res\n        end\n        local min = math.min(unpack(lst))\n  \
    \      local max = math.max(unpack(lst))\n        local min_idx = nil\n      \
    \  local max_idx = nil\n        for i, v in ipairs(lst) do\n            if v ==\
    \ min then\n                min_idx = i\n            elseif v == max then\n  \
    \              max_idx = i\n            end\n        end\n        table.remove(lst,\
    \ min_idx)\n        table.remove(lst, max_idx - 1)\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n        return strange_sort(lst, res)\n\
    \    end\n    return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaz372m8z.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpaz372m8z.lua:10:\
    \ in function </tmp/tmpaz372m8z.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpaz372m8z.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        if i % 2\
    \ == 1 then\n            res[i] = min\n            min = min + 1\n        else\n\
    \            res[i] = max\n            max = max - 1\n        end\n        i =\
    \ i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf3ut_500.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpf3ut_500.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpf3ut_500.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:indexOf(min), lst:indexOf(max)\n    local min_removed,\
    \ max_removed = lst:remove(min_idx), lst:remove(max_idx)\n    local min_removed_len,\
    \ max_removed_len = #min_removed, #max_removed\n    local min_removed_idx, max_removed_idx\
    \ = 1, 1\n    local min_removed_max_idx, max_removed_max_idx = min_removed_len,\
    \ max_removed_len\n    local min_removed_min, max_removed_min = math.min(unpack(min_removed)),\
    \ math.min(unpack(max_removed))\n    local min_removed_max, max_removed_max =\
    \ math.max(unpack(min_removed)), math.max(unpack(max_removed))\n    local min_removed_min_idx,\
    \ max_removed_min_idx = min_removed:indexOf(min_removed_min), max_removed:indexOf(max_removed_min)\n\
    \    local min_removed_max_idx, max_removed_max_idx = min_removed:indexOf(min_removed_max),\
    \ max_removed:indexOf(max_removed_max)\n    local min_removed_min_removed, max_removed_min_removed\
    \ = min_removed:remove(min_removed_min_idx), max_removed:remove(max_removed_min_idx)\n\
    \    local min_removed_max_removed, max_removed_max_removed = min_removed:remove(min_removed_max_idx),\
    \ max_removed:remove(max_removed_max_idx)\n    local min_removed_min_removed_len,\
    \ max_removed_min_removed_len = #min\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7p07mf03.lua:35: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014711
- exit_code: -1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function min_max(lst)\n    local\
    \ min_i, max_i = 1, 1\n    for i = 2, #lst do\n      if lst[i] < lst[min_i] then\
    \ min_i = i end\n      if lst[i] > lst[max_i] then max_i = i end\n    end\n  \
    \  return min_i, max_i\n  end\n  local function remove(lst, i)\n    local res\
    \ = {}\n    for j = 1, #lst do\n      if j ~= i then res[#res + 1] = lst[j] end\n\
    \    end\n    return res\n  end\n  local function strange_sort(lst)\n    if #lst\
    \ == 0 then return {} end\n    local min_i, max_i = min_max(lst)\n    local res\
    \ = {lst[min_i]}\n    lst = remove(lst, min_i)\n    if #lst > 0 then\n      res[#res\
    \ + 1] = lst[max_i]\n      lst = remove(lst, max_i)\n    end\n    return res\n\
    \  end\n  local res = {}\n  while #lst > 0 do\n    local sorted = strange_sort(lst)\n\
    \    for i = 1, #sorted do\n      res[#res + 1] = sorted[i]\n    end\n    lst\
    \ = remove(lst, min_i)\n    lst = remove(lst, max_i)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014716
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function strange_sort(lst, res)\n\
    \    if #lst == 0 then return res end\n    local mn, mx = min(unpack(lst)), max(unpack(lst))\n\
    \    local mn_i, mx_i = 0, 0\n    for i = 1, #lst do\n      if lst[i] == mn then\
    \ mn_i = i end\n      if lst[i] == mx then mx_i = i end\n    end\n    table.remove(lst,\
    \ mn_i)\n    table.remove(lst, mx_i - 1)\n    return strange_sort(lst, {mx, mn}\
    \ + res)\n  end\n  return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjz1bz33y.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjz1bz33y.lua:9:\
    \ in function </tmp/tmpjz1bz33y.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpjz1bz33y.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function min_max(lst)\n    local\
    \ min_val, max_val = min(unpack(lst)), max(unpack(lst))\n    local min_idx, max_idx\
    \ = 0, 0\n    for i, v in ipairs(lst) do\n      if v == min_val then min_idx =\
    \ i end\n      if v == max_val then max_idx = i end\n    end\n    return min_val,\
    \ max_val, min_idx, max_idx\n  end\n  local function remove_idx(lst, idx)\n  \
    \  local res = {}\n    for i, v in ipairs(lst) do\n      if i ~= idx then res[#res\
    \ + 1] = v end\n    end\n    return res\n  end\n  local function strange_sort(lst)\n\
    \    if #lst == 0 then return {} end\n    local min_val, max_val, min_idx, max_idx\
    \ = min_max(lst)\n    local res = {min_val, max_val}\n    local lst = remove_idx(remove_idx(lst,\
    \ min_idx), max_idx)\n    return res\n  end\n  local res = {}\n  while #lst >\
    \ 0 do\n    local s = strange_sort(lst)\n    for _, v in ipairs(s) do res[#res\
    \ + 1] = v end\n    lst = remove_idx(lst, min_idx)\n    lst = remove_idx(lst,\
    \ max_idx)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy2d7hhon.lua:8:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpy2d7hhon.lua:8:\
    \ in upvalue 'min_max'\n\t/tmp/tmpy2d7hhon.lua:25: in local 'strange_sort'\n\t\
    /tmp/tmpy2d7hhon.lua:32: in local 'candidate'\n\t/tmp/tmpy2d7hhon.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val = math.min(unpack(lst))\n    local max_val = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        if i % 2\
    \ == 1 then\n            table.insert(res, min_val)\n            min_val = math.min(unpack(lst))\n\
    \        else\n            table.insert(res, max_val)\n            max_val = math.max(unpack(lst))\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5h5e736.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_5h5e736.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp_5h5e736.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst)\n        if #lst == 0 then\n            return\
    \ {}\n        end\n        local min = math.min(unpack(lst))\n        local max\
    \ = math.max(unpack(lst))\n        local min_index = 0\n        local max_index\
    \ = 0\n        for i, v in ipairs(lst) do\n            if v == min then\n    \
    \            min_index = i\n            end\n            if v == max then\n  \
    \              max_index = i\n            end\n        end\n        table.remove(lst,\
    \ min_index)\n        table.remove(lst, max_index - 1)\n        return {min, max}\
    \ .. sort_list(lst)\n    end\n    return sort_list(lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcras3ic.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzcras3ic.lua:10:\
    \ in function </tmp/tmpzcras3ic.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpzcras3ic.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_idx, max_idx = 1, #lst\n    local res = {}\n    while min_idx <=\
    \ max_idx do\n        table.insert(res, lst[min_idx])\n        if min_idx ~= max_idx\
    \ then\n            table.insert(res, lst[max_idx])\n        end\n        min_idx\
    \ = min_idx + 1\n        max_idx = max_idx - 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ohdlodm.lua:25:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmp2ohdlodm.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = 1\n    local max_index = #lst\n\
    \    local min_found = false\n    local max_found = false\n    for i = 1, #lst\
    \ do\n        if lst[i] == min then\n            min_index = i\n            min_found\
    \ = true\n        end\n        if lst[i] == max then\n            max_index =\
    \ i\n            max_found = true\n        end\n        if min_found and max_found\
    \ then\n            break\n        end\n    end\n    local i = 1\n    while i\
    \ <= #lst do\n        if i % 2 == 1 then\n            table.insert(sorted, min)\n\
    \            table.remove(lst, min_index)\n            min = math.min(unpack(lst))\n\
    \            min_index = 1\n            min_found = false\n            for j =\
    \ 1, #lst do\n                if lst[j] == min then\n                    min_index\
    \ = j\n                    min_found = true\n                end\n           \
    \     if min_found then\n                    break\n                end\n    \
    \        end\n        else\n            table.insert(sorted, max)\n          \
    \  table.remove(lst, max_index)\n            max = math.max(unpack(lst))\n   \
    \         max_index = #lst\n            max_found = false\n            for j =\
    \ 1, #lst do\n                if lst[j] == max then\n                    max_index\
    \ = j\n                    max_found = true\n                end\n           \
    \     if max_found then\n                    break\n                end\n    \
    \        end\n        end\n        i = i + 1\n    end\n    return sorted\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvatu_gqe.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvatu_gqe.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvatu_gqe.lua:67: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val = math.min(unpack(lst))\n    local max_val = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while #res < #lst do\n        if i %\
    \ 2 == 1 then\n            table.insert(res, min_val)\n            min_val = min_val\
    \ + 1\n        else\n            table.insert(res, max_val)\n            max_val\
    \ = max_val - 1\n        end\n        i = i + 1\n    end\n    return res\nend\n\
    assert(strange_sort_list({1, 2, 3, 4, 5}) == {1, 5, 2, 4, 3})\nassert(strange_sort_list({1,\
    \ 2, 3, 4, 5, 6}) == {1, 6, 2, 5, 3, 4})\nassert(strange_sort_list({1, 2, 3, 4,\
    \ 5, 6, 7}) == {1, 7, 2, 6, 3, 5, 4})\nassert(strange_sort_list({1, 2, 3, 4, 5,\
    \ 6, 7, 8}) == {1, 8, 2, 7, 3, 6, 4, 5})\nassert(strange_sort_list({1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9}) == {1, 9, 2, 8, 3, 7, 4, 6, 5})\nassert(strange_sort_list({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10}) == {1, 10, 2, 9, 3, 8, 4, 7, 5, 6})\nassert(strange_sort_list({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}) == {1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6})\nassert(strange_sort_list({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}) == {1, 12, 2, 11, 3, 10, 4, 9, 5, 8, 6,\
    \ 7})\nassert(strange_sort_list({1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi9beq4zh.lua:31: ''}'' expected (to close ''{'' at line 30)
    near ''lu''

    '
  stdout: ''
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n    local\
    \ min_removed, max_removed = false, false\n    local i = 1\n    while i <= #lst\
    \ do\n        if not min_removed then\n            res[i] = min\n            min_removed\
    \ = true\n            i = i + 1\n        end\n        if not max_removed then\n\
    \            res[i] = max\n            max_removed = true\n            i = i +\
    \ 1\n        end\n        if min_removed and max_removed then\n            lst[min_idx]\
    \ = nil\n            lst[max_idx] = nil\n            min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n            min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n\
    \            min_removed, max_removed = false, false\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpugeher0s.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpugeher0s.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpugeher0s.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_idx, max_idx = 1, #lst\n    local result = {}\n    while min_idx\
    \ <= max_idx do\n        table.insert(result, lst[min_idx])\n        table.insert(result,\
    \ lst[max_idx])\n        min_idx = min_idx + 1\n        max_idx = max_idx - 1\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm47hk_q.lua:21:\
    \ expected: {5, 9, 6, 8, 7}\nactual: {5, 9, 6, 8, 7, 7}\nstack traceback:\n\t\
    /tmp/tmpmm47hk_q.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            min = math.min(unpack(lst))\n        else\n  \
    \          res[i] = max\n            max = math.max(unpack(lst))\n        end\n\
    \        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpavsrgpl3.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpavsrgpl3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpavsrgpl3.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local asc, desc = {}, {}\n    for i, v in ipairs(lst) do\n        if v ==\
    \ min then\n            table.insert(res, v)\n        elseif v == max then\n \
    \           table.insert(res, 1, v)\n        elseif v > min then\n           \
    \ table.insert(asc, v)\n        else\n            table.insert(desc, v)\n    \
    \    end\n    end\n    table.sort(asc)\n    table.sort(desc, function(a, b) return\
    \ a > b end)\n    for i, v in ipairs(asc) do\n        table.insert(res, v)\n \
    \   end\n    for i, v in ipairs(desc) do\n        table.insert(res, 1, v)\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppqkgtn_g.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmppqkgtn_g.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppqkgtn_g.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_idx = table.index_of(lst, min)\n    local\
    \ max_idx = table.index_of(lst, max)\n    table.remove(lst, min_idx)\n    table.remove(lst,\
    \ max_idx)\n    table.insert(sorted, min)\n    table.insert(sorted, max)\n   \
    \ while #lst > 0 do\n        local min = math.min(unpack(lst))\n        local\
    \ max = math.max(unpack(lst))\n        local min_idx = table.index_of(lst, min)\n\
    \        local max_idx = table.index_of(lst, max)\n        table.remove(lst, min_idx)\n\
    \        table.remove(lst, max_idx)\n        table.insert(sorted, min)\n     \
    \   table.insert(sorted, max)\n    end\n    return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_86vu0pw.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_86vu0pw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_86vu0pw.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local res = {}\n  local min_val, max_val\
    \ = min(lst), max(lst)\n  local min_idx, max_idx = lst:find(min_val), lst:find(max_val)\n\
    \  local min_found, max_found = false, false\n  local i = 1\n  while i <= #lst\
    \ do\n    if not min_found and min_idx ~= max_idx then\n      res[i] = min_val\n\
    \      min_found = true\n      i = i + 1\n    end\n    if not max_found then\n\
    \      res[i] = max_val\n      max_found = true\n      i = i + 1\n    end\n  \
    \  if min_found and max_found then\n      min_val, max_val = min(lst:sub(i)),\
    \ max(lst:sub(i))\n      min_idx, max_idx = lst:find(min_val, i), lst:find(max_val,\
    \ i)\n      min_found, max_found = false, false\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8crxdjpk.lua:9:\
    \ attempt to call a nil value (method 'find')\nstack traceback:\n\t/tmp/tmp8crxdjpk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8crxdjpk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        if i % 2\
    \ == 1 then\n            res[i] = min\n            min = math.min(unpack(lst))\n\
    \        else\n            res[i] = max\n            max = math.max(unpack(lst))\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf64a9433.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpf64a9433.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpf64a9433.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val = math.min(unpack(lst))\n    local max_val = math.max(unpack(lst))\n\
    \    local result = {}\n    local i = 1\n    while i <= #lst do\n        if i\
    \ % 2 == 1 then\n            result[i] = min_val\n            min_val = min_val\
    \ + 1\n        else\n            result[i] = max_val\n            max_val = max_val\
    \ - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpun00ix3j.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpun00ix3j.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpun00ix3j.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    for i = 1, #lst do\n   \
    \     if i % 2 == 1 then\n            res[i] = min\n            min_idx = min_idx\
    \ + 1\n            min = math.min(unpack(lst, min_idx))\n        else\n      \
    \      res[i] = max\n            max_idx = max_idx - 1\n            max = math.max(unpack(lst,\
    \ 1, max_idx))\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx6919vk.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdx6919vk.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpdx6919vk.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx, max_idx = 1, #lst\n    local asc = true\n\
    \    while min_idx <= max_idx do\n        if asc then\n            table.insert(res,\
    \ lst[min_idx])\n            min_idx = min_idx + 1\n        else\n           \
    \ table.insert(res, lst[max_idx])\n            max_idx = max_idx - 1\n       \
    \ end\n        asc = not asc\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5u0d_v0.lua:28:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpc5u0d_v0.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local i = 1\n  local j = #lst\n  while i <= j do\n    if i == j then\n    \
    \  sorted[i] = min\n    else\n      sorted[i] = min\n      sorted[j] = max\n \
    \   end\n    i = i + 1\n    j = j - 1\n    min = math.min(unpack(lst))\n    max\
    \ = math.max(unpack(lst))\n  end\n  return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7musoega.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7musoega.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7musoega.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_index, max_index = 1, #lst\n    local result = {}\n    local is_min\
    \ = true\n    while min_index <= max_index do\n        if is_min then\n      \
    \      table.insert(result, lst[min_index])\n            min_index = min_index\
    \ + 1\n        else\n            table.insert(result, lst[max_index])\n      \
    \      max_index = max_index - 1\n        end\n        is_min = not is_min\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx04enlh.lua:28:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpsx04enlh.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = 1\n    local max_index = 1\n  \
    \  for i, v in ipairs(lst) do\n        if v == min then\n            min_index\
    \ = i\n        elseif v == max then\n            max_index = i\n        end\n\
    \    end\n    table.remove(lst, min_index)\n    table.remove(lst, max_index -\
    \ 1)\n    table.insert(result, min)\n    table.insert(result, max)\n    while\
    \ #lst > 0 do\n        min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n\
    \        min_index = 1\n        max_index = 1\n        for i, v in ipairs(lst)\
    \ do\n            if v == min then\n                min_index = i\n          \
    \  elseif v == max then\n                max_index = i\n            end\n    \
    \    end\n        table.remove(lst, min_index)\n        table.remove(lst, max_index\
    \ - 1)\n        table.insert(result, min)\n        table.insert(result, max)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxwk3jpdz.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpxwk3jpdz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxwk3jpdz.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function strange_sort(lst,\
    \ res)\n        if #lst == 0 then return res end\n        local m = min(unpack(lst))\n\
    \        table.insert(res, m)\n        table.remove(lst, index_of(lst, m))\n \
    \       if #lst == 0 then return res end\n        local m = max(unpack(lst))\n\
    \        table.insert(res, m)\n        table.remove(lst, index_of(lst, m))\n \
    \       return strange_sort(lst, res)\n    end\n    return strange_sort(lst, {})\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxr4ryt6g.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpxr4ryt6g.lua:9:\
    \ in function </tmp/tmpxr4ryt6g.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpxr4ryt6g.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: -1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function min_max(lst)\n    local\
    \ mn, mx = min(lst), max(lst)\n    for i, v in ipairs(lst) do\n      if v == mn\
    \ then\n        table.remove(lst, i)\n        return mn, mx\n      elseif v ==\
    \ mx then\n        table.remove(lst, i)\n        return mx, mn\n      end\n  \
    \  end\n  end\n  local res = {}\n  while #lst > 0 do\n    local mn, mx = min_max(lst)\n\
    \    table.insert(res, mn)\n    table.insert(res, mx)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014716
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  table.insert(res, min)\n  table.insert(res, max)\n  for i = 1, #lst do\n  \
    \  if lst[i] ~= min and lst[i] ~= max then\n      table.insert(res, lst[i])\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7vg2r0ui.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7vg2r0ui.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7vg2r0ui.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        res[i] =\
    \ min\n        res[#lst - i + 1] = max\n        i = i + 1\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphzk6aivc.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphzk6aivc.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmphzk6aivc.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_val, max_val, min_pos, max_pos\n    local min_found,\
    \ max_found\n    local i, j, k\n    local len = #lst\n    for i = 1, len do\n\
    \        min_found = false\n        max_found = false\n        for j = 1, len\
    \ do\n            if not min_found then\n                if not lst[j] then\n\
    \                    min_found = true\n                    min_val = min_pos\n\
    \                else\n                    min_val = lst[j]\n                \
    \    min_pos = j\n                end\n            else\n                if lst[j]\
    \ and lst[j] < min_val then\n                    min_val = lst[j]\n          \
    \          min_pos = j\n                end\n            end\n            if not\
    \ max_found then\n                if not lst[j] then\n                    max_found\
    \ = true\n                    max_val = max_pos\n                else\n      \
    \              max_val = lst[j]\n                    max_pos = j\n           \
    \     end\n            else\n                if lst[j] and lst[j] > max_val then\n\
    \                    max_val = lst[j]\n                    max_pos = j\n     \
    \           end\n            end\n        end\n        if i % 2 == 1 then\n  \
    \          res[i] = min_val\n            lst[min_pos] = nil\n        else\n  \
    \          res[i] = max_val\n            lst[max_pos] = nil\n        end\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmekb3gtq.lua:58:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpmekb3gtq.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst, res)\n        if #lst == 0 then\n         \
    \   return res\n        end\n        local min = math.min(unpack(lst))\n     \
    \   local max = math.max(unpack(lst))\n        local min_idx = 0\n        local\
    \ max_idx = 0\n        for i, v in ipairs(lst) do\n            if v == min then\n\
    \                min_idx = i\n            end\n            if v == max then\n\
    \                max_idx = i\n            end\n        end\n        table.remove(lst,\
    \ min_idx)\n        table.remove(lst, max_idx - 1)\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n        return sort_list(lst, res)\n \
    \   end\n    return sort_list(lst, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj7fbu9ii.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpj7fbu9ii.lua:10:\
    \ in function </tmp/tmpj7fbu9ii.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpj7fbu9ii.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local is_min = true\n  \
    \  while min_idx <= max_idx do\n        if is_min then\n            res[#res +\
    \ 1] = min\n            min_idx = min_idx + 1\n        else\n            res[#res\
    \ + 1] = max\n            max_idx = max_idx - 1\n        end\n        is_min =\
    \ not is_min\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_91u5fg.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpt_91u5fg.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt_91u5fg.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while #res < #lst do\n        if i % 2 == 1 then\n     \
    \       table.insert(res, min)\n            min = math.min(unpack(lst))\n    \
    \    else\n            table.insert(res, max)\n            max = math.max(unpack(lst))\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4p0_f3b5.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4p0_f3b5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4p0_f3b5.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function strange_sort(lst, acc)\n\
    \    if #lst == 0 then return acc end\n    local m = min(unpack(lst))\n    local\
    \ M = max(unpack(lst))\n    local lst1 = {}\n    for i, v in ipairs(lst) do\n\
    \      if v ~= m and v ~= M then\n        lst1[#lst1 + 1] = v\n      end\n   \
    \ end\n    return strange_sort(lst1, {m, M} + acc)\n  end\n  return strange_sort(lst,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzz9ttqzj.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzz9ttqzj.lua:9:\
    \ in function </tmp/tmpzz9ttqzj.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpzz9ttqzj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local n = #lst\n    local i = 1\n    local j = n\n  \
    \  while i <= n do\n        if i % 2 == 1 then\n            res[i] = math.min(unpack(lst))\n\
    \            table.remove(lst, table.index_of(lst, res[i]))\n        else\n  \
    \          res[i] = math.max(unpack(lst))\n            table.remove(lst, table.index_of(lst,\
    \ res[i]))\n        end\n        i = i + 1\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2b0och4_.lua:12:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp2b0och4_.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2b0och4_.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val, min_idx, max_idx, res = math.min(unpack(lst)), math.max(unpack(lst)),\
    \ 1, 1, {}\n    for i = 1, #lst do\n        if lst[i] == min_val then\n      \
    \      min_idx = i\n        elseif lst[i] == max_val then\n            max_idx\
    \ = i\n        end\n    end\n    table.insert(res, min_val)\n    table.insert(res,\
    \ max_val)\n    for i = 1, #lst do\n        if i ~= min_idx and i ~= max_idx then\n\
    \            table.insert(res, lst[i])\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpew50a2lt.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpew50a2lt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpew50a2lt.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local t = {}\n    local n = #lst\n    local i = 1\n    while i <= n do\n\
    \        local min = math.min(unpack(lst))\n        local max = math.max(unpack(lst))\n\
    \        table.insert(t, min)\n        table.insert(t, max)\n        table.remove(lst,\
    \ table.index_of(lst, min))\n        table.remove(lst, table.index_of(lst, max))\n\
    \        i = i + 2\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjzlm61dn.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjzlm61dn.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjzlm61dn.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local i = 1\n    while i\
    \ <= #lst do\n        if i % 2 == 1 then\n            res[i] = min\n         \
    \   min_idx = min_idx + 1\n            min = lst[min_idx]\n        else\n    \
    \        res[i] = max\n            max_idx = max_idx - 1\n            max = lst[max_idx]\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdmbi499.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpsdmbi499.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsdmbi499.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 0\n    local max_idx = 0\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local i = 1\n    local j =\
    \ 1\n    while i <= #lst do\n        if i % 2 == 1 then\n            res[i] =\
    \ min\n            min_idx = min_idx + 1\n            min = lst[min_idx]\n   \
    \     else\n            res[i] = max\n            max_idx = max_idx - 1\n    \
    \        max = lst[max_idx]\n        end\n        i = i + 1\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp34rf_348.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp34rf_348.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp34rf_348.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporwa4jjc.lua:12:\
    \ expected: {1, 4, 2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmporwa4jjc.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014711
- exit_code: -1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(lst)\n  \
    \      local min_val, max_val = min(lst), max(lst)\n        local min_idx, max_idx\
    \ = 0, 0\n        for i, v in ipairs(lst) do\n            if v == min_val then\
    \ min_idx = i end\n            if v == max_val then max_idx = i end\n        end\n\
    \        return min_val, max_val, min_idx, max_idx\n    end\n    local function\
    \ remove_idx(lst, idx)\n        local res = {}\n        for i, v in ipairs(lst)\
    \ do\n            if i ~= idx then table.insert(res, v) end\n        end\n   \
    \     return res\n    end\n    local res = {}\n    while #lst > 0 do\n       \
    \ local min_val, max_val, min_idx, max_idx = min_max(lst)\n        table.insert(res,\
    \ min_val)\n        table.insert(res, max_val)\n        lst = remove_idx(lst,\
    \ min_idx)\n        lst = remove_idx(lst, max_idx)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014716
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while #res < #lst do\n        if i % 2 == 1 then\n     \
    \       table.insert(res, min)\n            min = math.min(unpack(lst))\n    \
    \    else\n            table.insert(res, max)\n            max = math.max(unpack(lst))\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4p0_f3b5.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4p0_f3b5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4p0_f3b5.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function min_max(a, b)\n    return\
    \ min(a, b), max(a, b)\n  end\n  local function min_max_list(lst)\n    local lst_min,\
    \ lst_max = min_max(lst[1], lst[2])\n    for i = 3, #lst do\n      lst_min, lst_max\
    \ = min_max(lst_min, lst[i]), min_max(lst_max, lst[i])\n    end\n    return lst_min,\
    \ lst_max\n  end\n  local function strange_sort(lst)\n    if #lst == 0 then return\
    \ {} end\n    local lst_min, lst_max = min_max_list(lst)\n    local lst_min_idx,\
    \ lst_max_idx = 1, 1\n    for i = 1, #lst do\n      if lst[i] == lst_min then\
    \ lst_min_idx = i end\n      if lst[i] == lst_max then lst_max_idx = i end\n \
    \   end\n    local lst_min_idx, lst_max_idx = lst_min_idx, lst_max_idx\n    local\
    \ lst_min_idx, lst_max_idx = min_max(lst_min_idx, lst_max_idx)\n    local lst_min_idx,\
    \ lst_max_idx = lst_min_idx + 1, lst_max_idx - 1\n    local lst_min_idx, lst_max_idx\
    \ = min_max(lst_min_idx, lst_max_idx)\n    local lst_min_idx, lst_max_idx = lst_min_idx\
    \ + 1, lst_max_idx - 1\n    local lst_min_idx, lst_max_idx = min_max(lst_min_idx,\
    \ lst_max_idx)\n    local\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppligme07.lua:47: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if not min_found and lst[i] == min_val\
    \ then\n            min_idx = i\n            min_found = true\n        end\n \
    \       if not max_found and lst[i] == max_val then\n            max_idx = i\n\
    \            max_found = true\n        end\n        if min_found and max_found\
    \ then\n            break\n        end\n    end\n    local idx = 1\n    while\
    \ idx <= #lst do\n        if idx % 2 == 1 then\n            table.insert(res,\
    \ min_val)\n            min_idx = min_idx + 1\n            if min_idx <= #lst\
    \ then\n                min_val = math.min(unpack(lst, min_idx))\n           \
    \ end\n        else\n            table.insert(res, max_val)\n            max_idx\
    \ = max_idx - 1\n            if max_idx > 0 then\n                max_val = math.max(unpack(lst,\
    \ 1, max_idx))\n            end\n        end\n        idx = idx + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjakpls8w.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjakpls8w.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpjakpls8w.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = table.index_of(lst, min)\n    local max_index = table.index_of(lst,\
    \ max)\n    local min_removed = table.remove_at(lst, min_index)\n    local max_removed\
    \ = table.remove_at(lst, max_index)\n    table.insert(res, min)\n    table.insert(res,\
    \ max)\n    while #lst > 0 do\n        min = math.min(unpack(lst))\n        max\
    \ = math.max(unpack(lst))\n        min_index = table.index_of(lst, min)\n    \
    \    max_index = table.index_of(lst, max)\n        min_removed = table.remove_at(lst,\
    \ min_index)\n        max_removed = table.remove_at(lst, max_index)\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfany3dsv.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpfany3dsv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfany3dsv.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      res[i] = min\n\
    \      min = min + 1\n    else\n      res[i] = max\n      max = max - 1\n    end\n\
    \    i = i + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5xhuv1ve.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5xhuv1ve.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5xhuv1ve.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local lst_len = #lst\n    local result = {}\n    local min_idx = 1\n    local\
    \ max_idx = lst_len\n    local is_min = true\n    for i = 1, lst_len do\n    \
    \    if is_min then\n            result[i] = lst[min_idx]\n            min_idx\
    \ = min_idx + 1\n        else\n            result[i] = lst[max_idx]\n        \
    \    max_idx = max_idx - 1\n        end\n        is_min = not is_min\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0x3qhoa.lua:30:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpf0x3qhoa.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local n = #lst\n    local i = 1\n    while i <= n do\n        if i % 2 ==\
    \ 1 then\n            res[i] = min\n            min = min + 1\n        else\n\
    \            res[i] = max\n            max = max - 1\n        end\n        i =\
    \ i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9gxjb34.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpx9gxjb34.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpx9gxjb34.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function strange_sort(lst,\
    \ res)\n        if #lst == 0 then return res end\n        local mn, mx = min(unpack(lst)),\
    \ max(unpack(lst))\n        table.insert(res, mn)\n        table.insert(res, mx)\n\
    \        local new_lst = {}\n        for _, v in ipairs(lst) do\n            if\
    \ v ~= mn and v ~= mx then table.insert(new_lst, v) end\n        end\n       \
    \ return strange_sort(new_lst, res)\n    end\n    return strange_sort(lst, {})\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvv_hv7fb.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvv_hv7fb.lua:9:\
    \ in function </tmp/tmpvv_hv7fb.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpvv_hv7fb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(lst)\n  \
    \      local min_val, max_val = min(lst), max(lst)\n        local min_idx, max_idx\
    \ = 0, 0\n        for i, v in ipairs(lst) do\n            if v == min_val then\
    \ min_idx = i end\n            if v == max_val then max_idx = i end\n        end\n\
    \        return min_val, max_val, min_idx, max_idx\n    end\n    local function\
    \ remove_idx(lst, idx)\n        local res = {}\n        for i, v in ipairs(lst)\
    \ do\n            if i ~= idx then table.insert(res, v) end\n        end\n   \
    \     return res\n    end\n    local function strange_sort(lst)\n        if #lst\
    \ == 0 then return {} end\n        local min_val, max_val, min_idx, max_idx =\
    \ min_max(lst)\n        local res = {min_val, max_val}\n        local new_lst\
    \ = remove_idx(lst, min_idx)\n        new_lst = remove_idx(new_lst, max_idx -\
    \ 1)\n        return res .. strange_sort(new_lst)\n    end\n    return strange_sort(lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbzrnx5te.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpbzrnx5te.lua:18: in upvalue 'remove_idx'\n\
    \t/tmp/tmpbzrnx5te.lua:27: in upvalue 'strange_sort'\n\t/tmp/tmpbzrnx5te.lua:29:\
    \ in upvalue 'strange_sort'\n\t/tmp/tmpbzrnx5te.lua:29: in upvalue 'strange_sort'\n\
    \t/tmp/tmpbzrnx5te.lua:29: in upvalue 'strange_sort'\n\t/tmp/tmpbzrnx5te.lua:29:\
    \ in upvalue 'strange_sort'\n\t/tmp/tmpbzrnx5te.lua:29: in upvalue 'strange_sort'\n\
    \t/tmp/tmpbzrnx5te.lua:29: in upvalue 'strange_sort'\n\t/tmp/tmpbzrnx5te.lua:29:\
    \ in upvalue 'strange_sort'\n\t...\t(skipping 111091 levels)\n\t/tmp/tmpbzrnx5te.lua:29:\
    \ in function </tmp/tmpbzrnx5te.lua:23>\n\t(...tail calls...)\n\t/tmp/tmpbzrnx5te.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.520 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst)\n        local function sort_list_helper(lst,\
    \ res)\n            if #lst == 0 then\n                return res\n          \
    \  end\n            local min = math.min(unpack(lst))\n            local max =\
    \ math.max(unpack(lst))\n            local min_idx = table.index_of(lst, min)\n\
    \            local max_idx = table.index_of(lst, max)\n            table.remove(lst,\
    \ min_idx)\n            table.remove(lst, max_idx - 1)\n            table.insert(res,\
    \ min)\n            table.insert(res, max)\n            return sort_list_helper(lst,\
    \ res)\n        end\n        return sort_list_helper(lst, {})\n    end\n    return\
    \ sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1c5zhz_j.lua:11:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp1c5zhz_j.lua:11:\
    \ in function </tmp/tmp1c5zhz_j.lua:7>\n\t(...tail calls...)\n\t/tmp/tmp1c5zhz_j.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst)\n        local function sort_list_helper(lst,\
    \ res)\n            if #lst == 0 then\n                return res\n          \
    \  end\n            local min_val, min_idx = math.min(unpack(lst))\n         \
    \   local max_val, max_idx = math.max(unpack(lst))\n            table.insert(res,\
    \ min_val)\n            table.remove(lst, min_idx)\n            table.insert(res,\
    \ max_val)\n            table.remove(lst, max_idx)\n            return sort_list_helper(lst,\
    \ res)\n        end\n        return sort_list_helper(lst, {})\n    end\n    return\
    \ sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe6gc8pnq.lua:11:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpe6gc8pnq.lua:11:\
    \ in function </tmp/tmpe6gc8pnq.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpe6gc8pnq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n \
    \   local res = {min_val}\n    local i = 1\n    while i <= #lst do\n        if\
    \ lst[i] ~= min_val then\n            res[#res + 1] = lst[i]\n        end\n  \
    \      i = i + 1\n    end\n    local i = 1\n    while i <= #res do\n        if\
    \ res[i] == max_val then\n            table.remove(res, i)\n        else\n   \
    \         i = i + 1\n        end\n    end\n    local i = 1\n    while i <= #res\
    \ do\n        if res[i] == min_val then\n            table.remove(res, i)\n  \
    \      else\n            i = i + 1\n        end\n    end\n    local i = 1\n  \
    \  while i <= #res do\n        if res[i] == max_val then\n            table.remove(res,\
    \ i)\n        else\n            i = i + 1\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq5y410ox.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpq5y410ox.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpq5y410ox.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        res[i] = min\n        res[#lst\
    \ - i + 1] = max\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgls2_xfy.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpgls2_xfy.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgls2_xfy.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n  local min_removed,\
    \ max_removed = false, false\n  for i = 1, #lst do\n    if i % 2 == 1 then\n \
    \     if not min_removed then\n        table.insert(res, min)\n        min_removed\
    \ = true\n      else\n        table.insert(res, lst[min_idx + 1])\n        min_idx\
    \ = min_idx + 1\n      end\n    else\n      if not max_removed then\n        table.insert(res,\
    \ max)\n        max_removed = true\n      else\n        table.insert(res, lst[max_idx\
    \ - 1])\n        max_idx = max_idx - 1\n      end\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpji4u08w1.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpji4u08w1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpji4u08w1.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            min = min + 1\n        else\n            res[i]\
    \ = max\n            max = max - 1\n        end\n        i = i + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbj20_5v6.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpbj20_5v6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbj20_5v6.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(lst)\n  \
    \      local min, max = min(lst), max(lst)\n        local min_i, max_i = 0, 0\n\
    \        for i, v in ipairs(lst) do\n            if v == min then min_i = i end\n\
    \            if v == max then max_i = i end\n        end\n        return min_i,\
    \ max_i\n    end\n    local function remove(lst, i)\n        local res = {}\n\
    \        for j, v in ipairs(lst) do\n            if j ~= i then table.insert(res,\
    \ v) end\n        end\n        return res\n    end\n    local function strange_sort(lst)\n\
    \        if #lst == 0 then return {} end\n        local min_i, max_i = min_max(lst)\n\
    \        local res = {lst[min_i], lst[max_i]}\n        local lst = remove(lst,\
    \ min_i)\n        lst = remove(lst, max_i - 1)\n        return res .. strange_sort(lst)\n\
    \    end\n    return strange_sort(lst)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr_e22cry.lua:19:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpr_e22cry.lua:19: in upvalue 'remove'\n\
    \t/tmp/tmpr_e22cry.lua:27: in upvalue 'strange_sort'\n\t/tmp/tmpr_e22cry.lua:29:\
    \ in upvalue 'strange_sort'\n\t/tmp/tmpr_e22cry.lua:29: in upvalue 'strange_sort'\n\
    \t/tmp/tmpr_e22cry.lua:29: in upvalue 'strange_sort'\n\t/tmp/tmpr_e22cry.lua:29:\
    \ in upvalue 'strange_sort'\n\t/tmp/tmpr_e22cry.lua:29: in upvalue 'strange_sort'\n\
    \t/tmp/tmpr_e22cry.lua:29: in upvalue 'strange_sort'\n\t/tmp/tmpr_e22cry.lua:29:\
    \ in upvalue 'strange_sort'\n\t...\t(skipping 142834 levels)\n\t/tmp/tmpr_e22cry.lua:29:\
    \ in function </tmp/tmpr_e22cry.lua:23>\n\t(...tail calls...)\n\t/tmp/tmpr_e22cry.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.730 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val = math.min(unpack(lst))\n    local min_idx = 1\n    for i,\
    \ v in ipairs(lst) do\n        if v == min_val then\n            min_idx = i\n\
    \            break\n        end\n    end\n    table.remove(lst, min_idx)\n   \
    \ local max_val = math.max(unpack(lst))\n    local max_idx = 1\n    for i, v in\
    \ ipairs(lst) do\n        if v == max_val then\n            max_idx = i\n    \
    \        break\n        end\n    end\n    table.remove(lst, max_idx)\n    local\
    \ result = {min_val, max_val}\n    while #lst > 0 do\n        min_val = math.min(unpack(lst))\n\
    \        min_idx = 1\n        for i, v in ipairs(lst) do\n            if v ==\
    \ min_val then\n                min_idx = i\n                break\n         \
    \   end\n        end\n        table.remove(lst, min_idx)\n        max_val = math.max(unpack(lst))\n\
    \        max_idx = 1\n        for i, v in ipairs(lst) do\n            if v ==\
    \ max_val then\n                max_idx = i\n                break\n         \
    \   end\n        end\n        table.remove(lst, max_idx)\n        table.insert(result,\
    \ min_val)\n        table.insert(result, max_val)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ncfdi4p.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7ncfdi4p.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7ncfdi4p.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 0
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst)\n        local function compare(a, b)\n   \
    \         return a < b\n        end\n        table.sort(lst, compare)\n    end\n\
    \    sort_list(lst)\n    local res = {}\n    local i = 1\n    local j = #lst\n\
    \    while i <= j do\n        res[#res + 1] = lst[i]\n        if i ~= j then\n\
    \            res[#res + 1] = lst[j]\n        end\n        i = i + 1\n        j\
    \ = j - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local res = {}\n    local\
    \ i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n            res[i]\
    \ = lst[min_idx]\n            min_idx = min_idx + 1\n        else\n          \
    \  res[i] = lst[max_idx]\n            max_idx = max_idx - 1\n        end\n   \
    \     i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1xhzeen.lua:29:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpz1xhzeen.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while min <= max do\n        res[i]\
    \ = min\n        i = i + 1\n        res[i] = max\n        i = i + 1\n        min\
    \ = min + 1\n        max = max - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpldv4kbmc.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpldv4kbmc.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpldv4kbmc.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(lst)\n  \
    \      local min_val, max_val = min(lst), max(lst)\n        return min_val, max_val,\
    \ lst:remove_value(min_val), lst:remove_value(max_val)\n    end\n    local function\
    \ strange_sort(lst, acc)\n        if #lst == 0 then return acc end\n        local\
    \ min_val, max_val, lst_1, lst_2 = min_max(lst)\n        return strange_sort(lst_1,\
    \ acc:append(min_val):append(max_val))\n    end\n    return strange_sort(lst,\
    \ List())\nend\nassert(strange_sort_list(List(1, 2, 3, 4, 5, 6, 7, 8, 9)) == List(1,\
    \ 9, 2, 8, 3, 7, 4, 6, 5))\nassert(strange_sort_list(List(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10)) == List(1, 10, 2, 9, 3, 8, 4, 7, 5, 6))\nassert(strange_sort_list(List(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) == List(1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6))\n\
    assert(strange_sort_list(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == List(1,\
    \ 12, 2, 11, 3, 10, 4, 9, 5, 8, 6, 7))\nassert(strange_sort_list(List(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)) == List(1, 13, 2, 12, 3, 11, 4, 10, 5, 9,\
    \ 6, 8, 7))\nassert(strange_sort_list(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7i7kudku.lua:24: '')'' expected (to close ''('' at line 23)
    near ''lu''

    '
  stdout: ''
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n \
    \   local result = {min_val}\n    local min_index, max_index = 1, 1\n    for i\
    \ = 1, #lst - 1 do\n        if i % 2 == 0 then\n            for j = 1, #lst do\n\
    \                if lst[j] == min_val then\n                    min_index = j\n\
    \                end\n            end\n            for j = min_index + 1, #lst\
    \ do\n                if lst[j] > max_val then\n                    max_val =\
    \ lst[j]\n                    max_index = j\n                end\n           \
    \ end\n            table.insert(result, max_val)\n            table.remove(lst,\
    \ max_index)\n        else\n            for j = 1, #lst do\n                if\
    \ lst[j] == max_val then\n                    max_index = j\n                end\n\
    \            end\n            for j = max_index + 1, #lst do\n               \
    \ if lst[j] < min_val then\n                    min_val = lst[j]\n           \
    \         min_index = j\n                end\n            end\n            table.insert(result,\
    \ min_val)\n            table.remove(lst, min_index)\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ko8o_2c.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5ko8o_2c.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp5ko8o_2c.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n  local\
    \ result = {min_val}\n  local min_idx, max_idx = 1, 1\n  for i = 2, #lst do\n\
    \    if lst[min_idx] == min_val then\n      min_idx = find_next_min_idx(lst, min_idx)\n\
    \      min_val = lst[min_idx]\n    end\n    if lst[max_idx] == max_val then\n\
    \      max_idx = find_next_max_idx(lst, max_idx)\n      max_val = lst[max_idx]\n\
    \    end\n    if i % 2 == 0 then\n      result[i] = min_val\n    else\n      result[i]\
    \ = max_val\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0pu5h7t.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpk0pu5h7t.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpk0pu5h7t.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 0
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min = math.min\n  local max = math.max\n  local sort = table.sort\n \
    \ local insert = table.insert\n  local remove = table.remove\n  local result =\
    \ {}\n  local sorted = {}\n  for _, v in ipairs(lst) do\n    insert(sorted, v)\n\
    \  end\n  sort(sorted)\n  while #sorted > 0 do\n    insert(result, remove(sorted,\
    \ 1))\n    if #sorted > 0 then\n      insert(result, remove(sorted))\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n \
    \   local min_idx, max_idx = 0, 0\n    local res = {}\n    while min_idx < #lst\
    \ and max_idx < #lst do\n        table.insert(res, min_val)\n        table.insert(res,\
    \ max_val)\n        min_idx = min_idx + 1\n        max_idx = max_idx + 1\n   \
    \     min_val = math.min(unpack(lst, min_idx))\n        max_val = math.max(unpack(lst,\
    \ max_idx))\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__2r23tq.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp__2r23tq.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp__2r23tq.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort(lst)\n        local function min(lst)\n            local\
    \ min = lst[1]\n            for i = 2, #lst do\n                if lst[i] < min\
    \ then\n                    min = lst[i]\n                end\n            end\n\
    \            return min\n        end\n        local function max(lst)\n      \
    \      local max = lst[1]\n            for i = 2, #lst do\n                if\
    \ lst[i] > max then\n                    max = lst[i]\n                end\n \
    \           end\n            return max\n        end\n        local function remove(lst,\
    \ val)\n            local new_lst = {}\n            for i = 1, #lst do\n     \
    \           if lst[i] ~= val then\n                    new_lst[#new_lst + 1] =\
    \ lst[i]\n                end\n            end\n            return new_lst\n \
    \       end\n        local new_lst = {}\n        while #lst > 0 do\n         \
    \   new_lst[#new_lst + 1] = min(lst)\n            lst = remove(lst, min(lst))\n\
    \            if #lst > 0 then\n                new_lst[#new_lst + 1] = max(lst)\n\
    \                lst = remove(lst, max(lst))\n            end\n        end\n \
    \       return new_lst\n    end\n    return sort(lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu402xi0m.lua:55:\
    \ expected: {5, 5, 5, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpu402xi0m.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val, min_idx, max_idx, result = math.min(unpack(lst)),\
    \ math.max(unpack(lst)), 1, 1, {}\n    for i = 1, #lst do\n        if lst[i] ==\
    \ min_val then\n            min_idx = i\n        elseif lst[i] == max_val then\n\
    \            max_idx = i\n        end\n    end\n    table.insert(result, min_val)\n\
    \    table.insert(result, max_val)\n    for i = 1, #lst do\n        if i ~= min_idx\
    \ and i ~= max_idx then\n            table.insert(result, lst[i])\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzdro5jea.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzdro5jea.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpzdro5jea.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: -1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function min_max(lst)\n    local\
    \ mn, mx = min(lst), max(lst)\n    local res = {mn}\n    for i = 1, #lst do\n\
    \      if lst[i] ~= mn and lst[i] ~= mx then\n        res[#res + 1] = lst[i]\n\
    \      end\n    end\n    res[#res + 1] = mx\n    return res\n  end\n  local res\
    \ = {}\n  while #lst > 0 do\n    res[#res + 1] = min_max(lst)\n    lst = min_max(lst)\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014717
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min_value = math.min(unpack(lst))\n    local\
    \ max_value = math.max(unpack(lst))\n    local min_index = 1\n    local max_index\
    \ = #lst\n    local index = 1\n    while index <= #lst do\n        if index %\
    \ 2 == 1 then\n            result[index] = min_value\n            min_value =\
    \ math.min(unpack(lst, min_index + 1, max_index))\n            min_index = min_index\
    \ + 1\n        else\n            result[index] = max_value\n            max_value\
    \ = math.max(unpack(lst, min_index, max_index - 1))\n            max_index = max_index\
    \ - 1\n        end\n        index = index + 1\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3le22mor.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp3le22mor.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp3le22mor.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst, res)\n        if #lst == 0 then\n         \
    \   return res\n        end\n        local min_val, min_idx = math.min(unpack(lst))\n\
    \        local max_val, max_idx = math.max(unpack(lst))\n        local min_removed\
    \ = table.remove(lst, min_idx)\n        local max_removed = table.remove(lst,\
    \ max_idx - 1)\n        table.insert(res, min_removed)\n        table.insert(res,\
    \ max_removed)\n        return sort_list(lst, res)\n    end\n    return sort_list(lst,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkvbfq5z.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdkvbfq5z.lua:10:\
    \ in function </tmp/tmpdkvbfq5z.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpdkvbfq5z.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local result = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_index, max_index = lst:index_of(min), lst:index_of(max)\n  local\
    \ min_removed, max_removed = lst:remove_value(min), lst:remove_value(max)\n  local\
    \ min_removed_index, max_removed_index = min_removed:index_of(min), max_removed:index_of(max)\n\
    \  local min_removed_removed, max_removed_removed = min_removed:remove_value(max),\
    \ max_removed:remove_value(min)\n  local min_removed_removed_index, max_removed_removed_index\
    \ = min_removed_removed:index_of(min), max_removed_removed:index_of(max)\n  local\
    \ min_removed_removed_removed, max_removed_removed_removed = min_removed_removed:remove_value(max),\
    \ max_removed_removed:remove_value(min)\n  local min_removed_removed_removed_index,\
    \ max_removed_removed_removed_index = min_removed_removed_removed:index_of(min),\
    \ max_removed_removed_removed:index_of(max)\n  local min_removed_removed_removed_removed,\
    \ max_removed_removed_removed_removed = min_removed_removed_removed:remove_value(max),\
    \ max_removed_removed_removed:remove_value(min)\n  local min_removed_removed_removed_removed_index,\
    \ max_removed_removed_removed_removed_index = min_removed_removed_removed_removed:index_of(min),\
    \ max_removed_removed_removed_removed:index_of(max)\n  local min_removed_removed_removed_removed_removed,\
    \ max_removed_removed_removed_rem\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpguz5tx_7.lua:33: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local min_idx, max_idx = 1, #lst\n\
    \    local res = {}\n    while min_idx <= max_idx do\n        res[#res + 1] =\
    \ lst[min_idx]\n        if min_idx ~= max_idx then\n            res[#res + 1]\
    \ = lst[max_idx]\n        end\n        min_idx = min_idx + 1\n        max_idx\
    \ = max_idx - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fh28gje.lua:26:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmp9fh28gje.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local function sort_list(lst)\n    local function sort_list_helper(lst, acc)\n\
    \      if #lst == 0 then\n        return acc\n      end\n      local min = math.min(unpack(lst))\n\
    \      local max = math.max(unpack(lst))\n      local min_idx = 0\n      local\
    \ max_idx = 0\n      for i, v in ipairs(lst) do\n        if v == min then\n  \
    \        min_idx = i\n        end\n        if v == max then\n          max_idx\
    \ = i\n        end\n      end\n      table.remove(lst, min_idx)\n      table.remove(lst,\
    \ max_idx - 1)\n      table.insert(acc, min)\n      table.insert(acc, max)\n \
    \     return sort_list_helper(lst, acc)\n    end\n    return sort_list_helper(lst,\
    \ {})\n  end\n  return sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpucerl9zm.lua:11:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpucerl9zm.lua:11:\
    \ in function </tmp/tmpucerl9zm.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpucerl9zm.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min_index, max_index\n    local min_value, max_value\n\
    \    local min_value_index, max_value_index\n    local min_value_index_found,\
    \ max_value_index_found\n    local min_value_found, max_value_found\n    local\
    \ min_value_found_index, max_value_found_index\n    local min_value_found_index_found,\
    \ max_value_found_index_found\n    local min_value_found_index_found_index, max_value_found_index_found_index\n\
    \    local min_value_found_index_found_index_found, max_value_found_index_found_index_found\n\
    \    local min_value_found_index_found_index_found_index, max_value_found_index_found_index_found_index\n\
    \    local min_value_found_index_found_index_found_index_found, max_value_found_index_found_index_found_index_found\n\
    \    local min_value_found_index_found_index_found_index_found_index, max_value_found_index_found_index_found_index_found_index\n\
    \    local min_value_found_index_found_index_found_index_found_index_found, max_value_found_index_found_index_found_index_found_index_found\n\
    \    local min_value_found_index_found_index_found_index_found_index_found_index,\
    \ max_value_found_index_found_index_found_index_found_index_found_index\n    local\
    \ min_value_found_index_found_index_found_index_found_index_found_index_found,\
    \ max_value_found_index_found_index_found_index_found_index_found_index_found\n\
    \    local min_value_found_index_found_index_found_index_found_index_found_index_found_index,\
    \ max_value_found_index_found_index_found_index_found_index_found_index_found_index\n\
    \    local min_value_found_index_found_index_found_index_found_index\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp61jfxq5n.lua:39: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function strange_sort(lst,\
    \ acc)\n        if #lst == 0 then return acc end\n        local m = min(unpack(lst))\n\
    \        local M = max(unpack(lst))\n        local lst1 = {}\n        for i, v\
    \ in ipairs(lst) do\n            if v ~= m and v ~= M then\n                lst1[#lst1\
    \ + 1] = v\n            end\n        end\n        return strange_sort(lst1, {m,\
    \ M} + acc)\n    end\n    return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa3axn29b.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpa3axn29b.lua:9:\
    \ in function </tmp/tmpa3axn29b.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpa3axn29b.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        if i % 2\
    \ == 1 then\n            res[i] = min\n            min = math.min(unpack(lst))\n\
    \        else\n            res[i] = max\n            max = math.max(unpack(lst))\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf64a9433.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpf64a9433.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpf64a9433.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local idx = 1\n    while\
    \ idx <= #lst do\n        if idx % 2 == 1 then\n            res[idx] = min\n \
    \           min_idx = min_idx + 1\n            min = lst[min_idx]\n        else\n\
    \            res[idx] = max\n            max_idx = max_idx - 1\n            max\
    \ = lst[max_idx]\n        end\n        idx = idx + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrc0sxei.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzrc0sxei.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzrc0sxei.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function _(lst, res)\n    if #lst\
    \ == 0 then return res end\n    local mn, mx = min(unpack(lst)), max(unpack(lst))\n\
    \    local mn_i, mx_i = 0, 0\n    for i, v in ipairs(lst) do\n      if v == mn\
    \ then mn_i = i end\n      if v == mx then mx_i = i end\n    end\n    table.remove(lst,\
    \ mn_i)\n    table.remove(lst, mx_i - 1)\n    return _(lst, {mx, mn} + res)\n\
    \  end\n  return _(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5a1mihcg.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5a1mihcg.lua:9:\
    \ in function </tmp/tmp5a1mihcg.lua:7>\n\t(...tail calls...)\n\t/tmp/tmp5a1mihcg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n \
    \   local result = {min_val}\n    local min_index, max_index = 1, 1\n    for i\
    \ = 1, #lst - 1 do\n        if i % 2 == 0 then\n            for j = 1, #lst do\n\
    \                if lst[j] > result[#result] and lst[j] < max_val then\n     \
    \               max_val = lst[j]\n                    max_index = j\n        \
    \        end\n            end\n            table.insert(result, max_val)\n   \
    \     else\n            for j = 1, #lst do\n                if lst[j] < result[#result]\
    \ and lst[j] > min_val then\n                    min_val = lst[j]\n          \
    \          min_index = j\n                end\n            end\n            table.insert(result,\
    \ min_val)\n        end\n        lst[min_index], lst[max_index] = max_val, min_val\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpehl_5mzf.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpehl_5mzf.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpehl_5mzf.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function strange_sort(lst, acc)\n        if #lst == 0 then\n      \
    \      return acc\n        end\n        local min = math.min(unpack(lst))\n  \
    \      local max = math.max(unpack(lst))\n        local min_index = table.index_of(lst,\
    \ min)\n        local max_index = table.index_of(lst, max)\n        table.remove(lst,\
    \ min_index)\n        table.remove(lst, max_index - 1)\n        table.insert(acc,\
    \ min)\n        table.insert(acc, max)\n        return strange_sort(lst, acc)\n\
    \    end\n    return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppxpz5jre.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmppxpz5jre.lua:10:\
    \ in function </tmp/tmppxpz5jre.lua:6>\n\t(...tail calls...)\n\t/tmp/tmppxpz5jre.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted_lst = {}\n    local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 0, 0\n    local min_max_idx\
    \ = 0\n    while #lst > 0 do\n        if min_max_idx % 2 == 0 then\n         \
    \   min_idx = min_idx + 1\n            min_val = math.min(unpack(lst))\n     \
    \       table.insert(sorted_lst, min_val)\n            table.remove(lst, min_idx)\n\
    \        else\n            max_idx = max_idx + 1\n            max_val = math.max(unpack(lst))\n\
    \            table.insert(sorted_lst, max_val)\n            table.remove(lst,\
    \ max_idx)\n        end\n        min_max_idx = min_max_idx + 1\n    end\n    return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkcituni0.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpkcituni0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkcituni0.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function sort(lst)\n     \
    \   if #lst == 0 then return {} end\n        local m = min(unpack(lst))\n    \
    \    local M = max(unpack(lst))\n        local l = {}\n        for i = 1, #lst\
    \ do\n            if lst[i] ~= m and lst[i] ~= M then\n                l[#l +\
    \ 1] = lst[i]\n            end\n        end\n        return {m, M} + sort(l)\n\
    \    end\n    return sort(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp73qhr9qr.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp73qhr9qr.lua:9:\
    \ in function </tmp/tmp73qhr9qr.lua:7>\n\t(...tail calls...)\n\t/tmp/tmp73qhr9qr.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n    local\
    \ min_found, max_found = false, false\n    for i = 1, #lst do\n        if not\
    \ min_found and i ~= max_idx then\n            table.insert(res, min)\n      \
    \      min_found = true\n        elseif not max_found and i ~= min_idx then\n\
    \            table.insert(res, max)\n            max_found = true\n        else\n\
    \            table.insert(res, lst[i])\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0ua1qnt.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpc0ua1qnt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpc0ua1qnt.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function strange_sort(lst, res)\n\
    \    if #lst == 0 then return res end\n    local m = min(unpack(lst))\n    table.remove(lst,\
    \ table.index_of(lst, m))\n    local M = max(unpack(lst))\n    table.remove(lst,\
    \ table.index_of(lst, M))\n    return strange_sort(lst, table.append(res, {m,\
    \ M}))\n  end\n  return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb1eq_2sq.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpb1eq_2sq.lua:9:\
    \ in function </tmp/tmpb1eq_2sq.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpb1eq_2sq.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        if i % 2\
    \ == 1 then\n            res[i] = min\n            min = math.min(unpack(lst))\n\
    \        else\n            res[i] = max\n            max = math.max(unpack(lst))\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf64a9433.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpf64a9433.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpf64a9433.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = 1\n  local max_index = 1\n  for i, v in ipairs(lst) do\n\
    \    if v == min then\n      min_index = i\n    elseif v == max then\n      max_index\
    \ = i\n    end\n  end\n  local min_max = {}\n  if min_index < max_index then\n\
    \    min_max = {min, max}\n  else\n    min_max = {max, min}\n  end\n  local min_max_index\
    \ = 1\n  for i, v in ipairs(lst) do\n    if v == min_max[min_max_index] then\n\
    \      min_max_index = min_max_index + 1\n      table.insert(sorted, v)\n    end\n\
    \  end\n  local remaining = {}\n  for i, v in ipairs(lst) do\n    if not table.contains(sorted,\
    \ v) then\n      table.insert(remaining, v)\n    end\n  end\n  local remaining_sorted\
    \ = {}\n  for i, v in ipairs(remaining) do\n    table.insert(remaining_sorted,\
    \ v)\n  end\n  table.sort(remaining_sorted)\n  for i, v in ipairs(remaining_sorted)\
    \ do\n    table.insert(sorted, v)\n  end\n  return sorted\nend\nassert(strange_sort_list({1,\
    \ 2, 3, 4, 5}) == {1, 5, 2, 4, 3})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6})\
    \ == {1, 6, 2, 5, 3, 4})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6, 7}) == {1,\
    \ 7, 2, 6, 3, 5, 4})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6, 7, 8}) == {1,\
    \ 8, 2, 7, 3, 6, 4, 5\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprk89jl82.lua:51: ''}'' expected (to close ''{'' at line 50)
    near ''lu''

    '
  stdout: ''
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst)\n        local function get_min_max(lst)\n\
    \            local min = lst[1]\n            local max = lst[1]\n            for\
    \ _, v in ipairs(lst) do\n                if v < min then\n                  \
    \  min = v\n                end\n                if v > max then\n           \
    \         max = v\n                end\n            end\n            return min,\
    \ max\n        end\n        local function remove_min_max(lst, min, max)\n   \
    \         local new_lst = {}\n            for _, v in ipairs(lst) do\n       \
    \         if v ~= min and v ~= max then\n                    table.insert(new_lst,\
    \ v)\n                end\n            end\n            return new_lst\n     \
    \   end\n        local function sort_list_rec(lst, new_lst)\n            if #lst\
    \ == 0 then\n                return new_lst\n            end\n            local\
    \ min, max = get_min_max(lst)\n            table.insert(new_lst, min)\n      \
    \      table.insert(new_lst, max)\n            return sort_list_rec(remove_min_max(lst,\
    \ min, max), new_lst)\n        end\n        return sort_list_rec(lst, {})\n  \
    \  end\n    return sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5eltgyz.lua:47:\
    \ expected: {5, 9, 6, 8, 7}\nactual: {5, 9, 6, 8, 7, 7}\nstack traceback:\n\t\
    /tmp/tmpe5eltgyz.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local lst_copy = lst:copy()\n    local result = {}\n    local min_index,\
    \ max_index\n    local min_value, max_value\n    local min_value_exists, max_value_exists\n\
    \    local min_value_exists_prev, max_value_exists_prev\n    local min_value_exists_prev_prev,\
    \ max_value_exists_prev_prev\n    local min_value_exists_prev_prev_prev, max_value_exists_prev_prev_prev\n\
    \    local min_value_exists_prev_prev_prev_prev, max_value_exists_prev_prev_prev_prev\n\
    \    local min_value_exists_prev_prev_prev_prev_prev, max_value_exists_prev_prev_prev_prev_prev\n\
    \    local min_value_exists_prev_prev_prev_prev_prev_prev, max_value_exists_prev_prev_prev_prev_prev_prev\n\
    \    local min_value_exists_prev_prev_prev_prev_prev_prev_prev, max_value_exists_prev_prev_prev_prev_prev_prev_prev\n\
    \    local min_value_exists_prev_prev_prev_prev_prev_prev_prev_prev, max_value_exists_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local min_value_exists_prev_prev_prev_prev_prev_prev_prev_prev_prev, max_value_exists_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local min_value_exists_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev,\
    \ max_value_exists_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local\
    \ min_value_exists_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev, max_value_exists_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local min_value_exists_prev_prev_prev_prev\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppg3v1bj6.lua:38: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst, res)\n        if #lst == 0 then\n         \
    \   return res\n        end\n        local min = math.min(unpack(lst))\n     \
    \   local max = math.max(unpack(lst))\n        local min_idx = 0\n        local\
    \ max_idx = 0\n        for i, v in ipairs(lst) do\n            if v == min then\n\
    \                min_idx = i\n            end\n            if v == max then\n\
    \                max_idx = i\n            end\n        end\n        table.remove(lst,\
    \ min_idx)\n        table.remove(lst, max_idx - 1)\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n        return sort_list(lst, res)\n \
    \   end\n    return sort_list(lst, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj7fbu9ii.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpj7fbu9ii.lua:10:\
    \ in function </tmp/tmpj7fbu9ii.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpj7fbu9ii.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: -1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(lst)\n  \
    \      local min_val, max_val = min(lst), max(lst)\n        local min_idx, max_idx\
    \ = 0, 0\n        for i, v in ipairs(lst) do\n            if v == min_val then\
    \ min_idx = i end\n            if v == max_val then max_idx = i end\n        end\n\
    \        return min_val, max_val, min_idx, max_idx\n    end\n    local function\
    \ remove_idx(lst, idx)\n        local res = {}\n        for i, v in ipairs(lst)\
    \ do\n            if i ~= idx then table.insert(res, v) end\n        end\n   \
    \     return res\n    end\n    local res = {}\n    while #lst > 0 do\n       \
    \ local min_val, max_val, min_idx, max_idx = min_max(lst)\n        table.insert(res,\
    \ min_val)\n        table.insert(res, max_val)\n        lst = remove_idx(lst,\
    \ min_idx)\n        lst = remove_idx(lst, max_idx)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014716
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = 1\n    local max_index = #lst\n\
    \    local min_max = min\n    local max_min = max\n    local min_max_index = 1\n\
    \    local max_min_index = #lst\n    local min_max_flag = true\n    local max_min_flag\
    \ = true\n    local i = 1\n    while i <= #lst do\n        if min_max_flag then\n\
    \            if min_max == min then\n                min_max = max\n         \
    \       min_max_index = max_index\n                min_max_flag = false\n    \
    \        else\n                min_max = min\n                min_max_index =\
    \ min_index\n                min_max_flag = true\n            end\n        elseif\
    \ max_min_flag then\n            if max_min == max then\n                max_min\
    \ = min\n                max_min_index = min_index\n                max_min_flag\
    \ = false\n            else\n                max_min = max\n                max_min_index\
    \ = max_index\n                max_min_flag = true\n            end\n        end\n\
    \        if min_max_index < max_min_index then\n            sorted[i] = min_max\n\
    \            sorted[i + 1] = max_min\n            i = i + 2\n        else\n  \
    \          sorted[i] = max_min\n            sorted[i + 1] = min_max\n        \
    \    i = i + 2\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn960itr0.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpn960itr0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn960itr0.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local function min_max(lst)\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 0, 0\n    for i = 1, #lst do\n      if lst[i]\
    \ == min then min_index = i end\n      if lst[i] == max then max_index = i end\n\
    \    end\n    return min, max, min_index, max_index\n  end\n  local function remove_index(lst,\
    \ index)\n    local new_lst = {}\n    for i = 1, #lst do\n      if i ~= index\
    \ then table.insert(new_lst, lst[i]) end\n    end\n    return new_lst\n  end\n\
    \  local function strange_sort(lst)\n    if #lst == 0 then return {} end\n   \
    \ local min, max, min_index, max_index = min_max(lst)\n    local new_lst = {min,\
    \ max}\n    local new_lst_2 = strange_sort(remove_index(lst, min_index))\n   \
    \ local new_lst_3 = strange_sort(remove_index(lst, max_index))\n    for i = 1,\
    \ #new_lst_2 do table.insert(new_lst, new_lst_2[i]) end\n    for i = 1, #new_lst_3\
    \ do table.insert(new_lst, new_lst_3[i]) end\n    return new_lst\n  end\n  return\
    \ strange_sort(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuduxlxsh.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpuduxlxsh.lua:7:\
    \ in upvalue 'min_max'\n\t/tmp/tmpuduxlxsh.lua:24: in function </tmp/tmpuduxlxsh.lua:22>\n\
    \t(...tail calls...)\n\t/tmp/tmpuduxlxsh.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function sort_list(lst)\n\
    \        if #lst == 0 then return {} end\n        local m = min(unpack(lst))\n\
    \        local M = max(unpack(lst))\n        local l, r = {}, {}\n        for\
    \ i, v in ipairs(lst) do\n            if v ~= m and v ~= M then\n            \
    \    if v < m then\n                    table.insert(l, v)\n                else\n\
    \                    table.insert(r, v)\n                end\n            end\n\
    \        end\n        return {m, M} + sort_list(l) + sort_list(r)\n    end\n \
    \   return sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5hd1_yij.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5hd1_yij.lua:9:\
    \ in function </tmp/tmp5hd1_yij.lua:7>\n\t(...tail calls...)\n\t/tmp/tmp5hd1_yij.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function strange_sort(lst, res)\n\
    \    if #lst == 0 then return res end\n    local m = min(unpack(lst))\n    local\
    \ M = max(unpack(lst))\n    local lst1 = {}\n    for i = 1, #lst do\n      if\
    \ lst[i] ~= m and lst[i] ~= M then\n        lst1[#lst1 + 1] = lst[i]\n      end\n\
    \    end\n    return strange_sort(lst1, {m, M, unpack(res)})\n  end\n  return\
    \ strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp21eo7_ks.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp21eo7_ks.lua:9:\
    \ in function </tmp/tmp21eo7_ks.lua:7>\n\t(...tail calls...)\n\t/tmp/tmp21eo7_ks.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local asc = true\n    while #lst > 0 do\n        if asc then\n          \
    \  table.insert(res, min)\n            min = math.min(unpack(lst))\n        else\n\
    \            table.insert(res, max)\n            max = math.max(unpack(lst))\n\
    \        end\n        table.remove(lst, table.find(lst, asc and min or max))\n\
    \        asc = not asc\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2m0mzyau.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp2m0mzyau.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2m0mzyau.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function get_min_max(lst)\n\
    \        local min, max = math.min, math.max\n        local min_val, max_val =\
    \ min(unpack(lst)), max(unpack(lst))\n        local min_idx, max_idx = 0, 0\n\
    \        for i, v in ipairs(lst) do\n            if v == min_val then min_idx\
    \ = i end\n            if v == max_val then max_idx = i end\n        end\n   \
    \     return min_val, max_val, min_idx, max_idx\n    end\n    local function remove_from_list(lst,\
    \ idx)\n        local new_lst = {}\n        for i, v in ipairs(lst) do\n     \
    \       if i ~= idx then table.insert(new_lst, v) end\n        end\n        return\
    \ new_lst\n    end\n    local function strange_sort(lst)\n        local new_lst\
    \ = {}\n        local min_val, max_val, min_idx, max_idx = get_min_max(lst)\n\
    \        table.insert(new_lst, min_val)\n        table.insert(new_lst, max_val)\n\
    \        lst = remove_from_list(lst, min_idx)\n        lst = remove_from_list(lst,\
    \ max_idx)\n        if #lst > 0 then\n            return strange_sort(lst)\n \
    \       else\n            return new_lst\n        end\n    end\n    return strange_sort(lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuxvthtmb.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpuxvthtmb.lua:9:\
    \ in upvalue 'get_min_max'\n\t/tmp/tmpuxvthtmb.lua:26: in function </tmp/tmpuxvthtmb.lua:24>\n\
    \t(...tail calls...)\n\t/tmp/tmpuxvthtmb.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n \
    \   local res = {min_val}\n    local i = 1\n    while i <= #lst do\n        if\
    \ lst[i] ~= min_val then\n            table.insert(res, lst[i])\n        end\n\
    \        i = i + 1\n    end\n    i = 1\n    while i <= #lst do\n        if lst[i]\
    \ ~= max_val then\n            table.insert(res, lst[i])\n        end\n      \
    \  i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj307mcql.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpj307mcql.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpj307mcql.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:indexOf(min), lst:indexOf(max)\n    local min_removed,\
    \ max_removed = false, false\n    local i = 1\n    while i <= #lst do\n      \
    \  if not min_removed and min_idx ~= max_idx then\n            res[i] = min\n\
    \            min_removed = true\n            i = i + 1\n        end\n        if\
    \ not max_removed then\n            res[i] = max\n            max_removed = true\n\
    \            i = i + 1\n        end\n        if min_removed and max_removed then\n\
    \            min, max = math.min(unpack(lst)), math.max(unpack(lst))\n       \
    \     min_idx, max_idx = lst:indexOf(min), lst:indexOf(max)\n            min_removed,\
    \ max_removed = false, false\n        end\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvr_f8cpe.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvr_f8cpe.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvr_f8cpe.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = table.index_of(lst, min)\n    local\
    \ max_index = table.index_of(lst, max)\n    table.remove(lst, min_index)\n   \
    \ table.remove(lst, max_index)\n    table.insert(sorted, min)\n    table.insert(sorted,\
    \ max)\n    while #lst > 0 do\n        min = math.min(unpack(lst))\n        max\
    \ = math.max(unpack(lst))\n        min_index = table.index_of(lst, min)\n    \
    \    max_index = table.index_of(lst, max)\n        table.remove(lst, min_index)\n\
    \        table.remove(lst, max_index)\n        table.insert(sorted, min)\n   \
    \     table.insert(sorted, max)\n    end\n    return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6_x_tc4.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpm6_x_tc4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpm6_x_tc4.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(lst)\n  \
    \      local min_val, max_val = min(lst), max(lst)\n        local min_idx, max_idx\
    \ = lst:find(min_val), lst:find(max_val)\n        lst:remove(min_idx)\n      \
    \  lst:remove(max_idx - 1)\n        return min_val, max_val\n    end\n    local\
    \ res = {}\n    while #lst > 0 do\n        local min_val, max_val = min_max(lst)\n\
    \        res[#res + 1] = min_val\n        res[#res + 1] = max_val\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9x34xhb0.lua:9:\
    \ attempt to call a nil value (method 'find')\nstack traceback:\n\t/tmp/tmp9x34xhb0.lua:9:\
    \ in local 'min_max'\n\t/tmp/tmp9x34xhb0.lua:16: in local 'candidate'\n\t/tmp/tmp9x34xhb0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            min = math.min(unpack(lst))\n        else\n  \
    \          res[i] = max\n            max = math.max(unpack(lst))\n        end\n\
    \        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpavsrgpl3.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpavsrgpl3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpavsrgpl3.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = index_of(lst, min)\n  local max_idx = index_of(lst, max)\n\
    \  table.remove(lst, min_idx)\n  table.remove(lst, max_idx)\n  table.insert(sorted,\
    \ min)\n  table.insert(sorted, max)\n  while #lst > 0 do\n    min = math.min(unpack(lst))\n\
    \    max = math.max(unpack(lst))\n    min_idx = index_of(lst, min)\n    max_idx\
    \ = index_of(lst, max)\n    table.remove(lst, min_idx)\n    table.remove(lst,\
    \ max_idx)\n    table.insert(sorted, min)\n    table.insert(sorted, max)\n  end\n\
    \  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphw1uve3i.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphw1uve3i.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphw1uve3i.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local lst_copy = table.copy(lst)\n  local result = {}\n  local min, max\n \
    \ while #lst_copy > 0 do\n    min = math.min(unpack(lst_copy))\n    max = math.max(unpack(lst_copy))\n\
    \    table.insert(result, min)\n    table.insert(result, max)\n    table.remove_value(lst_copy,\
    \ min)\n    table.remove_value(lst_copy, max)\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbsrhdfy3.lua:6:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpbsrhdfy3.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpbsrhdfy3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local new_lst = {}\n    local min = math.min(unpack(lst))\n    local max\
    \ = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx = #lst\n \
    \   for i = 1, #lst do\n        if i % 2 == 1 then\n            new_lst[i] = min\n\
    \            min_idx = min_idx + 1\n        else\n            new_lst[i] = max\n\
    \            max_idx = max_idx - 1\n        end\n    end\n    return new_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_hnyd8l3.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_hnyd8l3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_hnyd8l3.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, 1\n    local min_found, max_found = false,\
    \ false\n    local min_val, max_val = min, max\n    local min_val_index, max_val_index\
    \ = 1, 1\n    local min_val_found, max_val_found = false, false\n    local min_val_index_found,\
    \ max_val_index_found = false, false\n    local min_val_index_found_index, max_val_index_found_index\
    \ = 1, 1\n    local min_val_index_found_index_found, max_val_index_found_index_found\
    \ = false, false\n    local min_val_index_found_index_found_index, max_val_index_found_index_found_index\
    \ = 1, 1\n    local min_val_index_found_index_found_index_found, max_val_index_found_index_found_index_found\
    \ = false, false\n    local min_val_index_found_index_found_index_found_index,\
    \ max_val_index_found_index_found_index_found_index = 1, 1\n    local min_val_index_found_index_found_index_found_index_found,\
    \ max_val_index_found_index_found_index_found_index_found = false, false\n   \
    \ local min_val_index_found_index_found_index_found_index_found_index, max_val_index_found_index_found_index_found_index_found_index\
    \ = 1, 1\n    local min_val_index_found_index_found_index_found_index_found_index_found,\
    \ max_val_index_found_index_found_index_found_index_found_index_found = false,\
    \ false\n    local min_val_index_found_index_found_index_found_index_found_index_found_index,\
    \ max_val_index_found_index_found_index_found_index_found_index_found_index =\
    \ 1, 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjii0pca4.lua:39: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 0, 0\n    local min_found, max_found = false,\
    \ false\n    local i = 1\n    while i <= #lst do\n        if not min_found then\n\
    \            min_index = table.index_of(lst, min)\n            min_found = true\n\
    \            table.insert(result, min)\n            table.remove(lst, min_index)\n\
    \        elseif not max_found then\n            max_index = table.index_of(lst,\
    \ max)\n            max_found = true\n            table.insert(result, max)\n\
    \            table.remove(lst, max_index)\n        end\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        min_found, max_found = false, false\n       \
    \ i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpog1dvzq2.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpog1dvzq2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpog1dvzq2.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n \
    \   local res = {min_val}\n    local min_idx, max_idx = 1, 1\n    for i = 1, #lst\
    \ - 1 do\n        if i % 2 == 0 then\n            max_idx = find_idx(lst, max_val)\n\
    \            res[#res + 1] = max_val\n            max_val = math.max(unpack(lst,\
    \ 1, max_idx - 1))\n        else\n            min_idx = find_idx(lst, min_val)\n\
    \            res[#res + 1] = min_val\n            min_val = math.min(unpack(lst,\
    \ min_idx + 1))\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp34n2v_bf.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp34n2v_bf.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp34n2v_bf.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 0
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min = math.min\n  local max = math.max\n  local sort = table.sort\n \
    \ local len = #lst\n  local res = {}\n  local i = 1\n  local j = len\n  local\
    \ k = 1\n  local t = {}\n  for _, v in ipairs(lst) do\n    t[#t + 1] = v\n  end\n\
    \  sort(t)\n  while i <= j do\n    res[k] = t[i]\n    k = k + 1\n    i = i + 1\n\
    \    if i <= j then\n      res[k] = t[j]\n      k = k + 1\n      j = j - 1\n \
    \   end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        elseif lst[i] == max\
    \ then\n            max_idx = i\n        end\n    end\n    local min_idx_used\
    \ = false\n    local max_idx_used = false\n    for i = 1, #lst do\n        if\
    \ i % 2 == 1 then\n            if min_idx_used then\n                res[i] =\
    \ lst[max_idx]\n                max_idx_used = true\n            else\n      \
    \          res[i] = lst[min_idx]\n                min_idx_used = true\n      \
    \      end\n        else\n            if max_idx_used then\n                res[i]\
    \ = lst[min_idx]\n                min_idx_used = true\n            else\n    \
    \            res[i] = lst[max_idx]\n                max_idx_used = true\n    \
    \        end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjh9cmkd0.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjh9cmkd0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpjh9cmkd0.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: -1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(lst)\n  \
    \      local mn, mx = min(lst), max(lst)\n        local mn_i, mx_i = 0, 0\n  \
    \      for i, v in ipairs(lst) do\n            if v == mn then mn_i = i end\n\
    \            if v == mx then mx_i = i end\n        end\n        return mn_i, mx_i\n\
    \    end\n    local function remove_at(lst, i)\n        local res = {}\n     \
    \   for j, v in ipairs(lst) do\n            if j ~= i then table.insert(res, v)\
    \ end\n        end\n        return res\n    end\n    local res = {}\n    while\
    \ #lst > 0 do\n        local mn_i, mx_i = min_max(lst)\n        table.insert(res,\
    \ lst[mn_i])\n        table.insert(res, lst[mx_i])\n        lst = remove_at(lst,\
    \ mn_i)\n        lst = remove_at(lst, mx_i - 1)\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014717
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx, max_idx = 1, #lst\n    local min, max\
    \ = lst[min_idx], lst[max_idx]\n    local min_found, max_found = false, false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        if lst[i] < min then\n                min_idx = i\n                min\
    \ = lst[i]\n            end\n        end\n        if not max_found then\n    \
    \        if lst[i] > max then\n                max_idx = i\n                max\
    \ = lst[i]\n            end\n        end\n        if min_idx == i then\n     \
    \       min_found = true\n        end\n        if max_idx == i then\n        \
    \    max_found = true\n        end\n        if min_found and max_found then\n\
    \            res[#res + 1] = min\n            res[#res + 1] = max\n          \
    \  min_found, max_found = false, false\n            min_idx, max_idx = i + 1,\
    \ i + 1\n            min, max = lst[min_idx], lst[max_idx]\n        end\n    \
    \    i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2usvg9d0.lua:45:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmp2usvg9d0.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst, res)\n        if #lst == 0 then\n         \
    \   return res\n        end\n        local min = math.min(unpack(lst))\n     \
    \   local max = math.max(unpack(lst))\n        local min_idx = 0\n        local\
    \ max_idx = 0\n        for i, v in ipairs(lst) do\n            if v == min then\n\
    \                min_idx = i\n            end\n            if v == max then\n\
    \                max_idx = i\n            end\n        end\n        table.remove(lst,\
    \ min_idx)\n        table.remove(lst, max_idx - 1)\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n        return sort_list(lst, res)\n \
    \   end\n    return sort_list(lst, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj7fbu9ii.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpj7fbu9ii.lua:10:\
    \ in function </tmp/tmpj7fbu9ii.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpj7fbu9ii.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst)\n        local function sort_list_helper(lst,\
    \ acc)\n            if #lst == 0 then\n                return acc\n          \
    \  end\n            local min_val, min_idx = lst[1], 1\n            for i = 2,\
    \ #lst do\n                if lst[i] < min_val then\n                    min_val,\
    \ min_idx = lst[i], i\n                end\n            end\n            table.remove(lst,\
    \ min_idx)\n            table.insert(acc, min_val)\n            return sort_list_helper(lst,\
    \ acc)\n        end\n        return sort_list_helper(lst, {})\n    end\n    local\
    \ function reverse_list(lst)\n        local acc = {}\n        for i = #lst, 1,\
    \ -1 do\n            table.insert(acc, lst[i])\n        end\n        return acc\n\
    \    end\n    local function strange_sort_list_helper(lst, acc)\n        if #lst\
    \ == 0 then\n            return acc\n        end\n        local min_val, min_idx\
    \ = lst[1], 1\n        for i = 2, #lst do\n            if lst[i] < min_val then\n\
    \                min_val, min_idx = lst[i], i\n            end\n        end\n\
    \        table.remove(lst, min_idx)\n        table.insert(acc, min_val)\n    \
    \    local max_val, max_idx = lst[1], 1\n        for i = 2, #lst do\n        \
    \    if lst[i] > max_val then\n                max_val, max_idx = lst[i], i\n\
    \            end\n        end\n        table.remove(lst, max_idx)\n        table.insert(acc,\
    \ max_val)\n        return strange_sort_list_helper(lst, acc)\n    end\n    local\
    \ sorted_lst = sort_list(lst)\n    local reversed_lst = reverse_list(sorted_lst)\n\
    \    return strange_sort_list_helper(reversed_lst,\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp31asx2q1.lua:55: '')'' expected (to close ''('' at line 54)
    near ''=''

    '
  stdout: ''
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local sign = 1\n    for i = 1, #lst do\n        if\
    \ sign == 1 then\n            table.insert(sorted, max)\n            max = math.max(unpack(lst))\n\
    \            sign = -1\n        else\n            table.insert(sorted, min)\n\
    \            min = math.min(unpack(lst))\n            sign = 1\n        end\n\
    \    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd6y9j_h0.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpd6y9j_h0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpd6y9j_h0.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(lst)\n  \
    \      local min_val, max_val = min(lst), max(lst)\n        local min_idx, max_idx\
    \ = lst:find(min_val), lst:find(max_val)\n        lst:remove(min_idx)\n      \
    \  lst:remove(max_idx - 1)\n        return min_val, max_val\n    end\n    local\
    \ res = {}\n    while #lst > 0 do\n        local min_val, max_val = min_max(lst)\n\
    \        res:append(min_val)\n        res:append(max_val)\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3lrxro_m.lua:9:\
    \ attempt to call a nil value (method 'find')\nstack traceback:\n\t/tmp/tmp3lrxro_m.lua:9:\
    \ in local 'min_max'\n\t/tmp/tmp3lrxro_m.lua:16: in local 'candidate'\n\t/tmp/tmp3lrxro_m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function strange_sort(lst, res)\n        if #lst == 0 then\n      \
    \      return res\n        end\n        local min = math.min(unpack(lst))\n  \
    \      local max = math.max(unpack(lst))\n        local min_idx = 0\n        local\
    \ max_idx = 0\n        for i, v in ipairs(lst) do\n            if v == min then\n\
    \                min_idx = i\n            end\n            if v == max then\n\
    \                max_idx = i\n            end\n        end\n        table.remove(lst,\
    \ min_idx)\n        table.remove(lst, max_idx - 1)\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n        return strange_sort(lst, res)\n\
    \    end\n    return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm37rqde_.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpm37rqde_.lua:10:\
    \ in function </tmp/tmpm37rqde_.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpm37rqde_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n \
    \   local res = {min_val}\n    local min_idx, max_idx = 1, 1\n    for i = 1, #lst\
    \ - 1 do\n        if i % 2 == 0 then\n            for j = 1, #lst do\n       \
    \         if lst[j] > res[i] and lst[j] < max_val then\n                    max_val\
    \ = lst[j]\n                    max_idx = j\n                end\n           \
    \ end\n            res[i + 1] = max_val\n            lst[max_idx] = min_val\n\
    \        else\n            for j = 1, #lst do\n                if lst[j] < res[i]\
    \ and lst[j] > min_val then\n                    min_val = lst[j]\n          \
    \          min_idx = j\n                end\n            end\n            res[i\
    \ + 1] = min_val\n            lst[min_idx] = max_val\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqnoxoiua.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqnoxoiua.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpqnoxoiua.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n \
    \   local res = {min_val}\n    local remaining = {}\n    for _, v in ipairs(lst)\
    \ do\n        if v ~= min_val then\n            table.insert(remaining, v)\n \
    \       end\n    end\n    while #remaining > 0 do\n        local min_val, max_val\
    \ = math.min(unpack(remaining)), math.max(unpack(remaining))\n        table.insert(res,\
    \ max_val)\n        local new_remaining = {}\n        for _, v in ipairs(remaining)\
    \ do\n            if v ~= max_val then\n                table.insert(new_remaining,\
    \ v)\n            end\n        end\n        remaining = new_remaining\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfkz5fq9_.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpfkz5fq9_.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpfkz5fq9_.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        if i % 2\
    \ == 1 then\n            res[i] = min\n            min = math.min(unpack(lst))\n\
    \        else\n            res[i] = max\n            max = math.max(unpack(lst))\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf64a9433.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpf64a9433.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpf64a9433.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local lst_len = #lst\n    local sorted_lst = {}\n    local min_idx, max_idx\
    \ = 1, lst_len\n    local min_val, max_val = lst[min_idx], lst[max_idx]\n    local\
    \ min_found, max_found = false, false\n    for i = 1, lst_len do\n        if not\
    \ min_found then\n            for j = min_idx, lst_len do\n                if\
    \ lst[j] < min_val then\n                    min_val = lst[j]\n              \
    \      min_idx = j\n                end\n            end\n            min_found\
    \ = true\n            table.insert(sorted_lst, min_val)\n        elseif not max_found\
    \ then\n            for j = max_idx, 1, -1 do\n                if lst[j] > max_val\
    \ then\n                    max_val = lst[j]\n                    max_idx = j\n\
    \                end\n            end\n            max_found = true\n        \
    \    table.insert(sorted_lst, max_val)\n        end\n        min_found, max_found\
    \ = false, false\n        min_idx, max_idx = min_idx + 1, max_idx - 1\n      \
    \  min_val, max_val = lst[min_idx], lst[max_idx]\n    end\n    return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfb7tdq1.lua:41:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmprfb7tdq1.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        if i % 2\
    \ == 1 then\n            table.insert(res, min)\n            min = math.min(unpack(lst))\n\
    \        else\n            table.insert(res, max)\n            max = math.max(unpack(lst))\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_iitzuf5.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_iitzuf5.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp_iitzuf5.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_found\
    \ = false\n    local max_found = false\n    local i = 1\n    while i <= #lst do\n\
    \        if not min_found then\n            if min_val < max_val then\n      \
    \          res[i] = min_val\n                min_found = true\n              \
    \  i = i + 1\n            else\n                min_idx = min_idx + 1\n      \
    \          min_val = lst[min_idx]\n            end\n        end\n        if not\
    \ max_found then\n            if max_val > min_val then\n                res[i]\
    \ = max_val\n                max_found = true\n                i = i + 1\n   \
    \         else\n                max_idx = max_idx - 1\n                max_val\
    \ = lst[max_idx]\n            end\n        end\n        if min_found and max_found\
    \ then\n            min_found = false\n            max_found = false\n       \
    \     min_idx = min_idx + 1\n            max_idx = max_idx - 1\n            min_val\
    \ = lst[min_idx]\n            max_val = lst[max_idx]\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2e9_5qpd.lua:26:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp2e9_5qpd.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp2e9_5qpd.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_idx, max_idx = 1, #lst\n    local result = {}\n    local is_min\
    \ = true\n    while min_idx <= max_idx do\n        if is_min then\n          \
    \  table.insert(result, lst[min_idx])\n            min_idx = min_idx + 1\n   \
    \     else\n            table.insert(result, lst[max_idx])\n            max_idx\
    \ = max_idx - 1\n        end\n        is_min = not is_min\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9x92got.lua:28:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpj9x92got.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function strange_sort(lst,\
    \ res)\n        if #lst == 0 then return res end\n        local m = min(unpack(lst))\n\
    \        table.insert(res, m)\n        local mx = max(unpack(lst))\n        table.insert(res,\
    \ mx)\n        for i = #lst, 1, -1 do\n            if lst[i] == m or lst[i] ==\
    \ mx then\n                table.remove(lst, i)\n            end\n        end\n\
    \        return strange_sort(lst, res)\n    end\n    return strange_sort(lst,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr9coao5v.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpr9coao5v.lua:9:\
    \ in function </tmp/tmpr9coao5v.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpr9coao5v.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        if i % 2\
    \ == 1 then\n            res[i] = min\n            min = math.min(unpack(lst))\n\
    \        else\n            res[i] = max\n            max = math.max(unpack(lst))\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf64a9433.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpf64a9433.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpf64a9433.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min = math.min\n  local max = math.max\n  local sort = table.sort\n \
    \ local res = {}\n  local function get_min_max(lst)\n    local min_val = min(unpack(lst))\n\
    \    local max_val = max(unpack(lst))\n    return min_val, max_val\n  end\n  local\
    \ function get_min_max_index(lst, min_val, max_val)\n    local min_index = 0\n\
    \    local max_index = 0\n    for i, v in ipairs(lst) do\n      if v == min_val\
    \ then\n        min_index = i\n      elseif v == max_val then\n        max_index\
    \ = i\n      end\n    end\n    return min_index, max_index\n  end\n  local function\
    \ remove_min_max(lst, min_index, max_index)\n    local new_lst = {}\n    for i,\
    \ v in ipairs(lst) do\n      if i ~= min_index and i ~= max_index then\n     \
    \   new_lst[#new_lst + 1] = v\n      end\n    end\n    return new_lst\n  end\n\
    \  local function add_min_max(res, min_val, max_val)\n    res[#res + 1] = min_val\n\
    \    res[#res + 1] = max_val\n  end\n  local function strange_sort(lst)\n    if\
    \ #lst == 0 then\n      return\n    end\n    local min_val, max_val = get_min_max(lst)\n\
    \    local min_index, max_index = get_min_max_index(lst, min_val, max_val)\n \
    \   add_min_max(res, min_val, max_val)\n    local new_lst = remove_min_max(lst,\
    \ min_index, max_index)\n    strange_sort(new_lst)\n  end\n  strange_sort(lst)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr339gbb3.lua:11:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpr339gbb3.lua:11:\
    \ in upvalue 'get_min_max'\n\t/tmp/tmpr339gbb3.lua:44: in local 'strange_sort'\n\
    \t/tmp/tmpr339gbb3.lua:50: in local 'candidate'\n\t/tmp/tmpr339gbb3.lua:57: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = 0\n    local max_index = 0\n  \
    \  local min_found = false\n    local max_found = false\n    local i = 1\n   \
    \ while i <= #lst do\n        if not min_found then\n            if lst[i] ==\
    \ min then\n                min_index = i\n                min_found = true\n\
    \            end\n        end\n        if not max_found then\n            if lst[i]\
    \ == max then\n                max_index = i\n                max_found = true\n\
    \            end\n        end\n        if min_found and max_found then\n     \
    \       break\n        end\n        i = i + 1\n    end\n    local i = 1\n    while\
    \ i <= #lst do\n        if i % 2 == 1 then\n            table.insert(sorted, lst[min_index])\n\
    \            min_index = min_index + 1\n        else\n            table.insert(sorted,\
    \ lst[max_index])\n            max_index = max_index - 1\n        end\n      \
    \  i = i + 1\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppvwk8dg7.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmppvwk8dg7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppvwk8dg7.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function min_max(lst)\n    local\
    \ min_val, max_val = min(lst), max(lst)\n    local min_idx, max_idx = 0, 0\n \
    \   for i, v in ipairs(lst) do\n      if v == min_val then min_idx = i end\n \
    \     if v == max_val then max_idx = i end\n    end\n    return min_val, max_val,\
    \ min_idx, max_idx\n  end\n  local function remove_idx(lst, idx)\n    local new_lst\
    \ = {}\n    for i, v in ipairs(lst) do\n      if i ~= idx then new_lst[#new_lst\
    \ + 1] = v end\n    end\n    return new_lst\n  end\n  local function strange_sort(lst)\n\
    \    if #lst == 0 then return {} end\n    local min_val, max_val, min_idx, max_idx\
    \ = min_max(lst)\n    local new_lst = {min_val, max_val}\n    local new_lst_2\
    \ = remove_idx(remove_idx(lst, min_idx), max_idx)\n    return strange_sort(new_lst_2)\n\
    \  end\n  return strange_sort(lst)\nend\nassert(strange_sort_list({1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9}) == {1, 9, 2, 8, 3, 7, 4, 6, 5})\nassert(strange_sort_list({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10}) == {1, 10, 2, 9, 3, 8, 4, 7, 5, 6})\nassert(strange_sort_list({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}) == {1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6})\nassert(strange_sort_list({1,\
    \ 2, 3,\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpypupq416.lua:38: ''}'' expected (to close ''{'' at line 35)
    near ''function''

    '
  stdout: ''
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max, res = math.min(unpack(lst)), math.max(unpack(lst)), {}\n\
    \    for i = 1, #lst do\n        if i % 2 == 1 then\n            table.insert(res,\
    \ min)\n            min = min + 1\n        else\n            table.insert(res,\
    \ max)\n            max = max - 1\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe1lqji5f.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpe1lqji5f.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpe1lqji5f.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n    local\
    \ i = 1\n    while #res < #lst do\n        if i % 2 == 1 then\n            res[#res\
    \ + 1] = min\n            lst[min_idx] = nil\n            min, min_idx = math.min(unpack(lst)),\
    \ lst:index_of(min)\n        else\n            res[#res + 1] = max\n         \
    \   lst[max_idx] = nil\n            max, max_idx = math.max(unpack(lst)), lst:index_of(max)\n\
    \        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6pml__vu.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp6pml__vu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6pml__vu.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function strange_sort(lst, res)\n        if #lst == 0 then\n      \
    \      return res\n        end\n        local min = math.min(unpack(lst))\n  \
    \      local max = math.max(unpack(lst))\n        local min_idx = table.index_of(lst,\
    \ min)\n        local max_idx = table.index_of(lst, max)\n        table.remove(lst,\
    \ min_idx)\n        table.remove(lst, max_idx - 1)\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n        return strange_sort(lst, res)\n\
    \    end\n    return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpabb_jd3c.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpabb_jd3c.lua:10:\
    \ in function </tmp/tmpabb_jd3c.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpabb_jd3c.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function helper(lst, res)\n        if #lst == 0 then\n            return\
    \ res\n        end\n        local min = math.min(unpack(lst))\n        local max\
    \ = math.max(unpack(lst))\n        local min_idx = table.index_of(lst, min)\n\
    \        local max_idx = table.index_of(lst, max)\n        table.remove(lst, min_idx)\n\
    \        table.remove(lst, max_idx - 1)\n        table.insert(res, min)\n    \
    \    table.insert(res, max)\n        return helper(lst, res)\n    end\n    return\
    \ helper(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpclkidol7.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpclkidol7.lua:10:\
    \ in function </tmp/tmpclkidol7.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpclkidol7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_idx, max_idx = 1, #lst\n    local res = {}\n    local i = 1\n \
    \   while i <= #lst do\n        if i % 2 == 1 then\n            res[i] = lst[min_idx]\n\
    \            min_idx = min_idx + 1\n        else\n            res[i] = lst[max_idx]\n\
    \            max_idx = max_idx - 1\n        end\n        i = i + 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicmo9yxe.lua:28:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpicmo9yxe.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_lst, max_lst = {}, {}\n  for i = 1, #lst do\n    if i ~= min_idx\
    \ and i ~= max_idx then\n      table.insert(min_lst, lst[i])\n      table.insert(max_lst,\
    \ lst[i])\n    end\n  end\n  table.sort(min_lst)\n  table.sort(max_lst, function(a,\
    \ b) return a > b end)\n  for i = 1, #lst do\n    if i % 2 == 1 then\n      table.insert(res,\
    \ min)\n      min = table.remove(min_lst, 1)\n    else\n      table.insert(res,\
    \ max)\n      max = table.remove(max_lst, 1)\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvgv4r6g0.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvgv4r6g0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvgv4r6g0.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(lst)\n  \
    \      local min_val, max_val = min(unpack(lst)), max(unpack(lst))\n        local\
    \ min_idx, max_idx = 0, 0\n        for i, v in ipairs(lst) do\n            if\
    \ v == min_val then min_idx = i end\n            if v == max_val then max_idx\
    \ = i end\n        end\n        return min_val, max_val, min_idx, max_idx\n  \
    \  end\n    local function remove_idx(lst, idx)\n        local new_lst = {}\n\
    \        for i, v in ipairs(lst) do\n            if i ~= idx then table.insert(new_lst,\
    \ v) end\n        end\n        return new_lst\n    end\n    local new_lst = {}\n\
    \    while #lst > 0 do\n        local min_val, max_val, min_idx, max_idx = min_max(lst)\n\
    \        table.insert(new_lst, min_val)\n        table.insert(new_lst, max_val)\n\
    \        lst = remove_idx(lst, min_idx)\n        lst = remove_idx(lst, max_idx)\n\
    \    end\n    return new_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjw15_6a2.lua:8:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjw15_6a2.lua:8:\
    \ in local 'min_max'\n\t/tmp/tmpjw15_6a2.lua:25: in local 'candidate'\n\t/tmp/tmpjw15_6a2.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(lst)\n  \
    \      local min_val, max_val = min(unpack(lst)), max(unpack(lst))\n        local\
    \ min_idx, max_idx = 0, 0\n        for i, v in ipairs(lst) do\n            if\
    \ v == min_val then min_idx = i end\n            if v == max_val then max_idx\
    \ = i end\n        end\n        return min_val, max_val, min_idx, max_idx\n  \
    \  end\n    local function remove_elem(lst, idx)\n        local new_lst = {}\n\
    \        for i, v in ipairs(lst) do\n            if i ~= idx then table.insert(new_lst,\
    \ v) end\n        end\n        return new_lst\n    end\n    local function strange_sort(lst)\n\
    \        if #lst == 0 then return {} end\n        local min_val, max_val, min_idx,\
    \ max_idx = min_max(lst)\n        local new_lst = {min_val, max_val}\n       \
    \ local new_lst_2 = remove_elem(lst, min_idx)\n        new_lst_2 = remove_elem(new_lst_2,\
    \ max_idx - 1)\n        return new_lst + strange_sort(new_lst_2)\n    end\n  \
    \  return strange_sort(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqi3486be.lua:8:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqi3486be.lua:8:\
    \ in upvalue 'min_max'\n\t/tmp/tmpqi3486be.lua:25: in function </tmp/tmpqi3486be.lua:23>\n\
    \t(...tail calls...)\n\t/tmp/tmpqi3486be.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local function min_max(lst)\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    return min, max\n  end\n  local function remove_min_max(lst, min, max)\n\
    \    local new_lst = {}\n    for i = 1, #lst do\n      if lst[i] ~= min and lst[i]\
    \ ~= max then\n        table.insert(new_lst, lst[i])\n      end\n    end\n   \
    \ return new_lst\n  end\n  local function strange_sort(lst)\n    local new_lst\
    \ = {}\n    while #lst > 0 do\n      local min, max = min_max(lst)\n      table.insert(new_lst,\
    \ min)\n      table.insert(new_lst, max)\n      lst = remove_min_max(lst, min,\
    \ max)\n    end\n    return new_lst\n  end\n  return strange_sort(lst)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4r5bivnm.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4r5bivnm.lua:7:\
    \ in upvalue 'min_max'\n\t/tmp/tmp4r5bivnm.lua:22: in function </tmp/tmp4r5bivnm.lua:19>\n\
    \t(...tail calls...)\n\t/tmp/tmp4r5bivnm.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function strange_sort(lst,\
    \ res)\n        if #lst == 0 then return res end\n        local m = min(unpack(lst))\n\
    \        local M = max(unpack(lst))\n        table.insert(res, m)\n        table.insert(res,\
    \ M)\n        table.remove(lst, table.index_of(lst, m))\n        table.remove(lst,\
    \ table.index_of(lst, M))\n        return strange_sort(lst, res)\n    end\n  \
    \  return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxkm0fe6l.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpxkm0fe6l.lua:9:\
    \ in function </tmp/tmpxkm0fe6l.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpxkm0fe6l.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function aux(lst, acc)\n    if\
    \ #lst == 0 then return acc end\n    local m = min(unpack(lst))\n    local M =\
    \ max(unpack(lst))\n    local lst1 = {}\n    for i = 1, #lst do\n      if lst[i]\
    \ ~= m and lst[i] ~= M then\n        lst1[#lst1 + 1] = lst[i]\n      end\n   \
    \ end\n    return aux(lst1, {m, M} + acc)\n  end\n  return aux(lst, {})\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdbbcad_o.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdbbcad_o.lua:9:\
    \ in function </tmp/tmpdbbcad_o.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpdbbcad_o.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = 1\n    local max_index = 1\n  \
    \  local min_found = false\n    local max_found = false\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_index = i\n            min_found\
    \ = true\n        end\n        if v == max then\n            max_index = i\n \
    \           max_found = true\n        end\n        if min_found and max_found\
    \ then\n            break\n        end\n    end\n    local min_removed = false\n\
    \    local max_removed = false\n    local min_removed_index = 0\n    local max_removed_index\
    \ = 0\n    for i, v in ipairs(lst) do\n        if i == min_index and not min_removed\
    \ then\n            min_removed = true\n            min_removed_index = i\n  \
    \      elseif i == max_index and not max_removed then\n            max_removed\
    \ = true\n            max_removed_index = i\n        else\n            table.insert(sorted,\
    \ v)\n        end\n    end\n    local min_removed_index = 0\n    local max_removed_index\
    \ = 0\n    local min_removed = false\n    local max_removed = false\n    for i,\
    \ v in ipairs(lst) do\n        if i == min_index and not min_removed then\n  \
    \          min_removed = true\n            min_removed_index = i\n        elseif\
    \ i == max_index and not max_removed then\n            max_removed = true\n  \
    \          max_removed_index = i\n        else\n            table.insert(sorted,\
    \ v)\n        end\n    end\n    local min_removed_index = 0\n    local max_removed_index\
    \ = 0\n    local min_removed = false\n    local max_removed = false\n    for i,\
    \ v in ipairs(lst) do\n        if i == min_index and not min_removed then\n  \
    \          min_removed = true\n            min\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp08u_kr6_.lua:64: syntax error near ''lu''

    '
  stdout: ''
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local res = {}\n    local\
    \ is_min = true\n    while min_idx <= max_idx do\n        if is_min then\n   \
    \         table.insert(res, lst[min_idx])\n            min_idx = min_idx + 1\n\
    \        else\n            table.insert(res, lst[max_idx])\n            max_idx\
    \ = max_idx - 1\n        end\n        is_min = not is_min\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tmob4gu.lua:29:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmp7tmob4gu.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while min <= max do\n        res[i]\
    \ = min\n        res[i + 1] = max\n        i = i + 2\n        min = min + 1\n\
    \        max = max - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyiewkpqc.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpyiewkpqc.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpyiewkpqc.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function strange_sort(lst,\
    \ res)\n        if #lst == 0 then return res end\n        local mn, mx = min(unpack(lst)),\
    \ max(unpack(lst))\n        local mn_i, mx_i = 0, 0\n        for i, v in ipairs(lst)\
    \ do\n            if v == mn then mn_i = i end\n            if v == mx then mx_i\
    \ = i end\n        end\n        table.remove(lst, mn_i)\n        table.remove(lst,\
    \ mx_i - 1)\n        return strange_sort(lst, {mx, mn, unpack(res)})\n    end\n\
    \    return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1qaypub_.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp1qaypub_.lua:9:\
    \ in function </tmp/tmp1qaypub_.lua:7>\n\t(...tail calls...)\n\t/tmp/tmp1qaypub_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n    lst:remove(min_idx)\n\
    \    lst:remove(max_idx)\n    while #lst > 0 do\n        res:append(min)\n   \
    \     res:append(max)\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \        min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n        lst:remove(min_idx)\n\
    \        lst:remove(max_idx)\n    end\n    res:append(min)\n    res:append(max)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1o7fnrjs.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp1o7fnrjs.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1o7fnrjs.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n \
    \   local min_idx, max_idx = 0, 0\n    local res = {}\n    while min_idx < #lst\
    \ and max_idx < #lst do\n        res[#res + 1] = min_val\n        res[#res + 1]\
    \ = max_val\n        min_idx = min_idx + 1\n        max_idx = max_idx + 1\n  \
    \      min_val = math.min(unpack(lst, min_idx))\n        max_val = math.max(unpack(lst,\
    \ max_idx))\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9mihkcd7.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9mihkcd7.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp9mihkcd7.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function remove(lst, val)\n\
    \        for i = 1, #lst do\n            if lst[i] == val then\n             \
    \   table.remove(lst, i)\n                return\n            end\n        end\n\
    \    end\n    local res = {}\n    while #lst > 0 do\n        table.insert(res,\
    \ min(unpack(lst)))\n        remove(lst, res[#res])\n        if #lst > 0 then\n\
    \            table.insert(res, max(unpack(lst)))\n            remove(lst, res[#res])\n\
    \        end\n    end\n    return res\nend\nassert(strange_sort_list({1, 2, 3,\
    \ 4, 5}) == {1, 5, 2, 4, 3})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6}) ==\
    \ {1, 6, 2, 5, 3, 4})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6, 7}) == {1,\
    \ 7, 2, 6, 3, 5, 4})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6, 7, 8}) == {1,\
    \ 8, 2, 7, 3, 6, 4, 5})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6, 7, 8, 9})\
    \ == {1, 9, 2, 8, 3, 7, 4, 6, 5})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10}) == {1, 10, 2, 9, 3, 8, 4, 7, 5, 6})\nassert(strange_sort_list({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}) == {1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6})\nassert(strange_sort_list({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}) == {1, 12, 2,\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6r425wep.lua:36: ''}'' expected (to close ''{'' at line 33)
    near ''function''

    '
  stdout: ''
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local min = math.min(unpack(lst))\n    local max =\
    \ math.max(unpack(lst))\n    local min_index = 1\n    local max_index = #lst\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     result[i] = min\n            min_index = min_index + 1\n            min\
    \ = math.min(unpack(lst, min_index))\n        else\n            result[i] = max\n\
    \            max_index = max_index - 1\n            max = math.max(unpack(lst,\
    \ 1, max_index))\n        end\n        i = i + 1\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv5aldqfc.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpv5aldqfc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpv5aldqfc.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function find_min_max(lst)\n \
    \   local min, max = lst[1], lst[1]\n    for i = 2, #lst do\n      if lst[i] <\
    \ min then min = lst[i]\n      elseif lst[i] > max then max = lst[i] end\n   \
    \ end\n    return min, max\n  end\n  local function remove_min_max(lst, min, max)\n\
    \    local res = {}\n    for i = 1, #lst do\n      if lst[i] ~= min and lst[i]\
    \ ~= max then\n        res[#res + 1] = lst[i]\n      end\n    end\n    return\
    \ res\n  end\n  local res = {}\n  while #lst > 0 do\n    local mn, mx = find_min_max(lst)\n\
    \    res[#res + 1] = mn\n    res[#res + 1] = mx\n    lst = remove_min_max(lst,\
    \ mn, mx)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvoxy88k.lua:38:\
    \ expected: {5, 9, 6, 8, 7}\nactual: {5, 9, 6, 8, 7, 7}\nstack traceback:\n\t\
    /tmp/tmplvoxy88k.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local i = 1\n  while #res < #lst do\n    if i % 2 == 1 then\n      res[#res\
    \ + 1] = min\n      min = math.min(unpack(lst))\n    else\n      res[#res + 1]\
    \ = max\n      max = math.max(unpack(lst))\n    end\n    i = i + 1\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxf_aivx7.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpxf_aivx7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxf_aivx7.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local i = 1\n    while i\
    \ <= #lst do\n        if i % 2 == 1 then\n            res[i] = min\n         \
    \   min_idx = min_idx + 1\n            min = math.min(unpack(lst, min_idx))\n\
    \        else\n            res[i] = max\n            max_idx = max_idx - 1\n \
    \           max = math.max(unpack(lst, 1, max_idx))\n        end\n        i =\
    \ i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptzyiu4ly.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmptzyiu4ly.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmptzyiu4ly.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function strange_sort(lst,\
    \ res)\n        if #lst == 0 then return res end\n        local mn, mx = min(unpack(lst)),\
    \ max(unpack(lst))\n        local mn_i, mx_i = 0, 0\n        for i, v in ipairs(lst)\
    \ do\n            if v == mn then mn_i = i end\n            if v == mx then mx_i\
    \ = i end\n        end\n        table.remove(lst, mn_i)\n        table.remove(lst,\
    \ mx_i - 1)\n        table.insert(res, mn)\n        table.insert(res, mx)\n  \
    \      return strange_sort(lst, res)\n    end\n    return strange_sort(lst, {})\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmr1fbwr8.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmr1fbwr8.lua:9:\
    \ in function </tmp/tmpmr1fbwr8.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpmr1fbwr8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: -1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function min_max(lst)\n    local\
    \ min_val, max_val = min(lst), max(lst)\n    local min_idx, max_idx = 0, 0\n \
    \   for i = 1, #lst do\n      if lst[i] == min_val then min_idx = i end\n    \
    \  if lst[i] == max_val then max_idx = i end\n    end\n    return min_val, max_val,\
    \ min_idx, max_idx\n  end\n  local function remove_idx(lst, idx)\n    local new_lst\
    \ = {}\n    for i = 1, #lst do\n      if i ~= idx then table.insert(new_lst, lst[i])\
    \ end\n    end\n    return new_lst\n  end\n  local function strange_sort(lst)\n\
    \    local new_lst = {}\n    while #lst > 0 do\n      local min_val, max_val,\
    \ min_idx, max_idx = min_max(lst)\n      table.insert(new_lst, min_val)\n    \
    \  table.insert(new_lst, max_val)\n      lst = remove_idx(lst, min_idx)\n    \
    \  lst = remove_idx(lst, max_idx)\n    end\n    return new_lst\n  end\n  return\
    \ strange_sort(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014717
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function strange_sort(lst, acc)\n\
    \    if #lst == 0 then return acc end\n    local m = min(unpack(lst))\n    local\
    \ M = max(unpack(lst))\n    local lst1 = {}\n    for i, v in ipairs(lst) do\n\
    \      if v ~= m and v ~= M then\n        lst1[#lst1 + 1] = v\n      end\n   \
    \ end\n    return strange_sort(lst1, {m, M} + acc)\n  end\n  return strange_sort(lst,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzz9ttqzj.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzz9ttqzj.lua:9:\
    \ in function </tmp/tmpzz9ttqzj.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpzz9ttqzj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014711
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, #lst\n    local i = 1\n    while i <= #lst do\n\
    \        if i % 2 == 1 then\n            sorted[i] = min\n            min_idx\
    \ = min_idx + 1\n            min = lst[min_idx]\n        else\n            sorted[i]\
    \ = max\n            max_idx = max_idx - 1\n            max = lst[max_idx]\n \
    \       end\n        i = i + 1\n    end\n    return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwpncb653.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpwpncb653.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwpncb653.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n  lst:remove(min_idx)\n\
    \  lst:remove(max_idx - 1)\n  while #lst > 0 do\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n\
    \    table.insert(res, min)\n    table.insert(res, max)\n    lst:remove(min_idx)\n\
    \    lst:remove(max_idx - 1)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfe71h6_c.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpfe71h6_c.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfe71h6_c.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst, res)\n        if #lst == 0 then\n         \
    \   return res\n        end\n        local min = math.min(unpack(lst))\n     \
    \   local max = math.max(unpack(lst))\n        local min_idx = table.index_of(lst,\
    \ min)\n        local max_idx = table.index_of(lst, max)\n        table.remove(lst,\
    \ min_idx)\n        table.remove(lst, max_idx)\n        table.insert(res, min)\n\
    \        table.insert(res, max)\n        return sort_list(lst, res)\n    end\n\
    \    return sort_list(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvaoohze.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpbvaoohze.lua:10:\
    \ in function </tmp/tmpbvaoohze.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpbvaoohze.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = 1\n  local max_index = 1\n  for i, v in ipairs(lst) do\n\
    \    if v == min then\n      min_index = i\n    elseif v == max then\n      max_index\
    \ = i\n    end\n  end\n  local min_max = {min, max}\n  local min_max_index = {min_index,\
    \ max_index}\n  local min_max_index_sorted = {}\n  if min_index < max_index then\n\
    \    min_max_index_sorted = {min_index, max_index}\n  else\n    min_max_index_sorted\
    \ = {max_index, min_index}\n  end\n  local index = 1\n  for i, v in ipairs(min_max_index_sorted)\
    \ do\n    sorted[index] = min_max[v]\n    index = index + 1\n  end\n  local remaining\
    \ = {}\n  for i, v in ipairs(lst) do\n    if v ~= min and v ~= max then\n    \
    \  table.insert(remaining, v)\n    end\n  end\n  if #remaining > 0 then\n    local\
    \ remaining_sorted = strange_sort_list(remaining)\n    for i, v in ipairs(remaining_sorted)\
    \ do\n      sorted[index] = v\n      index = index + 1\n    end\n  end\n  return\
    \ sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_xbl11t.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmps_xbl11t.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmps_xbl11t.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function min_max(lst)\n    local\
    \ mn, mx = min(unpack(lst)), max(unpack(lst))\n    local mn_i, mx_i = 0, 0\n \
    \   for i, v in ipairs(lst) do\n      if v == mn then mn_i = i end\n      if v\
    \ == mx then mx_i = i end\n    end\n    return mn, mn_i, mx, mx_i\n  end\n  local\
    \ function remove(lst, i)\n    local res = {}\n    for j, v in ipairs(lst) do\n\
    \      if j ~= i then res[#res + 1] = v end\n    end\n    return res\n  end\n\
    \  local res = {}\n  while #lst > 0 do\n    local mn, mn_i, mx, mx_i = min_max(lst)\n\
    \    res[#res + 1] = mn\n    lst = remove(lst, mn_i)\n    if #lst > 0 then\n \
    \     res[#res + 1] = mx\n      lst = remove(lst, mx_i)\n    end\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa812gsec.lua:8:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpa812gsec.lua:8:\
    \ in local 'min_max'\n\t/tmp/tmpa812gsec.lua:25: in local 'candidate'\n\t/tmp/tmpa812gsec.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n \
    \   local res = {min_val}\n    local idx = 2\n    local is_min = false\n    while\
    \ idx <= #lst do\n        if is_min then\n            res[idx] = math.min(unpack(lst))\n\
    \            is_min = false\n        else\n            res[idx] = math.max(unpack(lst))\n\
    \            is_min = true\n        end\n        for i, v in ipairs(lst) do\n\
    \            if v == res[idx] then\n                table.remove(lst, i)\n   \
    \             break\n            end\n        end\n        idx = idx + 1\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpby8m1j_3.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpby8m1j_3.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpby8m1j_3.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    while #lst > 0 do\n        if i % 2 == 1 then\n        \
    \    table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n            min = math.min(unpack(lst))\n        else\n            table.insert(res,\
    \ max)\n            table.remove(lst, table.index_of(lst, max))\n            max\
    \ = math.max(unpack(lst))\n        end\n        i = i + 1\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp29stnmp3.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp29stnmp3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp29stnmp3.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while min <= max do\n        res[i]\
    \ = min\n        res[i + 1] = max\n        i = i + 2\n        min = min + 1\n\
    \        max = max - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyiewkpqc.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpyiewkpqc.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpyiewkpqc.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst, res)\n        if #lst == 0 then\n         \
    \   return res\n        end\n        local min = math.min(unpack(lst))\n     \
    \   local max = math.max(unpack(lst))\n        local min_idx = table.index_of(lst,\
    \ min)\n        local max_idx = table.index_of(lst, max)\n        table.remove(lst,\
    \ min_idx)\n        table.remove(lst, max_idx)\n        table.insert(res, min)\n\
    \        table.insert(res, max)\n        return sort_list(lst, res)\n    end\n\
    \    return sort_list(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvaoohze.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpbvaoohze.lua:10:\
    \ in function </tmp/tmpbvaoohze.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpbvaoohze.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local asc, desc = {}, {}\n    for _, v in ipairs(lst) do\n        if v ~=\
    \ min and v ~= max then\n            table.insert(asc, v)\n            table.insert(desc,\
    \ v)\n        end\n    end\n    table.sort(asc)\n    table.sort(desc, function(a,\
    \ b) return a > b end)\n    for i = 1, #lst do\n        if i % 2 == 1 then\n \
    \           table.insert(res, min)\n            min = nil\n        else\n    \
    \        table.insert(res, max)\n            max = nil\n        end\n        if\
    \ #asc > 0 then\n            table.insert(res, asc[1])\n            table.remove(asc,\
    \ 1)\n        end\n        if #desc > 0 then\n            table.insert(res, desc[1])\n\
    \            table.remove(desc, 1)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1vc0ddzw.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp1vc0ddzw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1vc0ddzw.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted_list = {}\n    local min_value = math.min(unpack(lst))\n   \
    \ local max_value = math.max(unpack(lst))\n    local min_index = table.index_of(lst,\
    \ min_value)\n    local max_index = table.index_of(lst, max_value)\n    table.remove(lst,\
    \ min_index)\n    table.remove(lst, max_index)\n    table.insert(sorted_list,\
    \ min_value)\n    table.insert(sorted_list, max_value)\n    while #lst > 0 do\n\
    \        local min_value = math.min(unpack(lst))\n        local max_value = math.max(unpack(lst))\n\
    \        local min_index = table.index_of(lst, min_value)\n        local max_index\
    \ = table.index_of(lst, max_value)\n        table.remove(lst, min_index)\n   \
    \     table.remove(lst, max_index)\n        table.insert(sorted_list, min_value)\n\
    \        table.insert(sorted_list, max_value)\n    end\n    return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5vjhxnx.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_5vjhxnx.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_5vjhxnx.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 0
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function cmp(a, b)\n        if a < b then\n            return true\n\
    \        elseif a > b then\n            return false\n        else\n         \
    \   return nil\n        end\n    end\n    table.sort(lst, cmp)\n    local res\
    \ = {}\n    local len = #lst\n    local i = 1\n    while i <= len do\n       \
    \ table.insert(res, lst[i])\n        if i < len then\n            table.insert(res,\
    \ lst[len])\n        end\n        i = i + 1\n        len = len - 1\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(t)\n    \
    \    local mn, mx = min(t), max(t)\n        t[mn], t[mx] = t[mx], t[mn]\n    \
    \    return mn, mx\n    end\n    local function remove(t, i)\n        local v\
    \ = t[i]\n        table.remove(t, i)\n        return v\n    end\n    local function\
    \ strange_sort(t)\n        local res = {}\n        while #t > 0 do\n         \
    \   local mn, mx = min_max(t)\n            table.insert(res, remove(t, mn))\n\
    \            if #t > 0 then\n                table.insert(res, remove(t, mx))\n\
    \            end\n        end\n        return res\n    end\n    return strange_sort(lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwpgl7boe.lua:14:\
    \ bad argument #2 to 'remove' (number expected, got table)\nstack traceback:\n\
    \t/tmp/tmpwpgl7boe.lua:14: in upvalue 'remove'\n\t/tmp/tmpwpgl7boe.lua:21: in\
    \ function </tmp/tmpwpgl7boe.lua:17>\n\t(...tail calls...)\n\t/tmp/tmpwpgl7boe.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function strange_sort(lst,\
    \ acc)\n        if #lst == 0 then return acc end\n        local mn, mx = min(unpack(lst)),\
    \ max(unpack(lst))\n        local mn_i, mx_i = 0, 0\n        for i, v in ipairs(lst)\
    \ do\n            if v == mn then mn_i = i end\n            if v == mx then mx_i\
    \ = i end\n        end\n        table.remove(lst, mn_i)\n        table.remove(lst,\
    \ mx_i - 1)\n        return strange_sort(lst, {mx, mn, unpack(acc)})\n    end\n\
    \    return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3wvp3z2.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpz3wvp3z2.lua:9:\
    \ in function </tmp/tmpz3wvp3z2.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpz3wvp3z2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_val, max_val, min_idx, max_idx = math.min(unpack(lst)), math.max(unpack(lst)),\
    \ 1, 1\n    for i = 1, #lst do\n        if lst[i] == min_val then\n          \
    \  min_idx = i\n        elseif lst[i] == max_val then\n            max_idx = i\n\
    \        end\n    end\n    local res = {min_val}\n    local i = min_idx\n    while\
    \ i ~= max_idx do\n        i = i % #lst + 1\n        table.insert(res, lst[i])\n\
    \    end\n    table.insert(res, max_val)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjm9fnjj7.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjm9fnjj7.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpjm9fnjj7.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 0, 0\n    local min_found, max_found = false, false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        if lst[i] == min then\n                min_idx = i\n                min_found\
    \ = true\n            end\n        end\n        if not max_found then\n      \
    \      if lst[i] == max then\n                max_idx = i\n                max_found\
    \ = true\n            end\n        end\n        if min_found and max_found then\n\
    \            break\n        end\n        i = i + 1\n    end\n    local i = 1\n\
    \    while i <= #lst do\n        if i % 2 == 1 then\n            table.insert(res,\
    \ lst[min_idx])\n            table.remove(lst, min_idx)\n            min_idx =\
    \ min_idx - 1\n        else\n            table.insert(res, lst[max_idx])\n   \
    \         table.remove(lst, max_idx)\n            max_idx = max_idx - 1\n    \
    \    end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ozxn223.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp0ozxn223.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0ozxn223.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function strange_sort(lst, acc)\n\
    \    if #lst == 0 then return acc end\n    local min_val, min_idx = min(lst)\n\
    \    local max_val, max_idx = max(lst)\n    local min_removed = table.remove(lst,\
    \ min_idx)\n    local max_removed = table.remove(lst, max_idx - 1)\n    return\
    \ strange_sort(lst, acc .. min_removed .. max_removed)\n  end\n  return strange_sort(lst,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppvx52mk0.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'max_idx')\nstack traceback:\n\
    \t/tmp/tmppvx52mk0.lua:12: in function </tmp/tmppvx52mk0.lua:7>\n\t(...tail calls...)\n\
    \t/tmp/tmppvx52mk0.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if lst[i] == min_val and not min_found\
    \ then\n            min_idx = i\n            min_found = true\n        elseif\
    \ lst[i] == max_val and not max_found then\n            max_idx = i\n        \
    \    max_found = true\n        end\n    end\n    local min_removed, max_removed\
    \ = false, false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n       \
    \     if not min_removed then\n                table.insert(res, min_val)\n  \
    \              min_removed = true\n            else\n                table.insert(res,\
    \ max_val)\n                max_removed = true\n            end\n        else\n\
    \            if not min_removed then\n                table.insert(res, max_val)\n\
    \                max_removed = true\n            else\n                table.insert(res,\
    \ min_val)\n                min_removed = true\n            end\n        end\n\
    \    end\n    table.remove(lst, min_idx)\n    table.remove(lst, max_idx - 1)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp374h1iow.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp374h1iow.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp374h1iow.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function min_max(lst)\n    local\
    \ min_val, max_val = min(unpack(lst)), max(unpack(lst))\n    local min_idx, max_idx\
    \ = 0, 0\n    for i, v in ipairs(lst) do\n      if v == min_val then min_idx =\
    \ i end\n      if v == max_val then max_idx = i end\n    end\n    return min_val,\
    \ max_val, min_idx, max_idx\n  end\n  local function remove_idx(lst, idx)\n  \
    \  local new_lst = {}\n    for i, v in ipairs(lst) do\n      if i ~= idx then\
    \ new_lst[#new_lst + 1] = v end\n    end\n    return new_lst\n  end\n  local function\
    \ strange_sort(lst)\n    if #lst == 0 then return {} end\n    local min_val, max_val,\
    \ min_idx, max_idx = min_max(lst)\n    local new_lst = {min_val, max_val}\n  \
    \  local new_lst_2 = remove_idx(remove_idx(lst, min_idx), max_idx)\n    return\
    \ new_lst + strange_sort(new_lst_2)\n  end\n  return strange_sort(lst)\nend\n\
    assert(strange_sort_list({1, 2, 3, 4, 5, 6, 7, 8, 9}) == {1, 9, 2, 8, 3, 7, 4,\
    \ 6, 5})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == {1, 10,\
    \ 2, 9, 3, 8, 4, 7, 5, 6})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}) == {1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6})\nassert(strange\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa5ofqiyg.lua:36: '')'' expected (to close ''('' at line 35)
    near ''lu''

    '
  stdout: ''
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(lst)\n  \
    \      local min_val, max_val = min(unpack(lst)), max(unpack(lst))\n        local\
    \ min_idx, max_idx = 0, 0\n        for i, v in ipairs(lst) do\n            if\
    \ v == min_val then min_idx = i end\n            if v == max_val then max_idx\
    \ = i end\n        end\n        return min_val, max_val, min_idx, max_idx\n  \
    \  end\n    local function remove_idx(lst, idx)\n        local res = {}\n    \
    \    for i, v in ipairs(lst) do\n            if i ~= idx then table.insert(res,\
    \ v) end\n        end\n        return res\n    end\n    local res = {}\n    while\
    \ #lst > 0 do\n        local min_val, max_val, min_idx, max_idx = min_max(lst)\n\
    \        table.insert(res, min_val)\n        table.insert(res, max_val)\n    \
    \    lst = remove_idx(lst, min_idx)\n        lst = remove_idx(lst, max_idx)\n\
    \    end\n    return res\nend\nassert(strange_sort_list({1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9}) == {1, 9, 2, 8, 3, 7, 4, 6, 5})\nassert(strange_sort_list({1, 2, 3, 4,\
    \ 5, 6, 7, 8}) == {1, 8, 2, 7, 3, 6, 4, 5})\nassert(strange_sort_list({1, 2, 3,\
    \ 4, 5, 6, 7}) == {1, 7, 2, 6, 3, 5, 4})\nassert(strange_sort_list({1, 2, 3, 4,\
    \ 5, 6}) == {1, 6, 2, 5, 3, 4})\nassert(strange_sort_list({1, 2, 3, 4, 5}) ==\
    \ {1, 5, 2, 4\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4x9opous.lua:38: ''}'' expected (to close ''{'' at line 37)
    near ''lu''

    '
  stdout: ''
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst, res)\n        if #lst == 0 then\n         \
    \   return res\n        end\n        local min = math.min(unpack(lst))\n     \
    \   local max = math.max(unpack(lst))\n        local min_index = 0\n        local\
    \ max_index = 0\n        for i, v in ipairs(lst) do\n            if v == min then\n\
    \                min_index = i\n            end\n            if v == max then\n\
    \                max_index = i\n            end\n        end\n        table.remove(lst,\
    \ min_index)\n        table.remove(lst, max_index - 1)\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n        return sort_list(lst, res)\n \
    \   end\n    return sort_list(lst, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq8wzj47p.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpq8wzj47p.lua:10:\
    \ in function </tmp/tmpq8wzj47p.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpq8wzj47p.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = table.index_of(lst, min)\n    local max_idx = table.index_of(lst,\
    \ max)\n    local min_removed = table.remove_at(lst, min_idx)\n    local max_removed\
    \ = table.remove_at(lst, max_idx)\n    table.insert(res, min)\n    table.insert(res,\
    \ max)\n    while #lst > 0 do\n        min = math.min(unpack(lst))\n        max\
    \ = math.max(unpack(lst))\n        min_idx = table.index_of(lst, min)\n      \
    \  max_idx = table.index_of(lst, max)\n        min_removed = table.remove_at(lst,\
    \ min_idx)\n        max_removed = table.remove_at(lst, max_idx)\n        table.insert(res,\
    \ min)\n        table.insert(res, max)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn9ajnxzc.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpn9ajnxzc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn9ajnxzc.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local sorted = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if not min_found and lst[i] == min_val\
    \ then\n            min_idx = i\n            min_found = true\n        end\n \
    \       if not max_found and lst[i] == max_val then\n            max_idx = i\n\
    \            max_found = true\n        end\n        if min_found and max_found\
    \ then\n            break\n        end\n    end\n    local min_idx_found, max_idx_found\
    \ = false, false\n    for i = 1, #lst do\n        if not min_idx_found and i ==\
    \ min_idx then\n            table.insert(sorted, min_val)\n            min_idx_found\
    \ = true\n        end\n        if not max_idx_found and i == max_idx then\n  \
    \          table.insert(sorted, max_val)\n            max_idx_found = true\n \
    \       end\n        if min_idx_found and max_idx_found then\n            break\n\
    \        end\n    end\n    local min_idx_found, max_idx_found = false, false\n\
    \    for i = 1, #lst do\n        if not min_idx_found and i ~= min_idx then\n\
    \            table.insert(sorted, lst[i])\n            min_idx_found = true\n\
    \        end\n        if not max_idx_found and i ~= max_idx then\n           \
    \ table.insert(sorted, lst[i])\n            max_idx_found = true\n        end\n\
    \        if min_idx_found and max_idx_found then\n            break\n        end\n\
    \    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpezls_v8r.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpezls_v8r.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpezls_v8r.lua:57: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_index, max_index = 0, 0\n  local min_found, max_found = false, false\n\
    \  local i = 1\n  while i <= #lst do\n    if not min_found then\n      min_index\
    \ = table.index_of(lst, min)\n      table.insert(sorted_list, min)\n      table.remove(lst,\
    \ min_index)\n      min_found = true\n    elseif not max_found then\n      max_index\
    \ = table.index_of(lst, max)\n      table.insert(sorted_list, max)\n      table.remove(lst,\
    \ max_index)\n      max_found = true\n    end\n    if min_found and max_found\
    \ then\n      min, max = math.min(unpack(lst)), math.max(unpack(lst))\n      min_found,\
    \ max_found = false, false\n    end\n    i = i + 1\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn2i1aoa3.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpn2i1aoa3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn2i1aoa3.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: -1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local min, max = math.min, math.max\n  local function min_max(lst)\n    local\
    \ min, max = min(lst), max(lst)\n    local min_i, max_i = -1, -1\n    for i, v\
    \ in ipairs(lst) do\n      if v == min then min_i = i end\n      if v == max then\
    \ max_i = i end\n    end\n    return min_i, max_i\n  end\n  local function remove(lst,\
    \ i)\n    local res = {}\n    for j, v in ipairs(lst) do\n      if j ~= i then\
    \ res[#res + 1] = v end\n    end\n    return res\n  end\n  local res = {}\n  while\
    \ #lst > 0 do\n    local min_i, max_i = min_max(lst)\n    res[#res + 1] = lst[min_i]\n\
    \    res[#res + 1] = lst[max_i]\n    lst = remove(lst, min_i)\n    lst = remove(lst,\
    \ max_i)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014717
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_value = math.min(unpack(lst))\n    local max_value = math.max(unpack(lst))\n\
    \    local result = {}\n    local is_min = true\n    while #lst > 0 do\n     \
    \   if is_min then\n            local min_index = 1\n            for i, v in ipairs(lst)\
    \ do\n                if v < lst[min_index] then\n                    min_index\
    \ = i\n                end\n            end\n            table.insert(result,\
    \ lst[min_index])\n            table.remove(lst, min_index)\n        else\n  \
    \          local max_index = 1\n            for i, v in ipairs(lst) do\n     \
    \           if v > lst[max_index] then\n                    max_index = i\n  \
    \              end\n            end\n            table.insert(result, lst[max_index])\n\
    \            table.remove(lst, max_index)\n        end\n        is_min = not is_min\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk70_woxu.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpk70_woxu.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpk70_woxu.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function strange_sort(lst,\
    \ res)\n        if #lst == 0 then return res end\n        local m = min(unpack(lst))\n\
    \        local M = max(unpack(lst))\n        local i, j = table.find(lst, m),\
    \ table.find(lst, M)\n        table.remove(lst, i)\n        table.remove(lst,\
    \ j - 1)\n        return strange_sort(lst, table.append(res, {m, M}))\n    end\n\
    \    return strange_sort(lst, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj33vyplk.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpj33vyplk.lua:9:\
    \ in function </tmp/tmpj33vyplk.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpj33vyplk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst)\n        if #lst == 0 then\n            return\
    \ {}\n        end\n        local min = math.min(unpack(lst))\n        local max\
    \ = math.max(unpack(lst))\n        local min_idx = 0\n        local max_idx =\
    \ 0\n        for i, v in ipairs(lst) do\n            if v == min then\n      \
    \          min_idx = i\n            elseif v == max then\n                max_idx\
    \ = i\n            end\n        end\n        local new_lst = {}\n        for i,\
    \ v in ipairs(lst) do\n            if i ~= min_idx and i ~= max_idx then\n   \
    \             table.insert(new_lst, v)\n            end\n        end\n       \
    \ return {min, max} .. sort_list(new_lst)\n    end\n    return sort_list(lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8zc1f9ni.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8zc1f9ni.lua:10:\
    \ in function </tmp/tmp8zc1f9ni.lua:6>\n\t(...tail calls...)\n\t/tmp/tmp8zc1f9ni.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local min_flag = true\n\
    \    for i = 1, #lst do\n        if min_flag then\n            res[i] = min\n\
    \            min_idx = min_idx + 1\n            min = math.min(unpack(lst, min_idx))\n\
    \            min_flag = false\n        else\n            res[i] = max\n      \
    \      max_idx = max_idx - 1\n            max = math.max(unpack(lst, 1, max_idx))\n\
    \            min_flag = true\n        end\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgk93bzb7.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpgk93bzb7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgk93bzb7.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min_idx, max_idx = 1, #lst\n    local res = {}\n    local asc = true\n\
    \    while min_idx <= max_idx do\n        if asc then\n            table.insert(res,\
    \ lst[min_idx])\n            min_idx = min_idx + 1\n        else\n           \
    \ table.insert(res, lst[max_idx])\n            max_idx = max_idx - 1\n       \
    \ end\n        asc = not asc\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza0hx94a.lua:28:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpza0hx94a.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local function sort_list(lst)\n        local function sort_list_helper(lst,\
    \ acc)\n            if #lst == 0 then\n                return acc\n          \
    \  end\n            local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \            local min_idx, max_idx = 0, 0\n            for i, v in ipairs(lst)\
    \ do\n                if v == min then\n                    min_idx = i\n    \
    \            elseif v == max then\n                    max_idx = i\n         \
    \       end\n            end\n            table.remove(lst, min_idx)\n       \
    \     table.remove(lst, max_idx - 1)\n            return sort_list_helper(lst,\
    \ {min, max} + acc)\n        end\n        return sort_list_helper(lst, {})\n \
    \   end\n    return sort_list(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr0110x1g.lua:11:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpr0110x1g.lua:11:\
    \ in function </tmp/tmpr0110x1g.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpr0110x1g.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 0\n  local max_idx = 0\n  for i, v in ipairs(lst) do\n    if\
    \ v == min then\n      min_idx = i\n    elseif v == max then\n      max_idx =\
    \ i\n    end\n  end\n  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n\
    \      table.insert(sorted, min)\n      table.remove(lst, min_idx)\n      min\
    \ = math.min(unpack(lst))\n      for j, v in ipairs(lst) do\n        if v == min\
    \ then\n          min_idx = j\n        end\n      end\n    else\n      table.insert(sorted,\
    \ max)\n      table.remove(lst, max_idx)\n      max = math.max(unpack(lst))\n\
    \      for j, v in ipairs(lst) do\n        if v == max then\n          max_idx\
    \ = j\n        end\n      end\n    end\n    i = i + 1\n  end\n  return sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp381hi_pv.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp381hi_pv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp381hi_pv.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014712
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local min, max = math.min, math.max\n    local function min_max(lst)\n  \
    \      local min_val, max_val = min(lst), max(lst)\n        local min_idx, max_idx\
    \ = 0, 0\n        for i, v in ipairs(lst) do\n            if v == min_val then\
    \ min_idx = i end\n            if v == max_val then max_idx = i end\n        end\n\
    \        return min_val, max_val, min_idx, max_idx\n    end\n    local function\
    \ remove_idx(lst, idx)\n        local new_lst = {}\n        for i, v in ipairs(lst)\
    \ do\n            if i ~= idx then table.insert(new_lst, v) end\n        end\n\
    \        return new_lst\n    end\n    local function strange_sort(lst)\n     \
    \   if #lst == 0 then return {} end\n        local min_val, max_val, min_idx,\
    \ max_idx = min_max(lst)\n        local new_lst = {min_val, max_val}\n       \
    \ local new_lst_2 = remove_idx(lst, min_idx)\n        new_lst_2 = remove_idx(new_lst_2,\
    \ max_idx - 1)\n        return new_lst, strange_sort(new_lst_2)\n    end\n   \
    \ local new_lst = {}\n    for i, v in ipairs(strange_sort(lst)) do\n        for\
    \ j, w in ipairs(v) do\n            table.insert(new_lst, w)\n        end\n  \
    \  end\n    return new_lst\nend\nassert(strange_sort_list({1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9}) == {1, 9, 2, 8, 3, 7, 4, 6, 5})\nassert(strange_sort_list({9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1}) == {1, 9, 2, 8, 3, 7, 4, 6, 5})\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp2zw_gcq5.lua:18: stack overflow\nstack traceback:\n\t/tmp/tmp2zw_gcq5.lua:18:\
    \ in upvalue 'remove_idx'\n\t/tmp/tmp2zw_gcq5.lua:27: in upvalue 'strange_sort'\n\
    \t/tmp/tmp2zw_gcq5.lua:29: in upvalue 'strange_sort'\n\t/tmp/tmp2zw_gcq5.lua:29:\
    \ in upvalue 'strange_sort'\n\t/tmp/tmp2zw_gcq5.lua:29: in upvalue 'strange_sort'\n\
    \t/tmp/tmp2zw_gcq5.lua:29: in upvalue 'strange_sort'\n\t/tmp/tmp2zw_gcq5.lua:29:\
    \ in upvalue 'strange_sort'\n\t/tmp/tmp2zw_gcq5.lua:29: in upvalue 'strange_sort'\n\
    \t/tmp/tmp2zw_gcq5.lua:29: in upvalue 'strange_sort'\n\t/tmp/tmp2zw_gcq5.lua:29:\
    \ in upvalue 'strange_sort'\n\t...\t(skipping 111088 levels)\n\t/tmp/tmp2zw_gcq5.lua:29:\
    \ in upvalue 'strange_sort'\n\t/tmp/tmp2zw_gcq5.lua:29: in upvalue 'strange_sort'\n\
    \t/tmp/tmp2zw_gcq5.lua:29: in upvalue 'strange_sort'\n\t/tmp/tmp2zw_gcq5.lua:29:\
    \ in upvalue 'strange_sort'\n\t/tmp/tmp2zw_gcq5.lua:29: in upvalue 'strange_sort'\n\
    \t/tmp/tmp2zw_gcq5.lua:29: in upvalue 'strange_sort'\n\t/tmp/tmp2zw_gcq5.lua:29:\
    \ in upvalue 'strange_sort'\n\t/tmp/tmp2zw_gcq5.lua:29: in local 'strange_sort'\n\
    \t/tmp/tmp2zw_gcq5.lua:32: in local 'strange_sort_list'\n\t/tmp/tmp2zw_gcq5.lua:39:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1660014713
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    local j = #lst\n    while i <= j do\n        if i == j then\n\
    \            res[i] = min\n        else\n            res[i] = min\n          \
    \  res[j] = max\n        end\n        i = i + 1\n        j = j - 1\n        table.remove(lst,\
    \ table.index_of(lst, min))\n        table.remove(lst, table.index_of(lst, max))\n\
    \        min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n  \
    \  end\n    return res\nend\nassert(strange_sort_list({1, 2, 3, 4, 5}) == {1,\
    \ 5, 2, 4, 3})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6}) == {1, 6, 2, 5, 3,\
    \ 4})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6, 7}) == {1, 7, 2, 6, 3, 5, 4})\n\
    assert(strange_sort_list({1, 2, 3, 4, 5, 6, 7, 8}) == {1, 8, 2, 7, 3, 6, 4, 5})\n\
    assert(strange_sort_list({1, 2, 3, 4, 5, 6, 7, 8, 9}) == {1, 9, 2, 8, 3, 7, 4,\
    \ 6, 5})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == {1, 10,\
    \ 2, 9, 3, 8, 4, 7, 5, 6})\nassert(strange_sort_list({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}) == {1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6})\nassert(strange_sort_list({1,\
    \ 2, 3, 4, 5\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgnirnk41.lua:35: ''}'' expected (to close ''{'' at line 34)
    near ''lu''

    '
  stdout: ''
  timestamp: 1660014712
