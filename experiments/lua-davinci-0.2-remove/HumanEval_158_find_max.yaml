name: HumanEval_158_find_max
language: lua
prompt: "-- Write a function that accepts a list of strings.\n-- The list contains\
  \ different words. Return the word with maximum number\n-- of unique characters.\
  \ If multiple strings have maximum number of unique\n-- characters, return the one\
  \ which comes first in lexicographical order.\nlocal function find_max(words)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
  \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
  \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
  \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
  \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
  \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
  \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
  \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
  \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local max_word = words[1]\n    local max_count = 0\n    for _,\
    \ word in ipairs(words) do\n        local count = 0\n        for _ in word:gmatch('.')\
    \ do\n            count = count + 1\n        end\n        if count > max_count\
    \ then\n            max_count = count\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend", "  local max_word = words[1]\n  local max_count\
    \ = 0\n  for _, word in ipairs(words) do\n    local count = 0\n    for _ in word:gmatch('.')\
    \ do\n      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \   local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for i = 1, #word do\n            if word:find(word:sub(i,\
    \ i), i + 1) == nil then\n                count = count + 1\n            end\n\
    \        end\n        if count > max_count then\n            max_count = count\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    local max_word = words[1]\n    local max_unique = #unique_chars(max_word)\n\
    \    for i = 2, #words do\n        local word = words[i]\n        local unique\
    \ = #unique_chars(word)\n        if unique > max_unique then\n            max_word\
    \ = word\n            max_unique = unique\n        end\n    end\n    return max_word\n\
    end", "    local max_word = words[1]\n    local max_count = 0\n    for _, word\
    \ in ipairs(words) do\n        local count = 0\n        for i = 1, #word do\n\
    \            local c = word:sub(i, i)\n            if not word:find(c, i + 1)\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    if count > max_count then\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend", "    local max_word\
    \ = words[1]\n    local max_count = #unique_chars(max_word)\n    for i = 2, #words\
    \ do\n        local word = words[i]\n        local count = #unique_chars(word)\n\
    \        if count > max_count then\n            max_word = word\n            max_count\
    \ = count\n        end\n    end\n    return max_word\nend", "    local max_word\
    \ = words[1]\n    local max_unique = 0\n    for _, word in ipairs(words) do\n\
    \        local unique = 0\n        for i = 1, #word do\n            local c =\
    \ word:sub(i, i)\n            if word:find(c, i + 1) == nil then\n           \
    \     unique = unique + 1\n            end\n        end\n        if unique > max_unique\
    \ then\n            max_unique = unique\n            max_word = word\n       \
    \ end\n    end\n    return max_word\nend", "    local max_word = words[1]\n  \
    \  local max_count = #unique_chars(max_word)\n    for i = 2, #words do\n     \
    \   local word = words[i]\n        local count = #unique_chars(word)\n       \
    \ if count > max_count then\n            max_word = word\n            max_count\
    \ = count\n        end\n    end\n    return max_word\nend", "  local max_word\
    \ = words[1]\n  local max_count = 0\n  for _, word in ipairs(words) do\n    local\
    \ count = 0\n    for i = 1, #word do\n      if not word:find(word:sub(i, i), i\
    \ + 1) then\n        count = count + 1\n      end\n    end\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max_word = \"\"\n  local max_count = 0\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _ in word:gmatch(\".\") do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \   local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for i = 1, #word do\n            if word:find(word:sub(i,\
    \ i), i + 1) == nil then\n                count = count + 1\n            end\n\
    \        end\n        if count > max_count then\n            max_count = count\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for i = 1, #word do\n            local\
    \ c = word:sub(i, i)\n            if not word:find(c, i + 1) then\n          \
    \      count = count + 1\n            end\n        end\n        if count > max_count\
    \ then\n            max_count = count\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend", "    local max_word = words[1]\n    local\
    \ max_count = 0\n    for _, word in ipairs(words) do\n        local count = 0\n\
    \        for i = 1, #word do\n            local c = word:sub(i, i)\n         \
    \   if not max_word:find(c) then\n                count = count + 1\n        \
    \    end\n        end\n        if count > max_count then\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    local max_word = words[1]\n    local max_unique = 0\n    for _, word\
    \ in ipairs(words) do\n        local unique = 0\n        for _, char in utf8.codes(word)\
    \ do\n            unique = unique + 1\n        end\n        if unique > max_unique\
    \ then\n            max_unique = unique\n            max_word = word\n       \
    \ end\n    end\n    return max_word\nend", "  local max_word = words[1]\n  local\
    \ max_count = 0\n  for _, word in ipairs(words) do\n    local count = 0\n    for\
    \ i = 1, #word do\n      local c = word:sub(i, i)\n      if not word:find(c, i\
    \ + 1) then\n        count = count + 1\n      end\n    end\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "    local max_word = words[1]\n    local max_count = 0\n  \
    \  for _, word in ipairs(words) do\n        local count = 0\n        for i = 1,\
    \ #word do\n            local c = word:sub(i, i)\n            if not word:find(c,\
    \ i + 1) then\n                count = count + 1\n            end\n        end\n\
    \        if count > max_count then\n            max_count = count\n          \
    \  max_word = word\n        end\n    end\n    return max_word\nend", "    local\
    \ max_word = words[1]\n    local max_unique = 0\n    for _, word in ipairs(words)\
    \ do\n        local unique = 0\n        for _, char in utf8.codes(word) do\n \
    \           unique = unique + 1\n        end\n        if unique > max_unique then\n\
    \            max_unique = unique\n            max_word = word\n        end\n \
    \   end\n    return max_word\nend", "  local max_word = words[1]\n  local max_count\
    \ = 0\n  for _, word in ipairs(words) do\n    local count = 0\n    for i = 1,\
    \ #word do\n      if not word:find(word:sub(i, i), i + 1) then\n        count\
    \ = count + 1\n      end\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \   local max_word = words[1]\n    local max_count = count_unique_chars(max_word)\n\
    \    for i = 2, #words do\n        local word = words[i]\n        local count\
    \ = count_unique_chars(word)\n        if count > max_count then\n            max_word\
    \ = word\n            max_count = count\n        end\n    end\n    return max_word\n\
    end", "    local max_word = words[1]\n    local max_count = 0\n    for _, word\
    \ in ipairs(words) do\n        local count = 0\n        for i = 1, #word do\n\
    \            if word:find(word:sub(i, i), i + 1) == nil then\n               \
    \ count = count + 1\n            end\n        end\n        if count > max_count\
    \ then\n            max_count = count\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
