name: HumanEval_93_encode
language: lua
prompt: "-- Write a function that takes a message, and encodes in such a \n-- way\
  \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
  \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
  \ \n-- Assume only letters. \n-- Examples:\nlocal function encode(message)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
  \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
  \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
  \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt KnOw\
  \ WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local c = message:sub(i, i)\n        if c\
    \ == c:upper() then\n            c = c:lower()\n        else\n            c =\
    \ c:upper()\n        end\n        for j = 1, #vowels do\n            if c == vowels[j]\
    \ then\n                c = vowels[(j + 2) % #vowels + 1]\n                break\n\
    \            end\n        end\n        encoded = encoded .. c\n    end\n    return\
    \ encoded\nend", "  local encoded = \"\"\n  local vowels = {a = 3, e = 5, i =\
    \ 7, o = 9, u = 11}\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match(\"%a\") then\n      if char:match(\"%l\") then\n     \
    \   char = char:upper()\n      else\n        char = char:lower()\n      end\n\
    \      if vowels[char] then\n        char = string.char(vowels[char])\n      end\n\
    \    end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        if c == c:upper() then\n  \
    \          c = c:lower()\n        else\n            c = c:upper()\n        end\n\
    \        for j = 1, #vowels do\n            if c == vowels[j] then\n         \
    \       c = vowels[(j + 2) % #vowels + 1]\n                break\n           \
    \ end\n        end\n        encoded = encoded .. c\n    end\n    return encoded\n\
    end", "  local encoded = {}\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match(\"[a-z]\") then\n      char = char:upper()\n    elseif\
    \ char:match(\"[A-Z]\") then\n      char = char:lower()\n    end\n    if char:match(\"\
    [aeiou]\") then\n      local index = string.find(\"aeiou\", char)\n      char\
    \ = string.sub(\"cdfghjkl\", index, index)\n    end\n    encoded[#encoded + 1]\
    \ = char\n  end\n  return table.concat(encoded)\nend", "  -- TODO: Implement\n\
    end", "  local encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match(\"[A-Z]\") then\n      char = char:lower()\n    elseif\
    \ char:match(\"[a-z]\") then\n      char = char:upper()\n    end\n    if char:match(\"\
    [aeiou]\") then\n      local index = string.find(\"aeiou\", char)\n      char\
    \ = \"aeiou\":sub(index + 2, index + 2)\n    end\n    encoded = encoded .. char\n\
    \  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.indexOf(vowels,\
    \ char) then\n            char = vowels[(table.indexOf(vowels, char) + 2) % 5]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        local isVowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          isVowel = true\n                break\n            end\n        end\n\
    \        if isVowel then\n            local index = (j + 2) % #vowels\n      \
    \      if index == 0 then\n                index = #vowels\n            end\n\
    \            char = vowels[index]\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  local encoded = \"\"\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char:match(\"%a\") then\n   \
    \   if char:match(\"%l\") then\n        char = char:upper()\n      else\n    \
    \    char = char:lower()\n      end\n      if char:match(\"[aeiou]\") then\n \
    \       local index = \"aeiou\":find(char:lower())\n        char = \"cdfghjklmnpqrstvwxyz\"\
    :sub(index, index)\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local encoded = \"\"\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char:match(\"[a-z]\") then\n\
    \            char = char:upper()\n        elseif char:match(\"[A-Z]\") then\n\
    \            char = char:lower()\n        end\n        if char:match(\"[aeiou]\"\
    ) then\n            char = char:sub(2) .. char:sub(1, 1)\n        elseif char:match(\"\
    [AEIOU]\") then\n            char = char:sub(2) .. char:sub(1, 1)\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local is_vowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ index = j + 2\n      if index > #vowels then\n        index = index - #vowels\n\
    \      end\n      char = vowels[index]\n    else\n      if char == char:upper()\
    \ then\n        char = char:lower()\n      else\n        char = char:upper()\n\
    \      end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ lower = char:lower()\n        local upper = char:upper()\n        if lower ==\
    \ upper then\n            encoded = encoded .. char\n        elseif lower == char\
    \ then\n            encoded = encoded .. upper\n        else\n            encoded\
    \ = encoded .. lower\n        end\n        for j = 1, #vowels do\n           \
    \ if lower == vowels[j] then\n                local next = vowels[(j + 2) % #vowels\
    \ + 1]\n                encoded = encoded:gsub(lower, next)\n            end\n\
    \        end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        local isVowel = false\n        for j\
    \ = 1, #vowels do\n            if char == vowels[j] then\n                isVowel\
    \ = true\n                break\n            end\n        end\n        if isVowel\
    \ then\n            local index = (string.byte(char) - 96) % 5 + 1\n         \
    \   encoded = encoded .. vowels[index]\n        else\n            local isUpper\
    \ = char == char:upper()\n            local newChar = string.char(string.byte(char)\
    \ + (isUpper and 32 or -32))\n            encoded = encoded .. newChar\n     \
    \   end\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char =\
    \ message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    for j = 1, #vowels do\n   \
    \   if char == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n    \
    \  end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        local isVowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                isVowel = true\n                break\n            end\n    \
    \    end\n        if isVowel then\n            local index = j + 2\n         \
    \   if index > #vowels then\n                index = index - #vowels\n       \
    \     end\n            char = vowels[index]\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexof(vowels, char)\n            index = index + 2\n       \
    \     if index > #vowels then\n                index = index - #vowels\n     \
    \       end\n            char = vowels[index]\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexOf(vowels, char)\n            if index == #vowels then\n\
    \                index = 1\n            else\n                index = index +\
    \ 2\n            end\n            char = vowels[index]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
