name: HumanEval_93_encode
language: lua
prompt: "-- Write a function that takes a message, and encodes in such a \n-- way\
  \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
  \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
  \ \n-- Assume only letters. \n-- Examples:\nlocal function encode(message)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
  \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
  \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
  \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt KnOw\
  \ WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local encoded = \"\"\n  for i = 1, #message do\n    local char =\
    \ message:sub(i, i)\n    if char:match(\"[a-z]\") then\n      encoded = encoded\
    \ .. char:upper()\n    elseif char:match(\"[A-Z]\") then\n      encoded = encoded\
    \ .. char:lower()\n    elseif char:match(\"[aeiou]\") then\n      local index\
    \ = string.find(\"aeiou\", char)\n      encoded = encoded .. \"aeiou\":sub(index\
    \ + 2, index + 2)\n    else\n      encoded = encoded .. char\n    end\n  end\n\
    \  return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      char = char:lower()\n    else\n     \
    \ char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        char = vowels[j+2]\n        break\n      end\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local vowels = \"aeiou\"\n  local encoded = \"\"\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    if char:match(\"%a\") then\n      if\
    \ char:match(\"%l\") then\n        char = char:upper()\n      else\n        char\
    \ = char:lower()\n      end\n      local index = vowels:find(char:lower())\n \
    \     if index then\n        index = index + 2\n        if index > #vowels then\n\
    \          index = index - #vowels\n        end\n        char = vowels:sub(index,\
    \ index)\n      end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "  -- TODO: implement\nend", "  -- TODO: Implement\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    local isVowel = false\n    for j = 1,\
    \ #vowels do\n      if char == vowels[j] then\n        isVowel = true\n      \
    \  break\n      end\n    end\n    if isVowel then\n      local index = (string.byte(char)\
    \ - 96) % 5 + 1\n      encoded = encoded .. vowels[index]\n    else\n      if\
    \ char == char:upper() then\n        encoded = encoded .. char:lower()\n     \
    \ else\n        encoded = encoded .. char:upper()\n      end\n    end\n  end\n\
    \  return encoded\nend", "  local encoded = \"\"\n  for i = 1, #message do\n \
    \   local char = message:sub(i, i)\n    if char:match(\"[a-z]\") then\n      encoded\
    \ = encoded .. char:upper()\n    elseif char:match(\"[A-Z]\") then\n      encoded\
    \ = encoded .. char:lower()\n    elseif char:match(\"[aeiou]\") then\n      encoded\
    \ = encoded .. nextVowel(char)\n    else\n      encoded = encoded .. char\n  \
    \  end\n  end\n  return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n      end\n   \
    \ end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ encoded = \"\"\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match(\"[a-z]\") then\n            if char == char:upper()\
    \ then\n                char = char:lower()\n            else\n              \
    \  char = char:upper()\n            end\n            if char == \"a\" then\n \
    \               char = \"c\"\n            elseif char == \"e\" then\n        \
    \        char = \"g\"\n            elseif char == \"i\" then\n               \
    \ char = \"k\"\n            elseif char == \"o\" then\n                char =\
    \ \"q\"\n            elseif char == \"u\" then\n                char = \"y\"\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "  local encoded = \"\"\n  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      char = char:lower()\n    else\n     \
    \ char = char:upper()\n    end\n    if table.contains(vowels, char) then\n   \
    \   local index = table.indexOf(vowels, char)\n      local newIndex = index +\
    \ 2\n      if newIndex > #vowels then\n        newIndex = newIndex - #vowels\n\
    \      end\n      char = vowels[newIndex]\n    end\n    encoded = encoded .. char\n\
    \  end\n  return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\t\
    local encoded = ''\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i,\
    \ i)\n\t\tlocal isVowel = false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j]\
    \ then\n\t\t\t\tisVowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel\
    \ then\n\t\t\tlocal index = (string.find('aeiou', char) + 2) % 5\n\t\t\tif index\
    \ == 0 then\n\t\t\t\tindex = 5\n\t\t\tend\n\t\t\tchar = vowels[index]\n\t\tend\n\
    \t\tif char == char:upper() then\n\t\t\tchar = char:lower()\n\t\telse\n\t\t\t\
    char = char:upper()\n\t\tend\n\t\tencoded = encoded .. char\n\tend\n\treturn encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local alphabet = {\"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"}\n  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local\
    \ encoded_message = \"\"\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local is_vowel = false\n    for j = 1, #vowels do\n      if char ==\
    \ vowels[j] then\n        is_vowel = true\n        break\n      end\n    end\n\
    \    if is_vowel then\n      local index = 0\n      for j = 1, #alphabet do\n\
    \        if char == alphabet[j] then\n          index = j\n          break\n \
    \       end\n      end\n      local new_index = index + 2\n      if new_index\
    \ > #alphabet then\n        new_index = new_index - #alphabet\n      end\n   \
    \   char = alphabet[new_index]\n    end\n    if char == char:upper() then\n  \
    \    char = char:lower()\n    else\n      char = char:upper()\n    end\n    encoded_message\
    \ = encoded_message .. char\n  end\n  return encoded_message\nend", "  -- TODO:\
    \ implement\nend", "    local encoded = \"\"\n    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    for i = 1, #message do\n        local letter = message:sub(i,\
    \ i)\n        local isUpper = letter:upper() == letter\n        local isVowel\
    \ = false\n        for j = 1, #vowels do\n            if letter:lower() == vowels[j]\
    \ then\n                isVowel = true\n                break\n            end\n\
    \        end\n        if isVowel then\n            local index = (j + 2) % #vowels\n\
    \            if index == 0 then\n                index = #vowels\n           \
    \ end\n            letter = vowels[index]\n        end\n        if isUpper then\n\
    \            letter = letter:upper()\n        end\n        encoded = encoded ..\
    \ letter\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local isVowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                isVowel =\
    \ true\n                break\n            end\n        end\n        if isVowel\
    \ then\n            local index = (string.byte(char) - 96) % 5 + 1\n         \
    \   encoded = encoded .. vowels[index]\n        else\n            if char == char:upper()\
    \ then\n                encoded = encoded .. char:lower()\n            else\n\
    \                encoded = encoded .. char:upper()\n            end\n        end\n\
    \    end\n    return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \tlocal encoded = ''\n\tfor i = 1, #message do\n\t\tlocal c = message:sub(i, i)\n\
    \t\tif c == c:upper() then\n\t\t\tc = c:lower()\n\t\telse\n\t\t\tc = c:upper()\n\
    \t\tend\n\t\tfor j = 1, #vowels do\n\t\t\tif c == vowels[j] then\n\t\t\t\tc =\
    \ vowels[(j + 2) % #vowels]\n\t\t\tend\n\t\tend\n\t\tencoded = encoded .. c\n\t\
    end\n\treturn encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      char = char:lower()\n    else\n     \
    \ char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        char = vowels[(j + 2) % #vowels]\n      end\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char\
    \ = message:sub(i, i)\n    local isVowel = false\n    for j = 1, #vowels do\n\
    \      if char == vowels[j] then\n        isVowel = true\n        break\n    \
    \  end\n    end\n    if isVowel then\n      local index = string.find('abcdefghijklmnopqrstuvwxyz',\
    \ char)\n      encoded = encoded .. string.sub('cdefghijklmnopqrstuvwxyzab', index,\
    \ index)\n    else\n      if char == char:upper() then\n        encoded = encoded\
    \ .. char:lower()\n      else\n        encoded = encoded .. char:upper()\n   \
    \   end\n    end\n  end\n  return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        if char == char:upper() then\n     \
    \       char = char:lower()\n        else\n            char = char:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[j + 2]\n                break\n            end\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if string.byte(char)\
    \ >= 97 and string.byte(char) <= 122 then\n            char = string.char(string.byte(char)\
    \ - 32)\n        elseif string.byte(char) >= 65 and string.byte(char) <= 90 then\n\
    \            char = string.char(string.byte(char) + 32)\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    if char == \"a\" then\n      char = \"\
    c\"\n    elseif char == \"e\" then\n      char = \"g\"\n    elseif char == \"\
    i\" then\n      char = \"k\"\n    elseif char == \"o\" then\n      char = \"q\"\
    \n    elseif char == \"u\" then\n      char = \"y\"\n    end\n    encoded = encoded\
    \ .. char\n  end\n  return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n\tlocal encoded = ''\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i,\
    \ i)\n\t\tif char:match('%a') then\n\t\t\tif char:match('%u') then\n\t\t\t\tchar\
    \ = char:lower()\n\t\t\telse\n\t\t\t\tchar = char:upper()\n\t\t\tend\n\t\t\tfor\
    \ j = 1, #vowels do\n\t\t\t\tif char == vowels[j] then\n\t\t\t\t\tchar = vowels[(j\
    \ + 2) % #vowels]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tencoded\
    \ = encoded .. char\n\tend\n\treturn encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local next_vowel = vowels[j + 2]\n      \
    \      if not next_vowel then\n                next_vowel = vowels[1]\n      \
    \      end\n            encoded = encoded .. next_vowel\n        else\n      \
    \      if char == char:upper() then\n                encoded = encoded .. char:lower()\n\
    \            else\n                encoded = encoded .. char:upper()\n       \
    \     end\n        end\n    end\n    return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local encoded = \"\"\n    local vowels = {a = \"\
    c\", e = \"g\", i = \"k\", o = \"q\", u = \"y\"}\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if vowels[char] then\n            char = vowels[char]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = \"\"\n\t\
    for i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal isVowel\
    \ = false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\t\
    isVowel = true\n\t\t\t\tchar = vowels[j % #vowels + 1]\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\tend\n\t\tif isVowel then\n\t\t\tencoded = encoded .. char\n\t\telse\n\
    \t\t\tencoded = encoded .. char:lower()\n\t\tend\n\tend\n\treturn encoded\nend",
  "  local result = {}\n  for i = 1, #message do\n    local c = message:sub(i, i)\n\
    \    local u = c:upper()\n    if u == 'A' then\n      table.insert(result, 'C')\n\
    \    elseif u == 'E' then\n      table.insert(result, 'G')\n    elseif u == 'I'\
    \ then\n      table.insert(result, 'K')\n    elseif u == 'O' then\n      table.insert(result,\
    \ 'Q')\n    elseif u == 'U' then\n      table.insert(result, 'S')\n    elseif\
    \ u == 'Y' then\n      table.insert(result, 'A')\n    elseif u == c then\n   \
    \   table.insert(result, c:lower())\n    else\n      table.insert(result, c)\n\
    \    end\n  end\n  return table.concat(result)\nend", "  local encoded = \"\"\n\
    \  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char ==\
    \ char:upper() then\n      char = char:lower()\n    else\n      char = char:upper()\n\
    \    end\n    if char == \"a\" then\n      char = \"c\"\n    elseif char == \"\
    e\" then\n      char = \"g\"\n    elseif char == \"i\" then\n      char = \"k\"\
    \n    elseif char == \"o\" then\n      char = \"q\"\n    elseif char == \"u\"\
    \ then\n      char = \"y\"\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded\
    \ = ''\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal\
    \ isVowel = false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\
    \t\t\t\tisVowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel then\n\
    \t\t\tlocal nextVowel = vowels[j % #vowels + 1]\n\t\t\tencoded = encoded .. nextVowel\n\
    \t\telse\n\t\t\tencoded = encoded .. char\n\t\tend\n\tend\n\treturn encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n\tlocal encoded = ''\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i,\
    \ i)\n\t\tif char:match('%a') then\n\t\t\tif char:match('%l') then\n\t\t\t\tchar\
    \ = char:upper()\n\t\t\telse\n\t\t\t\tchar = char:lower()\n\t\t\tend\n\t\t\tfor\
    \ j = 1, #vowels do\n\t\t\t\tif char == vowels[j] then\n\t\t\t\t\tchar = vowels[(j\
    \ % #vowels) + 1]\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tencoded = encoded .. char\n\
    \tend\n\treturn encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % 5 + 1]\n                break\n     \
    \       end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "  local encoded = \"\"\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    if char:match(\"[a-z]\") then\n      char = char:upper()\n\
    \    elseif char:match(\"[A-Z]\") then\n      char = char:lower()\n    end\n \
    \   if char:match(\"[aeiou]\") then\n      char = char:gsub(\"[aeiou]\", {a =\
    \ \"c\", e = \"g\", i = \"k\", o = \"q\", u = \"y\"})\n    end\n    encoded =\
    \ encoded .. char\n  end\n  return encoded\nend", "  -- TODO: implement this function\n\
    end", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = \"\"\n\t\
    for i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal isVowel\
    \ = false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\t\
    isVowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel then\n\t\t\t\
    local index = string.find(vowels, char)\n\t\t\tif index == #vowels then\n\t\t\t\
    \tindex = 1\n\t\t\telse\n\t\t\t\tindex = index + 2\n\t\t\tend\n\t\t\tchar = vowels[index]\n\
    \t\tend\n\t\tif char == char:upper() then\n\t\t\tchar = char:lower()\n\t\telse\n\
    \t\t\tchar = char:upper()\n\t\tend\n\t\tencoded = encoded .. char\n\tend\n\treturn\
    \ encoded\nend", "  local encoded = \"\"\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    if char:match(\"[a-z]\") then\n      local ascii\
    \ = char:byte()\n      if ascii >= 97 and ascii <= 122 then\n        encoded =\
    \ encoded .. string.char(ascii - 32)\n      else\n        encoded = encoded ..\
    \ string.char(ascii + 32)\n      end\n    elseif char:match(\"[aeiou]\") then\n\
    \      local ascii = char:byte()\n      local new_ascii = ascii + 2\n      if\
    \ new_ascii > 122 then\n        new_ascii = new_ascii - 26\n      end\n      encoded\
    \ = encoded .. string.char(new_ascii)\n    else\n      encoded = encoded .. char\n\
    \    end\n  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char == char:upper() then\n            char\
    \ = char:lower()\n        else\n            char = char:upper()\n        end\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          char = vowels[(j + 2) % #vowels]\n            end\n        end\n  \
    \      encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    local is_vowel = false\n    for\
    \ j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel = true\n\
    \        break\n      end\n    end\n    if is_vowel then\n      local index =\
    \ (j + 2) % #vowels\n      if index == 0 then\n        index = #vowels\n     \
    \ end\n      char = vowels[index]\n    else\n      if char == char:upper() then\n\
    \        char = char:lower()\n      else\n        char = char:upper()\n      end\n\
    \    end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "\tlocal\
    \ encoded = \"\"\n\tfor i = 1, #message do\n\t\tlocal c = message:sub(i, i)\n\t\
    \tif c:match(\"[a-z]\") then\n\t\t\tif c == c:upper() then\n\t\t\t\tc = c:lower()\n\
    \t\t\telse\n\t\t\t\tc = c:upper()\n\t\t\tend\n\t\t\tif c == \"a\" then\n\t\t\t\
    \tc = \"c\"\n\t\t\telseif c == \"e\" then\n\t\t\t\tc = \"g\"\n\t\t\telseif c ==\
    \ \"i\" then\n\t\t\t\tc = \"k\"\n\t\t\telseif c == \"o\" then\n\t\t\t\tc = \"\
    m\"\n\t\t\telseif c == \"u\" then\n\t\t\t\tc = \"o\"\n\t\t\tend\n\t\tend\n\t\t\
    encoded = encoded .. c\n\tend\n\treturn encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[j + 2]\n                break\n        \
    \    end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = {}\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    if table.contains(vowels, char) then\n\
    \      local index = table.indexof(vowels, char)\n      if index == #vowels then\n\
    \        char = vowels[1]\n      else\n        char = vowels[index + 1]\n    \
    \  end\n    end\n    table.insert(encoded, char)\n  end\n  return table.concat(encoded)\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ encoded = \"\"\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            encoded = encoded .. char:lower()\n\
    \        else\n            encoded = encoded .. char:upper()\n        end\n  \
    \  end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n      end\n   \
    \ end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = \"\"\n    for i = 1,\
    \ #message do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexOf(vowels, char) then\n            local index\
    \ = table.indexOf(vowels, char)\n            if index == #vowels then\n      \
    \          index = 1\n            else\n                index = index + 2\n  \
    \          end\n            char = vowels[index]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "\tlocal encoded = \"\"\
    \n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\t\tif char:match(\"\
    [a-z]\") then\n\t\t\tchar = char:upper()\n\t\telseif char:match(\"[A-Z]\") then\n\
    \t\t\tchar = char:lower()\n\t\tend\n\t\tif char:match(\"[aeiou]\") then\n\t\t\t\
    local index = string.find(\"aeiou\", char)\n\t\t\tif index == 5 then\n\t\t\t\t\
    char = \"a\"\n\t\t\telse\n\t\t\t\tchar = string.sub(\"aeiou\", index + 2, index\
    \ + 2)\n\t\t\tend\n\t\tend\n\t\tencoded = encoded .. char\n\tend\n\treturn encoded\n\
    end", "    -- your code here\nend", "  local encoded = \"\"\n  for i = 1, #message\
    \ do\n    local c = message:sub(i, i)\n    if c:match(\"[a-z]\") then\n      if\
    \ c == c:upper() then\n        c = c:lower()\n      else\n        c = c:upper()\n\
    \      end\n    end\n    if c:match(\"[aeiou]\") then\n      local index = string.find(\"\
    aeiou\", c)\n      c = string.sub(\"cdfghjkl\", index, index)\n    end\n    encoded\
    \ = encoded .. c\n  end\n  return encoded\nend", "    -- your code here\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = \"\"\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            char = vowels[(table.indexOf(vowels, char) + 2) % 5 + 1]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local encoded = \"\"\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char:match(\"\
    [a-z]\") then\n            char = char:upper()\n        elseif char:match(\"[A-Z]\"\
    ) then\n            char = char:lower()\n        end\n        if char:match(\"\
    [aeiou]\") then\n            local index = string.find(\"aeiou\", char)\n    \
    \        char = string.sub(\"cdfghjkl\", index, index)\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local next_vowel = vowels[(j % #vowels) +\
    \ 1]\n            encoded = encoded .. next_vowel\n        else\n            local\
    \ is_upper = char == char:upper()\n            local next_char = string.char(string.byte(char)\
    \ + 1)\n            if next_char == '[' then\n                next_char = 'A'\n\
    \            end\n            if is_upper then\n                next_char = next_char:upper()\n\
    \            end\n            encoded = encoded .. next_char\n        end\n  \
    \  end\n    return encoded\nend", "  local encoded = \"\"\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char:match(\"[a-z]\") then\n\
    \      char = char:upper()\n    elseif char:match(\"[A-Z]\") then\n      char\
    \ = char:lower()\n    end\n    if char:match(\"[aeiou]\") then\n      char = char:gsub(\"\
    [aeiou]\", {a = \"c\", e = \"g\", i = \"k\", o = \"q\", u = \"s\"})\n    end\n\
    \    encoded = encoded .. char\n  end\n  return encoded\nend", "    local encoded\
    \ = \"\"\n    for i = 1, #message do\n        local char = message:sub(i, i)\n\
    \        local lower = char:lower()\n        if lower == \"a\" then\n        \
    \    encoded = encoded .. \"c\"\n        elseif lower == \"e\" then\n        \
    \    encoded = encoded .. \"g\"\n        elseif lower == \"i\" then\n        \
    \    encoded = encoded .. \"k\"\n        elseif lower == \"o\" then\n        \
    \    encoded = encoded .. \"q\"\n        elseif lower == \"u\" then\n        \
    \    encoded = encoded .. \"y\"\n        elseif lower == \"y\" then\n        \
    \    encoded = encoded .. \"a\"\n        elseif lower == \"z\" then\n        \
    \    encoded = encoded .. \"b\"\n        elseif lower == lower:upper() then\n\
    \            encoded = encoded .. lower:lower()\n        else\n            encoded\
    \ = encoded .. lower:upper()\n        end\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = (string.byte(char) - 96) % 5 + 1\n            encoded = encoded\
    \ .. vowels[index]\n        else\n            if char == char:upper() then\n \
    \               encoded = encoded .. char:lower()\n            else\n        \
    \        encoded = encoded .. char:upper()\n            end\n        end\n   \
    \ end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i,\
    \ i)\n        if c:match('%a') then\n            if c:match('%l') then\n     \
    \           c = c:upper()\n            else\n                c = c:lower()\n \
    \           end\n            for j = 1, #vowels do\n                if c == vowels[j]\
    \ then\n                    c = vowels[(j + 2) % #vowels]\n                  \
    \  break\n                end\n            end\n        end\n        encoded =\
    \ encoded .. c\n    end\n    return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        if char == char:upper() then\n     \
    \       char = char:lower()\n        else\n            char = char:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local index = string.find(vowels, char)\n\
    \            if index == #vowels then\n                index = 1\n           \
    \ else\n                index = index + 1\n            end\n            char =\
    \ vowels[index]\n        end\n        if char == char:upper() then\n         \
    \   char = char:lower()\n        else\n            char = char:upper()\n     \
    \   end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  -- TODO: Implement\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded_message = ''\n    for i = 1, #message do\n    \
    \    local char = message:sub(i, i)\n        if char == char:upper() then\n  \
    \          char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded_message = encoded_message .. char\n    end\n    return\
    \ encoded_message\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i, i)\n\
    \        if c:lower() == c then\n            c = c:upper()\n        else\n   \
    \         c = c:lower()\n        end\n        for j = 1, #vowels do\n        \
    \    if c == vowels[j] then\n                c = vowels[(j + 2) % #vowels + 1]\n\
    \                break\n            end\n        end\n        encoded = encoded\
    \ .. c\n    end\n    return encoded\nend", "  local result = \"\"\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char:match(\"[A-Z]\"\
    ) then\n      result = result .. char:lower()\n    elseif char:match(\"[a-z]\"\
    ) then\n      result = result .. char:upper()\n    else\n      result = result\
    \ .. char\n    end\n  end\n  return result\nend", "    local encoded = \"\"\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_map = {a = 'c',\
    \ e = 'g', i = 'k', o = 'q', u = 'w'}\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.contains(vowels, char) then\n            char = vowel_map[char]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local encoded = \"\"\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char:match(\"%a\") then\n\
    \            if char:match(\"%u\") then\n                char = char:lower()\n\
    \            else\n                char = char:upper()\n            end\n    \
    \        if char:match(\"[aeiou]\") then\n                char = string.char(string.byte(char)\
    \ + 2)\n            end\n        end\n        encoded = encoded .. char\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local letter = message:sub(i,\
    \ i)\n        if letter:match('%a') then\n            if letter:match('%l') then\n\
    \                letter = letter:upper()\n            else\n                letter\
    \ = letter:lower()\n            end\n            for j = 1, #vowels do\n     \
    \           if letter == vowels[j] then\n                    letter = vowels[(j\
    \ + 2) % #vowels]\n                end\n            end\n        end\n       \
    \ encoded = encoded .. letter\n    end\n    return encoded\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    if char == char:upper() then\n      char\
    \ = char:lower()\n    else\n      char = char:upper()\n    end\n    for j = 1,\
    \ #vowels do\n      if char == vowels[j] then\n        char = vowels[(j + 2) %\
    \ #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded\
    \ = {}\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char\
    \ == char:upper() then\n      char = char:lower()\n    else\n      char = char:upper()\n\
    \    end\n    for j = 1, #vowels do\n      if char == vowels[j] then\n       \
    \ char = vowels[j + 2]\n        break\n      end\n    end\n    encoded[#encoded\
    \ + 1] = char\n  end\n  return table.concat(encoded)\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[j + 2]\n                break\n        \
    \    end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "  -- TODO: implement\nend", "\tlocal vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n\tlocal encoded = {}\n\tfor i = 1, #message do\n\t\tlocal char =\
    \ message:sub(i, i)\n\t\tif char:match('%a') then\n\t\t\tlocal isUpper = char:match('%u')\n\
    \t\t\tchar = char:lower()\n\t\t\tif isUpper then\n\t\t\t\tchar = char:upper()\n\
    \t\t\tend\n\t\t\tfor j = 1, #vowels do\n\t\t\t\tif char == vowels[j] then\n\t\t\
    \t\t\tchar = vowels[(j + 2) % #vowels]\n\t\t\t\t\tif isUpper then\n\t\t\t\t\t\t\
    char = char:upper()\n\t\t\t\t\tend\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\
    \tend\n\t\tencoded[#encoded + 1] = char\n\tend\n\treturn table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded_message\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                local new_index =\
    \ j + 2\n                if new_index > #vowels then\n                    new_index\
    \ = new_index - #vowels\n                end\n                char = vowels[new_index]\n\
    \            end\n        end\n        encoded_message = encoded_message .. char\n\
    \    end\n    return encoded_message\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char =\
    \ message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    for j = 1, #vowels do\n   \
    \   if char == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n    \
    \  end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i, i)\n\
    \        if c == c:upper() then\n            c = c:lower()\n        else\n   \
    \         c = c:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if c == vowels[j] then\n                c = vowels[(j + 2) % #vowels + 1]\n\
    \                break\n            end\n        end\n        encoded = encoded\
    \ .. c\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.contains(vowels, char) then\n            local index =\
    \ table.indexof(vowels, char)\n            if index == #vowels then\n        \
    \        index = 1\n            else\n                index = index + 1\n    \
    \        end\n            char = vowels[index]\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "  local encoded = \"\"\n\
    \  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char:match(\"\
    [a-z]\") then\n      encoded = encoded .. char:upper()\n    elseif char:match(\"\
    [A-Z]\") then\n      encoded = encoded .. char:lower()\n    elseif char:match(\"\
    [aeiou]\") then\n      local index = string.find(\"aeiou\", char)\n      encoded\
    \ = encoded .. \"aeiou\":sub(index + 2, index + 2)\n    else\n      encoded =\
    \ encoded .. char\n    end\n  end\n  return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local c = message:sub(i, i)\n        if c:lower() == c then\n       \
    \     c = c:upper()\n        else\n            c = c:lower()\n        end\n  \
    \      for j = 1, #vowels do\n            if c == vowels[j] then\n           \
    \     c = vowels[(j + 2) % #vowels + 1]\n                break\n            end\n\
    \        end\n        encoded = encoded .. c\n    end\n    return encoded\nend",
  "  local encoded = \"\"\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local alphabet\
    \ = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    local is_vowel = false\n    for\
    \ j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel = true\n\
    \        break\n      end\n    end\n    if is_vowel then\n      local index =\
    \ 1\n      for j = 1, #alphabet do\n        if char == alphabet[j] then\n    \
    \      index = j\n          break\n        end\n      end\n      if index + 2\
    \ > #alphabet then\n        index = index + 2 - #alphabet\n      else\n      \
    \  index = index + 2\n      end\n      char = alphabet[index]\n    end\n    if\
    \ char == char:upper() then\n      char = char:lower()\n    else\n      char =\
    \ char:upper()\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "  -- your code here\nend", "  local encoded = \"\"\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char:match(\"%a\") then\n   \
    \   if char:match(\"%l\") then\n        char = char:upper()\n      else\n    \
    \    char = char:lower()\n      end\n      if char:match(\"[aeiou]\") then\n \
    \       char = string.char(string.byte(char) + 2)\n      end\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "\tlocal vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n\tlocal encoded = {}\n\tfor i = 1, #message do\n\t\tlocal char\
    \ = message:sub(i, i)\n\t\tlocal isVowel = false\n\t\tfor j = 1, #vowels do\n\t\
    \t\tif char == vowels[j] then\n\t\t\t\tisVowel = true\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\tend\n\t\tif isVowel then\n\t\t\tlocal index = (string.find('aeiou', char)\
    \ + 2) % 5\n\t\t\tif index == 0 then\n\t\t\t\tindex = 5\n\t\t\tend\n\t\t\tchar\
    \ = vowels[index]\n\t\tend\n\t\tif char == char:upper() then\n\t\t\tchar = char:lower()\n\
    \t\telse\n\t\t\tchar = char:upper()\n\t\tend\n\t\ttable.insert(encoded, char)\n\
    \tend\n\treturn table.concat(encoded)\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char =\
    \ message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    for j = 1, #vowels do\n   \
    \   if char == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n    \
    \  end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n\tlocal encoded = ''\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i,\
    \ i)\n\t\tif char:match('%a') then\n\t\t\tif char:match('%l') then\n\t\t\t\tchar\
    \ = char:upper()\n\t\t\telse\n\t\t\t\tchar = char:lower()\n\t\t\tend\n\t\t\tfor\
    \ j = 1, #vowels do\n\t\t\t\tif char == vowels[j] then\n\t\t\t\t\tchar = vowels[(j\
    \ + 2) % #vowels]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tencoded\
    \ = encoded .. char\n\tend\n\treturn encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded[#encoded + 1] = char\n    end\n    return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[j + 2]\n\
    \                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ result = \"\"\n  for i = 1, #message do\n    local c = message:sub(i, i)\n \
    \   if c == c:upper() then\n      result = result .. c:lower()\n    else\n   \
    \   result = result .. c:upper()\n    end\n  end\n  return result\nend", "   \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        if table.indexOf(vowels, char) then\n\
    \            local index = table.indexOf(vowels, char)\n            if index ==\
    \ #vowels then\n                char = vowels[1]\n            else\n         \
    \       char = vowels[index + 1]\n            end\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    for j = 1, #vowels do\n   \
    \   if char == vowels[j] then\n        char = vowels[(j + 2) % 5 + 1]\n      end\n\
    \    end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ encoded = ''\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local next_vowel = vowels[(j % #vowels)\
    \ + 1]\n            encoded = encoded .. next_vowel\n        else\n          \
    \  encoded = encoded .. char\n        end\n    end\n    return encoded\nend",
  "  local encoded_message = \"\"\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    if char == \"a\" then\n      char = \"\
    c\"\n    elseif char == \"e\" then\n      char = \"g\"\n    elseif char == \"\
    i\" then\n      char = \"k\"\n    elseif char == \"o\" then\n      char = \"q\"\
    \n    elseif char == \"u\" then\n      char = \"y\"\n    end\n    encoded_message\
    \ = encoded_message .. char\n  end\n  return encoded_message\nend", "  local result\
    \ = {}\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char:match(\"\
    [aeiou]\") then\n      local index = string.find(\"aeiou\", char)\n      char\
    \ = string.sub(\"cdfghjkl\", index, index)\n    elseif char:match(\"[AEIOU]\"\
    ) then\n      local index = string.find(\"AEIOU\", char)\n      char = string.sub(\"\
    CDFGHJKL\", index, index)\n    elseif char:match(\"[a-z]\") then\n      char =\
    \ char:upper()\n    elseif char:match(\"[A-Z]\") then\n      char = char:lower()\n\
    \    end\n    table.insert(result, char)\n  end\n  return table.concat(result)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[j + 2]\n\
    \                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "  local encoded = \"\"\n  for i\
    \ = 1, #message do\n    local char = message:sub(i, i)\n    if char:match(\"[a-z]\"\
    ) then\n      char = char:upper()\n    elseif char:match(\"[A-Z]\") then\n   \
    \   char = char:lower()\n    end\n    if char:match(\"[aeiou]\") then\n      local\
    \ index = string.find(\"aeiou\", char)\n      char = string.sub(\"cdfghjkl\",\
    \ index, index)\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexOf(vowels, char)\n        \
    \    index = index + 2\n            if index > #vowels then\n                index\
    \ = index - #vowels\n            end\n            char = vowels[index]\n     \
    \   end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            local is_upper = char == char:upper()\n            local new_char\
    \ = string.char(string.byte(char) + (is_upper and 32 or -32))\n            encoded\
    \ = encoded .. new_char\n        end\n    end\n    return encoded\nend", "   \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "  local encoded = \"\"\n  for i = 1, #message do\n \
    \   local c = message:sub(i, i)\n    if c:match(\"[A-Z]\") then\n      encoded\
    \ = encoded .. c:lower()\n    elseif c:match(\"[a-z]\") then\n      encoded =\
    \ encoded .. c:upper()\n    else\n      encoded = encoded .. c\n    end\n  end\n\
    \  return encoded\nend", "  local encoded = \"\"\n  local vowels = {a = \"c\"\
    , e = \"g\", i = \"k\", o = \"q\", u = \"y\"}\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    if char:match(\"[aeiou]\") then\n      encoded\
    \ = encoded .. vowels[char]\n    elseif char:match(\"[A-Z]\") then\n      encoded\
    \ = encoded .. char:lower()\n    elseif char:match(\"[a-z]\") then\n      encoded\
    \ = encoded .. char:upper()\n    else\n      encoded = encoded .. char\n    end\n\
    \  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i,\
    \ i)\n        if c:match('%a') then\n            if c:match('%u') then\n     \
    \           c = c:lower()\n            else\n                c = c:upper()\n \
    \           end\n            local isVowel = false\n            for j = 1, #vowels\
    \ do\n                if c == vowels[j] then\n                    c = vowels[(j\
    \ + 2) % #vowels + 1]\n                    isVowel = true\n                  \
    \  break\n                end\n            end\n            if not isVowel then\n\
    \                c = c:byte() + 2\n                c = string.char(c)\n      \
    \      end\n        end\n        encoded = encoded .. c\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  local encoded = \"\"\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char:match(\"[a-z]\") then\n\
    \      if char == char:upper() then\n        char = char:lower()\n      else\n\
    \        char = char:upper()\n      end\n      if char == \"a\" then\n       \
    \ char = \"c\"\n      elseif char == \"e\" then\n        char = \"g\"\n      elseif\
    \ char == \"i\" then\n        char = \"k\"\n      elseif char == \"o\" then\n\
    \        char = \"q\"\n      elseif char == \"u\" then\n        char = \"y\"\n\
    \      end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "  local result = \"\"\n  for i = 1, #message do\n    local c = message:sub(i,\
    \ i)\n    if c:match(\"[aeiou]\") then\n      local n = c:byte() + 2\n      if\
    \ n > 122 then\n        n = n - 26\n      end\n      c = string.char(n)\n    elseif\
    \ c:match(\"[AEIOU]\") then\n      local n = c:byte() + 2\n      if n > 90 then\n\
    \        n = n - 26\n      end\n      c = string.char(n)\n    end\n    if c:match(\"\
    [a-z]\") then\n      c = c:upper()\n    elseif c:match(\"[A-Z]\") then\n     \
    \ c = c:lower()\n    end\n    result = result .. c\n  end\n  return result\nend",
  "  -- TODO: implement\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    index = (index + 2) % #vowels\n            char = vowels[index]\n       \
    \ end\n        encoded = encoded .. char\n    end\n    return encoded\nend", " \
    \   local encoded = \"\"\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.find(vowels,\
    \ char) + 2) % #vowels\n            if index == 0 then\n                index\
    \ = #vowels\n            end\n            char = vowels[index]\n        end\n\
    \        if char == char:upper() then\n            char = char:lower()\n     \
    \   else\n            char = char:upper()\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "  local encoded = \"\"\n  for i\
    \ = 1, #message do\n    local char = message:sub(i, i)\n    if char:match(\"[a-z]\"\
    ) then\n      char = char:upper()\n    elseif char:match(\"[A-Z]\") then\n   \
    \   char = char:lower()\n    end\n    if char:match(\"[aeiou]\") then\n      char\
    \ = char:gsub(\"[aeiou]\", {a = \"c\", e = \"g\", i = \"k\", o = \"q\", u = \"\
    s\"})\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      char = char:lower()\n    else\n     \
    \ char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        char = vowels[(j + 2) % #vowels]\n      end\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "  local encoded = \"\"\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    for j = 1, #vowels do\n   \
    \   if char == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n    \
    \  end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[j + 2]\n       \
    \         break\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexOf(vowels, char)\n        \
    \    if index == #vowels then\n                char = vowels[1]\n            else\n\
    \                char = vowels[index + 1]\n            end\n        end\n    \
    \    encoded = encoded .. char\n    end\n    return encoded\nend", "  local encoded\
    \ = \"\"\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if\
    \ char == char:upper() then\n      encoded = encoded .. char:lower()\n    else\n\
    \      encoded = encoded .. char:upper()\n    end\n  end\n  return encoded\nend",
  "  local result = \"\"\n  for i = 1, #message do\n    local c = message:sub(i, i)\n\
    \    if c:match(\"%a\") then\n      if c:match(\"%l\") then\n        c = c:upper()\n\
    \      else\n        c = c:lower()\n      end\n      if c:match(\"[aeiou]\") then\n\
    \        c = c:sub(2) .. c:sub(1, 1)\n      end\n    end\n    result = result\
    \ .. c\n  end\n  return result\nend", "  local encoded = \"\"\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char == char:upper() then\n \
    \     char = char:lower()\n    else\n      char = char:upper()\n    end\n    if\
    \ char == \"a\" then\n      char = \"c\"\n    elseif char == \"e\" then\n    \
    \  char = \"g\"\n    elseif char == \"i\" then\n      char = \"k\"\n    elseif\
    \ char == \"o\" then\n      char = \"q\"\n    elseif char == \"u\" then\n    \
    \  char = \"y\"\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[j + 2]\n                break\n            end\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = string.find(vowels,\
    \ char)\n            if index == #vowels then\n                index = 1\n   \
    \         else\n                index = index + 1\n            end\n         \
    \   char = vowels[index]\n        end\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = {}\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[j\
    \ + 2]\n                break\n            end\n        end\n        encoded[#encoded\
    \ + 1] = char\n    end\n    return table.concat(encoded)\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = \"\"\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor i = 1,\
    \ #message do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal isVowel = false\n\
    \t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\tisVowel =\
    \ true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel then\n\t\t\tlocal index\
    \ = (string.find('aeiou', char) + 2) % 5\n\t\t\tchar = vowels[index]\n\t\tend\n\
    \t\tif char == char:upper() then\n\t\t\tchar = char:lower()\n\t\telse\n\t\t\t\
    char = char:upper()\n\t\tend\n\t\tencoded = encoded .. char\n\tend\n\treturn encoded\n\
    end", "  local encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    if char == \"a\" then\n      char = \"\
    c\"\n    elseif char == \"e\" then\n      char = \"g\"\n    elseif char == \"\
    i\" then\n      char = \"k\"\n    elseif char == \"o\" then\n      char = \"q\"\
    \n    elseif char == \"u\" then\n      char = \"y\"\n    end\n    encoded = encoded\
    \ .. char\n  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.indexOf(vowels, char) then\n            local index =\
    \ table.indexOf(vowels, char)\n            char = vowels[index + 2]\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ encoded = \"\"\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if char ==\
    \ \"a\" then\n            char = \"c\"\n        elseif char == \"e\" then\n  \
    \          char = \"g\"\n        elseif char == \"i\" then\n            char =\
    \ \"k\"\n        elseif char == \"o\" then\n            char = \"q\"\n       \
    \ elseif char == \"u\" then\n            char = \"y\"\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "  local encoded = \"\"\
    \n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char:match(\"\
    [a-z]\") then\n      encoded = encoded .. char:upper()\n    elseif char:match(\"\
    [A-Z]\") then\n      encoded = encoded .. char:lower()\n    else\n      encoded\
    \ = encoded .. char\n    end\n  end\n  return encoded\nend", "  local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    if char == char:upper() then\n      char\
    \ = char:lower()\n    else\n      char = char:upper()\n    end\n    for j = 1,\
    \ #vowels do\n      if char == vowels[j] then\n        char = vowels[(j + 2) %\
    \ #vowels + 1]\n        break\n      end\n    end\n    encoded = encoded .. char\n\
    \  end\n  return encoded\nend", "\tlocal encoded = \"\"\n\tlocal vowels = {a=true,\
    \ e=true, i=true, o=true, u=true}\n\tfor i = 1, #message do\n\t\tlocal char =\
    \ message:sub(i, i)\n\t\tif char:match(\"%a\") then\n\t\t\tif char:match(\"%l\"\
    ) then\n\t\t\t\tchar = char:upper()\n\t\t\telse\n\t\t\t\tchar = char:lower()\n\
    \t\t\tend\n\t\t\tif vowels[char:lower()] then\n\t\t\t\tlocal index = string.find(\"\
    abcdefghijklmnopqrstuvwxyz\", char:lower())\n\t\t\t\tif index + 2 > 26 then\n\t\
    \t\t\t\tindex = index + 2 - 26\n\t\t\t\telse\n\t\t\t\t\tindex = index + 2\n\t\t\
    \t\tend\n\t\t\t\tchar = string.sub(\"abcdefghijklmnopqrstuvwxyz\", index, index)\n\
    \t\t\tend\n\t\tend\n\t\tencoded = encoded .. char\n\tend\n\treturn encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local isVowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        isVowel =\
    \ true\n        break\n      end\n    end\n    if isVowel then\n      local index\
    \ = (string.byte(char) - 96) % 5 + 1\n      char = vowels[index]\n    end\n  \
    \  if char == char:upper() then\n      char = char:lower()\n    else\n      char\
    \ = char:upper()\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i,\
    \ i)\n        if c == c:upper() then\n            c = c:lower()\n        else\n\
    \            c = c:upper()\n        end\n        if table.indexOf(vowels, c) then\n\
    \            c = vowels[(table.indexOf(vowels, c) + 2) % 5]\n        end\n   \
    \     encoded = encoded .. c\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        if c:match('%a') then\n   \
    \         if c:match('%l') then\n                c = c:upper()\n            else\n\
    \                c = c:lower()\n            end\n            for j = 1, #vowels\
    \ do\n                if c == vowels[j] then\n                    c = vowels[(j\
    \ + 2) % #vowels]\n                    break\n                end\n          \
    \  end\n        end\n        encoded[#encoded + 1] = c\n    end\n    return table.concat(encoded)\n\
    end", "\tlocal encoded = \"\"\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i,\
    \ i)\n\t\tif char == char:upper() then\n\t\t\tchar = char:lower()\n\t\telse\n\t\
    \t\tchar = char:upper()\n\t\tend\n\t\tif char == \"a\" then\n\t\t\tchar = \"c\"\
    \n\t\telseif char == \"e\" then\n\t\t\tchar = \"g\"\n\t\telseif char == \"i\"\
    \ then\n\t\t\tchar = \"k\"\n\t\telseif char == \"o\" then\n\t\t\tchar = \"q\"\n\
    \t\telseif char == \"u\" then\n\t\t\tchar = \"y\"\n\t\tend\n\t\tencoded = encoded\
    \ .. char\n\tend\n\treturn encoded\nend", "    local encoded = \"\"\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char:match(\"\
    [a-z]\") then\n            char = char:upper()\n        elseif char:match(\"[A-Z]\"\
    ) then\n            char = char:lower()\n        end\n        if char:match(\"\
    [aeiou]\") then\n            char = char:gsub(\"[aeiou]\", function(c)\n     \
    \           local index = string.find(\"aeiou\", c)\n                return \"\
    aeiou\":sub(index + 2, index + 2)\n            end)\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for i = 1, #message do\n  \
    \      local c = message:sub(i, i)\n        if c:match('%a') then\n          \
    \  if c:match('%l') then\n                c = c:upper()\n            else\n  \
    \              c = c:lower()\n            end\n            for j = 1, #vowels\
    \ do\n                if c == vowels[j] then\n                    c = vowels[(j\
    \ + 2) % #vowels]\n                    break\n                end\n          \
    \  end\n        end\n        encoded[#encoded + 1] = c\n    end\n    return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \tlocal encoded = \"\"\n\tfor i = 1, #message do\n\t\tlocal c = message:sub(i,\
    \ i)\n\t\tif c == c:upper() then\n\t\t\tc = c:lower()\n\t\telse\n\t\t\tc = c:upper()\n\
    \t\tend\n\t\tfor j = 1, #vowels do\n\t\t\tif c == vowels[j] then\n\t\t\t\tc =\
    \ vowels[(j + 2) % #vowels]\n\t\t\tend\n\t\tend\n\t\tencoded = encoded .. c\n\t\
    end\n\treturn encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \   local encoded = {}\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.indexOf(vowels,\
    \ char) then\n            local index = table.indexOf(vowels, char)\n        \
    \    index = index + 2\n            if index > #vowels then\n                index\
    \ = index - #vowels\n            end\n            char = vowels[index]\n     \
    \   end\n        table.insert(encoded, char)\n    end\n    return table.concat(encoded)\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = {}\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    local lower = char:lower()\n\
    \    if lower == char then\n      char = char:upper()\n    end\n    for j = 1,\
    \ #vowels do\n      if lower == vowels[j] then\n        char = vowels[(j + 2)\
    \ % #vowels + 1]\n        break\n      end\n    end\n    encoded[#encoded + 1]\
    \ = char\n  end\n  return table.concat(encoded)\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "  local encoded = \"\"\n  for i = 1, #message do\n \
    \   local char = message:sub(i, i)\n    if char:match(\"[a-z]\") then\n      char\
    \ = char:upper()\n    elseif char:match(\"[A-Z]\") then\n      char = char:lower()\n\
    \    end\n    if char:match(\"[aeiou]\") then\n      char = char:gsub(\"[aeiou]\"\
    , function(c)\n        return string.char(string.byte(c) + 2)\n      end)\n  \
    \  end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = \"\"\n    for i = 1,\
    \ #message do\n        local char = message:sub(i, i)\n        local isVowel =\
    \ false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                isVowel = true\n                break\n            end\n    \
    \    end\n        if isVowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            local isUpper = char == char:upper()\n            local newChar =\
    \ string.char(string.byte(char) + 1)\n            if newChar == '{' then\n   \
    \             newChar = 'A'\n            elseif newChar == '[' then\n        \
    \        newChar = 'a'\n            end\n            if isUpper then\n       \
    \         encoded = encoded .. newChar:upper()\n            else\n           \
    \     encoded = encoded .. newChar\n            end\n        end\n    end\n  \
    \  return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      char = char:lower()\n    else\n     \
    \ char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        char = vowels[(j + 2) % 5 + 1]\n      end\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                local index\
    \ = alphabet:find(char)\n                char = alphabet:sub(index + 2, index\
    \ + 2)\n                break\n            end\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        local isVowel = false\n        for j = 1, #vowels do\n \
    \           if char == vowels[j] then\n                isVowel = true\n      \
    \          char = vowels[(j + 2) % #vowels + 1]\n                break\n     \
    \       end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "  local encoded = \"\"\n  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  for i = 1, #message do\n    local c = message:sub(i, i)\n    if c ==\
    \ c:upper() then\n      c = c:lower()\n    else\n      c = c:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if c == vowels[j] then\n        c = vowels[(j\
    \ + 2) % #vowels + 1]\n      end\n    end\n    encoded = encoded .. c\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = \"\"\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexOf(vowels, char)\n            index = (index + 2) % #vowels\n\
    \            char = vowels[index + 1]\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "\tlocal vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n\tlocal encoded = ''\n\tfor i = 1, #message do\n\t\tlocal char =\
    \ message:sub(i, i)\n\t\tif char:find('%a') then\n\t\t\tlocal is_upper = char:find('%u')\n\
    \t\t\tlocal is_vowel = false\n\t\t\tfor j = 1, #vowels do\n\t\t\t\tif char:lower()\
    \ == vowels[j] then\n\t\t\t\t\tis_vowel = true\n\t\t\t\t\tbreak\n\t\t\t\tend\n\
    \t\t\tend\n\t\t\tif is_vowel then\n\t\t\t\tlocal index = (string.find(vowels,\
    \ char:lower()) + 2) % #vowels\n\t\t\t\tif index == 0 then\n\t\t\t\t\tindex =\
    \ #vowels\n\t\t\t\tend\n\t\t\t\tchar = vowels[index]\n\t\t\tend\n\t\t\tif is_upper\
    \ then\n\t\t\t\tchar = char:upper()\n\t\t\tend\n\t\tend\n\t\tencoded = encoded\
    \ .. char\n\tend\n\treturn encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[j + 2]\n                break\n            end\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor\
    \ i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal isVowel =\
    \ false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\t\
    isVowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel then\n\t\t\t\
    local index = (string.find('aeiou', char) + 2) % 5\n\t\t\tencoded = encoded ..\
    \ vowels[index]\n\t\telse\n\t\t\tif char == char:upper() then\n\t\t\t\tencoded\
    \ = encoded .. char:lower()\n\t\t\telse\n\t\t\t\tencoded = encoded .. char:upper()\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn encoded\nend", "  local encoded = \"\"\n \
    \ for i = 1, #message do\n    local char = message:sub(i, i)\n    if char:match(\"\
    [a-z]\") then\n      char = char:lower()\n      if char == \"a\" then\n      \
    \  char = \"c\"\n      elseif char == \"e\" then\n        char = \"g\"\n     \
    \ elseif char == \"i\" then\n        char = \"k\"\n      elseif char == \"o\"\
    \ then\n        char = \"q\"\n      elseif char == \"u\" then\n        char =\
    \ \"s\"\n      else\n        char = string.char(string.byte(char) + 2)\n     \
    \ end\n    elseif char:match(\"[A-Z]\") then\n      char = char:upper()\n    \
    \  if char == \"A\" then\n        char = \"C\"\n      elseif char == \"E\" then\n\
    \        char = \"G\"\n      elseif char == \"I\" then\n        char = \"K\"\n\
    \      elseif char == \"O\" then\n        char = \"Q\"\n      elseif char == \"\
    U\" then\n        char = \"S\"\n      else\n        char = string.char(string.byte(char)\
    \ + 2)\n      end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "  local result = \"\"\n  for i = 1, #message do\n    local c = message:sub(i,\
    \ i)\n    if c:match(\"[aeiou]\") then\n      local n = c:byte() + 2\n      if\
    \ n > 122 then\n        n = n - 26\n      end\n      c = string.char(n)\n    elseif\
    \ c:match(\"[AEIOU]\") then\n      local n = c:byte() + 2\n      if n > 90 then\n\
    \        n = n - 26\n      end\n      c = string.char(n)\n    end\n    result\
    \ = result .. c\n  end\n  return result\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        if char == char:upper() then\n     \
    \       char = char:lower()\n        else\n            char = char:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local letter = message:sub(i, i)\n        if letter == letter:upper()\
    \ then\n            letter = letter:lower()\n        else\n            letter\
    \ = letter:upper()\n        end\n        for j = 1, #vowels do\n            if\
    \ letter == vowels[j] then\n                letter = vowels[j + 2]\n         \
    \       break\n            end\n        end\n        encoded = encoded .. letter\n\
    \    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % 5 + 1]\n      end\n    end\n\
    \    encoded = encoded .. char\n  end\n  return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[j + 2]\n                break\n        \
    \    end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = {}\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n      end\n   \
    \ end\n    encoded[#encoded + 1] = char\n  end\n  return table.concat(encoded)\n\
    end", "  local encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match(\"[a-z]\") then\n      encoded = encoded .. char:upper()\n\
    \    elseif char:match(\"[A-Z]\") then\n      encoded = encoded .. char:lower()\n\
    \    elseif char:match(\"[aeiou]\") then\n      local index = string.find(\"aeiou\"\
    , char)\n      encoded = encoded .. \"aeiou\":sub(index + 2, index + 2)\n    else\n\
    \      encoded = encoded .. char\n    end\n  end\n  return encoded\nend", "  \
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexOf(vowels, char)\n            index\
    \ = index + 2\n            if index > #vowels then\n                index = index\
    \ - #vowels\n            end\n            char = vowels[index]\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local isVowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        isVowel =\
    \ true\n        break\n      end\n    end\n    if isVowel then\n      local nextVowel\
    \ = vowels[j + 2]\n      if nextVowel == nil then\n        nextVowel = vowels[1]\n\
    \      end\n      encoded = encoded .. nextVowel\n    else\n      encoded = encoded\
    \ .. char\n    end\n  end\n  return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        if char == char:upper() then\n     \
    \       char = char:lower()\n        else\n            char = char:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[j+2]\n                break\n            end\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local next_vowel = vowels[j\
    \ + 2]\n            if next_vowel == nil then\n                next_vowel = vowels[1]\n\
    \            end\n            encoded = encoded .. next_vowel\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend", "\tlocal vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor i = 1, #message do\n\
    \t\tlocal char = message:sub(i, i)\n\t\tlocal isVowel = false\n\t\tfor j = 1,\
    \ #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\tisVowel = true\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\t\tif isVowel then\n\t\t\tlocal index = (string.find('aeiou',\
    \ char) + 2) % 5\n\t\t\tif index == 0 then index = 5 end\n\t\t\tchar = vowels[index]\n\
    \t\tend\n\t\tif char:match('%a') then\n\t\t\tif char == char:upper() then\n\t\t\
    \t\tchar = char:lower()\n\t\t\telse\n\t\t\t\tchar = char:upper()\n\t\t\tend\n\t\
    \tend\n\t\tencoded = encoded .. char\n\tend\n\treturn encoded\nend", "  local\
    \ result = \"\"\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      result = result .. char:lower()\n   \
    \ else\n      result = result .. char:upper()\n    end\n  end\n  return result\n\
    end", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor\
    \ i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal is_vowel =\
    \ false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\t\
    is_vowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_vowel then\n\t\t\
    \tlocal index = (string.find('abcdefghijklmnopqrstuvwxyz', char) + 2) % 26\n\t\
    \t\tif index == 0 then\n\t\t\t\tindex = 26\n\t\t\tend\n\t\t\tchar = 'abcdefghijklmnopqrstuvwxyz':sub(index,\
    \ index)\n\t\tend\n\t\tif char == char:upper() then\n\t\t\tchar = char:lower()\n\
    \t\telse\n\t\t\tchar = char:upper()\n\t\tend\n\t\tencoded = encoded .. char\n\t\
    end\n\treturn encoded\nend", "  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  local vowels = \"aeiou\"\n  local encoded = \"\"\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    local lower = char:lower()\n    local\
    \ index = alphabet:find(lower)\n    if index then\n      local isUpper = char\
    \ == char:upper()\n      local isVowel = vowels:find(lower)\n      if isVowel\
    \ then\n        index = index + 2\n        if index > #alphabet then\n       \
    \   index = index - #alphabet\n        end\n      end\n      char = alphabet:sub(index,\
    \ index)\n      if isUpper then\n        char = char:upper()\n      end\n    end\n\
    \    encoded = encoded .. char\n  end\n  return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local encoded = \"\"\n  for i = 1, #message do\n    local c = message:sub(i,\
    \ i)\n    if c:match(\"[aeiou]\") then\n      local index = string.find(\"aeiou\"\
    , c)\n      c = string.sub(\"cdfghjkl\", index, index)\n    elseif c:match(\"\
    [AEIOU]\") then\n      local index = string.find(\"AEIOU\", c)\n      c = string.sub(\"\
    CDFGHJKL\", index, index)\n    elseif c:match(\"[a-z]\") then\n      c = c:upper()\n\
    \    elseif c:match(\"[A-Z]\") then\n      c = c:lower()\n    end\n    encoded\
    \ = encoded .. c\n  end\n  return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        if char == char:upper() then\n     \
    \       char = char:lower()\n        else\n            char = char:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char == char:upper() then\n \
    \     char = char:lower()\n    else\n      char = char:upper()\n    end\n    if\
    \ table.contains(vowels, char) then\n      local index = table.indexOf(vowels,\
    \ char)\n      char = vowels[(index + 2) % #vowels + 1]\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "  local encoded = \"\"\n\
    \  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char:match(\"\
    [A-Z]\") then\n      encoded = encoded .. char:lower()\n    elseif char:match(\"\
    [a-z]\") then\n      encoded = encoded .. char:upper()\n    else\n      encoded\
    \ = encoded .. char\n    end\n  end\n  return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local encoded = \"\"\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match(\"[A-Z]\") then\n            char = char:lower()\n\
    \        elseif char:match(\"[a-z]\") then\n            char = char:upper()\n\
    \        end\n        if char:match(\"[aeiou]\") then\n            local index\
    \ = string.find(\"aeiou\", char)\n            char = \"aeiou\":sub(index + 2,\
    \ index + 2)\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[j +\
    \ 2]\n                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local encoded = \"\"\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if char == \"a\" then\n     \
    \       char = \"c\"\n        elseif char == \"e\" then\n            char = \"\
    g\"\n        elseif char == \"i\" then\n            char = \"k\"\n        elseif\
    \ char == \"o\" then\n            char = \"q\"\n        elseif char == \"u\" then\n\
    \            char = \"y\"\n        end\n        encoded = encoded .. char\n  \
    \  end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = {}\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    index = index + 2\n            if index > #vowels then\n                index\
    \ = index - #vowels\n            end\n            char = vowels[index]\n     \
    \   end\n        table.insert(encoded, char)\n    end\n    return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        local isVowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          isVowel = true\n                break\n            end\n        end\n\
    \        if isVowel then\n            local index = (j + 2) % #vowels\n      \
    \      if index == 0 then\n                index = #vowels\n            end\n\
    \            char = vowels[index]\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
