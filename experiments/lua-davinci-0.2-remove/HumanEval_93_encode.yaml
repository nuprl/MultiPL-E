name: HumanEval_93_encode
language: lua
prompt: "-- Write a function that takes a message, and encodes in such a \n-- way\
  \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
  \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
  \ \n-- Assume only letters. \n-- Examples:\nlocal function encode(message)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
  \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
  \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
  \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt KnOw\
  \ WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local c = message:sub(i, i)\n        if c\
    \ == c:upper() then\n            c = c:lower()\n        else\n            c =\
    \ c:upper()\n        end\n        for j = 1, #vowels do\n            if c == vowels[j]\
    \ then\n                c = vowels[(j + 2) % #vowels + 1]\n                break\n\
    \            end\n        end\n        encoded = encoded .. c\n    end\n    return\
    \ encoded\nend", "  local encoded = \"\"\n  local vowels = {a = 3, e = 5, i =\
    \ 7, o = 9, u = 11}\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match(\"%a\") then\n      if char:match(\"%l\") then\n     \
    \   char = char:upper()\n      else\n        char = char:lower()\n      end\n\
    \      if vowels[char] then\n        char = string.char(vowels[char])\n      end\n\
    \    end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        if c == c:upper() then\n  \
    \          c = c:lower()\n        else\n            c = c:upper()\n        end\n\
    \        for j = 1, #vowels do\n            if c == vowels[j] then\n         \
    \       c = vowels[(j + 2) % #vowels + 1]\n                break\n           \
    \ end\n        end\n        encoded = encoded .. c\n    end\n    return encoded\n\
    end", "  local encoded = {}\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match(\"[a-z]\") then\n      char = char:upper()\n    elseif\
    \ char:match(\"[A-Z]\") then\n      char = char:lower()\n    end\n    if char:match(\"\
    [aeiou]\") then\n      local index = string.find(\"aeiou\", char)\n      char\
    \ = string.sub(\"cdfghjkl\", index, index)\n    end\n    encoded[#encoded + 1]\
    \ = char\n  end\n  return table.concat(encoded)\nend", "  -- TODO: Implement\n\
    end", "  local encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match(\"[A-Z]\") then\n      char = char:lower()\n    elseif\
    \ char:match(\"[a-z]\") then\n      char = char:upper()\n    end\n    if char:match(\"\
    [aeiou]\") then\n      local index = string.find(\"aeiou\", char)\n      char\
    \ = \"aeiou\":sub(index + 2, index + 2)\n    end\n    encoded = encoded .. char\n\
    \  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.indexOf(vowels,\
    \ char) then\n            char = vowels[(table.indexOf(vowels, char) + 2) % 5]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        local isVowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          isVowel = true\n                break\n            end\n        end\n\
    \        if isVowel then\n            local index = (j + 2) % #vowels\n      \
    \      if index == 0 then\n                index = #vowels\n            end\n\
    \            char = vowels[index]\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  local encoded = \"\"\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char:match(\"%a\") then\n   \
    \   if char:match(\"%l\") then\n        char = char:upper()\n      else\n    \
    \    char = char:lower()\n      end\n      if char:match(\"[aeiou]\") then\n \
    \       local index = \"aeiou\":find(char:lower())\n        char = \"cdfghjklmnpqrstvwxyz\"\
    :sub(index, index)\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local encoded = \"\"\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char:match(\"[a-z]\") then\n\
    \            char = char:upper()\n        elseif char:match(\"[A-Z]\") then\n\
    \            char = char:lower()\n        end\n        if char:match(\"[aeiou]\"\
    ) then\n            char = char:sub(2) .. char:sub(1, 1)\n        elseif char:match(\"\
    [AEIOU]\") then\n            char = char:sub(2) .. char:sub(1, 1)\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local is_vowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ index = j + 2\n      if index > #vowels then\n        index = index - #vowels\n\
    \      end\n      char = vowels[index]\n    else\n      if char == char:upper()\
    \ then\n        char = char:lower()\n      else\n        char = char:upper()\n\
    \      end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ lower = char:lower()\n        local upper = char:upper()\n        if lower ==\
    \ upper then\n            encoded = encoded .. char\n        elseif lower == char\
    \ then\n            encoded = encoded .. upper\n        else\n            encoded\
    \ = encoded .. lower\n        end\n        for j = 1, #vowels do\n           \
    \ if lower == vowels[j] then\n                local next = vowels[(j + 2) % #vowels\
    \ + 1]\n                encoded = encoded:gsub(lower, next)\n            end\n\
    \        end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        local isVowel = false\n        for j\
    \ = 1, #vowels do\n            if char == vowels[j] then\n                isVowel\
    \ = true\n                break\n            end\n        end\n        if isVowel\
    \ then\n            local index = (string.byte(char) - 96) % 5 + 1\n         \
    \   encoded = encoded .. vowels[index]\n        else\n            local isUpper\
    \ = char == char:upper()\n            local newChar = string.char(string.byte(char)\
    \ + (isUpper and 32 or -32))\n            encoded = encoded .. newChar\n     \
    \   end\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char =\
    \ message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    for j = 1, #vowels do\n   \
    \   if char == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n    \
    \  end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        local isVowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                isVowel = true\n                break\n            end\n    \
    \    end\n        if isVowel then\n            local index = j + 2\n         \
    \   if index > #vowels then\n                index = index - #vowels\n       \
    \     end\n            char = vowels[index]\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexof(vowels, char)\n            index = index + 2\n       \
    \     if index > #vowels then\n                index = index - #vowels\n     \
    \       end\n            char = vowels[index]\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexOf(vowels, char)\n            if index == #vowels then\n\
    \                index = 1\n            else\n                index = index +\
    \ 2\n            end\n            char = vowels[index]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[j + 2]\n                break\n        \
    \    end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded\
    \ = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char\
    \ == char:upper() then\n      char = char:lower()\n    else\n      char = char:upper()\n\
    \    end\n    for j = 1, #vowels do\n      if char == vowels[j] then\n       \
    \ char = vowels[(j + 2) % #vowels]\n      end\n    end\n    encoded = encoded\
    \ .. char\n  end\n  return encoded\nend", "  local encoded = \"\"\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char:match(\"[a-z]\"\
    ) then\n      char = char:upper()\n    elseif char:match(\"[A-Z]\") then\n   \
    \   char = char:lower()\n    end\n    if char:match(\"[aeiou]\") then\n      char\
    \ = string.char(string.byte(char) + 2)\n    end\n    encoded = encoded .. char\n\
    \  end\n  return encoded\nend", "    local encoded = \"\"\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char:match(\"[a-z]\"\
    ) then\n            char = char:upper()\n        elseif char:match(\"[A-Z]\")\
    \ then\n            char = char:lower()\n        end\n        if char:match(\"\
    [aeiou]\") then\n            char = char:gsub(\"[aeiou]\", \"aeiou\"):sub(2, 2)\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded = encoded .. char\n \
    \   end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char == char:upper() then\n \
    \     char = char:lower()\n    else\n      char = char:upper()\n    end\n    for\
    \ j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "  local encoded = \"\"\n  for i = 1, #message do\n \
    \   local char = message:sub(i, i)\n    local code = char:byte()\n    if code\
    \ >= 65 and code <= 90 then\n      code = code + 32\n    elseif code >= 97 and\
    \ code <= 122 then\n      code = code - 32\n    end\n    if code == 97 then\n\
    \      code = 99\n    elseif code == 101 then\n      code = 103\n    elseif code\
    \ == 105 then\n      code = 107\n    elseif code == 111 then\n      code = 113\n\
    \    elseif code == 117 then\n      code = 119\n    end\n    encoded = encoded\
    \ .. string.char(code)\n  end\n  return encoded\nend", "  local encoded = \"\"\
    \n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char:match(\"\
    [A-Z]\") then\n      encoded = encoded .. char:lower()\n    elseif char:match(\"\
    [a-z]\") then\n      encoded = encoded .. char:upper()\n    else\n      encoded\
    \ = encoded .. char\n    end\n  end\n  return encoded\nend", "  local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    if char == char:upper() then\n      char\
    \ = char:lower()\n    else\n      char = char:upper()\n    end\n    for _, v in\
    \ ipairs(vowels) do\n      if char == v then\n        char = vowels[((vowels[v]\
    \ or 0) + 2) % #vowels + 1]\n        break\n      end\n    end\n    encoded =\
    \ encoded .. char\n  end\n  return encoded\nend", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local vowels = \"aeiou\"\n    local encoded = \"\"\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local isVowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels:sub(j, j) then\n\
    \                isVowel = true\n                break\n            end\n    \
    \    end\n        if isVowel then\n            local index = alphabet:find(char)\n\
    \            local newIndex = index + 2\n            if newIndex > #alphabet then\n\
    \                newIndex = newIndex - #alphabet\n            end\n          \
    \  char = alphabet:sub(newIndex, newIndex)\n        end\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local encoded = \"\"\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char == char:upper() then\n            encoded\
    \ = encoded .. char:lower()\n        else\n            encoded = encoded .. char:upper()\n\
    \        end\n    end\n    return encoded\nend", "  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char\
    \ = message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    for j = 1, #vowels do\n   \
    \   if char == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n    \
    \  end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded[#encoded + 1] = char\n    end\n\
    \    return table.concat(encoded)\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        local isVowel = false\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                isVowel = true\n\
    \                break\n            end\n        end\n        if isVowel then\n\
    \            local index = (string.byte(char) + 2) - 97\n            if index\
    \ > 25 then\n                index = index - 26\n            end\n           \
    \ encoded = encoded .. string.char(index + 97)\n        else\n            if char\
    \ == char:upper() then\n                encoded = encoded .. char:lower()\n  \
    \          else\n                encoded = encoded .. char:upper()\n         \
    \   end\n        end\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[j + 2]\n                break\n        \
    \    end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local c = message:sub(i, i)\n    \
    \    if c == c:upper() then\n            c = c:lower()\n        else\n       \
    \     c = c:upper()\n        end\n        if table.contains(vowels, c) then\n\
    \            local index = table.indexOf(vowels, c)\n            c = vowels[(index\
    \ + 2) % #vowels + 1]\n        end\n        encoded = encoded .. c\n    end\n\
    \    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      char = char:lower()\n    else\n     \
    \ char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        char = vowels[(j + 2) % #vowels]\n      end\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local result = \"\"\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      result = result .. char:lower()\n    else\n      result = result\
    \ .. char:upper()\n    end\n  end\n  return result\nend", "  local encoded = ''\n\
    \  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char:match('[a-z]')\
    \ then\n      char = char:upper()\n    elseif char:match('[A-Z]') then\n     \
    \ char = char:lower()\n    end\n    if char:match('[aeiou]') then\n      char\
    \ = char:gsub('[aeiou]', function(c)\n        local next = c:byte() + 2\n    \
    \    if next > 122 then\n          next = next - 26\n        end\n        return\
    \ string.char(next)\n      end)\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "  local encoded = \"\"\n  for i = 1, #message do\n \
    \   local char = message:sub(i, i)\n    if char == char:upper() then\n      char\
    \ = char:lower()\n    else\n      char = char:upper()\n    end\n    if char ==\
    \ \"a\" then\n      char = \"c\"\n    elseif char == \"e\" then\n      char =\
    \ \"g\"\n    elseif char == \"i\" then\n      char = \"k\"\n    elseif char ==\
    \ \"o\" then\n      char = \"q\"\n    elseif char == \"u\" then\n      char =\
    \ \"y\"\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "  local encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match(\"[A-Z]\") then\n      encoded = encoded .. char:lower()\n\
    \    elseif char:match(\"[a-z]\") then\n      encoded = encoded .. char:upper()\n\
    \    else\n      encoded = encoded .. char\n    end\n  end\n  return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = {}\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    if table.contains(vowels, char) then\n\
    \      local index = table.indexOf(vowels, char)\n      index = index + 2\n  \
    \    if index > #vowels then\n        index = index - #vowels\n      end\n   \
    \   char = vowels[index]\n    end\n    table.insert(encoded, char)\n  end\n  return\
    \ table.concat(encoded)\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ % #vowels) + 1]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n\tlocal result = ''\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i,\
    \ i)\n\t\tlocal is_vowel = false\n\t\tfor j = 1, #vowels do\n\t\t\tif char ==\
    \ vowels[j] then\n\t\t\t\tis_vowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \t\tif is_vowel then\n\t\t\tlocal index = string.find(vowels, char)\n\t\t\tif\
    \ index == #vowels then\n\t\t\t\tindex = 1\n\t\t\telse\n\t\t\t\tindex = index\
    \ + 2\n\t\t\tend\n\t\t\tchar = vowels[index]\n\t\tend\n\t\tif char == char:upper()\
    \ then\n\t\t\tchar = char:lower()\n\t\telse\n\t\t\tchar = char:upper()\n\t\tend\n\
    \t\tresult = result .. char\n\tend\n\treturn result\nend", "\tlocal result = \"\
    \"\n\tlocal vowels = {a = \"c\", e = \"g\", i = \"k\", o = \"q\", u = \"y\"}\n\
    \tfor i = 1, #message do\n\t\tlocal c = message:sub(i, i)\n\t\tif c == c:upper()\
    \ then\n\t\t\tc = c:lower()\n\t\telse\n\t\t\tc = c:upper()\n\t\tend\n\t\tif vowels[c]\
    \ then\n\t\t\tc = vowels[c]\n\t\tend\n\t\tresult = result .. c\n\tend\n\treturn\
    \ result\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded =\
    \ ''\n\tfor i = 1, #message do\n\t\tlocal c = message:sub(i, i)\n\t\tif c == c:upper()\
    \ then\n\t\t\tc = c:lower()\n\t\telse\n\t\t\tc = c:upper()\n\t\tend\n\t\tfor j\
    \ = 1, #vowels do\n\t\t\tif c == vowels[j] then\n\t\t\t\tc = vowels[(j + 2) %\
    \ #vowels]\n\t\t\tend\n\t\tend\n\t\tencoded = encoded .. c\n\tend\n\treturn encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % 5 + 1]\n                break\n            end\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend", "  local encoded\
    \ = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char\
    \ == char:upper() then\n      char = char:lower()\n    else\n      char = char:upper()\n\
    \    end\n    if char == 'a' then\n      char = 'c'\n    elseif char == 'e' then\n\
    \      char = 'g'\n    elseif char == 'i' then\n      char = 'k'\n    elseif char\
    \ == 'o' then\n      char = 'q'\n    elseif char == 'u' then\n      char = 'y'\n\
    \    end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    --\
    \ TODO: implement\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      char = char:lower()\n    else\n     \
    \ char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        char = vowels[(j + 2) % #vowels]\n      end\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "  local encoded = \"\"\n\
    \  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char:match(\"\
    [aeiou]\") then\n      local index = string.find(\"aeiou\", char)\n      local\
    \ next = string.sub(\"aeiou\", index + 2, index + 2)\n      encoded = encoded\
    \ .. next\n    elseif char:match(\"[AEIOU]\") then\n      local index = string.find(\"\
    AEIOU\", char)\n      local next = string.sub(\"AEIOU\", index + 2, index + 2)\n\
    \      encoded = encoded .. next\n    elseif char:match(\"[a-z]\") then\n    \
    \  encoded = encoded .. char:upper()\n    elseif char:match(\"[A-Z]\") then\n\
    \      encoded = encoded .. char:lower()\n    else\n      encoded = encoded ..\
    \ char\n    end\n  end\n  return encoded\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char =\
    \ message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    for j = 1, #vowels do\n   \
    \   if char == vowels[j] then\n        local index = (j + 2) % #vowels\n     \
    \   char = vowels[index + 1]\n      end\n    end\n    encoded = encoded .. char\n\
    \  end\n  return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\t\
    local encoded = ''\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i,\
    \ i)\n\t\tlocal isVowel = false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j]\
    \ then\n\t\t\t\tisVowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel\
    \ then\n\t\t\tlocal index = (string.find('aeiou', char) + 2) % 5\n\t\t\tchar =\
    \ vowels[index]\n\t\tend\n\t\tif char == char:upper() then\n\t\t\tchar = char:lower()\n\
    \t\telse\n\t\t\tchar = char:upper()\n\t\tend\n\t\tencoded = encoded .. char\n\t\
    end\n\treturn encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \   local encoded = {}\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded[#encoded + 1]\
    \ = char\n    end\n    return table.concat(encoded)\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local isVowel = false\n     \
    \   for j = 1, #vowels do\n            if char == vowels[j] then\n           \
    \     isVowel = true\n                break\n            end\n        end\n  \
    \      if isVowel then\n            local nextVowel = ''\n            for j =\
    \ 1, #vowels do\n                if char == vowels[j] then\n                 \
    \   nextVowel = vowels[j + 2]\n                    break\n                end\n\
    \            end\n            if nextVowel == '' then\n                nextVowel\
    \ = vowels[1]\n            end\n            encoded = encoded .. nextVowel\n \
    \       else\n            local isUpper = char == char:upper()\n            local\
    \ char = char:lower()\n            local nextChar = string.char(string.byte(char)\
    \ + 1)\n            if nextChar == '{' then\n                nextChar = 'a'\n\
    \            end\n            if isUpper then\n                nextChar = nextChar:upper()\n\
    \            end\n            encoded = encoded .. nextChar\n        end\n   \
    \ end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = \"\"\n    for i = 1, #message do\n        local letter =\
    \ message:sub(i, i)\n        if letter == letter:upper() then\n            letter\
    \ = letter:lower()\n        else\n            letter = letter:upper()\n      \
    \  end\n        for j = 1, #vowels do\n            if letter == vowels[j] then\n\
    \                letter = vowels[(j + 2) % #vowels]\n            end\n       \
    \ end\n        encoded = encoded .. letter\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                char = vowels[1]\n            else\n\
    \                char = vowels[index + 1]\n            end\n        end\n    \
    \    encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local isVowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          isVowel = true\n                break\n            end\n        end\n\
    \        if isVowel then\n            local nextVowel = vowels[j + 2]\n      \
    \      if nextVowel == nil then\n                nextVowel = vowels[1]\n     \
    \       end\n            encoded = encoded .. nextVowel\n        else\n      \
    \      if char == char:upper() then\n                encoded = encoded .. char:lower()\n\
    \            else\n                encoded = encoded .. char:upper()\n       \
    \     end\n        end\n    end\n    return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexOf(vowels, char) then\n            char =\
    \ vowels[(table.indexOf(vowels, char) + 2) % 5]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    if table.contains(vowels, char)\
    \ then\n      local index = table.indexof(vowels, char)\n      if index == #vowels\
    \ then\n        char = vowels[1]\n      else\n        char = vowels[index + 1]\n\
    \      end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  local encoded = \"\"\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char:match(\"[aeiou]\") then\n\
    \      local index = string.find(\"aeiou\", char)\n      encoded = encoded ..\
    \ string.sub(\"cdfghjkl\", index, index)\n    elseif char:match(\"[AEIOU]\") then\n\
    \      local index = string.find(\"AEIOU\", char)\n      encoded = encoded ..\
    \ string.sub(\"CDFGHJKL\", index, index)\n    elseif char:match(\"[a-z]\") then\n\
    \      encoded = encoded .. char:upper()\n    elseif char:match(\"[A-Z]\") then\n\
    \      encoded = encoded .. char:lower()\n    else\n      encoded = encoded ..\
    \ char\n    end\n  end\n  return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        if char == char:upper() then\n     \
    \       char = char:lower()\n        else\n            char = char:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % 5 + 1]\n                break\n     \
    \       end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local encoded = \"\"\n    for i = 1, #message do\n     \
    \   local char = message:sub(i, i)\n        if char:match(\"[a-z]\") then\n  \
    \          encoded = encoded .. char:upper()\n        elseif char:match(\"[A-Z]\"\
    ) then\n            encoded = encoded .. char:lower()\n        elseif char:match(\"\
    [aeiou]\") then\n            local index = string.find(\"aeiou\", char)\n    \
    \        encoded = encoded .. \"aeiou\":sub(index + 2, index + 2)\n        elseif\
    \ char:match(\"[AEIOU]\") then\n            local index = string.find(\"AEIOU\"\
    , char)\n            encoded = encoded .. \"AEIOU\":sub(index + 2, index + 2)\n\
    \        else\n            encoded = encoded .. char\n        end\n    end\n \
    \   return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      char = char:lower()\n    else\n     \
    \ char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        char = vowels[(j + 2) % 5 + 1]\n      end\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "  local encoded = ''\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    if char == 'a' then\n      char = 'c'\n    elseif char == 'e' then\n    \
    \  char = 'g'\n    elseif char == 'i' then\n      char = 'k'\n    elseif char\
    \ == 'o' then\n      char = 'q'\n    elseif char == 'u' then\n      char = 'y'\n\
    \    end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local isVowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          isVowel = true\n                break\n            end\n        end\n\
    \        if isVowel then\n            local index = (string.byte(char) - string.byte('a')\
    \ + 2) % 26\n            char = string.char(string.byte('a') + index)\n      \
    \  end\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "  local encoded = \"\"\n\
    \  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char:match(\"\
    [a-z]\") then\n      char = char:upper()\n    elseif char:match(\"[A-Z]\") then\n\
    \      char = char:lower()\n    end\n    if char:match(\"[aeiou]\") then\n   \
    \   char = char:gsub(\"[aeiou]\", function(c)\n        local next = c:byte() +\
    \ 2\n        if next > 122 then\n          next = next - 26\n        end\n   \
    \     return string.char(next)\n      end)\n    end\n    encoded = encoded ..\
    \ char\n  end\n  return encoded\nend", "  -- TODO: Implement\nend", "  local encoded\
    \ = \"\"\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if\
    \ char:match(\"[a-z]\") then\n      char = char:upper()\n    elseif char:match(\"\
    [A-Z]\") then\n      char = char:lower()\n    end\n    if char:match(\"[aeiou]\"\
    ) then\n      char = char:gsub(\"[aeiou]\", function(c)\n        return string.char(string.byte(c)\
    \ + 2)\n      end)\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "  local result = {}\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local lower = char:lower()\n    local upper = char:upper()\n    if lower\
    \ == 'a' then\n      table.insert(result, upper .. 'C')\n    elseif lower == 'e'\
    \ then\n      table.insert(result, upper .. 'G')\n    elseif lower == 'i' then\n\
    \      table.insert(result, upper .. 'K')\n    elseif lower == 'o' then\n    \
    \  table.insert(result, upper .. 'M')\n    elseif lower == 'u' then\n      table.insert(result,\
    \ upper .. 'O')\n    elseif lower == 'y' then\n      table.insert(result, upper\
    \ .. 'A')\n    elseif lower == char then\n      table.insert(result, upper)\n\
    \    else\n      table.insert(result, lower)\n    end\n  end\n  return table.concat(result)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  local encoded = \"\"\n  for i = 1, #message\
    \ do\n    local c = message:sub(i, i)\n    if c == c:upper() then\n      c = c:lower()\n\
    \    else\n      c = c:upper()\n    end\n    if c == \"a\" then\n      c = \"\
    c\"\n    elseif c == \"e\" then\n      c = \"g\"\n    elseif c == \"i\" then\n\
    \      c = \"k\"\n    elseif c == \"o\" then\n      c = \"q\"\n    elseif c ==\
    \ \"u\" then\n      c = \"y\"\n    end\n    encoded = encoded .. c\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    if index == #vowels then\n                index = 1\n            else\n \
    \               index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend", "  local encoded\
    \ = \"\"\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if\
    \ char:match(\"[a-z]\") then\n      char = char:upper()\n    elseif char:match(\"\
    [A-Z]\") then\n      char = char:lower()\n    end\n    if char:match(\"[aeiou]\"\
    ) then\n      char = char:gsub(\"[aeiou]\", {a = \"c\", e = \"g\", i = \"k\",\
    \ o = \"q\", u = \"s\"})\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded\
    \ = ''\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\t\tif char\
    \ == char:upper() then\n\t\t\tchar = char:lower()\n\t\telse\n\t\t\tchar = char:upper()\n\
    \t\tend\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\t\
    char = vowels[(j + 2) % #vowels]\n\t\t\tend\n\t\tend\n\t\tencoded = encoded ..\
    \ char\n\tend\n\treturn encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n      end\n   \
    \ end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char == char:upper() then\n \
    \     char = char:lower()\n    else\n      char = char:upper()\n    end\n    for\
    \ j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % 5 + 1]\n      end\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local index\
    \ = (string.byte(char) - 96) % 5 + 1\n            char = vowels[index]\n     \
    \   end\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "  local encoded = \"\"\n  for i = 1, #message do\n \
    \   local char = message:sub(i, i)\n    if char:match(\"[a-z]\") then\n      char\
    \ = char:upper()\n    elseif char:match(\"[A-Z]\") then\n      char = char:lower()\n\
    \    end\n    if char:match(\"[aeiou]\") then\n      local index = string.find(\"\
    aeiou\", char)\n      char = \"aeiou\":sub(index + 2, index + 2)\n    end\n  \
    \  encoded = encoded .. char\n  end\n  return encoded\nend", "  local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local c = message:sub(i, i)\n    local lower = c:lower()\n    if lower ==\
    \ c then\n      c = c:upper()\n    end\n    if table.indexOf(vowels, lower) then\n\
    \      local index = table.indexOf(vowels, lower)\n      c = vowels[(index + 2)\
    \ % #vowels + 1]\n    end\n    encoded = encoded .. c\n  end\n  return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  -- TODO: Implement\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    if char == char:upper() then\n      char\
    \ = char:lower()\n    else\n      char = char:upper()\n    end\n    for j = 1,\
    \ #vowels do\n      if char == vowels[j] then\n        char = vowels[(j + 2) %\
    \ 5 + 1]\n      end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "  local encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match(\"[a-z]\") then\n      local ascii = char:byte()\n   \
    \   if ascii >= 97 and ascii <= 122 then\n        encoded = encoded .. string.char(ascii\
    \ - 32)\n      else\n        encoded = encoded .. string.char(ascii + 32)\n  \
    \    end\n    elseif char:match(\"[aeiou]\") then\n      local ascii = char:byte()\n\
    \      if ascii == 97 then\n        encoded = encoded .. string.char(99)\n   \
    \   elseif ascii == 101 then\n        encoded = encoded .. string.char(103)\n\
    \      elseif ascii == 105 then\n        encoded = encoded .. string.char(107)\n\
    \      elseif ascii == 111 then\n        encoded = encoded .. string.char(113)\n\
    \      elseif ascii == 117 then\n        encoded = encoded .. string.char(119)\n\
    \      end\n    else\n      encoded = encoded .. char\n    end\n  end\n  return\
    \ encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded\
    \ = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char\
    \ == char:upper() then\n      char = char:lower()\n    else\n      char = char:upper()\n\
    \    end\n    for j = 1, #vowels do\n      if char == vowels[j] then\n       \
    \ char = vowels[(j + 2) % #vowels]\n      end\n    end\n    encoded = encoded\
    \ .. char\n  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char:match(\"[A-Z]\") then\n      encoded = encoded .. char:lower()\n\
    \    elseif char:match(\"[a-z]\") then\n      encoded = encoded .. char:upper()\n\
    \    else\n      encoded = encoded .. char\n    end\n  end\n  return encoded\n\
    end", "    local vowels = \"aeiou\"\n    local encoded = \"\"\n    for i = 1,\
    \ #message do\n        local char = message:sub(i, i)\n        if char:match(\"\
    %a\") then\n            if char:match(\"%l\") then\n                char = char:upper()\n\
    \            else\n                char = char:lower()\n            end\n    \
    \        if vowels:find(char) then\n                local index = vowels:find(char)\n\
    \                if index == 5 then\n                    index = 1\n         \
    \       else\n                    index = index + 2\n                end\n   \
    \             char = vowels:sub(index, index)\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % 5 + 1]\n                break\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.indexOf(vowels,\
    \ char) then\n            local index = table.indexOf(vowels, char)\n        \
    \    char = vowels[(index + 2) % #vowels]\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char == char:upper() then\n \
    \     char = char:lower()\n    else\n      char = char:upper()\n    end\n    for\
    \ j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i, i)\n\
    \        if c == c:upper() then\n            c = c:lower()\n        else\n   \
    \         c = c:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if c == vowels[j] then\n                c = vowels[(j + 2) % #vowels + 1]\n\
    \                break\n            end\n        end\n        encoded = encoded\
    \ .. c\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n      end\n   \
    \ end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "\tlocal\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor i = 1, #message\
    \ do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal isVowel = false\n\t\tfor j\
    \ = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\tisVowel = true\n\t\
    \t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel then\n\t\t\tlocal nextVowel =\
    \ vowels[j + 2]\n\t\t\tif not nextVowel then\n\t\t\t\tnextVowel = vowels[1]\n\t\
    \t\tend\n\t\t\tencoded = encoded .. nextVowel\n\t\telse\n\t\t\tif char == char:upper()\
    \ then\n\t\t\t\tencoded = encoded .. char:lower()\n\t\t\telse\n\t\t\t\tencoded\
    \ = encoded .. char:upper()\n\t\t\tend\n\t\tend\n\tend\n\treturn encoded\nend",
  "\tlocal encoded_message = \"\"\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\t\
    local vowels_encoded = {'c', 'g', 'k', 'o', 's'}\n\tfor i = 1, #message do\n\t\
    \tlocal char = message:sub(i, i)\n\t\tlocal char_lower = char:lower()\n\t\tlocal\
    \ char_upper = char:upper()\n\t\tlocal char_encoded = char\n\t\tfor j = 1, #vowels\
    \ do\n\t\t\tif char_lower == vowels[j] then\n\t\t\t\tchar_encoded = vowels_encoded[j]\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif char_lower == char then\n\t\t\tchar_encoded\
    \ = char_encoded:upper()\n\t\tend\n\t\tencoded_message = encoded_message .. char_encoded\n\
    \tend\n\treturn encoded_message\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char == char:upper() then\n            char\
    \ = char:lower()\n        else\n            char = char:upper()\n        end\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          char = vowels[(j + 2) % #vowels]\n            end\n        end\n  \
    \      encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ encoded = ''\n  for i = 1, #message do\n    local c = message:sub(i, i)\n  \
    \  if c:match('[a-z]') then\n      if c == c:upper() then\n        c = c:lower()\n\
    \      else\n        c = c:upper()\n      end\n    end\n    if c:match('[aeiou]')\
    \ then\n      local index = string.find('aeiou', c)\n      c = 'aeiou':sub(index\
    \ + 2, index + 2)\n    end\n    encoded = encoded .. c\n  end\n  return encoded\n\
    end", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor\
    \ i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal isVowel =\
    \ false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\t\
    isVowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel then\n\t\t\t\
    local nextVowel = vowels[j + 2]\n\t\t\tif not nextVowel then\n\t\t\t\tnextVowel\
    \ = vowels[1]\n\t\t\tend\n\t\t\tencoded = encoded .. nextVowel\n\t\telse\n\t\t\
    \tif char == char:upper() then\n\t\t\t\tencoded = encoded .. char:lower()\n\t\t\
    \telse\n\t\t\t\tencoded = encoded .. char:upper()\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn encoded\nend", "  local encoded = \"\"\n  local vowels = {a = true, e\
    \ = true, i = true, o = true, u = true}\n  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  local alphabet_len = #alphabet\n  for i = 1, #message do\n    local c = message:sub(i,\
    \ i)\n    local c_lower = c:lower()\n    local c_upper = c:upper()\n    local\
    \ is_lower = c == c_lower\n    local is_upper = c == c_upper\n    local is_vowel\
    \ = vowels[c_lower]\n    if is_vowel then\n      local vowel_index = alphabet:find(c_lower)\n\
    \      local next_vowel_index = vowel_index + 2\n      if next_vowel_index > alphabet_len\
    \ then\n        next_vowel_index = next_vowel_index - alphabet_len\n      end\n\
    \      local next_vowel = alphabet:sub(next_vowel_index, next_vowel_index)\n \
    \     encoded = encoded .. (is_lower and next_vowel or next_vowel:upper())\n \
    \   else\n      encoded = encoded .. (is_lower and c_upper or c_lower)\n    end\n\
    \  end\n  return encoded\nend", "  local result = \"\"\n  for i = 1, #message\
    \ do\n    local c = message:sub(i, i)\n    if c == c:upper() then\n      result\
    \ = result .. c:lower()\n    else\n      result = result .. c:upper()\n    end\n\
    \  end\n  return result\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \ local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n      end\n   \
    \ end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    local isVowel = false\n    for j\
    \ = 1, #vowels do\n      if char == vowels[j] then\n        isVowel = true\n \
    \       break\n      end\n    end\n    if isVowel then\n      local nextVowel\
    \ = vowels[j + 2]\n      if nextVowel == nil then\n        nextVowel = vowels[1]\n\
    \      end\n      encoded = encoded .. nextVowel\n    else\n      encoded = encoded\
    \ .. char\n    end\n  end\n  return encoded\nend", "  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char\
    \ = message:sub(i, i)\n    local is_vowel = false\n    for j = 1, #vowels do\n\
    \      if char == vowels[j] then\n        is_vowel = true\n        break\n   \
    \   end\n    end\n    if is_vowel then\n      local index = (j + 2) % #vowels\n\
    \      if index == 0 then\n        index = #vowels\n      end\n      char = vowels[index]\n\
    \    else\n      if char == char:upper() then\n        char = char:lower()\n \
    \     else\n        char = char:upper()\n      end\n    end\n    encoded = encoded\
    \ .. char\n  end\n  return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n      end\n   \
    \ end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "  -- Your\
    \ code here\nend", "  local encoded = \"\"\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    if char:match(\"[A-Z]\") then\n      encoded =\
    \ encoded .. char:lower()\n    elseif char:match(\"[a-z]\") then\n      encoded\
    \ = encoded .. char:upper()\n    else\n      encoded = encoded .. char\n    end\n\
    \  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message\
    \ do\n    local c = message:sub(i, i)\n    if c == c:upper() then\n      c = c:lower()\n\
    \    else\n      c = c:upper()\n    end\n    for j = 1, #vowels do\n      if c\
    \ == vowels[j] then\n        c = vowels[(j + 2) % #vowels + 1]\n        break\n\
    \      end\n    end\n    encoded = encoded .. c\n  end\n  return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local isVowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        isVowel =\
    \ true\n        break\n      end\n    end\n    if isVowel then\n      local index\
    \ = string.find('abcdefghijklmnopqrstuvwxyz', char)\n      local newChar = string.sub('cdefghijklmnopqrstuvwxyzab',\
    \ index, index)\n      encoded = encoded .. newChar\n    else\n      local newChar\
    \ = string.upper(char)\n      encoded = encoded .. newChar\n    end\n  end\n \
    \ return encoded\nend", "\tlocal message_table = {}\n\tlocal encoded_message =\
    \ \"\"\n\tlocal vowels = \"aeiou\"\n\tlocal vowels_table = {}\n\tlocal encoded_vowels\
    \ = \"\"\n\tlocal encoded_vowels_table = {}\n\tlocal encoded_vowels_index = 1\n\
    \tlocal encoded_vowels_table_index = 1\n\tlocal encoded_message_table = {}\n\t\
    local encoded_message_index = 1\n\tlocal encoded_message_table_index = 1\n\tlocal\
    \ encoded_message_table_length = 0\n\tlocal encoded_message_table_length_index\
    \ = 1\n\tlocal encoded_message_table_length_index_2 = 1\n\tlocal encoded_message_table_length_index_3\
    \ = 1\n\tlocal encoded_message_table_length_index_4 = 1\n\tlocal encoded_message_table_length_index_5\
    \ = 1\n\tlocal encoded_message_table_length_index_6 = 1\n\tlocal encoded_message_table_length_index_7\
    \ = 1\n\tlocal encoded_message_table_length_index_8 = 1\n\tlocal encoded_message_table_length_index_9\
    \ = 1\n\tlocal encoded_message_table_length_index_10 = 1\n\tlocal encoded_message_table_length_index_11\
    \ = 1\n\tlocal encoded_message_table_length_index_12 = 1\n\tlocal encoded_message_table_length_index_13\
    \ = 1\n\tlocal encoded_message_table_length_index_14 = 1\n\tlocal encoded_message_table_length_index_15\
    \ = 1\n\tlocal encoded_message_table_length_index_16 = 1\n\tlocal encoded_message_table_length_index_17\
    \ = 1\n\tlocal encoded_message_table_length_index_18 = 1\n\tlocal encoded_message_table_length_index_19\
    \ = 1\n\tlocal encoded_message_table_length_index_20 = 1\n\tlocal encoded_message_table_length_index_21\
    \ = 1\n\tlocal encoded_message_table_length_index_22 = 1\n\tlocal encoded_message_table_length_index_23\
    \ = 1\n\tlocal encoded_message_table_length_index_24 = 1\n\t", "  local encoded\
    \ = \"\"\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    local char_lower = char:lower()\n   \
    \ if char_lower == char then\n      char = char:upper()\n    end\n    for j =\
    \ 1, #vowels do\n      if char_lower == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local encoded = \"\"\n  local vowels\
    \ = {a = \"c\", e = \"g\", i = \"k\", o = \"q\", u = \"y\"}\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char:find(\"[aeiou]\") then\n\
    \      encoded = encoded .. vowels[char]\n    elseif char:find(\"[AEIOU]\") then\n\
    \      encoded = encoded .. vowels[char:lower()]:upper()\n    elseif char:find(\"\
    [a-z]\") then\n      encoded = encoded .. char:upper()\n    elseif char:find(\"\
    [A-Z]\") then\n      encoded = encoded .. char:lower()\n    else\n      encoded\
    \ = encoded .. char\n    end\n  end\n  return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local encoded = \"\"\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            encoded = encoded .. char:lower()\n\
    \        else\n            encoded = encoded .. char:upper()\n        end\n  \
    \  end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for _, vowel in ipairs(vowels) do\n \
    \     if char == vowel then\n        local index = (vowels[vowel] + 2) % #vowels\n\
    \        char = vowels[index]\n      end\n    end\n    encoded = encoded .. char\n\
    \  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = string.find(vowels, char)\n            if index == #vowels then\n\
    \                index = 1\n            else\n                index = index +\
    \ 1\n            end\n            char = vowels[index]\n        end\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % 5 + 1]\n                break\n            end\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend", "  local encoded\
    \ = \"\"\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if\
    \ char:match(\"[a-z]\") then\n      char = char:upper()\n    elseif char:match(\"\
    [A-Z]\") then\n      char = char:lower()\n    end\n    if char:match(\"[aeiou]\"\
    ) then\n      char = char:gsub(\"[aeiou]\", \"aeiou\"):sub(2, 2)\n    end\n  \
    \  encoded = encoded .. char\n  end\n  return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[j + 2]\n       \
    \         break\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    if table.contains(vowels, char) then\n\
    \      local index = table.indexOf(vowels, char)\n      local nextIndex = index\
    \ + 2\n      if nextIndex > #vowels then\n        nextIndex = nextIndex - #vowels\n\
    \      end\n      char = vowels[nextIndex]\n    end\n    encoded = encoded ..\
    \ char\n  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char == char:upper() then\n            char\
    \ = char:lower()\n        else\n            char = char:upper()\n        end\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          char = vowels[(j + 2) % #vowels]\n            end\n        end\n  \
    \      encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      encoded = encoded .. char:lower()\n \
    \   else\n      encoded = encoded .. char:upper()\n    end\n  end\n  return encoded\n\
    end", "  -- your code here\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \tlocal encoded = ''\n\tfor i = 1, #message do\n\t\tlocal c = message:sub(i, i)\n\
    \t\tif c == c:upper() then\n\t\t\tc = c:lower()\n\t\telse\n\t\t\tc = c:upper()\n\
    \t\tend\n\t\tfor j = 1, #vowels do\n\t\t\tif c == vowels[j] then\n\t\t\t\tc =\
    \ vowels[(j + 2) % #vowels]\n\t\t\tend\n\t\tend\n\t\tencoded = encoded .. c\n\t\
    end\n\treturn encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \   local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[j\
    \ + 2]\n                break\n            end\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local c = message:sub(i, i)\n    if c:lower() == c then\n \
    \     c = c:upper()\n    else\n      c = c:lower()\n    end\n    for j = 1, #vowels\
    \ do\n      if c == vowels[j] then\n        c = vowels[(j + 2) % #vowels + 1]\n\
    \      end\n    end\n    encoded = encoded .. c\n  end\n  return encoded\nend",
  "\tlocal result = \"\"\n\tlocal vowels = {a = \"c\", e = \"g\", i = \"k\", o = \"\
    q\", u = \"y\"}\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\
    \t\tif char == char:upper() then\n\t\t\tchar = char:lower()\n\t\telse\n\t\t\t\
    char = char:upper()\n\t\tend\n\t\tif vowels[char] then\n\t\t\tchar = vowels[char]\n\
    \t\tend\n\t\tresult = result .. char\n\tend\n\treturn result\nend", "  local encoded\
    \ = \"\"\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if\
    \ char:match(\"%a\") then\n      if char:match(\"%l\") then\n        char = char:upper()\n\
    \      else\n        char = char:lower()\n      end\n      if char:match(\"[aeiou]\"\
    ) then\n        local index = string.find(\"aeiou\", char)\n        char = \"\
    aeiou\":sub(index + 2, index + 2)\n      end\n    end\n    encoded = encoded ..\
    \ char\n  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char == char:upper() then\n            char\
    \ = char:lower()\n        else\n            char = char:upper()\n        end\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          char = vowels[(j + 2) % #vowels]\n            end\n        end\n  \
    \      encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ encoded = {}\n  for i=1,#message do\n    local char = message:sub(i,i)\n   \
    \ local code = char:byte()\n    if code >= 65 and code <= 90 then\n      code\
    \ = code + 32\n    elseif code >= 97 and code <= 122 then\n      code = code -\
    \ 32\n    end\n    if char == 'a' then\n      char = 'c'\n    elseif char == 'e'\
    \ then\n      char = 'g'\n    elseif char == 'i' then\n      char = 'k'\n    elseif\
    \ char == 'o' then\n      char = 'q'\n    elseif char == 'u' then\n      char\
    \ = 'y'\n    elseif char == 'A' then\n      char = 'C'\n    elseif char == 'E'\
    \ then\n      char = 'G'\n    elseif char == 'I' then\n      char = 'K'\n    elseif\
    \ char == 'O' then\n      char = 'Q'\n    elseif char == 'U' then\n      char\
    \ = 'Y'\n    end\n    encoded[i] = string.char(code)\n  end\n  return table.concat(encoded)\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = {}\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % 5 + 1]\n      end\n    end\n    encoded[#encoded + 1] = char\n  end\n\
    \  return table.concat(encoded)\nend", "  local encoded = \"\"\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char:match(\"[a-z]\") then\n\
    \      char = char:lower()\n      if char == \"a\" then\n        char = \"c\"\n\
    \      elseif char == \"e\" then\n        char = \"g\"\n      elseif char == \"\
    i\" then\n        char = \"k\"\n      elseif char == \"o\" then\n        char\
    \ = \"q\"\n      elseif char == \"u\" then\n        char = \"s\"\n      else\n\
    \        char = string.char(string.byte(char) + 2)\n      end\n    elseif char:match(\"\
    [A-Z]\") then\n      char = char:upper()\n      if char == \"A\" then\n      \
    \  char = \"C\"\n      elseif char == \"E\" then\n        char = \"G\"\n     \
    \ elseif char == \"I\" then\n        char = \"K\"\n      elseif char == \"O\"\
    \ then\n        char = \"Q\"\n      elseif char == \"U\" then\n        char =\
    \ \"S\"\n      else\n        char = string.char(string.byte(char) + 2)\n     \
    \ end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % 5 + 1]\n      end\n    end\n\
    \    encoded = encoded .. char\n  end\n  return encoded\nend", "    local encoded\
    \ = \"\"\n    for i = 1, #message do\n        local char = message:sub(i, i)\n\
    \        if char:match(\"%a\") then\n            if char:match(\"%u\") then\n\
    \                char = char:lower()\n            else\n                char =\
    \ char:upper()\n            end\n            if char:match(\"[aeiou]\") then\n\
    \                local index = string.find(\"aeiou\", char)\n                char\
    \ = string.sub(\"cdfghjkl\", index, index)\n            end\n        end\n   \
    \     encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % 5 + 1]\n                break\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "  -- TODO: Implement\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor i = 1,\
    \ #message do\n\t\tlocal char = message:sub(i, i)\n\t\tif char == char:upper()\
    \ then\n\t\t\tchar = char:lower()\n\t\telse\n\t\t\tchar = char:upper()\n\t\tend\n\
    \t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\tchar = vowels[(j\
    \ + 2) % #vowels]\n\t\t\tend\n\t\tend\n\t\tencoded = encoded .. char\n\tend\n\t\
    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % 5 + 1]\n                break\n            end\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend", "  local encoded\
    \ = \"\"\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    if\
    \ char:match(\"[a-z]\") then\n      char = char:upper()\n    elseif char:match(\"\
    [A-Z]\") then\n      char = char:lower()\n    end\n    if char:match(\"[aeiou]\"\
    ) then\n      local index = \"aeiou\":find(char:lower())\n      char = \"cdfghjklmnpqrstvwxyz\"\
    :sub(index, index)\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "    local encoded = \"\"\n    for i = 1, #message do\n        local c =\
    \ message:sub(i, i)\n        if c:match(\"%a\") then\n            if c:match(\"\
    %l\") then\n                encoded = encoded .. c:upper()\n            else\n\
    \                encoded = encoded .. c:lower()\n            end\n           \
    \ if c:match(\"[aeiou]\") then\n                local n = c:byte() + 2\n     \
    \           if n > 122 then\n                    n = n - 26\n                end\n\
    \                encoded = encoded .. string.char(n)\n            end\n      \
    \  else\n            encoded = encoded .. c\n        end\n    end\n    return\
    \ encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded\
    \ = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    local\
    \ is_vowel = false\n    for j = 1, #vowels do\n      if char == vowels[j] then\n\
    \        is_vowel = true\n        break\n      end\n    end\n    if is_vowel then\n\
    \      local index = (vowels[j] + 2) % #vowels\n      encoded = encoded .. vowels[index]\n\
    \    else\n      if char == char:upper() then\n        encoded = encoded .. char:lower()\n\
    \      else\n        encoded = encoded .. char:upper()\n      end\n    end\n \
    \ end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.indexOf(vowels,\
    \ char) then\n            char = vowels[(table.indexOf(vowels, char) + 2) % 5]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "  local encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match(\"[A-Z]\") then\n      encoded = encoded .. char:lower()\n\
    \    elseif char:match(\"[a-z]\") then\n      encoded = encoded .. char:upper()\n\
    \    else\n      encoded = encoded .. char\n    end\n  end\n  return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % 5 + 1]\n                break\n            end\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    local isVowel = false\n    for j = 1, #vowels\
    \ do\n      if char == vowels[j] then\n        isVowel = true\n        break\n\
    \      end\n    end\n    if isVowel then\n      local newChar = string.char(string.byte(char)\
    \ + 2)\n      if newChar == '{' then\n        newChar = 'a'\n      elseif newChar\
    \ == '|' then\n        newChar = 'e'\n      end\n      encoded = encoded .. newChar\n\
    \    else\n      if char == char:upper() then\n        encoded = encoded .. char:lower()\n\
    \      else\n        encoded = encoded .. char:upper()\n      end\n    end\n \
    \ end\n  return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \ local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[j + 2]\n        break\n      end\n\
    \    end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match(\"[a-z]\") then\n      if char == char:upper() then\n\
    \        char = char:lower()\n      else\n        char = char:upper()\n      end\n\
    \      if char == \"a\" then\n        char = \"c\"\n      elseif char == \"e\"\
    \ then\n        char = \"g\"\n      elseif char == \"i\" then\n        char =\
    \ \"k\"\n      elseif char == \"o\" then\n        char = \"q\"\n      elseif char\
    \ == \"u\" then\n        char = \"y\"\n      end\n    end\n    encoded = encoded\
    \ .. char\n  end\n  return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n      end\n   \
    \ end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "  local\
    \ encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char:match(\"[a-z]\") then\n      char = char:upper()\n    elseif char:match(\"\
    [A-Z]\") then\n      char = char:lower()\n    end\n    if char:match(\"[aeiou]\"\
    ) then\n      local index = string.find(\"aeiou\", char)\n      char = \"aeiou\"\
    :sub(index + 2, index + 2)\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "  -- TODO: implement\nend", "  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  local vowels = \"aeiou\"\n  local encoded = \"\"\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    local lower = char:lower()\n    local\
    \ isVowel = vowels:find(lower)\n    if isVowel then\n      local index = (isVowel\
    \ + 2) % #alphabet\n      char = alphabet:sub(index, index)\n    else\n      char\
    \ = lower\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  local vowels = \"aeiou\"\n  local encoded = \"\"\n  for i = 1, #message do\n\
    \    local c = message:sub(i, i)\n    local is_vowel = false\n    for j = 1, #vowels\
    \ do\n      if c == vowels:sub(j, j) then\n        is_vowel = true\n        break\n\
    \      end\n    end\n    if is_vowel then\n      local index = alphabet:find(c)\n\
    \      index = index + 2\n      if index > #alphabet then\n        index = index\
    \ - #alphabet\n      end\n      c = alphabet:sub(index, index)\n    end\n    if\
    \ c == c:upper() then\n      c = c:lower()\n    else\n      c = c:upper()\n  \
    \  end\n    encoded = encoded .. c\n  end\n  return encoded\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local c = message:sub(i, i)\n    if c:match('%a') then\n      if c:match('%l')\
    \ then\n        c = c:upper()\n      else\n        c = c:lower()\n      end\n\
    \      for j = 1, #vowels do\n        if c == vowels[j] then\n          c = vowels[(j\
    \ + 2) % #vowels + 1]\n          break\n        end\n      end\n    end\n    encoded\
    \ = encoded .. c\n  end\n  return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        if char == char:upper() then\n     \
    \       char = char:lower()\n        else\n            char = char:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ result = \"\"\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char:match(\"[A-Z]\") then\n      result = result .. char:lower()\n  \
    \  elseif char:match(\"[a-z]\") then\n      result = result .. char:upper()\n\
    \    else\n      result = result .. char\n    end\n  end\n  return result\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local char_lower = char:lower()\n\
    \    local char_upper = char:upper()\n    local char_lower_index = table.indexof(vowels,\
    \ char_lower)\n    if char_lower_index then\n      local next_vowel = vowels[(char_lower_index\
    \ % #vowels) + 1]\n      char = char == char_lower and next_vowel or next_vowel:upper()\n\
    \    else\n      char = char == char_lower and char_upper or char_lower\n    end\n\
    \    encoded = encoded .. char\n  end\n  return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % 5 + 1]\n                break\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local result = \"\"\n    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z'}\n    for i = 1, #message do\n        local char = message:sub(i, i)\n\
    \        local isVowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                isVowel = true\n                break\n\
    \            end\n        end\n        if isVowel then\n            for j = 1,\
    \ #alphabet do\n                if char == alphabet[j] then\n                \
    \    result = result .. alphabet[j + 2]\n                    break\n         \
    \       end\n            end\n        else\n            if char == char:upper()\
    \ then\n                result = result .. char:lower()\n            else\n  \
    \              result = result .. char:upper()\n            end\n        end\n\
    \    end\n    return result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = {}\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for _, vowel in ipairs(vowels) do\n            if char == vowel\
    \ then\n                char = vowels[((vowels[vowel] or 0) + 2) % 5]\n      \
    \      end\n        end\n        encoded[#encoded + 1] = char\n    end\n    return\
    \ table.concat(encoded)\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i,\
    \ i)\n        if c:match('%a') then\n            if c:match('%u') then\n     \
    \           c = c:lower()\n            else\n                c = c:upper()\n \
    \           end\n            for _, v in ipairs(vowels) do\n                if\
    \ c == v then\n                    c = vowels[((vowels[v] or 0) + 2) % #vowels\
    \ + 1]\n                    break\n                end\n            end\n    \
    \    end\n        encoded = encoded .. c\n    end\n    return encoded\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded[#encoded + 1] = char\n    end\n\
    \    return table.concat(encoded)\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n      end\n   \
    \ end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexOf(vowels, char)\n            if index == #vowels then\n\
    \                char = vowels[1]\n            else\n                char = vowels[index\
    \ + 1]\n            end\n        end\n        encoded = encoded .. char\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = {}\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local char_lower = char:lower()\n        local char_upper = char:upper()\n\
    \        if char_lower == char_upper then\n            table.insert(encoded, char)\n\
    \        elseif char_lower == char then\n            table.insert(encoded, char_upper)\n\
    \        else\n            table.insert(encoded, char_lower)\n        end\n  \
    \      for j = 1, #vowels do\n            if char_lower == vowels[j] then\n  \
    \              local next_vowel = vowels[(j + 2) % #vowels + 1]\n            \
    \    if char_lower == char then\n                    table.insert(encoded, next_vowel:upper())\n\
    \                else\n                    table.insert(encoded, next_vowel)\n\
    \                end\n            end\n        end\n    end\n    return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded[#encoded + 1] = char\n\
    \    end\n    return table.concat(encoded)\nend", "  local encoded = \"\"\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    if char:match(\"\
    [a-z]\") then\n      encoded = encoded .. char:upper()\n    elseif char:match(\"\
    [A-Z]\") then\n      encoded = encoded .. char:lower()\n    elseif char:match(\"\
    [aeiou]\") then\n      local index = string.find(\"aeiou\", char)\n      encoded\
    \ = encoded .. \"aeiou\":sub(index + 2, index + 2)\n    else\n      encoded =\
    \ encoded .. char\n    end\n  end\n  return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    for j = 1, #vowels do\n   \
    \   if char == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n    \
    \  end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "  local encoded = \"\"\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match(\"[a-z]\") then\n      char = char:upper()\n    elseif\
    \ char:match(\"[A-Z]\") then\n      char = char:lower()\n    end\n    if char:match(\"\
    [aeiou]\") then\n      char = char:gsub(\"[aeiou]\", function(c)\n        local\
    \ index = \"aeiou\":find(c)\n        return \"aeiou\":sub((index + 2) % 5 + 1,\
    \ (index + 2) % 5 + 1)\n      end)\n    end\n    encoded = encoded .. char\n \
    \ end\n  return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \ local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local isVowel = false\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        isVowel = true\n        break\n      end\n    end\n    if isVowel\
    \ then\n      local nextVowel = vowels[j % #vowels + 1]\n      encoded = encoded\
    \ .. nextVowel\n    else\n      if char == char:upper() then\n        encoded\
    \ = encoded .. char:lower()\n      else\n        encoded = encoded .. char:upper()\n\
    \      end\n    end\n  end\n  return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexOf(vowels, char) then\n            local index\
    \ = table.indexOf(vowels, char)\n            char = vowels[index + 2]\n      \
    \  end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                local index = j + 2\n        \
    \        if index > #vowels then\n                    index = index - #vowels\n\
    \                end\n                char = vowels[index]\n                break\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal\
    \ encoded = ''\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\
    \t\tif char:match('%a') then\n\t\t\tif char:match('%l') then\n\t\t\t\tchar = char:upper()\n\
    \t\t\telse\n\t\t\t\tchar = char:lower()\n\t\t\tend\n\t\t\tfor j = 1, #vowels do\n\
    \t\t\t\tif char == vowels[j] then\n\t\t\t\t\tchar = vowels[(j + 2) % #vowels]\n\
    \t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tencoded = encoded .. char\n\
    \tend\n\treturn encoded\nend", "  local encoded = \"\"\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char:match(\"[A-Z]\") then\n\
    \      encoded = encoded .. char:lower()\n    elseif char:match(\"[a-z]\") then\n\
    \      encoded = encoded .. char:upper()\n    else\n      encoded = encoded ..\
    \ char\n    end\n  end\n  return encoded\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char =\
    \ message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    for j = 1, #vowels do\n   \
    \   if char == vowels[j] then\n        char = vowels[(j + 2) % 5 + 1]\n      end\n\
    \    end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexof(vowels, char)\n            index = (index + 2) % #vowels\n\
    \            char = vowels[index]\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {a = \"c\", e = \"g\"\
    , i = \"k\", o = \"q\", u = \"y\"}\n    local encoded = \"\"\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char:find(\"[aeiou]\"\
    ) then\n            encoded = encoded .. vowels[char]\n        elseif char:find(\"\
    [AEIOU]\") then\n            encoded = encoded .. vowels[char:lower()]:upper()\n\
    \        elseif char:find(\"[a-z]\") then\n            encoded = encoded .. char:upper()\n\
    \        elseif char:find(\"[A-Z]\") then\n            encoded = encoded .. char:lower()\n\
    \        else\n            encoded = encoded .. char\n        end\n    end\n \
    \   return encoded\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
