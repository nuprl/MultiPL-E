name: HumanEval_89_encrypt
language: lua
prompt: "-- Create a function encrypt that takes a string as an argument and\n-- returns\
  \ a string encrypted with the alphabet being rotated. \n-- The alphabet should be\
  \ rotated in a manner such that the letters \n-- shift down by two multiplied to\
  \ two places.\n-- For example:\nlocal function encrypt(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
  \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
  \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
  \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'),\
  \ 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
  \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
  \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local encrypted\
    \ = \"\"\n    for i = 1, #s do\n        local c = s:sub(i,i)\n        local index\
    \ = alphabet:find(c)\n        if index then\n            encrypted = encrypted\
    \ .. alphabet:sub((index + 2) % #alphabet + 1, (index + 2) % #alphabet + 1)\n\
    \        else\n            encrypted = encrypted .. c\n        end\n    end\n\
    \    return encrypted\nend", "  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  local encrypted = \"\"\n  for i = 1, #s do\n    local char = s:sub(i, i)\n\
    \    local index = alphabet:find(char)\n    if index then\n      local new_index\
    \ = index + 2 * 2\n      if new_index > #alphabet then\n        new_index = new_index\
    \ - #alphabet\n      end\n      encrypted = encrypted .. alphabet:sub(new_index,\
    \ new_index)\n    else\n      encrypted = encrypted .. char\n    end\n  end\n\
    \  return encrypted\nend", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local encrypted = \"\"\n    for i = 1, #s do\n        local c = s:sub(i,i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            encrypted\
    \ = encrypted .. alphabet:sub((index + 4) % 26 + 1, (index + 4) % 26 + 1)\n  \
    \      else\n            encrypted = encrypted .. c\n        end\n    end\n  \
    \  return encrypted\nend", "  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \  local result = \"\"\n  for i = 1, #s do\n    local c = s:sub(i,i)\n    local\
    \ index = alphabet:find(c)\n    if index == nil then\n      result = result ..\
    \ c\n    else\n      local newIndex = (index + (2 * 2)) % #alphabet\n      result\
    \ = result .. alphabet:sub(newIndex, newIndex)\n    end\n  end\n  return result\n\
    end", "  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local encrypted =\
    \ \"\"\n  for i = 1, #s do\n    local c = s:sub(i,i)\n    local index = alphabet:find(c)\n\
    \    if index then\n      encrypted = encrypted .. alphabet:sub((index + 2) %\
    \ #alphabet + 1, (index + 2) % #alphabet + 1)\n    else\n      encrypted = encrypted\
    \ .. c\n    end\n  end\n  return encrypted\nend", "    local alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local letter = s:sub(i,i)\n\
    \        local index = 0\n        for j = 1, #alphabet do\n            if alphabet[j]\
    \ == letter then\n                index = j\n            end\n        end\n  \
    \      local newIndex = index + (2 * 2)\n        if newIndex > #alphabet then\n\
    \            newIndex = newIndex - #alphabet\n        end\n        encrypted =\
    \ encrypted .. alphabet[newIndex]\n    end\n    return encrypted\nend", "    local\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local encrypted = \"\"\n    for\
    \ i = 1, #s do\n        local char = s:sub(i, i)\n        local index = alphabet:find(char)\n\
    \        if index then\n            encrypted = encrypted .. alphabet:sub(index\
    \ + 4, index + 4)\n        else\n            encrypted = encrypted .. char\n \
    \       end\n    end\n    return encrypted\nend", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local encrypted = \"\"\n    for i = 1, #s do\n        local c = s:sub(i,i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            encrypted\
    \ = encrypted .. alphabet:sub((index + 2) % #alphabet, (index + 2) % #alphabet)\n\
    \        else\n            encrypted = encrypted .. c\n        end\n    end\n\
    \    return encrypted\nend", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local new_alphabet = string.sub(alphabet, 3) .. string.sub(alphabet, 1,\
    \ 2)\n    local new_s = \"\"\n    for i = 1, #s do\n        local c = string.sub(s,\
    \ i, i)\n        local index = string.find(alphabet, c)\n        if index then\n\
    \            new_s = new_s .. string.sub(new_alphabet, index, index)\n       \
    \ else\n            new_s = new_s .. c\n        end\n    end\n    return new_s\n\
    end", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local encrypted\
    \ = \"\"\n    for i = 1, #s do\n        local c = s:sub(i,i)\n        local index\
    \ = alphabet:find(c)\n        if index then\n            encrypted = encrypted\
    \ .. alphabet:sub((index + 2) % 26 + 1, (index + 2) % 26 + 1)\n        else\n\
    \            encrypted = encrypted .. c\n        end\n    end\n    return encrypted\n\
    end", "  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local encrypted =\
    \ \"\"\n  for i = 1, #s do\n    local c = s:sub(i,i)\n    local index = alphabet:find(c)\n\
    \    if index then\n      encrypted = encrypted .. alphabet:sub((index + 2) %\
    \ 26 + 1, (index + 2) % 26 + 1)\n    else\n      encrypted = encrypted .. c\n\
    \    end\n  end\n  return encrypted\nend", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local encrypted = \"\"\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = (index + (2 * 2)) % #alphabet\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. char\n        end\n    end\n    return encrypted\nend", "   \
    \ local alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \    local encrypted = {}\n    for i = 1, #s do\n        local c = s:sub(i,i)\n\
    \        local index = 1\n        for j = 1, #alphabet do\n            if c ==\
    \ alphabet[j] then\n                index = j\n                break\n       \
    \     end\n        end\n        table.insert(encrypted, alphabet[(index + 2) %\
    \ 26 + 1])\n    end\n    return table.concat(encrypted)\nend", "    local alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    local encrypted = \"\"\n    for i = 1,\
    \ #s do\n        local char = s:sub(i, i)\n        local index = alphabet:find(char)\n\
    \        if index then\n            local new_index = index + 2 * 2\n        \
    \    if new_index > #alphabet then\n                new_index = new_index - #alphabet\n\
    \            end\n            encrypted = encrypted .. alphabet:sub(new_index,\
    \ new_index)\n        else\n            encrypted = encrypted .. char\n      \
    \  end\n    end\n    return encrypted\nend", "  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  local encrypted = \"\"\n  for i = 1, #s do\n    local c = s:sub(i,i)\n   \
    \ if c == \" \" then\n      encrypted = encrypted .. \" \"\n    else\n      local\
    \ index = alphabet:find(c)\n      encrypted = encrypted .. alphabet:sub(index\
    \ + 2 * 2, index + 2 * 2)\n    end\n  end\n  return encrypted\nend", "    local\
    \ alphabet = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    u\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    local encrypted = \"\"\n    for i\
    \ = 1, #s do\n        local c = s:sub(i, i)\n        local index = table.indexOf(alphabet,\
    \ c)\n        if index ~= nil then\n            local newIndex = index + (2 *\
    \ 2)\n            if newIndex > #alphabet then\n                newIndex = newIndex\
    \ - #alphabet\n            end\n            encrypted = encrypted .. alphabet[newIndex]\n\
    \        else\n            encrypted = encrypted .. c\n        end\n    end\n\
    \    return encrypted\nend", "  local alphabet = {\"a\", \"b\", \"c\", \"d\",\
    \ \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    }\n  local encrypted = \"\"\n  for i = 1, #s do\n    local letter = string.sub(s,\
    \ i, i)\n    local index = 0\n    for j = 1, #alphabet do\n      if letter ==\
    \ alphabet[j] then\n        index = j\n      end\n    end\n    local newIndex\
    \ = index + 2 * 2\n    if newIndex > #alphabet then\n      newIndex = newIndex\
    \ - #alphabet\n    end\n    encrypted = encrypted .. alphabet[newIndex]\n  end\n\
    \  return encrypted\nend", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local result = \"\"\n    for i = 1, #s do\n        local c = s:sub(i,i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            result\
    \ = result .. alphabet:sub(newIndex, newIndex)\n        else\n            result\
    \ = result .. c\n        end\n    end\n    return result\nend", "    local alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    local encrypted = \"\"\n    for i = 1,\
    \ #s do\n        local char = s:sub(i, i)\n        local index = alphabet:find(char)\n\
    \        if index then\n            local newIndex = index + 4\n            if\
    \ newIndex > #alphabet then\n                newIndex = newIndex - #alphabet\n\
    \            end\n            encrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n        else\n            encrypted = encrypted .. char\n       \
    \ end\n    end\n    return encrypted\nend", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local encrypted = \"\"\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n\
    \                newIndex = newIndex - #alphabet\n            end\n          \
    \  encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n \
    \           encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
