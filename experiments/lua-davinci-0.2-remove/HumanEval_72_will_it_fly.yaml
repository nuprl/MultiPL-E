name: HumanEval_72_will_it_fly
language: lua
prompt: "-- Write a function that returns True if the object q will fly, and False\
  \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
  \ and the sum of its elements is less than or equal the maximum possible weight\
  \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less than\
  \ the maximum possible weight, but it's unbalanced.\n-- # it's balanced, but 3+2+3\
  \ is more than the maximum possible weight.\n-- # 3+2+3 is less than the maximum\
  \ possible weight, and it's balanced.\n-- # 3 is less than the maximum possible\
  \ weight, and it's balanced.\nlocal function will_it_fly(q, w)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
  \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
  \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
  \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n    lu.assertEquals(candidate({5},\
  \ 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n\
    \    end\n    if sum <= w then\n        for i = 1, #q do\n            if q[i]\
    \ ~= q[#q - i + 1] then\n                return false\n            end\n     \
    \   end\n        return true\n    end\n    return false\nend", "    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum <=\
    \ w then\n        return true\n    else\n        return false\n    end\nend",
  "  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w\
    \ then\n    local is_palindrome = true\n    for i = 1, #q/2 do\n      if q[i]\
    \ ~= q[#q-i+1] then\n        is_palindrome = false\n        break\n      end\n\
    \    end\n    return is_palindrome\n  else\n    return false\n  end\nend", " \
    \ local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <=\
    \ w then\n    local i = 1\n    local j = #q\n    while i < j do\n      if q[i]\
    \ ~= q[j] then\n        return false\n      end\n      i = i + 1\n      j = j\
    \ - 1\n    end\n    return true\n  end\n  return false\nend", "    local sum =\
    \ 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum <= w\
    \ then\n        local i = 1\n        local j = #q\n        while i < j do\n  \
    \          if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend", "    local sum = 0\n    local len = #q\n   \
    \ for i = 1, len do\n        sum = sum + q[i]\n    end\n    if sum > w then\n\
    \        return false\n    end\n    for i = 1, len/2 do\n        if q[i] ~= q[len-i+1]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n\
    \    if sum <= w then\n        local is_palindrome = true\n        for i = 1,\
    \ #q do\n            if q[i] ~= q[#q - i + 1] then\n                is_palindrome\
    \ = false\n                break\n            end\n        end\n        return\
    \ is_palindrome\n    end\n    return false\nend", "  local sum = 0\n  for i =\
    \ 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n    local i, j =\
    \ 1, #q\n    while i < j do\n      if q[i] ~= q[j] then\n        return false\n\
    \      end\n      i = i + 1\n      j = j - 1\n    end\n    return true\n  end\n\
    \  return false\nend", "  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local i = 1\n    local j = #q\n    while i < j\
    \ do\n      if q[i] ~= q[j] then\n        return false\n      end\n      i = i\
    \ + 1\n      j = j - 1\n    end\n    return true\n  end\n  return false\nend",
  "  local sum = 0\n  local len = #q\n  for i = 1, len do\n    sum = sum + q[i]\n\
    \  end\n  if sum > w then return false end\n  for i = 1, len / 2 do\n    if q[i]\
    \ ~= q[len - i + 1] then return false end\n  end\n  return true\nend", "    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local l = 1\n        local r = #q\n        while l < r do\n\
    \            if q[l] ~= q[r] then\n                return false\n            end\n\
    \            l = l + 1\n            r = r - 1\n        end\n        return true\n\
    \    end\n    return false\nend", "    local sum = 0\n    for i = 1, #q do\n \
    \       sum = sum + q[i]\n    end\n    if sum <= w then\n        local i = 1\n\
    \        local j = #q\n        while i < j do\n            if q[i] ~= q[j] then\n\
    \                return false\n            end\n            i = i + 1\n      \
    \      j = j - 1\n        end\n        return true\n    end\n    return false\n\
    end", "  local sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n\
    \  if sum > w then\n    return false\n  end\n  local i = 1\n  local j = #q\n \
    \ while i < j do\n    if q[i] ~= q[j] then\n      return false\n    end\n    i\
    \ = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n    local i,\
    \ j = 1, #q\n    while i < j do\n      if q[i] ~= q[j] then\n        return false\n\
    \      end\n      i = i + 1\n      j = j - 1\n    end\n    return true\n  end\n\
    \  return false\nend", "  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local i = 1\n    local j = #q\n    while i < j\
    \ do\n      if q[i] ~= q[j] then\n        return false\n      end\n      i = i\
    \ + 1\n      j = j - 1\n    end\n    return true\n  end\n  return false\nend",
  "    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n  \
    \  if sum <= w then\n        local i = 1\n        local j = #q\n        while\
    \ i < j do\n            if q[i] ~= q[j] then\n                return false\n \
    \           end\n            i = i + 1\n            j = j - 1\n        end\n \
    \       return true\n    end\n    return false\nend", "    local sum = 0\n   \
    \ for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum <= w then\n\
    \        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n       \
    \         return false\n            end\n        end\n        return true\n  \
    \  end\n    return false\nend", "    local sum = 0\n    for i = 1, #q do\n   \
    \     sum = sum + q[i]\n    end\n    if sum <= w then\n        local is_palindrome\
    \ = true\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                is_palindrome = false\n                break\n            end\n\
    \        end\n        return is_palindrome\n    end\n    return false\nend", " \
    \   local sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n\
    \    if sum <= w then\n        local i = 1\n        local j = #q\n        while\
    \ i < j do\n            if q[i] ~= q[j] then\n                return false\n \
    \           end\n            i = i + 1\n            j = j - 1\n        end\n \
    \       return true\n    end\n    return false\nend", "    local sum = 0\n   \
    \ for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum <= w then\n\
    \        local i = 1\n        local j = #q\n        while i < j do\n         \
    \   if q[i] ~= q[j] then\n                return false\n            end\n    \
    \        i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
