language: lua
name: HumanEval_122_add_elements
results:
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + n // 10\n    else\n      sum\
    \ = sum + n % 10 + n // 10 % 10 + n // 100\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8ubm0e5.lua:26:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmpy8ubm0e5.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local n = arr[i]\n        if n < 10 then\n            sum\
    \ = sum + n\n        elseif n < 100 then\n            sum = sum + n % 10 + math.floor(n\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpratuqx5i.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpratuqx5i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + num // 10\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkc70lx26.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpkc70lx26.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local x = arr[i]\n    if x < 10 then\n      sum = sum + x\n   \
    \ elseif x < 100 then\n      sum = sum + x % 10 + math.floor(x / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr0uct0f.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpxr0uct0f.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local x = arr[i]\n    if x < 10 then\n      sum = sum + x\n   \
    \ elseif x < 100 then\n      sum = sum + x % 10 + math.floor(x / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr0uct0f.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpxr0uct0f.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local num = arr[i]\n        if num < 10 then\n        \
    \    sum = sum + num\n        elseif num < 100 then\n            sum = sum + num\
    \ % 10 + math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppphprwa6.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmppphprwa6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local v = arr[i]\n    if v < 10 then\n      sum = sum + v\n   \
    \ elseif v < 100 then\n      sum = sum + v % 10 + math.floor(v / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprd7b5bew.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmprd7b5bew.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local num = arr[i]\n        if num < 10 then\n        \
    \    sum = sum + num\n        elseif num < 100 then\n            sum = sum + num\
    \ % 10 + math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppphprwa6.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmppphprwa6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local v = arr[i]\n    if v < 10 then\n      sum = sum + v\n   \
    \ elseif v < 100 then\n      sum = sum + v % 10 + math.floor(v / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprd7b5bew.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmprd7b5bew.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + (n % 10) + (math.floor(n / 10))\n   \
    \ end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdyupncbc.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpdyupncbc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local x = arr[i]\n    if x < 10 then\n      sum = sum + x\n   \
    \ elseif x < 100 then\n      sum = sum + x % 10 + math.floor(x / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr0uct0f.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpxr0uct0f.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local num = arr[i]\n        if num < 10 then\n        \
    \    sum = sum + num\n        elseif num < 100 then\n            sum = sum + num\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + arr[i] // 10\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnzxc89q.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmphnzxc89q.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + n / 10\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9j0w9ui7.lua:25:\
    \ expected: 125, actual: 17.2\nstack traceback:\n\t/tmp/tmp9j0w9ui7.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local n = arr[i]\n        if n < 10 then\n            sum\
    \ = sum + n\n        elseif n < 100 then\n            sum = sum + n % 10 + math.floor(n\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpratuqx5i.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpratuqx5i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + n // 10\n    else\n      sum\
    \ = sum + n % 10 + n // 10 % 10 + n // 100\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8ubm0e5.lua:26:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmpy8ubm0e5.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + (n % 10) + (math.floor(n / 10))\n   \
    \ end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdyupncbc.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpdyupncbc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local num = arr[i]\n        if num < 10 then\n        \
    \    sum = sum + num\n        elseif num < 100 then\n            sum = sum + num\
    \ % 10 + math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppphprwa6.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmppphprwa6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local n = arr[i]\n        if n < 10 then\n            sum\
    \ = sum + n\n        elseif n < 100 then\n            sum = sum + n % 10 + math.floor(n\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpratuqx5i.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpratuqx5i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local n = arr[i]\n        if n < 10 then\n            sum\
    \ = sum + n\n        elseif n < 100 then\n            sum = sum + n % 10 + math.floor(n\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpratuqx5i.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpratuqx5i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local n = arr[i]\n        if n < 10 then\n            sum\
    \ = sum + n\n        elseif n < 100 then\n            sum = sum + n % 10 + n //\
    \ 10\n        else\n            sum = sum + n % 10 + n // 10 % 10 + n // 100\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2q1z2i0.lua:26:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmpk2q1z2i0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local num = arr[i]\n        if num < 10 then\n        \
    \    sum = sum + num\n        elseif num < 100 then\n            sum = sum + num\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local i\
    \ = 1\n  while i <= k do\n    local num = arr[i]\n    if num < 10 then\n     \
    \ sum = sum + num\n    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num\
    \ / 10)\n    else\n      sum = sum + num % 10 + math.floor(num / 10) % 10 + math.floor(num\
    \ / 100)\n    end\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_w3el5o.lua:28:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmpb_w3el5o.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + n // 10\n    else\n      sum\
    \ = sum + n % 10 + n // 10 % 10 + n // 100\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8ubm0e5.lua:26:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmpy8ubm0e5.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local num = arr[i]\n        if num < 10 then\n        \
    \    sum = sum + num\n        elseif num < 100 then\n            sum = sum + num\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local num = arr[i]\n    if num < 10 then\n      sum = sum + num\n\
    \    elseif num < 100 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nx4lzs.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpi7nx4lzs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 10 then\n            sum = sum + arr[i]\n \
    \       elseif arr[i] < 100 then\n            sum = sum + arr[i] % 10 + math.floor(arr[i]\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod3vm9my.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpod3vm9my.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 10 then\n      sum = sum + arr[i]\n    elseif arr[i]\
    \ < 100 then\n      sum = sum + arr[i] % 10 + math.floor(arr[i] / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu19ufxdl.lua:24:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmpu19ufxdl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k\
    \ <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i =\
    \ 1, k do\n    local n = arr[i]\n    if n < 10 then\n      sum = sum + n\n   \
    \ elseif n < 100 then\n      sum = sum + n % 10 + math.floor(n / 10)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ggeryj2.lua:25:\
    \ expected: 125, actual: 17\nstack traceback:\n\t/tmp/tmp8ggeryj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978935
