language: lua
name: HumanEval_159_eat
results:
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + remaining\n    local eaten = total < need and total or need\n    return\
    \ {eaten, total - eaten}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggqgmtko.lua:28:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpggqgmtko.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return { need, total - need }\n  else\n\
    \    return { total, 0 }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanwgpln9.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpanwgpln9.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  if number + need\
    \ > 1000 then\n    return {1000, remaining - (1000 - number)}\n  elseif number\
    \ + need > remaining then\n    return {remaining, 0}\n  else\n    return {number\
    \ + need, remaining - need}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabw0_f46.lua:32:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpabw0_f46.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return { need, total - need }\n  else\n\
    \    return { total, 0 }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanwgpln9.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpanwgpln9.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + remaining\n    local left = total - need\n    if left < 0 then\n  \
    \      return { total, 0 }\n    else\n        return { total, left }\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad19wv8i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmpad19wv8i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n\
    \    eaten = eaten + left\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwptzjyug.lua:35:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwptzjyug.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    eaten = eaten\
    \ + left\n    left = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return { need, total - need }\n  else\n\
    \    return { total, 0 }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanwgpln9.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpanwgpln9.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + remaining\n    if total >= need then\n        return {need, total -\
    \ need}\n    else\n        return {total, 0}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_ibe5eh.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpg_ibe5eh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + remaining\n    local eaten = total - need\n    if eaten < 0 then\n\
    \        return {total, 0}\n    else\n        return {total, eaten}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8cz1su9x.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmp8cz1su9x.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = math.min(total, need)\n  return {eaten, total -\
    \ eaten}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoike7iz.lua:28:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmppoike7iz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + remaining\n    if total < need then\n        return {total, 0}\n  \
    \  else\n        return {need, total - need}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurxoq1w8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpurxoq1w8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n\
    \    eaten = eaten + left\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwptzjyug.lua:35:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwptzjyug.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local eaten =\
    \ number + need\n    local left = remaining - need\n    if left < 0 then\n   \
    \     eaten = eaten + left\n        left = 0\n    end\n    return {eaten, left}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {eaten, remaining - eaten}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzowd1wqx.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpzowd1wqx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {eaten, remaining - eaten}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzowd1wqx.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpzowd1wqx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikvymxwy.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpikvymxwy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  local left = total - need\n  if left <\
    \ 0 then\n    return {total, 0}\n  else\n    return {total, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydca2w1e.lua:33:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmpydca2w1e.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  return {number + need, remaining - need}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6x6jgv60.lua:30:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmp6x6jgv60.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    if number + need\
    \ <= remaining then\n        return { number + need, remaining - (number + need)\
    \ }\n    else\n        return { remaining, 0 }\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zthznk7.lua:30:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmp1zthznk7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    eaten = eaten\
    \ + left\n    left = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  local left = total - need\n  if left <\
    \ 0 then\n    return {total, 0}\n  else\n    return {total, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydca2w1e.lua:33:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmpydca2w1e.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n\
    \    eaten = eaten + left\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwptzjyug.lua:35:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwptzjyug.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n\
    \    eaten = eaten + left\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwptzjyug.lua:35:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwptzjyug.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = total - need\n  if eaten < 0 then\n    eaten =\
    \ 0\n  end\n  return {total, eaten}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4x8o5z1u.lua:31:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmp4x8o5z1u.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = math.min(total, need)\n  return {eaten, total -\
    \ eaten}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoike7iz.lua:28:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmppoike7iz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  if remaining < need then\n    return {number + remaining, 0}\n  else\n    return\
    \ {number + need, remaining - need}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + need\n  if total <= remaining then\n    return {total,\
    \ remaining - total}\n  else\n    return {remaining, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6vil2xc.lua:32:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpt6vil2xc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0v2js0t.lua:35:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmph0v2js0t.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + remaining\n    local left = total - need\n    if left < 0 then\n  \
    \      return {total, 0}\n    else\n        return {total, left}\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3h8x5st.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmpq3h8x5st.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    -- your code\
    \ here\n    local total = number + remaining\n    if total >= need then\n    \
    \    return {need, total - need}\n    else\n        return {total, 0}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkz8zw27y.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpkz8zw27y.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  return {number\
    \ + math.min(need, remaining), math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    eaten = eaten\
    \ + left\n    left = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + remaining\n    local left = total - need\n    if left < 0 then\n  \
    \      return {total, 0}\n    else\n        return {total, left}\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3h8x5st.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmpq3h8x5st.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total < need then\n    return {total, 0}\n  else\n    return\
    \ {need, total - need}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmqz_j5y.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpdmqz_j5y.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local carrots = number + remaining\n  local left = carrots - need\n  if left\
    \ < 0 then\n    return {carrots, 0}\n  else\n    return {need, left}\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbmambnn.lua:33:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpvbmambnn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + need\n  local left = remaining - need\n  if left < 0\
    \ then\n    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbwtjxfx.lua:35:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpzbwtjxfx.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikvymxwy.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpikvymxwy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local eaten = number + need\n  local left = remaining - need\n  if left < 0\
    \ then\n    left = 0\n    eaten = eaten + left\n  end\n  return {eaten, left}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09lckfg6.lua:36:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmp09lckfg6.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikvymxwy.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpikvymxwy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikvymxwy.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpikvymxwy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + remaining\n    local eaten = total - need\n    if eaten < 0 then\n\
    \        eaten = 0\n    end\n    return {total, eaten}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi6wbf_k.lua:31:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmphi6wbf_k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {eaten, remaining - eaten}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzowd1wqx.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpzowd1wqx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  local left = total - need\n  if left <\
    \ 0 then\n    return {total, 0}\n  else\n    return {total, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydca2w1e.lua:33:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmpydca2w1e.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = total - need\n  if eaten < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, eaten}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrznyrgg.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmprrznyrgg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = total - need\n  if eaten < 0 then\n    eaten =\
    \ 0\n  end\n  return {total - eaten, eaten}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ny41bh3.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmp4ny41bh3.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + need\n  local left = remaining - need\n  if left < 0\
    \ then\n    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbwtjxfx.lua:35:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpzbwtjxfx.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = total - need\n  if eaten < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, eaten}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrznyrgg.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmprrznyrgg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  local left = remaining - need\n  if total > remaining then\n    total\
    \ = remaining\n    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0lj13xz.lua:32:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmps0lj13xz.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + remaining\n    local eaten = total - need\n    if eaten < 0 then\n\
    \        eaten = 0\n    end\n    return {total, eaten}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi6wbf_k.lua:31:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmphi6wbf_k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  return {number\
    \ + math.min(need, remaining), math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = math.min(total, need)\n  return {eaten, total -\
    \ eaten}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoike7iz.lua:28:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmppoike7iz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = math.min(number\
    \ + remaining, need)\n  return {eaten, eaten - need}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplf0ui1i5.lua:27:\
    \ expected: {11, 4}\nactual: {6, 0}\nstack traceback:\n\t/tmp/tmplf0ui1i5.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikvymxwy.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpikvymxwy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + math.min(need, remaining)\n  return {eaten, math.max(0, remaining - need)}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  local left = total - need\n  if left <\
    \ 0 then\n    return {total, 0}\n  else\n    return {total, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydca2w1e.lua:33:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmpydca2w1e.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    eaten = eaten\
    \ + left\n    left = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = total - need\n  if eaten < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, eaten}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrznyrgg.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmprrznyrgg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + need\n  local left = remaining - need\n  if total >\
    \ remaining then\n    return {remaining, 0}\n  else\n    return {total, left}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpncj2gnpa.lua:33:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpncj2gnpa.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = total - need\n  if eaten < 0 then\n    eaten =\
    \ total\n  end\n  return {eaten, total - eaten}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltxbrjzf.lua:31:\
    \ expected: {11, 4}\nactual: {9, 6}\nstack traceback:\n\t/tmp/tmpltxbrjzf.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikvymxwy.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpikvymxwy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {eaten, remaining - eaten}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzowd1wqx.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpzowd1wqx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {eaten, remaining - eaten}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzowd1wqx.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpzowd1wqx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + need\n  local left = remaining - need\n  if left < 0\
    \ then\n    return {total, 0}\n  else\n    return {total, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb8rtxql.lua:36:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpqb8rtxql.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return { total,\
    \ 0 }\n  else\n    return { total, left }\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz654bqwf.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmpz654bqwf.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {eaten, remaining - eaten}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzowd1wqx.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpzowd1wqx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  local left = total - need\n  if left <\
    \ 0 then\n    return {total, 0}\n  else\n    return {need, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5u1mn_k.lua:33:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpu5u1mn_k.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = total - need\n  if eaten < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, eaten}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrznyrgg.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmprrznyrgg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  local left = total - need\n  if left <\
    \ 0 then\n    return {total, 0}\n  else\n    return {need, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5u1mn_k.lua:33:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpu5u1mn_k.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local eaten = number + need\n  local left = remaining - need\n  if left < 0\
    \ then\n    left = 0\n    eaten = eaten + left\n  end\n  return {eaten, left}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09lckfg6.lua:36:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmp09lckfg6.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    eaten = eaten\
    \ + left\n    left = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    eaten = remaining\n  end\n  return\
    \ {eaten, remaining - eaten}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbvc20j2.lua:30:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmppbvc20j2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = total - need\n  if eaten < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, eaten}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrznyrgg.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmprrznyrgg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  if remaining < need then\n    return {number + remaining, 0}\n  else\n    return\
    \ {number + need, remaining - need}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + remaining\n    if total >= need then\n        return {need, total -\
    \ need}\n    else\n        return {total, 0}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_ibe5eh.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpg_ibe5eh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return { need, total - need }\n  else\n\
    \    return { total, 0 }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanwgpln9.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpanwgpln9.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    eaten = eaten\
    \ + left\n    left = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  local left = total - need\n  if left <\
    \ 0 then\n    return {total, 0}\n  else\n    return {need, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5u1mn_k.lua:33:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpu5u1mn_k.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + need\n    if total > remaining then\n        return {remaining, 0}\n\
    \    else\n        return {total, remaining - total}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjuctvdac.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpjuctvdac.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  local left = remaining - need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_f3wu6lg.lua:32:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmp_f3wu6lg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    eaten = eaten\
    \ + left\n    left = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + remaining\n    local eaten = math.min(total, need)\n    return {eaten,\
    \ total - eaten}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgqu1vb3.lua:28:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmprgqu1vb3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    if number + need\
    \ <= remaining then\n        return {number + need, remaining - (number + need)}\n\
    \    else\n        return {remaining, 0}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenz_2h4u.lua:30:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpenz_2h4u.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    eaten = eaten\
    \ + left\n    left = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {eaten, remaining - eaten}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzowd1wqx.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpzowd1wqx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = math.min(total, need)\n  local left = total - eaten\n\
    \  return {eaten, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqwe_dm3.lua:29:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpmqwe_dm3.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  local left = total - need\n  if left <\
    \ 0 then\n    return {total, 0}\n  else\n    return {total, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydca2w1e.lua:33:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmpydca2w1e.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  if number + need\
    \ <= remaining then\n    return { number + need, remaining - (number + need) }\n\
    \  else\n    return { number + remaining, 0 }\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbuhl8cw.lua:30:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmpbbuhl8cw.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = math.min(number\
    \ + remaining, need)\n  return {eaten, math.max(0, eaten - need)}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7vef7rq.lua:27:\
    \ expected: {11, 4}\nactual: {6, 0}\nstack traceback:\n\t/tmp/tmpe7vef7rq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    return {eaten,\
    \ 0}\n  else\n    return {eaten, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvd3bht89.lua:35:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpvd3bht89.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    eaten = eaten\
    \ + left\n    left = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikvymxwy.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpikvymxwy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local result =\
    \ {}\n  if number + need > remaining then\n    result[1] = remaining\n    result[2]\
    \ = 0\n  else\n    result[1] = number + need\n    result[2] = remaining - (number\
    \ + need)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoca652mr.lua:34:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpoca652mr.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local total =\
    \ number + remaining\n    local left = total - need\n    if left < 0 then\n  \
    \      return {total, 0}\n    else\n        return {total, left}\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3h8x5st.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmpq3h8x5st.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = total - need\n  if eaten < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, eaten}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrznyrgg.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmprrznyrgg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  return {number\
    \ + math.min(need, remaining), math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {eaten, remaining - eaten}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzowd1wqx.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpzowd1wqx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local eaten = number + need\n  local left = remaining - need\n  if left < 0\
    \ then\n    left = 0\n    eaten = number + remaining\n  end\n  return {eaten,\
    \ left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  if number + need\
    \ > 1000 then\n    return {1000, remaining - (1000 - number)}\n  elseif number\
    \ + need > remaining then\n    return {remaining, 0}\n  else\n    return {number\
    \ + need, remaining - need}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabw0_f46.lua:32:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpabw0_f46.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = math.min(total, need)\n  return {eaten, total -\
    \ eaten}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoike7iz.lua:28:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmppoike7iz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + need\n  local left = remaining - need\n  if left < 0\
    \ then\n    return {total, 0}\n  else\n    return {total, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb8rtxql.lua:36:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpqb8rtxql.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {eaten, remaining - eaten}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzowd1wqx.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpzowd1wqx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return { need, total - need }\n  else\n\
    \    return { total, 0 }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanwgpln9.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpanwgpln9.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    return {eaten,\
    \ 0}\n  else\n    return {eaten, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvd3bht89.lua:35:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpvd3bht89.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    -- your code\
    \ here\n    return {number + math.min(need, remaining), math.max(0, remaining\
    \ - need)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {eaten, remaining - eaten}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzowd1wqx.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpzowd1wqx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = total > need and need or total\n  return {eaten,\
    \ total - eaten}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfg81e4a6.lua:28:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpfg81e4a6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  if remaining <\
    \ need then\n    return {number + remaining, 0}\n  else\n    return {number +\
    \ need, remaining - need}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    eaten = eaten\
    \ + left\n    left = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  local left = total - need\n  if left <\
    \ 0 then\n    return {total, 0}\n  else\n    return {total, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydca2w1e.lua:33:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmpydca2w1e.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n\
    \    eaten = eaten + left\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwptzjyug.lua:35:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwptzjyug.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = math.min(need, remaining)\n  local left = math.max(0,\
    \ total - need)\n  return {eaten, left}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfix91hlf.lua:29:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpfix91hlf.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikvymxwy.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpikvymxwy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    eaten = eaten\
    \ + left\n    left = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten <= remaining then\n    return {eaten, remaining - eaten}\n\
    \  else\n    return {remaining, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc7qvreg.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmphc7qvreg.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n    local eaten =\
    \ number + need\n    if eaten > remaining then\n        return {remaining, 0}\n\
    \    else\n        return {eaten, remaining - eaten}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1lgyopk.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmph1lgyopk.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = total - need\n  local left = total - eaten\n  return\
    \ {eaten, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywf9vev7.lua:29:\
    \ expected: {11, 4}\nactual: {9, 6}\nstack traceback:\n\t/tmp/tmpywf9vev7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total > need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9pb8d06.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpu9pb8d06.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {eaten, remaining - eaten}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzowd1wqx.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpzowd1wqx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + need\n  if total <= remaining then\n    return {total,\
    \ remaining - total}\n  else\n    return {remaining, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6vil2xc.lua:32:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpt6vil2xc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikvymxwy.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpikvymxwy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = math.min(total, need)\n  local left = total - eaten\n\
    \  return {eaten, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqwe_dm3.lua:29:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpmqwe_dm3.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total < need then\n    return {total, 0}\n  else\n    return\
    \ {need, total - need}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmqz_j5y.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpdmqz_j5y.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bvxze9.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpt4bvxze9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    eaten = remaining\n  end\n  return\
    \ {eaten, remaining - eaten}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbvc20j2.lua:30:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmppbvc20j2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local eaten = number + remaining\n  if eaten > need then\n    return {need,\
    \ eaten - need}\n  else\n    return {eaten, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p8ptu2o.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmp9p8ptu2o.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikvymxwy.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpikvymxwy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total < need then\n    return {total, 0}\n  else\n    return\
    \ {need, total - need}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmqz_j5y.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpdmqz_j5y.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  if eaten > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {eaten, remaining - eaten}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzowd1wqx.lua:31:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpzowd1wqx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  if remaining <\
    \ need then\n    return {number + remaining, 0}\n  else\n    return {number +\
    \ need, remaining - need}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + need\n  local left = remaining - need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_f3wu6lg.lua:32:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmp_f3wu6lg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n\
    \    eaten = eaten + left\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwptzjyug.lua:35:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwptzjyug.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  local left = total - need\n  if left <\
    \ 0 then\n    return {total, 0}\n  else\n    return {need, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5u1mn_k.lua:33:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpu5u1mn_k.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n\
    \    eaten = number + remaining\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_alyw3i.lua:32:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmph_alyw3i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g5s9n8.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpw_g5s9n8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  -- your code here\n\
    \  local total = number + remaining\n  local left = total - need\n  if left <\
    \ 0 then\n    return {total, 0}\n  else\n    return {total, left}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydca2w1e.lua:33:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmpydca2w1e.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local total = number\
    \ + remaining\n  local eaten = total - need\n  if eaten < 0 then\n    eaten =\
    \ 0\n  end\n  return {total, eaten}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4x8o5z1u.lua:31:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmp4x8o5z1u.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n\
    -- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining\
    \ : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n\
    -- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n\
    -- Have fun :)\nlocal function eat(number, need, remaining)\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    return {eaten,\
    \ 0}\n  else\n    return {eaten, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvd3bht89.lua:35:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpvd3bht89.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
