name: HumanEval_18_how_many_times
language: lua
prompt: "-- Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\nlocal function how_many_times(string, substring)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
  \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
  \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
  \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal count = 0\n\tlocal from = 1\n\tlocal to = 1\n\twhile true do\n\
    \t\tfrom, to = string.find(string, substring, from, true)\n\t\tif from == nil\
    \ then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\tfrom = to + 1\n\tend\n\
    \treturn count\nend", "    local count = 0\n    local start = 1\n    while true\
    \ do\n        local pos = string:find(substring, start, true)\n        if not\
    \ pos then\n            break\n        end\n        count = count + 1\n      \
    \  start = pos + 1\n    end\n    return count\nend", "    local count = 0\n  \
    \  local index = 1\n    while true do\n        index = string:find(substring,\
    \ index, true)\n        if index == nil then break end\n        count = count\
    \ + 1\n        index = index + 1\n    end\n    return count\nend", "\tlocal count\
    \ = 0\n\tlocal i = 1\n\twhile i <= #string do\n\t\tlocal j = string:find(substring,\
    \ i, true)\n\t\tif j then\n\t\t\tcount = count + 1\n\t\t\ti = j + 1\n\t\telse\n\
    \t\t\tbreak\n\t\tend\n\tend\n\treturn count\nend", "\tlocal count = 0\n\tfor i\
    \ in string.gmatch(string, substring) do\n\t\tcount = count + 1\n\tend\n\treturn\
    \ count\nend", "    local count = 0\n    local start_index = 1\n    local end_index\
    \ = string.len(substring)\n    while true do\n        local index = string.find(string,\
    \ substring, start_index, true)\n        if index == nil then\n            break\n\
    \        end\n        count = count + 1\n        start_index = index + 1\n   \
    \ end\n    return count\nend", "  local count = 0\n  local i = 0\n  while true\
    \ do\n    i = string.find(string, substring, i + 1, true)\n    if i == nil then\n\
    \      break\n    end\n    count = count + 1\n  end\n  return count\nend", "\t\
    local count = 0\n\tlocal index = 0\n\twhile true do\n\t\tindex = string:find(substring,\
    \ index + 1)\n\t\tif index == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\tend\n\treturn count\nend", "\tlocal count = 0\n\tlocal start = 1\n\t\
    while true do\n\t\tlocal index = string:find(substring, start, true)\n\t\tif not\
    \ index then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\tstart = index +\
    \ 1\n\tend\n\treturn count\nend", "    local count = 0\n    local start_index\
    \ = 1\n    while true do\n        local start_index, end_index = string.find(string,\
    \ substring, start_index)\n        if start_index == nil then\n            break\n\
    \        end\n        count = count + 1\n        start_index = end_index + 1\n\
    \    end\n    return count\nend", "\tlocal count = 0\n\tlocal start = 1\n\twhile\
    \ true do\n\t\tlocal pos = string:find(substring, start, true)\n\t\tif not pos\
    \ then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\tstart = pos + 1\n\tend\n\
    \treturn count\nend", "\tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\t\
    i = string:find(substring, i, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\
    \t\tcount = count + 1\n\t\ti = i + 1\n\tend\n\treturn count\nend", "\tlocal count\
    \ = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend", "\tlocal count = 0\n\t\
    local start_index = 1\n\twhile true do\n\t\tlocal index = string:find(substring,\
    \ start_index, true)\n\t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\tcount =\
    \ count + 1\n\t\tstart_index = index + 1\n\tend\n\treturn count\nend", "\tlocal\
    \ count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal index = string:find(substring,\
    \ start, true)\n\t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart = index + 1\n\tend\n\treturn count\nend", "    local count =\
    \ 0\n    local offset = 1\n    while true do\n        local start_pos, end_pos\
    \ = string.find(string, substring, offset, true)\n        if start_pos == nil\
    \ then\n            break\n        end\n        count = count + 1\n        offset\
    \ = end_pos + 1\n    end\n    return count\nend", "    local count = 0\n    local\
    \ index = 1\n    while true do\n        index = string:find(substring, index,\
    \ true)\n        if index == nil then\n            break\n        end\n      \
    \  count = count + 1\n        index = index + 1\n    end\n    return count\nend",
  "\tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\ti = string:find(substring,\
    \ i, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\ti = i + 1\n\tend\n\treturn count\nend", "\tlocal count = 0\n\tlocal start_index\
    \ = 1\n\twhile true do\n\t\tlocal index = string:find(substring, start_index,\
    \ true)\n\t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\
    \tstart_index = index + 1\n\tend\n\treturn count\nend", "\tlocal count = 0\n\t\
    local i = 0\n\twhile true do\n\t\ti = string.find(string, substring, i + 1, true)\n\
    \t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\tend\n\treturn\
    \ count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
