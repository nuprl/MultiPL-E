name: HumanEval_144_simplify
language: lua
prompt: "-- Your task is to implement a function that will simplify the expression\n\
  -- x * n. The function returns True if x * n evaluates to a whole number and False\n\
  -- otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n-- <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n-- You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\nlocal function simplify(x, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = simplify\n\
  \    lu.assertEquals(candidate('1/5', '5/1'), true)\n    lu.assertEquals(candidate('1/6',\
  \ '2/1'), false)\n    lu.assertEquals(candidate('5/1', '3/1'), true)\n    lu.assertEquals(candidate('7/10',\
  \ '10/2'), false)\n    lu.assertEquals(candidate('2/10', '50/10'), true)\n    lu.assertEquals(candidate('7/2',\
  \ '4/2'), true)\n    lu.assertEquals(candidate('11/6', '6/1'), true)\n    lu.assertEquals(candidate('2/3',\
  \ '5/2'), false)\n    lu.assertEquals(candidate('5/2', '3/5'), false)\n    lu.assertEquals(candidate('2/4',\
  \ '8/4'), true)\n    lu.assertEquals(candidate('2/4', '4/2'), true)\n    lu.assertEquals(candidate('1/5',\
  \ '5/1'), true)\n    lu.assertEquals(candidate('1/5', '1/5'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n \
    \   local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "  local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_numerator\n  local denominator = x_denominator * n_denominator\n  local gcd\
    \ = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n  denominator\
    \ = denominator / gcd\n  return numerator % denominator == 0\nend", "  local function\
    \ gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n\
    \  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function\
    \ to_fraction(x)\n    local numerator, denominator = x:match(\"(%d+)/(%d+)\")\n\
    \    return tonumber(numerator), tonumber(denominator)\n  end\n  local function\
    \ to_string(x)\n    return tostring(x[1]) .. \"/\" .. tostring(x[2])\n  end\n\
    \  local function multiply(x, y)\n    local numerator, denominator = x[1] * y[1],\
    \ x[2] * y[2]\n    local divisor = gcd(numerator, denominator)\n    return {numerator\
    \ / divisor, denominator / divisor}\n  end\n  local function is_integer(x)\n \
    \   return x[1] % x[2] == 0\n  end\n  local x_numerator, x_denominator = to_fraction(x)\n\
    \  local n_numerator, n_denominator = to_fraction(n)\n  local lcm_denominator\
    \ = lcm(x_denominator, n_denominator)\n  local x_numerator_lcm = x_numerator *\
    \ (lcm_denominator / x_denominator)\n  local n_numerator_lcm = n_numerator * (lcm_denominator\
    \ / n_denominator)\n  local x_n = multiply({x_numerator_lcm, lcm_denominator},\
    \ {n_numerator_lcm, lcm_denominator})\n  return is_integer(x_n)\nend", "  local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_numerator\n  local denominator = x_denominator * n_denominator\n  local gcd\
    \ = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n  denominator\
    \ = denominator / gcd\n  return numerator % denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator * n_numerator\n\
    \  local denominator = x_denominator * n_denominator\n  local gcd = math.gcd(numerator,\
    \ denominator)\n  numerator = numerator / gcd\n  denominator = denominator / gcd\n\
    \  if denominator == 1 then\n    return true\n  else\n    return false\n  end\n\
    end", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local\
    \ n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator =\
    \ x_numerator * n_numerator\n    local denominator = x_denominator * n_denominator\n\
    \    local gcd = math.gcd(numerator, denominator)\n    return numerator / gcd\
    \ == denominator / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num /\
    \ gcd\n  den = den / gcd\n  return num % den == 0\nend", "    local x_num, x_den\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n    local num = x_num * n_num\n    local den = x_den * n_den\n    local gcd\
    \ = math.gcd(num, den)\n    return num / gcd == den / gcd\nend", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator * n_numerator\n\
    \  local denominator = x_denominator * n_denominator\n  local gcd = math.gcd(numerator,\
    \ denominator)\n  numerator = numerator / gcd\n  denominator = denominator / gcd\n\
    \  if numerator % denominator == 0 then\n    return true\n  else\n    return false\n\
    \  end\nend", "    local function gcd(a, b)\n        while b ~= 0 do\n       \
    \     a, b = b, a % b\n        end\n        return a\n    end", "  local x_num,\
    \ x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "    local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num\
    \ = x_num * n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num,\
    \ den)\n    num = num / gcd\n    den = den / gcd\n    return num % den == 0\n\
    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den =\
    \ n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend",
  "    local xNumerator, xDenominator = x:match(\"(%d+)/(%d+)\")\n    local nNumerator,\
    \ nDenominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = xNumerator *\
    \ nDenominator\n    local denominator = xDenominator * nNumerator\n    local gcd\
    \ = math.gcd(numerator, denominator)\n    numerator = numerator / gcd\n    denominator\
    \ = denominator / gcd\n    return numerator % denominator == 0\nend", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_numerator\n    local denominator = x_denominator * n_denominator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    return numerator / gcd == denominator\
    \ / gcd\nend", "    local xn = x * n\n    return xn % 1 == 0\nend", "    local\
    \ x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    return (x_num * n_den) % (x_den * n_num) == 0\nend", "  local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_numerator\n  local denominator = x_denominator * n_denominator\n  local gcd\
    \ = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n  denominator\
    \ = denominator / gcd\n  return numerator % denominator == 0\nend", "  local function\
    \ gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n\
    \  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function\
    \ simplify_fraction(x)\n    local numerator, denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local g = gcd(numerator, denominator)\n    return numerator / g, denominator\
    \ / g\n  end\n  local x_numerator, x_denominator = simplify_fraction(x)\n  local\
    \ n_numerator, n_denominator = simplify_fraction(n)\n  local l = lcm(x_denominator,\
    \ n_denominator)\n  local result_numerator = x_numerator * (l / x_denominator)\
    \ * n_numerator\n  local result_denominator = l\n  local g = gcd(result_numerator,\
    \ result_denominator)\n  return result_numerator / g, result_denominator / g\n\
    end", "  local function gcd(a, b)\n    if b == 0 then return a end\n    return\
    \ gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a,\
    \ b)\n  end\n  local function to_number(str)\n    local num, den = str:match(\"\
    (%d+)/(%d+)\")\n    return tonumber(num) / tonumber(den)\n  end\n  local function\
    \ to_fraction(num)\n    local den = 1\n    while num % 1 ~= 0 do\n      num =\
    \ num * 10\n      den = den * 10\n    end\n    return tostring(num) .. \"/\" ..\
    \ tostring(den)\n  end\n  local function to_fraction_str(num)\n    local den =\
    \ 1\n    while num % 1 ~= 0 do\n      num = num * 10\n      den = den * 10\n \
    \   end\n    return tostring(num) .. \"/\" .. tostring(den)\n  end\n  local function\
    \ simplify_fraction(str)\n    local num, den = str:match(\"(%d+)/(%d+)\")\n  \
    \  local g = gcd(num, den)\n    return tostring(num / g) .. \"/\" .. tostring(den\
    \ / g)\n  end\n  local function multiply_fractions(x, n)\n    local x_num, x_den\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n    local num = x_num * n_num\n    local den = x_den * n_den\n    return tostring(num)\
    \ .. \"/\" .. tostring(den)\n  end\n  local function is_whole_number(str)\n  \
    \  local num, den = str:match(\"(%d+)/(%d+)\")\n    return den == 1\n  end\n \
    \ local function is_integer(str)\n    local num, den = str:match(\"(%d+)/(%d+)\"\
    )\n    return num % den == 0\n  end\n  local function is_fraction(str", "    local\
    \ function gcd(a, b)\n        while b ~= 0 do\n            a, b = b, a % b\n \
    \       end\n        return a\n    end", "    local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num\
    \ = x_num * n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num,\
    \ den)\n    return num / gcd == den / gcd\nend", "  local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num =\
    \ x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n\
    \  return (num / gcd) % (den / gcd) == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    local numerator = x_numerator * n_numerator\n    local denominator\
    \ = x_denominator * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n\
    \    numerator = numerator / gcd\n    denominator = denominator / gcd\n    return\
    \ numerator % denominator == 0\nend", "  local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n  return numerator\
    \ / gcd == denominator / gcd\nend", "  local xn = x * n\n  return xn % 1 == 0\n\
    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den =\
    \ n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend",
  "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local\
    \ gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend", "    local\
    \ x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    return num / gcd == den / gcd\nend",
  "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    return num / gcd == den / gcd\nend",
  "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local\
    \ gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend", "  local xn\
    \ = x * n\n  return xn % 1 == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ numerator = x_numerator * n_numerator\n    local denominator = x_denominator\
    \ * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n    numerator\
    \ = numerator / gcd\n    denominator = denominator / gcd\n    return numerator\
    \ % denominator == 0\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num *\
    \ n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n \
    \   return num / gcd == den / gcd\nend", "  local function gcd(a, b)\n    if b\
    \ == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a,\
    \ b)\n    return a * b / gcd(a, b)\n  end\n  local function to_number(x)\n   \
    \ return tonumber(x:match(\"(%d+)/(%d+)\"))\n  end\n  local x_num, x_den = to_number(x)\n\
    \  local n_num, n_den = to_number(n)\n  local den = lcm(x_den, n_den)\n  local\
    \ num = x_num * (den / x_den) * n_num\n  return num % den == 0\nend", "  local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_numerator\n  local denominator = x_denominator * n_denominator\n  local gcd\
    \ = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n  denominator\
    \ = denominator / gcd\n  return numerator % denominator == 0\nend", "  local x_num,\
    \ x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n  numerator\
    \ = numerator / gcd\n  denominator = denominator / gcd\n  return numerator % denominator\
    \ == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return a end\n \
    \   return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b\
    \ / gcd(a, b)\n  end\n  local function simplify(x)\n    local a, b = x:match(\"\
    (%d+)/(%d+)\")\n    a, b = tonumber(a), tonumber(b)\n    local g = gcd(a, b)\n\
    \    return a / g, b / g\n  end\n  local xa, xb = simplify(x)\n  local na, nb\
    \ = simplify(n)\n  local l = lcm(xb, nb)\n  return (l / xb * xa) % (l / nb * na)\
    \ == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den\
    \ = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return num / gcd ==\
    \ den / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local result_numerator\
    \ = x_numerator * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  local result = result_numerator .. \"/\" .. result_denominator\n  local result_numerator_int,\
    \ result_denominator_int = result:match(\"(%d+)/(%d+)\")\n  if result_numerator_int\
    \ % result_denominator_int == 0 then\n    return true\n  else\n    return false\n\
    \  end\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  return numerator / gcd == denominator\
    \ / gcd\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local product_numerator\
    \ = x_numerator * n_numerator\n  local product_denominator = x_denominator * n_denominator\n\
    \  local product = product_numerator .. \"/\" .. product_denominator\n  local\
    \ product_whole, product_fraction = product:match(\"(%d+)(.*)\")\n  if product_fraction\
    \ == \"\" then\n    return true\n  else\n    return false\n  end\nend", "  local\
    \ x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  num = num / gcd\n  den = den / gcd\n  return num % den == 0\nend", " \
    \ local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local\
    \ gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend", "    local\
    \ x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    return (x_num * n_den) % (x_den * n_num) == 0\nend", "   \
    \ local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    num = num / gcd\n    den = den / gcd\n\
    \    return num % den == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  return numerator / gcd == denominator\
    \ / gcd\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den\
    \ = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return num / gcd ==\
    \ den / gcd\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ numerator = x_numerator * n_numerator\n    local denominator = x_denominator\
    \ * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n    return\
    \ numerator / gcd == denominator / gcd\nend", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  local numerator = x_numerator * n_numerator\n  local denominator\
    \ = x_denominator * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n\
    \  numerator = numerator / gcd\n  denominator = denominator / gcd\n  return numerator\
    \ % denominator == 0\nend", "    local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\"\
    )\n    local numerator = x_numerator * n_numerator\n    local denominator = x_denominator\
    \ * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n    numerator\
    \ = numerator / gcd\n    denominator = denominator / gcd\n    return numerator\
    \ % denominator == 0\nend", "  local xn = x * n\n  return xn == math.floor(xn)\n\
    end", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local\
    \ n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator =\
    \ x_numerator * n_numerator\n    local denominator = x_denominator * n_denominator\n\
    \    local gcd = math.gcd(numerator, denominator)\n    return numerator / gcd\
    \ == denominator / gcd\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num *\
    \ n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n \
    \   num = num / gcd\n    den = den / gcd\n    return num % den == 0\nend", " \
    \ local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local\
    \ gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend", "  local xn\
    \ = x * n\n  return xn == math.floor(xn)\nend", "    local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num\
    \ = x_num * n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num,\
    \ den)\n    return num / gcd == den / gcd\nend", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  local numerator = x_numerator * n_numerator\n  local denominator\
    \ = x_denominator * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n\
    \  numerator = numerator / gcd\n  denominator = denominator / gcd\n  if numerator\
    \ % denominator == 0 then\n    return true\n  else\n    return false\n  end\n\
    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den =\
    \ n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend",
  "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_numerator\n  local denominator = x_denominator * n_denominator\n  local gcd\
    \ = math.gcd(numerator, denominator)\n  return numerator / gcd == denominator\
    \ / gcd\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num,\
    \ n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local den = x_den\
    \ * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\n\
    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den =\
    \ n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend",
  "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_numerator\n    local denominator = x_denominator * n_denominator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    return numerator / gcd == denominator\
    \ / gcd\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ numerator = x_numerator * n_numerator\n    local denominator = x_denominator\
    \ * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n    numerator\
    \ = numerator / gcd\n    denominator = denominator / gcd\n    return numerator\
    \ % denominator == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num /\
    \ gcd\n  den = den / gcd\n  return num % den == 0\nend", "    local x_num, x_den\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n    local num = x_num * n_num\n    local den = x_den * n_den\n    return num\
    \ % den == 0\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ numerator = x_numerator * n_numerator\n    local denominator = x_denominator\
    \ * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n    return\
    \ numerator / gcd == denominator / gcd\nend", "  local x_num, x_denom = x:match(\"\
    (%d+)/(%d+)\")\n  local n_num, n_denom = n:match(\"(%d+)/(%d+)\")\n  local num\
    \ = x_num * n_num\n  local denom = x_denom * n_denom\n  local gcd = math.gcd(num,\
    \ denom)\n  return num / gcd == denom / gcd\nend", "    local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    local numerator = x_numerator * n_numerator\n    local denominator\
    \ = x_denominator * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n\
    \    return numerator / gcd == denominator / gcd\nend", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator * n_numerator\n\
    \  local denominator = x_denominator * n_denominator\n  local gcd = math.gcd(numerator,\
    \ denominator)\n  numerator = numerator / gcd\n  denominator = denominator / gcd\n\
    \  return numerator % denominator == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n\
    \    n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n\
    \    local numerator = x_numerator * n_numerator\n    local denominator = x_denominator\
    \ * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n    numerator\
    \ = numerator / gcd\n    denominator = denominator / gcd\n    if denominator ==\
    \ 1 then\n        return true\n    else\n        return false\n    end\nend",
  "    local function gcd(a, b)\n        if b == 0 then\n            return a\n  \
    \      else\n            return gcd(b, a % b)\n        end\n    end", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_numerator\n    local denominator = x_denominator * n_denominator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    numerator = numerator / gcd\n  \
    \  denominator = denominator / gcd\n    return numerator % denominator == 0\n\
    end", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local\
    \ n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator =\
    \ x_numerator * n_numerator\n    local denominator = x_denominator * n_denominator\n\
    \    local gcd = math.gcd(numerator, denominator)\n    return numerator / gcd\
    \ == denominator / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n \
    \ local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  return num % den == 0\nend", "    local function\
    \ gcd(a, b)\n        if b == 0 then\n            return a\n        else\n    \
    \        return gcd(b, a % b)\n        end\n    end", "  local x_num, x_den =\
    \ x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  return num % den\
    \ == 0\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ numerator = x_numerator * n_numerator\n    local denominator = x_denominator\
    \ * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n    return\
    \ numerator / gcd == denominator / gcd\nend", "  local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num =\
    \ x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n\
    \  return num / gcd == den / gcd\nend", "  local xn = x * n\n  return xn % 1 ==\
    \ 0\nend", "  local function gcd(a, b)\n    while b ~= 0 do\n      a, b = b, a\
    \ % b\n    end\n    return a\n  end", "    local function gcd(a, b)\n        while\
    \ b ~= 0 do\n            a, b = b, a % b\n        end\n        return a\n    end",
  "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_numerator\n  local denominator = x_denominator * n_denominator\n  local gcd\
    \ = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n  denominator\
    \ = denominator / gcd\n  return numerator % denominator == 0\nend", "    local\
    \ function gcd(a, b)\n        while b ~= 0 do\n            a, b = b, a % b\n \
    \       end\n        return a\n    end", "    local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    local numerator = x_numerator * n_numerator\n    local denominator\
    \ = x_denominator * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n\
    \    return numerator / gcd == denominator / gcd\nend", "  local x_num, x_den\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "    local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num\
    \ = x_num * n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num,\
    \ den)\n    return num / gcd == den / gcd\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num /\
    \ gcd\n  den = den / gcd\n  return num % den == 0\nend", "  local x_num, x_den\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n \
    \ local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  return num % den == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator * n_numerator\n\
    \    local denominator = x_denominator * n_denominator\n    local gcd = math.gcd(numerator,\
    \ denominator)\n    local simplified_numerator = numerator / gcd\n    local simplified_denominator\
    \ = denominator / gcd\n    return simplified_numerator % simplified_denominator\
    \ == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return (num / gcd) % (den\
    \ / gcd) == 0\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local\
    \ n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n   \
    \ local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return num\
    \ / gcd == den / gcd\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n\
    \  denominator = denominator / gcd\n  if numerator % denominator == 0 then\n \
    \   return true\n  else\n    return false\n  end\nend", "  local x_num, x_den\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  num = num / gcd\n  den = den / gcd\n  return num % den == 0\nend", " \
    \   local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_numerator\n    local denominator = x_denominator * n_denominator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    return numerator / gcd == denominator\
    \ / gcd\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n\
    \  denominator = denominator / gcd\n  return numerator % denominator == 0\nend",
  "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_numerator\n  local denominator = x_denominator * n_denominator\n  local gcd\
    \ = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n  denominator\
    \ = denominator / gcd\n  return numerator % denominator == 0\nend", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_numerator\n    local denominator = x_denominator * n_denominator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    return numerator / gcd == denominator\
    \ / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator\
    \ = x_numerator * n_numerator\n    local denominator = x_denominator * n_denominator\n\
    \    local gcd = math.gcd(numerator, denominator)\n    numerator = numerator /\
    \ gcd\n    denominator = denominator / gcd\n    return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  return numerator / gcd == denominator\
    \ / gcd\nend", "    local function gcd(a, b)\n        if b == 0 then\n       \
    \     return a\n        else\n            return gcd(b, a % b)\n        end\n\
    \    end", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    x_numerator,\
    \ x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n    n_numerator,\
    \ n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n    local numerator\
    \ = x_numerator * n_numerator\n    local denominator = x_denominator * n_denominator\n\
    \    local gcd = math.gcd(numerator, denominator)\n    numerator = numerator /\
    \ gcd\n    denominator = denominator / gcd\n    return numerator % denominator\
    \ == 0\nend", "    local xn = x * n\n    return xn % 1 == 0\nend", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_numerator\n    local denominator = x_denominator * n_denominator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    numerator = numerator / gcd\n  \
    \  denominator = denominator / gcd\n    return numerator % denominator == 0\n\
    end", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n    local n_num, n_den\
    \ = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n    local den = x_den\
    \ * n_den\n    local gcd = math.gcd(num, den)\n    return gcd == den\nend", " \
    \ local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  return\
    \ num % den == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local\
    \ n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  x_num, x_den = tonumber(x_num), tonumber(x_den)\n\
    \  n_num, n_den = tonumber(n_num), tonumber(n_den)\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num /\
    \ gcd\n  den = den / gcd\n  return num % den == 0\nend", "    local x_num, x_den\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n    local num = x_num * n_num\n    local den = x_den * n_den\n    local gcd\
    \ = math.gcd(num, den)\n    num = num / gcd\n    den = den / gcd\n    if num %\
    \ den == 0 then\n        return true\n    else\n        return false\n    end\n\
    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den =\
    \ n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend",
  "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local\
    \ gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend", "  local x_num,\
    \ x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "    local xn = x * n\n    return\
    \ xn % 1 == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return a\
    \ end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function simplify(x)\n    local num, den =\
    \ x:match(\"(%d+)/(%d+)\")\n    local g = gcd(num, den)\n    return num / g, den\
    \ / g\n  end\n  local xn = x * n\n  local num, den = simplify(xn)\n  return num\
    \ % den == 0\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local\
    \ n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n   \
    \ local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return num\
    \ / gcd == den / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num /\
    \ gcd\n  den = den / gcd\n  return num % den == 0\nend", "    local function gcd(a,\
    \ b)\n        if b == 0 then\n            return a\n        else\n           \
    \ return gcd(b, a % b)\n        end\n    end", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n\
    \  n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n  numerator\
    \ = numerator / gcd\n  denominator = denominator / gcd\n  return numerator % denominator\
    \ == 0\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den\
    \ = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return num / gcd ==\
    \ den / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den\
    \ = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return num / gcd ==\
    \ den / gcd\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ numerator = x_numerator * n_numerator\n    local denominator = x_denominator\
    \ * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n    numerator\
    \ = numerator / gcd\n    denominator = denominator / gcd\n    return numerator\
    \ % denominator == 0\nend", "    local function gcd(a, b)\n        if b == 0 then\n\
    \            return a\n        else\n            return gcd(b, a % b)\n      \
    \  end\n    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den\
    \ = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend",
  "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_numerator\n  local denominator = x_denominator * n_denominator\n  local gcd\
    \ = math.gcd(numerator, denominator)\n  return numerator / gcd == denominator\
    \ / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n\
    \  denominator = denominator / gcd\n  return numerator % denominator == 0\nend",
  "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_numerator\n  local denominator = x_denominator * n_denominator\n  local gcd\
    \ = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n  denominator\
    \ = denominator / gcd\n  return numerator % denominator == 0\nend", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_numerator\n    local denominator = x_denominator * n_denominator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    return numerator / gcd == denominator\
    \ / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n\
    \  denominator = denominator / gcd\n  return numerator % denominator == 0\nend",
  "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_numerator\n    local denominator = x_denominator * n_denominator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    return numerator / gcd == denominator\
    \ / gcd\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ numerator = x_numerator * n_numerator\n    local denominator = x_denominator\
    \ * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n    numerator\
    \ = numerator / gcd\n    denominator = denominator / gcd\n    return numerator\
    \ % denominator == 0\nend", "  local function gcd(a, b)\n    if a == 0 then return\
    \ b end\n    return gcd(b % a, a)\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n    local a,\
    \ b = x:match(\"(%d+)/(%d+)\")\n    a, b = tonumber(a), tonumber(b)\n    local\
    \ g = gcd(a, b)\n    return a / g, b / g\n  end\n  local x_n, x_d = simplify_fraction(x)\n\
    \  local n_n, n_d = simplify_fraction(n)\n  local l = lcm(x_d, n_d)\n  return\
    \ (x_n * l / x_d) * (n_n * l / n_d) % 1 == 0\nend", "    local function gcd(a,\
    \ b)\n        while b ~= 0 do\n            a, b = b, a % b\n        end\n    \
    \    return a\n    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local\
    \ n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local\
    \ den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd ==\
    \ den / gcd\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n\
    \  denominator = denominator / gcd\n  return numerator % denominator == 0\nend",
  "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    num = num / gcd\n    den = den / gcd\n\
    \    return num % den == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    num =\
    \ num / gcd\n    den = den / gcd\n    return num % den == 0\nend", "    local\
    \ x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    return num / gcd == den / gcd\nend",
  "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local\
    \ gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator * n_numerator\n\
    \  local denominator = x_denominator * n_denominator\n  local gcd = math.gcd(numerator,\
    \ denominator)\n  numerator = numerator / gcd\n  denominator = denominator / gcd\n\
    \  if denominator == 1 then\n    return true\n  else\n    return false\n  end\n\
    end", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local\
    \ n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator\
    \ * n_numerator\n  local denominator = x_denominator * n_denominator\n  local\
    \ gcd = math.gcd(numerator, denominator)\n  return numerator / gcd % 1 == 0 and\
    \ denominator / gcd % 1 == 0\nend", "    local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\"\
    )\n    local numerator = x_numerator * n_numerator\n    local denominator = x_denominator\
    \ * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n    numerator\
    \ = numerator / gcd\n    denominator = denominator / gcd\n    return numerator\
    \ % denominator == 0\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num *\
    \ n_num\n    local den = x_den * n_den\n    if num % den == 0 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "  local x_num, x_den =\
    \ x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local\
    \ num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "    local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num\
    \ = x_num * n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num,\
    \ den)\n    return num / gcd == den / gcd\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "    local function gcd(a, b)\n      \
    \  if b == 0 then\n            return a\n        else\n            return gcd(b,\
    \ a % b)\n        end\n    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "    local function gcd(a, b)\n        while b ~= 0\
    \ do\n            a, b = b, a % b\n        end\n        return a\n    end", " \
    \ local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local\
    \ gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend", "  local x_num,\
    \ x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "    local xn = x * n\n    return\
    \ xn % 1 == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n\
    \  denominator = denominator / gcd\n  return numerator % denominator == 0\nend",
  "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_numerator\n  local denominator = x_denominator * n_denominator\n  local gcd\
    \ = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n  denominator\
    \ = denominator / gcd\n  return numerator % denominator == 0\nend", "    local\
    \ x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    return num / gcd == den / gcd\nend",
  "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_numerator\n    local denominator = x_denominator * n_denominator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    return numerator / gcd == denominator\
    \ / gcd\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ numerator = x_numerator * n_numerator\n    local denominator = x_denominator\
    \ * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n    return\
    \ numerator / gcd % 1 == 0 and denominator / gcd % 1 == 0\nend", "    local x_num,\
    \ x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n    x_num, x_den = tonumber(x_num), tonumber(x_den)\n    n_num, n_den = tonumber(n_num),\
    \ tonumber(n_den)\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    num = num / gcd\n    den = den / gcd\n\
    \    return num % den == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n \
    \ local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num /\
    \ gcd\n  den = den / gcd\n  return num % den == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator * n_numerator\n\
    \  local denominator = x_denominator * n_denominator\n  local gcd = math.gcd(numerator,\
    \ denominator)\n  return numerator / gcd == denominator / gcd\nend", "    local\
    \ function gcd(a, b)\n        if b == 0 then\n            return a\n        else\n\
    \            return gcd(b, a % b)\n        end\n    end", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator * n_numerator\n\
    \  local denominator = x_denominator * n_denominator\n  local gcd = math.gcd(numerator,\
    \ denominator)\n  numerator = numerator / gcd\n  denominator = denominator / gcd\n\
    \  return numerator % denominator == 0\nend", "  local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num =\
    \ x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n\
    \  return num / gcd == den / gcd\nend", "  local x_numerator, x_denominator =\
    \ x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\"\
    )\n  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n  numerator\
    \ = numerator / gcd\n  denominator = denominator / gcd\n  return numerator % denominator\
    \ == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den\
    \ = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return num / gcd ==\
    \ den / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local result_numerator\
    \ = x_numerator * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(result_numerator, result_denominator)\n  return result_numerator\
    \ / gcd == result_denominator / gcd\nend", "    local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    local numerator = x_numerator * n_numerator\n    local denominator\
    \ = x_denominator * n_denominator\n    local gcd = math.gcd(numerator, denominator)\n\
    \    numerator = numerator / gcd\n    denominator = denominator / gcd\n    return\
    \ numerator % denominator == 0\nend", "  local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n  numerator\
    \ = numerator / gcd\n  denominator = denominator / gcd\n  return numerator % denominator\
    \ == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend", "  local function gcd(a, b)\n    if b == 0 then return a end\n  \
    \  return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b /\
    \ gcd(a, b)\n  end\n  local function simplify(x)\n    local a, b = x:match(\"\
    (%d+)/(%d+)\")\n    a, b = tonumber(a), tonumber(b)\n    local c = gcd(a, b)\n\
    \    return (a / c) .. \"/\" .. (b / c)\n  end\n  local function mul(x, y)\n \
    \   local a, b = x:match(\"(%d+)/(%d+)\")\n    local c, d = y:match(\"(%d+)/(%d+)\"\
    )\n    a, b, c, d = tonumber(a), tonumber(b), tonumber(c), tonumber(d)\n    local\
    \ e = lcm(b, d)\n    local f = (e / b) * a\n    local g = (e / d) * c\n    return\
    \ simplify(f .. \"/\" .. g)\n  end\n  return mul(x, n) == x\nend", "  local x_num,\
    \ x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "    local function gcd(a, b)\n      \
    \  while b ~= 0 do\n            a, b = b, a % b\n        end\n        return a\n\
    \    end", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator\
    \ = x_numerator * n_numerator\n    local denominator = x_denominator * n_denominator\n\
    \    local gcd = math.gcd(numerator, denominator)\n    return numerator / gcd\
    \ % 1 == 0 and denominator / gcd % 1 == 0\nend", "  local function gcd(a, b)\n\
    \    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function\
    \ lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function to_fraction(str)\n\
    \    local numerator, denominator = str:match(\"(%d+)/(%d+)\")\n    return tonumber(numerator),\
    \ tonumber(denominator)\n  end\n  local x_numerator, x_denominator = to_fraction(x)\n\
    \  local n_numerator, n_denominator = to_fraction(n)\n  local denominator = lcm(x_denominator,\
    \ n_denominator)\n  local numerator = x_numerator * (denominator / x_denominator)\
    \ + n_numerator * (denominator / n_denominator)\n  return numerator % denominator\
    \ == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den /\
    \ gcd\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
