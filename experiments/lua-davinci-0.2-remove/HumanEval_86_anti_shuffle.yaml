name: HumanEval_86_anti_shuffle
language: lua
prompt: "-- Write a function that takes a string and returns an ordered version of\
  \ it.\n-- Ordered version of string, is a string where all words (separated by space)\n\
  -- are replaced by a new word where all the characters arranged in\n-- ascending\
  \ order based on ascii value.\n-- Note: You should keep the order of words and blank\
  \ spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
  \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
  \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
  \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My name\
  \ is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ w)\n  end\n  local result = {}\n  for _, w in ipairs(words) do\n    local chars\
    \ = {}\n    for c in w:gmatch(\".\") do\n      table.insert(chars, c)\n    end\n\
    \    table.sort(chars)\n    table.insert(result, table.concat(chars))\n  end\n\
    \  return table.concat(result, \" \")\nend", "    local words = {}\n    for word\
    \ in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    for\
    \ i, word in ipairs(words) do\n        local chars = {}\n        for char in word:gmatch(\"\
    .\") do\n            table.insert(chars, char)\n        end\n        table.sort(chars)\n\
    \        words[i] = table.concat(chars)\n    end\n    return table.concat(words,\
    \ \" \")\nend", "  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ w)\n  end\n  for i, w in ipairs(words) do\n    local chars = {}\n    for c in\
    \ w:gmatch(\".\") do\n      table.insert(chars, c)\n    end\n    table.sort(chars)\n\
    \    words[i] = table.concat(chars)\n  end\n  return table.concat(words, \" \"\
    )\nend", "  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ word)\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n    local\
    \ chars = {}\n    for char in word:gmatch(\".\") do\n      table.insert(chars,\
    \ char)\n    end\n    table.sort(chars)\n    table.insert(result, table.concat(chars))\n\
    \  end\n  return table.concat(result, \" \")\nend", "  local words = {}\n  for\
    \ word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local\
    \ sorted = {}\n  for _, word in ipairs(words) do\n    local chars = {}\n    for\
    \ char in word:gmatch(\".\") do\n      table.insert(chars, char)\n    end\n  \
    \  table.sort(chars)\n    table.insert(sorted, table.concat(chars))\n  end\n \
    \ return table.concat(sorted, \" \")\nend", "\tlocal words = {}\n\tlocal word\
    \ = \"\"\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tif c == \" \" then\n\
    \t\t\ttable.insert(words, word)\n\t\t\tword = \"\"\n\t\telse\n\t\t\tword = word\
    \ .. c\n\t\tend\n\tend\n\ttable.insert(words, word)\n\tlocal new_words = {}\n\t\
    for i = 1, #words do\n\t\tlocal word = words[i]\n\t\tlocal new_word = \"\"\n\t\
    \tfor j = 1, #word do\n\t\t\tlocal c = word:sub(j, j)\n\t\t\tlocal ascii = string.byte(c)\n\
    \t\t\tlocal new_ascii = ascii\n\t\t\tfor k = 1, #new_word do\n\t\t\t\tlocal new_c\
    \ = new_word:sub(k, k)\n\t\t\t\tlocal new_ascii2 = string.byte(new_c)\n\t\t\t\t\
    if new_ascii2 > new_ascii then\n\t\t\t\t\tnew_word = new_word:sub(1, k - 1) ..\
    \ c .. new_word:sub(k)\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif #new_word\
    \ == 0 then\n\t\t\t\tnew_word = c\n\t\t\tend\n\t\tend\n\t\ttable.insert(new_words,\
    \ new_word)\n\tend\n\tlocal new_s = \"\"\n\tfor i = 1, #new_words do\n\t\tnew_s\
    \ = new_s .. new_words[i]\n\t\tif i < #new_words then\n\t\t\tnew_s = new_s ..\
    \ \" \"\n\t\tend\n\tend\n\treturn new_s\nend", "  local words = {}\n  for word\
    \ in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    local chars = {}\n    for char\
    \ in word:gmatch(\".\") do\n      table.insert(chars, char)\n    end\n    table.sort(chars)\n\
    \    table.insert(result, table.concat(chars))\n  end\n  return table.concat(result,\
    \ \" \")\nend", "    local words = {}\n    for word in s:gmatch(\"%S+\") do\n\
    \        table.insert(words, word)\n    end\n    for i, word in ipairs(words)\
    \ do\n        local chars = {}\n        for char in word:gmatch(\".\") do\n  \
    \          table.insert(chars, char)\n        end\n        table.sort(chars)\n\
    \        words[i] = table.concat(chars)\n    end\n    return table.concat(words,\
    \ \" \")\nend", "    local words = {}\n    for word in s:gmatch(\"%S+\") do\n\
    \        table.insert(words, word)\n    end\n    local result = {}\n    for _,\
    \ word in ipairs(words) do\n        local chars = {}\n        for char in word:gmatch(\"\
    .\") do\n            table.insert(chars, char)\n        end\n        table.sort(chars)\n\
    \        table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ \" \")\nend", "  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ w)\n  end\n  local function sort_chars(s)\n    local chars = {}\n    for c in\
    \ s:gmatch(\".\") do\n      table.insert(chars, c)\n    end\n    table.sort(chars)\n\
    \    return table.concat(chars)\n  end\n  for i, w in ipairs(words) do\n    words[i]\
    \ = sort_chars(w)\n  end\n  return table.concat(words, \" \")\nend", "  -- your\
    \ code here\nend", "    local words = {}\n    for word in s:gmatch(\"%S+\") do\n\
    \        table.insert(words, word)\n    end\n    local result = {}\n    for i,\
    \ word in ipairs(words) do\n        local chars = {}\n        for char in word:gmatch(\"\
    .\") do\n            table.insert(chars, char)\n        end\n        table.sort(chars)\n\
    \        result[i] = table.concat(chars)\n    end\n    return table.concat(result,\
    \ \" \")\nend", "    local words = {}\n    for word in s:gmatch(\"%S+\") do\n\
    \        table.insert(words, word)\n    end\n    local result = {}\n    for i,\
    \ word in ipairs(words) do\n        local chars = {}\n        for char in word:gmatch(\"\
    .\") do\n            table.insert(chars, char)\n        end\n        table.sort(chars)\n\
    \        result[i] = table.concat(chars)\n    end\n    return table.concat(result,\
    \ \" \")\nend", "    local words = {}\n    local word = ''\n    for c in s:gmatch('.')\
    \ do\n        if c == ' ' then\n            table.insert(words, word)\n      \
    \      word = ''\n        else\n            word = word .. c\n        end\n  \
    \  end\n    table.insert(words, word)\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        table.insert(result, table.concat(table.sort(word:split(''))))\n\
    \    end\n    return table.concat(result, ' ')\nend", "  local t = {}\n  for w\
    \ in s:gmatch(\"%S+\") do\n    table.insert(t, w:gsub(\".\", function(c) return\
    \ string.char(c:byte()) end))\n  end\n  return table.concat(t, \" \")\nend", " \
    \   local words = {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ \" \")\nend", "    local words = {}\n    for word in s:gmatch(\"%S+\") do\n\
    \        table.insert(words, word)\n    end\n    local result = {}\n    for _,\
    \ word in ipairs(words) do\n        local chars = {}\n        for c in word:gmatch(\"\
    .\") do\n            table.insert(chars, c)\n        end\n        table.sort(chars)\n\
    \        table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ \" \")\nend", "    local words = {}\n    for word in s:gmatch(\"%S+\") do\n\
    \        table.insert(words, word)\n    end\n    local result = {}\n    for i,\
    \ word in ipairs(words) do\n        local chars = {}\n        for char in word:gmatch(\"\
    .\") do\n            table.insert(chars, char)\n        end\n        table.sort(chars)\n\
    \        result[i] = table.concat(chars)\n    end\n    return table.concat(result,\
    \ \" \")\nend", "    local words = {}\n    for word in s:gmatch(\"%S+\") do\n\
    \        table.insert(words, word)\n    end\n    for i, word in ipairs(words)\
    \ do\n        local chars = {}\n        for char in word:gmatch(\".\") do\n  \
    \          table.insert(chars, char)\n        end\n        table.sort(chars)\n\
    \        words[i] = table.concat(chars)\n    end\n    return table.concat(words,\
    \ \" \")\nend", "    local words = {}\n    for word in s:gmatch(\"%S+\") do\n\
    \        table.insert(words, word)\n    end\n    for i, word in ipairs(words)\
    \ do\n        local chars = {}\n        for char in word:gmatch(\".\") do\n  \
    \          table.insert(chars, char)\n        end\n        table.sort(chars)\n\
    \        words[i] = table.concat(chars)\n    end\n    return table.concat(words,\
    \ \" \")\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
