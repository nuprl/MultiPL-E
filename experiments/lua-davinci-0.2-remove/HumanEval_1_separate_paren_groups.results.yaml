language: lua
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        elseif c ~= \" \"\
    \ then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmpnwj0t.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpsmpnwj0t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ res = {}\n    local start = 1\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         level = level + 1\n        elseif c == ')' then\n            level =\
    \ level - 1\n            if level == 0 then\n                res[#res + 1] = paren_string:sub(start,\
    \ i)\n                start = i + 1\n            end\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph20crqjf.lua:27:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" ((()))\", \" ()\", \" ((())()())\"}\nstack traceback:\n\t/tmp/tmph20crqjf.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bdwyhg0.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp6bdwyhg0.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = \"\"\n    local paren_level = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_level = paren_level + 1\n  \
    \      elseif char == \")\" then\n            paren_level = paren_level - 1\n\
    \        end\n        if paren_level == 0 and char == \")\" then\n           \
    \ table.insert(paren_groups, paren_group)\n            paren_group = \"\"\n  \
    \      elseif paren_level > 0 then\n            paren_group = paren_group .. char\n\
    \        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsd0to__9.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpsd0to__9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = {}\n\tlocal paren_count = 0\n\tfor i =\
    \ 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char ==\
    \ \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\telseif char == \")\" then\n\
    \t\t\tparen_count = paren_count - 1\n\t\tend\n\t\tif paren_count == 0 then\n\t\
    \t\tif #current_group > 0 then\n\t\t\t\ttable.insert(result, table.concat(current_group))\n\
    \t\t\t\tcurrent_group = {}\n\t\t\tend\n\t\telse\n\t\t\tif char ~= \" \" then\n\
    \t\t\t\ttable.insert(current_group, char)\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptthaoq25.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmptthaoq25.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8ljp4u2.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpe8ljp4u2.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal paren_group = \"\"\n\tlocal paren_count = 0\n\tfor\
    \ i = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"\
    (\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tparen_group = paren_group\
    \ .. c\n\t\telseif c == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\t\
    paren_group = paren_group .. c\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(paren_groups,\
    \ paren_group)\n\t\t\t\tparen_group = \"\"\n\t\t\tend\n\t\telseif c ~= \" \" then\n\
    \t\t\tparen_group = paren_group .. c\n\t\tend\n\tend\n\treturn paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                result[#result + 1] = current_group\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggh5g7x1.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpggh5g7x1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcum855k7.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpcum855k7.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \        current_group = current_group .. char\n        elseif char == ')' then\n\
    \            paren_count = paren_count - 1\n            current_group = current_group\
    \ .. char\n            if paren_count == 0 then\n                table.insert(paren_groups,\
    \ current_group)\n                current_group = ''\n            end\n      \
    \  elseif paren_count > 0 then\n            current_group = current_group .. char\n\
    \        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9ycemo7.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpd9ycemo7.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 then\n            if c == \" \" then\n            \
    \    -- ignore\n            elseif c == \")\" then\n                -- ignore\n\
    \            else\n                current_group = current_group .. c\n      \
    \      end\n        else\n            current_group = current_group .. c\n   \
    \     end\n        if paren_count == 0 and current_group ~= \"\" then\n      \
    \      table.insert(groups, current_group)\n            current_group = \"\"\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlviyps_.lua:38:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpvlviyps_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            level = level + 1\n        elseif char == \")\" then\n          \
    \  level = level - 1\n        end\n        if level == 0 then\n            if\
    \ char == \" \" then\n                char = \"\"\n            end\n         \
    \   if char == \",\" then\n                table.insert(groups, group)\n     \
    \           group = \"\"\n            else\n                group = group .. char\n\
    \            end\n        else\n            group = group .. char\n        end\n\
    \    end\n    table.insert(groups, group)\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7e5dutn.lua:37:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())((()))()((())()())\"\
    }\nstack traceback:\n\t/tmp/tmpf7e5dutn.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(result, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycvgi39n.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpycvgi39n.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = {}\n\tlocal level = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\
    \tlevel = level + 1\n\t\t\tcurrent_group[level] = \"(\"\n\t\telseif char == \"\
    )\" then\n\t\t\tlevel = level - 1\n\t\t\tif level == 0 then\n\t\t\t\ttable.insert(groups,\
    \ table.concat(current_group))\n\t\t\t\tcurrent_group = {}\n\t\t\telse\n\t\t\t\
    \tcurrent_group[level] = \")\"\n\t\t\tend\n\t\tend\n\tend\n\treturn groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6gd7nynw.lua:30:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\")(\"\
    , \"))(\", \"(\", \")((\"}\nstack traceback:\n\t/tmp/tmp6gd7nynw.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(groups, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg8r3b7g.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpqg8r3b7g.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       current_group = current_group .. char\n        if open_parens == 0 then\n\
    \            result[#result + 1] = current_group\n            current_group =\
    \ ''\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo90nhl6u.lua:28:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" \", \"((()))\", \" \", \"()\", \" \", \"((())()())\"}\nstack traceback:\n\
    \t/tmp/tmpo90nhl6u.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcum855k7.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpcum855k7.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local group_start = 1\n    local group_end = 1\n    local\
    \ paren_count = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            paren_count = paren_count + 1\n  \
    \      elseif c == ')' then\n            paren_count = paren_count - 1\n     \
    \   end\n        if paren_count == 0 then\n            group_end = i\n       \
    \     table.insert(paren_groups, paren_string:sub(group_start, group_end))\n \
    \           group_start = i + 1\n        end\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31y0a2jy.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" \", \"((()))\", \" \", \"()\", \" \", \"((())()())\"}\nstack traceback:\n\
    \t/tmp/tmp31y0a2jy.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == \"(\" then\n            paren_count = paren_count + 1\n      \
    \      current_group = current_group .. c\n        elseif c == \")\" then\n  \
    \          paren_count = paren_count - 1\n            current_group = current_group\
    \ .. c\n            if paren_count == 0 then\n                table.insert(paren_groups,\
    \ current_group)\n                current_group = \"\"\n            end\n    \
    \    elseif c ~= \" \" then\n            current_group = current_group .. c\n\
    \        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                if #current_group > 0 then\n                    table.insert(result,\
    \ current_group)\n                    current_group = \"\"\n                end\n\
    \            else\n                current_group = current_group .. char\n   \
    \         end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    if #current_group > 0 then\n        table.insert(result,\
    \ current_group)\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq62_qw6.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmptq62_qw6.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal group = \"\"\n\tlocal depth = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"(\" then\n\t\t\tdepth\
    \ = depth + 1\n\t\t\tgroup = group .. c\n\t\telseif c == \")\" then\n\t\t\tdepth\
    \ = depth - 1\n\t\t\tgroup = group .. c\n\t\t\tif depth == 0 then\n\t\t\t\ttable.insert(groups,\
    \ group)\n\t\t\t\tgroup = \"\"\n\t\t\tend\n\t\telseif c ~= \" \" then\n\t\t\t\
    group = group .. c\n\t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                table.insert(groups, current_group)\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9mgcr0r.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpk9mgcr0r.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local current_group = \"\"\n  local paren_count = 0\n  for i\
    \ = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char\
    \ == \"(\" then\n      paren_count = paren_count + 1\n      current_group = current_group\
    \ .. char\n    elseif char == \")\" then\n      paren_count = paren_count - 1\n\
    \      current_group = current_group .. char\n      if paren_count == 0 then\n\
    \        table.insert(groups, current_group)\n        current_group = \"\"\n \
    \     end\n    elseif char ~= \" \" then\n      current_group = current_group\
    \ .. char\n    end\n  end\n  return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal open_parens = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\topen_parens = open_parens - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif open_parens == 0 then\n\t\
    \t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\
    \t\t\tend\n\t\telseif open_parens > 0 then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6e3tymqc.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp6e3tymqc.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_count = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == \"(\" then\n            open_count = open_count + 1\n        elseif c ==\
    \ \")\" then\n            open_count = open_count - 1\n        end\n        if\
    \ open_count == 0 then\n            if current_group ~= \"\" then\n          \
    \      table.insert(groups, current_group)\n                current_group = \"\
    \"\n            end\n        else\n            current_group = current_group ..\
    \ c\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqnjmf_k.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpmqnjmf_k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            open_parens = open_parens + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = \"\"\n\tlocal open_parens = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\topen_parens = open_parens - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif open_parens == 0 then\n\t\
    \t\t\ttable.insert(result, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bdwyhg0.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp6bdwyhg0.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if #current_group >\
    \ 0 then\n                table.insert(groups, current_group)\n              \
    \  current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5osa9bqk.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp5osa9bqk.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8ljp4u2.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpe8ljp4u2.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(groups, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg8r3b7g.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpqg8r3b7g.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = {}\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch(\".\") do\n        if c == \"(\" then\n           \
    \ open_parens = open_parens + 1\n        elseif c == \")\" then\n            open_parens\
    \ = open_parens - 1\n        end\n        if open_parens == 0 then\n         \
    \   table.insert(groups, table.concat(current_group))\n            current_group\
    \ = {}\n        else\n            table.insert(current_group, c)\n        end\n\
    \    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpd1ub5v.lua:28:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"\", \"((())\", \"\", \"(\", \"\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpwpd1ub5v.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal open_parens = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c ==\
    \ \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group = current_group\
    \ .. c\n\t\telseif c == \")\" then\n\t\t\topen_parens = open_parens - 1\n\t\t\t\
    current_group = current_group .. c\n\t\t\tif open_parens == 0 then\n\t\t\t\ttable.insert(paren_groups,\
    \ current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif c ~= \"\
    \ \" then\n\t\t\tcurrent_group = current_group .. c\n\t\tend\n\tend\n\treturn\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\
    \t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                if #current_group > 0 then\n                    table.insert(result,\
    \ current_group)\n                    current_group = \"\"\n                end\n\
    \            else\n                current_group = current_group .. char\n   \
    \         end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    if #current_group > 0 then\n        table.insert(result,\
    \ current_group)\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq62_qw6.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmptq62_qw6.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bdwyhg0.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp6bdwyhg0.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local paren_stack = {}\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            table.insert(paren_stack, char)\n       \
    \ elseif char == ')' then\n            table.remove(paren_stack)\n           \
    \ if #paren_stack == 0 then\n                table.insert(result, table.concat(current_group))\n\
    \                current_group = {}\n            end\n        elseif #paren_stack\
    \ > 0 then\n            table.insert(current_group, char)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63hnadtn.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"\", \"\
    \", \"\", \"\"}\nstack traceback:\n\t/tmp/tmp63hnadtn.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        elseif c ~= \" \"\
    \ then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmpnwj0t.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpsmpnwj0t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal group = \"\"\n\tlocal depth = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\
    \tdepth = depth + 1\n\t\t\tgroup = group .. char\n\t\telseif char == \")\" then\n\
    \t\t\tdepth = depth - 1\n\t\t\tgroup = group .. char\n\t\t\tif depth == 0 then\n\
    \t\t\t\ttable.insert(groups, group)\n\t\t\t\tgroup = \"\"\n\t\t\tend\n\t\telseif\
    \ char ~= \" \" then\n\t\t\tgroup = group .. char\n\t\tend\n\tend\n\treturn groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal paren_group = \"\"\n\tlocal paren_count = 0\n\tfor\
    \ i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tparen_group = paren_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tparen_group = paren_group .. char\n\t\t\tif paren_count == 0 then\n\t\t\t\
    \ttable.insert(paren_groups, paren_group)\n\t\t\t\tparen_group = \"\"\n\t\t\t\
    end\n\t\telseif char ~= \" \" then\n\t\t\tparen_group = paren_group .. char\n\t\
    \tend\n\tend\n\treturn paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n        end\n \
    \       if paren_count == 0 then\n            if #current_group > 0 then\n   \
    \             table.insert(result, table.concat(current_group))\n            \
    \    current_group = {}\n            end\n        else\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66pbyaoy.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp66pbyaoy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n        end\n \
    \       if paren_count == 0 then\n            if #current_group > 0 then\n   \
    \             table.insert(result, table.concat(current_group))\n            \
    \    current_group = {}\n            end\n        else\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66pbyaoy.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp66pbyaoy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            level = level + 1\n        elseif char == \")\" then\n          \
    \  level = level - 1\n        end\n        if char == \" \" then\n           \
    \ -- ignore spaces\n        elseif level == 0 then\n            if group ~= \"\
    \" then\n                table.insert(groups, group)\n                group =\
    \ \"\"\n            end\n        else\n            group = group .. char\n   \
    \     end\n    end\n    if group ~= \"\" then\n        table.insert(groups, group)\n\
    \    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9szlefl1.lua:36:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp9szlefl1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\
    \t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = \"\"\n\tlocal current_level = 0\n\tfor\
    \ i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tcurrent_level = current_level + 1\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\telseif char == \")\" then\n\t\t\tcurrent_level\
    \ = current_level - 1\n\t\t\tcurrent_group = current_group .. char\n\t\t\tif current_level\
    \ == 0 then\n\t\t\t\ttable.insert(result, current_group)\n\t\t\t\tcurrent_group\
    \ = \"\"\n\t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\
    \t\t\tend\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tmtm3cb.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp3tmtm3cb.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                table.insert(groups, current_group)\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9mgcr0r.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpk9mgcr0r.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcum855k7.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpcum855k7.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\
    \t\t\tend\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tmtm3cb.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp3tmtm3cb.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"\
    (\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. c\n\t\telseif c == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\t\
    current_group = current_group .. c\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(groups,\
    \ current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif c ~= \"\
    \ \" then\n\t\t\tcurrent_group = current_group .. c\n\t\tend\n\tend\n\treturn\
    \ groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    --\
    \ TODO: Implement this function\n    -- Hint: Use the stack data structure from\
    \ the previous exercise\n    local stack = Stack:new()\n    local result = {}\n\
    \    local current_group = \"\"\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == \"(\" then\n            stack:push(char)\n\
    \        elseif char == \")\" then\n            stack:pop()\n        end\n   \
    \     current_group = current_group .. char\n        if stack:is_empty() then\n\
    \            table.insert(result, current_group)\n            current_group =\
    \ \"\"\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6h193_z.lua:8:\
    \ attempt to index global 'Stack' (a nil value)\nstack traceback:\n\t/tmp/tmp_6h193_z.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp_6h193_z.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            depth = depth + 1\n        elseif char == \")\" then\n          \
    \  depth = depth - 1\n        end\n        if depth == 0 then\n            if\
    \ char == \" \" then\n                char = \"\"\n            end\n         \
    \   if char == \",\" then\n                table.insert(groups, group)\n     \
    \           group = \"\"\n            else\n                group = group .. char\n\
    \            end\n        else\n            group = group .. char\n        end\n\
    \    end\n    table.insert(groups, group)\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_c7q6zl.lua:37:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())((()))()((())()())\"\
    }\nstack traceback:\n\t/tmp/tmpb_c7q6zl.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            open_parens = open_parens + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp933j6ggc.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp933j6ggc.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local group = \"\"\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            depth = depth + 1\n            group = group .. char\n        elseif\
    \ char == \")\" then\n            depth = depth - 1\n            group = group\
    \ .. char\n            if depth == 0 then\n                table.insert(result,\
    \ group)\n                group = \"\"\n            end\n        elseif char ~=\
    \ \" \" then\n            group = group .. char\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local paren_count = 0\n    for c in\
    \ paren_string:gmatch(\".\") do\n        if c == \"(\" then\n            paren_count\
    \ = paren_count + 1\n        elseif c == \")\" then\n            paren_count =\
    \ paren_count - 1\n        end\n        if paren_count == 0 and c == \")\" then\n\
    \            table.insert(groups, group)\n            group = \"\"\n        elseif\
    \ c ~= \" \" then\n            group = group .. c\n        end\n    end\n    return\
    \ groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlsvshwx.lua:28:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjlsvshwx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local depth = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == '(' then\n            depth = depth + 1\n        elseif char == ')'\
    \ then\n            depth = depth - 1\n        end\n        if depth == 0 then\n\
    \            if #current_group > 0 then\n                table.insert(result,\
    \ table.concat(current_group))\n                current_group = {}\n         \
    \   end\n        else\n            table.insert(current_group, char)\n       \
    \ end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6dd2n17.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp_6dd2n17.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = {}\n\tlocal paren_count = 0\n\tfor i =\
    \ 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == '(' then\n\
    \t\t\tparen_count = paren_count + 1\n\t\telseif c == ')' then\n\t\t\tparen_count\
    \ = paren_count - 1\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(result,\
    \ table.concat(current_group))\n\t\t\t\tcurrent_group = {}\n\t\t\tend\n\t\telseif\
    \ paren_count > 0 then\n\t\t\ttable.insert(current_group, c)\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnwtx9w8.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"\", \"\
    \", \"\", \"\"}\nstack traceback:\n\t/tmp/tmplnwtx9w8.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(groups, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(groups, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local paren_count = 0\n    for i = 1,\
    \ #paren_string do\n        local c = paren_string:sub(i, i)\n        if c ==\
    \ '(' then\n            paren_count = paren_count + 1\n        elseif c == ')'\
    \ then\n            paren_count = paren_count - 1\n        end\n        if paren_count\
    \ == 0 and c == ')' then\n            table.insert(groups, group)\n          \
    \  group = ''\n        else\n            group = group .. c\n        end\n   \
    \ end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefsh9atx.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \" ((())\", \" (\", \" ((())()()\"}\nstack traceback:\n\t/tmp/tmpefsh9atx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char == ')' then\n            table.insert(groups,\
    \ current_group)\n            current_group = ''\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05z_k7_w.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp05z_k7_w.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local open_parens = 0\n    for c in\
    \ paren_string:gmatch(\".\") do\n        if c == \"(\" then\n            open_parens\
    \ = open_parens + 1\n            group = group .. c\n        elseif c == \")\"\
    \ then\n            open_parens = open_parens - 1\n            group = group ..\
    \ c\n            if open_parens == 0 then\n                table.insert(groups,\
    \ group)\n                group = \"\"\n            end\n        elseif open_parens\
    \ > 0 then\n            group = group .. c\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomloeg5w.lua:33:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpomloeg5w.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                -- ignore spaces\n            elseif char == \")\" then\n   \
    \             table.insert(groups, current_group)\n                current_group\
    \ = \"\"\n            else\n                current_group = current_group .. char\n\
    \            end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxu69bx8.lua:35:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjxu69bx8.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = {}\n\tlocal open_parens = 0\n\tfor i =\
    \ 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char ==\
    \ \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group[#current_group\
    \ + 1] = char\n\t\telseif char == \")\" then\n\t\t\topen_parens = open_parens\
    \ - 1\n\t\t\tcurrent_group[#current_group + 1] = char\n\t\t\tif open_parens ==\
    \ 0 then\n\t\t\t\tresult[#result + 1] = table.concat(current_group)\n\t\t\t\t\
    current_group = {}\n\t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group[#current_group\
    \ + 1] = char\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcum855k7.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpcum855k7.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == \"(\" then\n \
    \           depth = depth + 1\n        elseif c == \")\" then\n            depth\
    \ = depth - 1\n        end\n        if depth == 0 then\n            if c == \"\
    \ \" then\n                if group ~= \"\" then\n                    table.insert(groups,\
    \ group)\n                    group = \"\"\n                end\n            else\n\
    \                group = group .. c\n            end\n        else\n         \
    \   group = group .. c\n        end\n    end\n    if group ~= \"\" then\n    \
    \    table.insert(groups, group)\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhf9w9co.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpwhf9w9co.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n        end\n \
    \       if paren_count == 0 then\n            if #current_group > 0 then\n   \
    \             table.insert(result, table.concat(current_group))\n            \
    \    current_group = {}\n            end\n        else\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    if #current_group > 0 then\n        table.insert(result,\
    \ table.concat(current_group))\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ubz8hr9.lua:34:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp_ubz8hr9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal paren_group = \"\"\n\tlocal paren_count = 0\n\tfor\
    \ i = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"\
    (\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tparen_group = paren_group\
    \ .. c\n\t\telseif c == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\t\
    paren_group = paren_group .. c\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(paren_groups,\
    \ paren_group)\n\t\t\t\tparen_group = \"\"\n\t\t\tend\n\t\telseif paren_count\
    \ > 0 then\n\t\t\tparen_group = paren_group .. c\n\t\tend\n\tend\n\treturn paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjvkg5hk.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpfjvkg5hk.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 then\n            table.insert(result, table.concat(current_group))\n\
    \            current_group = {}\n        else\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje8wyzbm.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"\", \"((())\", \"\", \"(\", \"\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpje8wyzbm.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local open_parens = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == \"(\" then\n            open_parens = open_parens + 1\n            group\
    \ = group .. char\n        elseif char == \")\" then\n            open_parens\
    \ = open_parens - 1\n            group = group .. char\n            if open_parens\
    \ == 0 then\n                table.insert(groups, group)\n                group\
    \ = \"\"\n            end\n        elseif open_parens > 0 then\n            group\
    \ = group .. char\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphaihth5o.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmphaihth5o.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            open_parens = open_parens + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp933j6ggc.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp933j6ggc.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ts1acta.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp7ts1acta.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local paren_count = 0\n    for i = 1,\
    \ #paren_string do\n        local c = paren_string:sub(i, i)\n        if c ==\
    \ '(' then\n            paren_count = paren_count + 1\n        elseif c == ')'\
    \ then\n            paren_count = paren_count - 1\n        end\n        if paren_count\
    \ == 0 and c == ')' then\n            table.insert(groups, group)\n          \
    \  group = ''\n        else\n            group = group .. c\n        end\n   \
    \ end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefsh9atx.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \" ((())\", \" (\", \" ((())()()\"}\nstack traceback:\n\t/tmp/tmpefsh9atx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = {}\n\tlocal level = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == '(' then\n\t\t\tlevel\
    \ = level + 1\n\t\t\tcurrent_group[level] = {}\n\t\telseif c == ')' then\n\t\t\
    \tif level == 0 then\n\t\t\t\terror(\"Unbalanced parentheses\")\n\t\t\tend\n\t\
    \t\tif level == 1 then\n\t\t\t\ttable.insert(result, table.concat(current_group[1]))\n\
    \t\t\t\tcurrent_group[1] = nil\n\t\t\tend\n\t\t\tlevel = level - 1\n\t\telseif\
    \ c ~= ' ' then\n\t\t\ttable.insert(current_group[level], c)\n\t\tend\n\tend\n\
    \tif level ~= 0 then\n\t\terror(\"Unbalanced parentheses\")\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8na62zl.lua:36:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"\", \"\
    \", \"\", \"\"}\nstack traceback:\n\t/tmp/tmpp8na62zl.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == \"(\" then\n            paren_count = paren_count + 1\n      \
    \      current_group = current_group .. c\n        elseif c == \")\" then\n  \
    \          paren_count = paren_count - 1\n            current_group = current_group\
    \ .. c\n            if paren_count == 0 then\n                table.insert(paren_groups,\
    \ current_group)\n                current_group = \"\"\n            end\n    \
    \    elseif c ~= \" \" then\n            current_group = current_group .. c\n\
    \        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local paren_level = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            paren_level = paren_level + 1\n        elseif c ==\
    \ ')' then\n            paren_level = paren_level - 1\n        end\n        if\
    \ paren_level == 0 then\n            if #current_group > 0 then\n            \
    \    result[#result + 1] = table.concat(current_group)\n                current_group\
    \ = {}\n            end\n        else\n            current_group[#current_group\
    \ + 1] = c\n        end\n    end\n    if #current_group > 0 then\n        result[#result\
    \ + 1] = table.concat(current_group)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5reyio7m.lua:34:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp5reyio7m.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for c in paren_string:gmatch(\".\") do\n        if c == \"(\" then\n       \
    \     paren_count = paren_count + 1\n        elseif c == \")\" then\n        \
    \    paren_count = paren_count - 1\n        end\n        if paren_count == 0 and\
    \ c == \")\" then\n            table.insert(result, current_group)\n         \
    \   current_group = \"\"\n        elseif c ~= \" \" then\n            current_group\
    \ = current_group .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8axmbh3u.lua:28:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp8axmbh3u.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8ljp4u2.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpe8ljp4u2.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == \"(\" then\n \
    \           depth = depth + 1\n        elseif c == \")\" then\n            depth\
    \ = depth - 1\n        end\n        if depth == 0 then\n            if c == \"\
    \ \" then\n                if group ~= \"\" then\n                    table.insert(groups,\
    \ group)\n                    group = \"\"\n                end\n            else\n\
    \                group = group .. c\n            end\n        else\n         \
    \   group = group .. c\n        end\n    end\n    if group ~= \"\" then\n    \
    \    table.insert(groups, group)\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhf9w9co.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpwhf9w9co.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        elseif c ~= \" \"\
    \ then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmpnwj0t.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpsmpnwj0t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_depth = 0\n   \
    \ for c in paren_string:gmatch(\".\") do\n        if c == \"(\" then\n       \
    \     paren_depth = paren_depth + 1\n            current_group = current_group\
    \ .. c\n        elseif c == \")\" then\n            paren_depth = paren_depth\
    \ - 1\n            current_group = current_group .. c\n            if paren_depth\
    \ == 0 then\n                table.insert(groups, current_group)\n           \
    \     current_group = \"\"\n            end\n        elseif c ~= \" \" then\n\
    \            current_group = current_group .. c\n        end\n    end\n    return\
    \ groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n  local\
    \ paren_groups = {}\n  local current_group = ''\n  local paren_count = 0\n  for\
    \ i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char\
    \ == '(' then\n      paren_count = paren_count + 1\n      current_group = current_group\
    \ .. char\n    elseif char == ')' then\n      paren_count = paren_count - 1\n\
    \      current_group = current_group .. char\n      if paren_count == 0 then\n\
    \        table.insert(paren_groups, current_group)\n        current_group = ''\n\
    \      end\n    elseif paren_count > 0 then\n      current_group = current_group\
    \ .. char\n    end\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2boe8sz.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp_2boe8sz.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == \"(\" then\n            open_count = open_count + 1\n        elseif\
    \ char == \")\" then\n            open_count = open_count - 1\n        end\n \
    \       if open_count == 0 then\n            if current_group ~= \"\" then\n \
    \               table.insert(result, current_group)\n                current_group\
    \ = \"\"\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w3qtgq_.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp2w3qtgq_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local level = 0\n    for i\
    \ = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == \"(\" then\n            level = level + 1\n            current_group =\
    \ current_group .. c\n        elseif c == \")\" then\n            level = level\
    \ - 1\n            current_group = current_group .. c\n            if level ==\
    \ 0 then\n                table.insert(groups, current_group)\n              \
    \  current_group = \"\"\n            end\n        elseif level > 0 then\n    \
    \        current_group = current_group .. c\n        end\n    end\n    return\
    \ groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uxb9ygw.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp0uxb9ygw.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(groups, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local start = 1\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         level = level + 1\n        elseif c == ')' then\n            level =\
    \ level - 1\n            if level == 0 then\n                result[#result +\
    \ 1] = paren_string:sub(start, i)\n                start = i + 1\n           \
    \ end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88na3ka_.lua:27:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" ((()))\", \" ()\", \" ((())()())\"}\nstack traceback:\n\t/tmp/tmp88na3ka_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(groups, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \      elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if paren_group ~=\
    \ \"\" then\n                table.insert(paren_groups, paren_group)\n       \
    \         paren_group = \"\"\n            end\n        else\n            paren_group\
    \ = paren_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiaesxrei.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpiaesxrei.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = \"\"\n\tlocal open_parens = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\topen_parens = open_parens - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif open_parens == 0 then\n\t\
    \t\t\ttable.insert(result, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                current_group = current_group .. char\n            else\n   \
    \             table.insert(result, current_group)\n                current_group\
    \ = \"\"\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05saqok3.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \" ((())\", \" (\", \" ((())()()\"}\nstack traceback:\n\t/tmp/tmp05saqok3.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local current_group = \"\"\n  local paren_count = 0\n  for i\
    \ = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == \"\
    (\" then\n      paren_count = paren_count + 1\n      current_group = current_group\
    \ .. c\n    elseif c == \")\" then\n      paren_count = paren_count - 1\n    \
    \  current_group = current_group .. c\n      if paren_count == 0 then\n      \
    \  table.insert(groups, current_group)\n        current_group = \"\"\n      end\n\
    \    elseif c ~= \" \" then\n      current_group = current_group .. c\n    end\n\
    \  end\n  return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tlocal\
    \ start_index = 1\n\tfor i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i,\
    \ i)\n\t\tif char == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tif\
    \ paren_count == 1 then\n\t\t\t\tstart_index = i\n\t\t\tend\n\t\telseif char ==\
    \ \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\tif paren_count == 0 then\n\
    \t\t\t\ttable.insert(groups, paren_string:sub(start_index, i))\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnc2giky.lua:33:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmppnc2giky.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local open = 0\n    for c in paren_string:gmatch(\"\
    .\") do\n        if c == \"(\" then\n            open = open + 1\n        elseif\
    \ c == \")\" then\n            open = open - 1\n        end\n        if open ==\
    \ 0 and c == \")\" then\n            table.insert(groups, group)\n           \
    \ group = \"\"\n        elseif c ~= \" \" then\n            group = group .. c\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pbhds9w.lua:28:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp9pbhds9w.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_level = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_level = paren_level + 1\n   \
    \     elseif char == \")\" then\n            paren_level = paren_level - 1\n \
    \       end\n        if paren_level == 0 then\n            if char == \" \" then\n\
    \                if current_group ~= \"\" then\n                    table.insert(result,\
    \ current_group)\n                    current_group = \"\"\n                end\n\
    \            else\n                current_group = current_group .. char\n   \
    \         end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    if current_group ~= \"\" then\n        table.insert(result,\
    \ current_group)\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyj4r9c2.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpnyj4r9c2.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = {}\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if #current_group > 0\
    \ then\n                table.insert(paren_groups, table.concat(current_group))\n\
    \                current_group = {}\n            end\n        else\n         \
    \   table.insert(current_group, char)\n        end\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjogzj59o.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjogzj59o.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \")\" then\n\
    \                table.insert(result, current_group)\n                current_group\
    \ = \"\"\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8fbrd89.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpn8fbrd89.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            level = level + 1\n        elseif char == \")\" then\n          \
    \  level = level - 1\n        end\n        if level == 0 and char == \")\" then\n\
    \            table.insert(groups, group)\n            group = \"\"\n        else\n\
    \            group = group .. char\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplujux523.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \" ((())\", \" (\", \" ((())()()\"}\nstack traceback:\n\t/tmp/tmplujux523.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, string.len(paren_string) do\n        local char = string.sub(paren_string,\
    \ i, i)\n        if char == \"(\" then\n            paren_count = paren_count\
    \ + 1\n            current_group = current_group .. char\n        elseif char\
    \ == \")\" then\n            paren_count = paren_count - 1\n            current_group\
    \ = current_group .. char\n            if paren_count == 0 then\n            \
    \    table.insert(groups, current_group)\n                current_group = \"\"\
    \n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4clrd0x.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpy4clrd0x.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            paren_count = paren_count + 1\n        elseif c ==\
    \ ')' then\n            paren_count = paren_count - 1\n        end\n        if\
    \ paren_count == 0 then\n            if #current_group > 0 then\n            \
    \    table.insert(result, table.concat(current_group))\n                current_group\
    \ = {}\n            end\n        else\n            table.insert(current_group,\
    \ c)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf03sk0ux.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpf03sk0ux.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"\
    (\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. c\n\t\telseif c == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\t\
    current_group = current_group .. c\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(result,\
    \ current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif c ~= \"\
    \ \" then\n\t\t\tcurrent_group = current_group .. c\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(result, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycvgi39n.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpycvgi39n.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            open_parens = open_parens + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n        end\n \
    \       if paren_count == 0 then\n            if #current_group > 0 then\n   \
    \             table.insert(result, table.concat(current_group))\n            \
    \    current_group = {}\n            end\n        else\n            if char ~=\
    \ ' ' then\n                table.insert(current_group, char)\n            end\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qkfu0y_.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp9qkfu0y_.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tif paren_count == 0 then\n\t\t\t\tcurrent_group = \"\"\n\
    \t\t\tend\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(paren_groups, current_group)\n\t\t\tend\n\t\telseif paren_count\
    \ > 0 then\n\t\t\tcurrent_group = current_group .. char\n\t\tend\n\tend\n\treturn\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3r96uic.lua:36:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpc3r96uic.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local paren_count = 0\n    local start_index = 1\n    for i\
    \ = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n       \
    \ if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n            if\
    \ paren_count == 0 then\n                table.insert(result, paren_string:sub(start_index,\
    \ i))\n                start_index = i + 1\n            end\n        end\n   \
    \ end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc54fzfu.lua:27:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" ((()))\", \" ()\", \" ((())()())\"}\nstack traceback:\n\t/tmp/tmphc54fzfu.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        elseif c ~= \" \"\
    \ then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmpnwj0t.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpsmpnwj0t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        elseif c ~= \" \"\
    \ then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmpnwj0t.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpsmpnwj0t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(groups, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                char = \"\"\n            end\n            if current_group ~=\
    \ \"\" then\n                table.insert(groups, current_group .. char)\n   \
    \             current_group = \"\"\n            end\n        else\n          \
    \  current_group = current_group .. char\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lodb3c0.lua:37:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp6lodb3c0.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_stack = {}\n  \
    \  for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            table.insert(paren_stack, char)\n\
    \        elseif char == \")\" then\n            table.remove(paren_stack)\n  \
    \      end\n        current_group = current_group .. char\n        if #paren_stack\
    \ == 0 then\n            table.insert(groups, current_group)\n            current_group\
    \ = \"\"\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6piyj9lv.lua:28:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" \", \"((()))\", \" \", \"()\", \" \", \"((())()())\"}\nstack traceback:\n\
    \t/tmp/tmp6piyj9lv.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n  local\
    \ paren_groups = {}\n  local current_group = \"\"\n  local open_parens = 0\n \
    \ for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if\
    \ char == \"(\" then\n      open_parens = open_parens + 1\n      current_group\
    \ = current_group .. char\n    elseif char == \")\" then\n      open_parens =\
    \ open_parens - 1\n      current_group = current_group .. char\n      if open_parens\
    \ == 0 then\n        table.insert(paren_groups, current_group)\n        current_group\
    \ = \"\"\n      end\n    elseif char ~= \" \" then\n      current_group = current_group\
    \ .. char\n    end\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        elseif c ~= \" \"\
    \ then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmpnwj0t.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpsmpnwj0t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal open_parens = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\topen_parens = open_parens - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif open_parens == 0 then\n\t\
    \t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif open_parens > 0 then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nwkuxl_.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp0nwkuxl_.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = {}\n\tlocal paren_depth = 0\n\tfor i =\
    \ 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == '(' then\n\
    \t\t\tparen_depth = paren_depth + 1\n\t\t\tif paren_depth == 1 then\n\t\t\t\t\
    current_group = {}\n\t\t\tend\n\t\telseif c == ')' then\n\t\t\tparen_depth = paren_depth\
    \ - 1\n\t\t\tif paren_depth == 0 then\n\t\t\t\tresult[#result + 1] = table.concat(current_group)\n\
    \t\t\tend\n\t\telseif paren_depth > 0 then\n\t\t\tcurrent_group[#current_group\
    \ + 1] = c\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmploc826ee.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"\", \"\
    \", \"\", \"\"}\nstack traceback:\n\t/tmp/tmploc826ee.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = \"\"\n\tlocal current_level = 0\n\tfor\
    \ i = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"\
    (\" then\n\t\t\tcurrent_level = current_level + 1\n\t\t\tcurrent_group = current_group\
    \ .. c\n\t\telseif c == \")\" then\n\t\t\tcurrent_level = current_level - 1\n\t\
    \t\tcurrent_group = current_group .. c\n\t\t\tif current_level == 0 then\n\t\t\
    \t\ttable.insert(result, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif current_level > 0 then\n\t\t\tcurrent_group = current_group ..\
    \ c\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9u17b3g.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpb9u17b3g.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local current_group_level = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            current_group_level = current_group_level\
    \ + 1\n            current_group[#current_group + 1] = char\n        elseif char\
    \ == ')' then\n            current_group_level = current_group_level - 1\n   \
    \         current_group[#current_group + 1] = char\n            if current_group_level\
    \ == 0 then\n                result[#result + 1] = table.concat(current_group)\n\
    \                current_group = {}\n            end\n        elseif char ~= '\
    \ ' then\n            current_group[#current_group + 1] = char\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal group = \"\"\n\tlocal depth = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\
    \tdepth = depth + 1\n\t\t\tgroup = group .. char\n\t\telseif char == \")\" then\n\
    \t\t\tdepth = depth - 1\n\t\t\tgroup = group .. char\n\t\t\tif depth == 0 then\n\
    \t\t\t\ttable.insert(groups, group)\n\t\t\t\tgroup = \"\"\n\t\t\tend\n\t\telseif\
    \ depth > 0 then\n\t\t\tgroup = group .. char\n\t\tend\n\tend\n\treturn groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2oirzxit.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp2oirzxit.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n  local\
    \ result = {}\n  local cur_group = \"\"\n  local paren_count = 0\n  for i = 1,\
    \ #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == \"(\" then\n\
    \      paren_count = paren_count + 1\n      cur_group = cur_group .. c\n    elseif\
    \ c == \")\" then\n      paren_count = paren_count - 1\n      cur_group = cur_group\
    \ .. c\n      if paren_count == 0 then\n        table.insert(result, cur_group)\n\
    \        cur_group = \"\"\n      end\n    elseif paren_count > 0 then\n      cur_group\
    \ = cur_group .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp788s0fpy.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp788s0fpy.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ts1acta.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp7ts1acta.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local paren_count = 0\n    local start_index = 1\n    for i\
    \ = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            paren_count = paren_count + 1\n        elseif c ==\
    \ ')' then\n            paren_count = paren_count - 1\n        end\n        if\
    \ paren_count == 0 then\n            table.insert(result, paren_string:sub(start_index,\
    \ i))\n            start_index = i + 1\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr_m1xls.lua:27:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" \", \"((()))\", \" \", \"()\", \" \", \"((())()())\"}\nstack traceback:\n\
    \t/tmp/tmpxr_m1xls.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(groups, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg8r3b7g.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpqg8r3b7g.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ts1acta.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp7ts1acta.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                if #current_group > 0 then\n                    table.insert(result,\
    \ current_group)\n                    current_group = \"\"\n                end\n\
    \            else\n                current_group = current_group .. char\n   \
    \         end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    if #current_group > 0 then\n        table.insert(result,\
    \ current_group)\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq62_qw6.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmptq62_qw6.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local current_group_level = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            current_group_level = current_group_level\
    \ + 1\n            current_group[#current_group + 1] = c\n        elseif c ==\
    \ ')' then\n            current_group_level = current_group_level - 1\n      \
    \      current_group[#current_group + 1] = c\n            if current_group_level\
    \ == 0 then\n                result[#result + 1] = table.concat(current_group)\n\
    \                current_group = {}\n            end\n        elseif c ~= ' '\
    \ then\n            current_group[#current_group + 1] = c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = {}\n\tlocal paren_count = 0\n\tfor i =\
    \ 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char ==\
    \ \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\telseif char == \")\" then\n\
    \t\t\tparen_count = paren_count - 1\n\t\tend\n\t\tif paren_count == 0 then\n\t\
    \t\tif #current_group > 0 then\n\t\t\t\ttable.insert(result, table.concat(current_group))\n\
    \t\t\t\tcurrent_group = {}\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(current_group,\
    \ char)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2u69lpa.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpi2u69lpa.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 then\n            if #current_group > 0 then\n   \
    \             table.insert(result, table.concat(current_group))\n            \
    \    current_group = {}\n            end\n        else\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnutq_b5f.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpnutq_b5f.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                if #current_group > 0 then\n                    table.insert(result,\
    \ current_group)\n                    current_group = \"\"\n                end\n\
    \            else\n                current_group = current_group .. char\n   \
    \         end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    if #current_group > 0 then\n        table.insert(result,\
    \ current_group)\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq62_qw6.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmptq62_qw6.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n  local\
    \ result = {}\n  local current_group = \"\"\n  local paren_count = 0\n  for i\
    \ = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char\
    \ == \"(\" then\n      paren_count = paren_count + 1\n    elseif char == \")\"\
    \ then\n      paren_count = paren_count - 1\n    end\n    if paren_count == 0\
    \ then\n      if char == \" \" then\n        char = \"\"\n      end\n      if\
    \ char == \")\" then\n        table.insert(result, current_group)\n        current_group\
    \ = \"\"\n      else\n        current_group = current_group .. char\n      end\n\
    \    else\n      current_group = current_group .. char\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifa49_8p.lua:36:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpifa49_8p.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                if #current_group > 0 then\n                    table.insert(result,\
    \ current_group)\n                    current_group = \"\"\n                end\n\
    \            else\n                current_group = current_group .. char\n   \
    \         end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    if #current_group > 0 then\n        table.insert(result,\
    \ current_group)\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq62_qw6.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmptq62_qw6.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 then\n            if c == \" \" then\n            \
    \    if #current_group > 0 then\n                    table.insert(groups, current_group)\n\
    \                    current_group = \"\"\n                end\n            else\n\
    \                current_group = current_group .. c\n            end\n       \
    \ else\n            current_group = current_group .. c\n        end\n    end\n\
    \    if #current_group > 0 then\n        table.insert(groups, current_group)\n\
    \    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2dveyl6.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpr2dveyl6.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal paren_group = ''\n\tlocal paren_level = 0\n\tfor\
    \ i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == '(' then\n\t\t\tparen_level = paren_level + 1\n\t\t\tparen_group = paren_group\
    \ .. char\n\t\telseif char == ')' then\n\t\t\tparen_level = paren_level - 1\n\t\
    \t\tparen_group = paren_group .. char\n\t\t\tif paren_level == 0 then\n\t\t\t\t\
    table.insert(paren_groups, paren_group)\n\t\t\t\tparen_group = ''\n\t\t\tend\n\
    \t\telseif paren_level > 0 then\n\t\t\tparen_group = paren_group .. char\n\t\t\
    end\n\tend\n\treturn paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rvaxwi_.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp1rvaxwi_.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal open_parens = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\topen_parens = open_parens - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif open_parens == 0 then\n\t\
    \t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif open_parens > 0 then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nwkuxl_.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp0nwkuxl_.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            depth = depth + 1\n        elseif char == \")\" then\n          \
    \  depth = depth - 1\n        end\n        if depth == 0 then\n            if\
    \ char == \" \" then\n                char = \"\"\n            end\n         \
    \   if char == \")\" then\n                table.insert(groups, group)\n     \
    \           group = \"\"\n            else\n                group = group .. char\n\
    \            end\n        else\n            group = group .. char\n        end\n\
    \    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpty__4vdx.lua:36:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpty__4vdx.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        elseif c ~= \" \"\
    \ then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmpnwj0t.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpsmpnwj0t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ts1acta.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp7ts1acta.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            depth = depth + 1\n        elseif char == \")\" then\n          \
    \  depth = depth - 1\n        end\n        if depth == 0 then\n            if\
    \ char == \" \" then\n                if group ~= \"\" then\n                \
    \    table.insert(groups, group)\n                    group = \"\"\n         \
    \       end\n            else\n                group = group .. char\n       \
    \     end\n        else\n            group = group .. char\n        end\n    end\n\
    \    if group ~= \"\" then\n        table.insert(groups, group)\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2_7uiib.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpg2_7uiib.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n  local\
    \ result = {}\n  local current_group = \"\"\n  local open_parens = 0\n  for i\
    \ = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char\
    \ == \"(\" then\n      open_parens = open_parens + 1\n      current_group = current_group\
    \ .. char\n    elseif char == \")\" then\n      open_parens = open_parens - 1\n\
    \      current_group = current_group .. char\n      if open_parens == 0 then\n\
    \        table.insert(result, current_group)\n        current_group = \"\"\n \
    \     end\n    elseif char ~= \" \" then\n      current_group = current_group\
    \ .. char\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal group = \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\
    \tparen_count = paren_count + 1\n\t\t\tgroup = group .. char\n\t\telseif char\
    \ == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\tgroup = group .. char\n\
    \t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(groups, group)\n\t\t\t\t\
    group = \"\"\n\t\t\tend\n\t\telseif paren_count > 0 then\n\t\t\tgroup = group\
    \ .. char\n\t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbdfiuok.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpxbdfiuok.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 then\n            if #current_group > 0 then\n   \
    \             table.insert(result, table.concat(current_group))\n            \
    \    current_group = {}\n            end\n        else\n            if char ~=\
    \ ' ' then\n                table.insert(current_group, char)\n            end\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjvqyx97.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmprjvqyx97.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n        end\n \
    \       if paren_count == 0 then\n            if #current_group > 0 then\n   \
    \             table.insert(result, table.concat(current_group))\n            \
    \    current_group = {}\n            end\n        else\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66pbyaoy.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp66pbyaoy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"\
    (\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. c\n\t\telseif c == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\t\
    current_group = current_group .. c\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(groups,\
    \ current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif paren_count\
    \ > 0 then\n\t\t\tcurrent_group = current_group .. c\n\t\tend\n\tend\n\treturn\
    \ groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7pgvlsg.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpp7pgvlsg.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ts1acta.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp7ts1acta.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                if current_group ~= \"\" then\n                    table.insert(result,\
    \ current_group)\n                    current_group = \"\"\n                end\n\
    \            else\n                current_group = current_group .. char\n   \
    \         end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    if current_group ~= \"\" then\n        table.insert(result,\
    \ current_group)\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43952s91.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp43952s91.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for c in paren_string:gmatch(\".\") do\n        if c == \"(\" then\n    \
    \        paren_count = paren_count + 1\n        elseif c == \")\" then\n     \
    \       paren_count = paren_count - 1\n        end\n        if paren_count ==\
    \ 0 then\n            table.insert(paren_groups, current_group)\n            current_group\
    \ = \"\"\n        else\n            current_group = current_group .. c\n     \
    \   end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql3ee5ag.lua:28:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"\", \"((())\", \"\", \"(\", \"\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpql3ee5ag.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local open_count = 0\n    for\
    \ c in paren_string:gmatch(\".\") do\n        if c == \"(\" then\n           \
    \ open_count = open_count + 1\n        elseif c == \")\" then\n            open_count\
    \ = open_count - 1\n        end\n        table.insert(current_group, c)\n    \
    \    if open_count == 0 then\n            table.insert(result, table.concat(current_group))\n\
    \            current_group = {}\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulcl_nd3.lua:27:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" \", \"((()))\", \" \", \"()\", \" \", \"((())()())\"}\nstack traceback:\n\
    \t/tmp/tmpulcl_nd3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local current_group = {}\n  local current_level = 0\n  for i\
    \ = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char\
    \ == '(' then\n      current_level = current_level + 1\n    elseif char == ')'\
    \ then\n      current_level = current_level - 1\n    end\n    if current_level\
    \ == 0 then\n      if #current_group > 0 then\n        table.insert(groups, table.concat(current_group))\n\
    \        current_group = {}\n      end\n    else\n      if char ~= ' ' then\n\
    \        table.insert(current_group, char)\n      end\n    end\n  end\n  return\
    \ groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0l4hav1d.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp0l4hav1d.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"\
    (\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. c\n\t\telseif c == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\t\
    current_group = current_group .. c\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(groups,\
    \ current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif c ~= \"\
    \ \" then\n\t\t\tcurrent_group = current_group .. c\n\t\tend\n\tend\n\treturn\
    \ groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"\
    (\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. c\n\t\telseif c == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\t\
    current_group = current_group .. c\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(result,\
    \ current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif c ~= \"\
    \ \" then\n\t\t\tcurrent_group = current_group .. c\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                table.insert(groups, current_group)\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9mgcr0r.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpk9mgcr0r.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \      elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if paren_group ~=\
    \ \"\" then\n                table.insert(paren_groups, paren_group)\n       \
    \         paren_group = \"\"\n            end\n        else\n            paren_group\
    \ = paren_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiaesxrei.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpiaesxrei.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(groups, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = \"\"\n    local depth = 0\n    for c in paren_string:gmatch(\"\
    .\") do\n        if c == \"(\" then\n            depth = depth + 1\n         \
    \   group = group .. c\n        elseif c == \")\" then\n            depth = depth\
    \ - 1\n            group = group .. c\n            if depth == 0 then\n      \
    \          table.insert(groups, group)\n                group = \"\"\n       \
    \     end\n        elseif c ~= \" \" then\n            group = group .. c\n  \
    \      end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ts1acta.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp7ts1acta.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                table.insert(groups, current_group)\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    if current_group ~= \"\"\
    \ then\n        table.insert(groups, current_group)\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dpt7tho.lua:34:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp9dpt7tho.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local group_start = 1\n    local group_end = 1\n    local\
    \ paren_count = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            paren_count = paren_count + 1\n\
    \        elseif char == ')' then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            group_end = i\n  \
    \          table.insert(paren_groups, paren_string:sub(group_start, group_end))\n\
    \            group_start = i + 1\n        end\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnu3km15s.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" \", \"((()))\", \" \", \"()\", \" \", \"((())()())\"}\nstack traceback:\n\
    \t/tmp/tmpnu3km15s.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local depth = 0\n    for i\
    \ = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n       \
    \ if char == \"(\" then\n            depth = depth + 1\n            current_group\
    \ = current_group .. char\n        elseif char == \")\" then\n            depth\
    \ = depth - 1\n            current_group = current_group .. char\n           \
    \ if depth == 0 then\n                table.insert(groups, current_group)\n  \
    \              current_group = \"\"\n            end\n        elseif depth > 0\
    \ then\n            current_group = current_group .. char\n        end\n    end\n\
    \    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu07nin_z.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpu07nin_z.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    --\
    \ TODO: Implement this function\n    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_stack_index = 0\n    local paren_string_index = 1\n  \
    \  local paren_string_length = string.len(paren_string)\n    local paren_string_char\
    \ = ''\n    local paren_string_char_prev = ''\n    local paren_string_char_next\
    \ = ''\n    local paren_string_char_prev_prev = ''\n    local paren_string_char_next_next\
    \ = ''\n    local paren_string_char_prev_prev_prev = ''\n    local paren_string_char_next_next_next\
    \ = ''\n    local paren_string_char_prev_prev_prev_prev = ''\n    local paren_string_char_next_next_next_next\
    \ = ''\n    local paren_string_char_prev_prev_prev_prev_prev = ''\n    local paren_string_char_next_next_next_next_next\
    \ = ''\n    local paren_string_char_prev_prev_prev_prev_prev_prev = ''\n    local\
    \ paren_string_char_next_next_next_next_next_next = ''\n    local paren_string_char_prev_prev_prev_prev_prev_prev_prev\
    \ = ''\n    local paren_string_char_next_next_next_next_next_next_next = ''\n\
    \    local paren_string_char_prev_prev_prev_prev_prev_prev_prev_prev = ''\n  \
    \  local paren_string_char_next_next_next_next_next_next_next_next = ''\n    local\
    \ paren_string_char_prev_prev_prev_prev_prev_prev_prev_prev_prev = ''\n    local\
    \ paren_string_char_next_next_next_next_next_next_next_next_next = ''\n    local\
    \ paren_string_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = ''\n \
    \   local paren_string_char_next_next_next_next_next_next_next_next_next_\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw892rwd6.lua:43: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        elseif c ~= \" \"\
    \ then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmpnwj0t.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpsmpnwj0t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal open_parens = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\topen_parens = open_parens - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif open_parens == 0 then\n\t\
    \t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\
    \t\t\tend\n\t\telseif open_parens > 0 then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6e3tymqc.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp6e3tymqc.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                char = \"\"\n            end\n            if char == \")\" then\n\
    \                table.insert(result, current_group)\n                current_group\
    \ = \"\"\n            else\n                current_group = current_group .. char\n\
    \            end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrrpa86n.lua:36:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpfrrpa86n.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local ch = paren_string:sub(i, i)\n   \
    \     if ch == \"(\" then\n            open_parens = open_parens + 1\n       \
    \     current_group = current_group .. ch\n        elseif ch == \")\" then\n \
    \           open_parens = open_parens - 1\n            current_group = current_group\
    \ .. ch\n            if open_parens == 0 then\n                table.insert(result,\
    \ current_group)\n                current_group = \"\"\n            end\n    \
    \    elseif open_parens > 0 then\n            current_group = current_group ..\
    \ ch\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0zhu_ym.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpi0zhu_ym.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\
    \t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local open_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_count = open_count + 1\n        elseif\
    \ char == ')' then\n            open_count = open_count - 1\n        end\n   \
    \     current_group = current_group .. char\n        if open_count == 0 then\n\
    \            table.insert(result, current_group)\n            current_group =\
    \ ''\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupwg5uat.lua:28:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" \", \"((()))\", \" \", \"()\", \" \", \"((())()())\"}\nstack traceback:\n\
    \t/tmp/tmpupwg5uat.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bdwyhg0.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp6bdwyhg0.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(groups, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg8r3b7g.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpqg8r3b7g.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 then\n            if #current_group > 0 then\n   \
    \             table.insert(result, table.concat(current_group))\n            \
    \    current_group = {}\n            end\n        else\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnutq_b5f.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpnutq_b5f.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local current_depth = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == '(' then\n            current_depth = current_depth + 1\n \
    \       elseif char == ')' then\n            current_depth = current_depth - 1\n\
    \            if current_depth == 0 then\n                table.insert(result,\
    \ table.concat(current_group))\n                current_group = {}\n         \
    \   end\n        elseif current_depth > 0 then\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v76tb3a.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"\", \"\
    \", \"\", \"\"}\nstack traceback:\n\t/tmp/tmp2v76tb3a.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal group = \"\"\n\tlocal depth = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"(\" then\n\t\t\tdepth\
    \ = depth + 1\n\t\t\tgroup = group .. c\n\t\telseif c == \")\" then\n\t\t\tdepth\
    \ = depth - 1\n\t\t\tgroup = group .. c\n\t\t\tif depth == 0 then\n\t\t\t\ttable.insert(groups,\
    \ group)\n\t\t\t\tgroup = \"\"\n\t\t\tend\n\t\telseif depth > 0 then\n\t\t\tgroup\
    \ = group .. c\n\t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphz5ldc0v.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmphz5ldc0v.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 then\n            if #current_group > 0 then\n   \
    \             table.insert(result, table.concat(current_group))\n            \
    \    current_group = {}\n            end\n        else\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnutq_b5f.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpnutq_b5f.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                if #current_group > 0 then\n                    table.insert(result,\
    \ current_group)\n                    current_group = \"\"\n                end\n\
    \            else\n                current_group = current_group .. char\n   \
    \         end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    if #current_group > 0 then\n        table.insert(result,\
    \ current_group)\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq62_qw6.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmptq62_qw6.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ result = {}\n\tlocal current_group = {}\n\tlocal open_parens = 0\n\tfor i =\
    \ 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char ==\
    \ \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group[#current_group\
    \ + 1] = char\n\t\telseif char == \")\" then\n\t\t\topen_parens = open_parens\
    \ - 1\n\t\t\tcurrent_group[#current_group + 1] = char\n\t\t\tif open_parens ==\
    \ 0 then\n\t\t\t\tresult[#result + 1] = table.concat(current_group)\n\t\t\t\t\
    current_group = {}\n\t\t\tend\n\t\telseif open_parens > 0 then\n\t\t\tcurrent_group[#current_group\
    \ + 1] = char\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkut24mev.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpkut24mev.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bdwyhg0.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp6bdwyhg0.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(groups, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg8r3b7g.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpqg8r3b7g.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 then\n            if c == \" \" then\n            \
    \    -- ignore spaces\n            elseif c == \")\" then\n                --\
    \ end of group\n                table.insert(groups, current_group)\n        \
    \        current_group = \"\"\n            else\n                current_group\
    \ = current_group .. c\n            end\n        else\n            current_group\
    \ = current_group .. c\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjzasdv8.lua:36:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpqjzasdv8.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local current_group_depth =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            current_group_depth = current_group_depth\
    \ + 1\n            current_group = current_group .. char\n        elseif char\
    \ == \")\" then\n            current_group_depth = current_group_depth - 1\n \
    \           current_group = current_group .. char\n            if current_group_depth\
    \ == 0 then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        elseif current_group_depth\
    \ > 0 then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptif9vz2r.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmptif9vz2r.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            paren_count = paren_count + 1\n  \
    \          current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == \"(\" then\n            paren_count = paren_count + 1\n      \
    \      current_group = current_group .. c\n        elseif c == \")\" then\n  \
    \          paren_count = paren_count - 1\n            current_group = current_group\
    \ .. c\n            if paren_count == 0 then\n                table.insert(paren_groups,\
    \ current_group)\n                current_group = \"\"\n            end\n    \
    \    elseif c ~= \" \" then\n            current_group = current_group .. c\n\
    \        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_string = \"\"\n    local paren_count = 0\n  \
    \  for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n   \
    \     if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_string)\n            current_string = \"\"\n        else\n         \
    \   current_string = current_string .. c\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0f983fg.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \" ((())\", \" (\", \" ((())()()\"}\nstack traceback:\n\t/tmp/tmpd0f983fg.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                char = \"\"\n            end\n            current_group = current_group\
    \ .. char\n            if current_group ~= \"\" then\n                table.insert(groups,\
    \ current_group)\n                current_group = \"\"\n            end\n    \
    \    else\n            if char ~= \" \" then\n                current_group =\
    \ current_group .. char\n            end\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 then\n            table.insert(result, table.concat(current_group))\n\
    \            current_group = {}\n        else\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje8wyzbm.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"\", \"((())\", \"\", \"(\", \"\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpje8wyzbm.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n        end\n  \
    \      if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        elseif c ~= \" \"\
    \ then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmpnwj0t.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpsmpnwj0t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\
    \t\t\tend\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tmtm3cb.lua:34:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmp3tmtm3cb.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\nlocal function separate_paren_groups(paren_string)\n\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal open_parens = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\topen_parens = open_parens - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif open_parens == 0 then\n\t\
    \t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
