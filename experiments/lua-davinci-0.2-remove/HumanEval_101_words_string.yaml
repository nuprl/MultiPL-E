name: HumanEval_101_words_string
language: lua
prompt: "-- You will be given a string of words separated by commas or spaces. Your\
  \ task is\n-- to split the string into words and return an array of the words.\n\
  -- For example:\nlocal function words_string(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
  \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
  \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One',\
  \ 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my\
  \ name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,\
  \ four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),\
  \ {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local words = {}\n    for word in s:gmatch(\"%S+\") do\n      \
    \  table.insert(words, word)\n    end\n    return words\nend", "    local words\
    \ = {}\n    for w in s:gmatch(\"%S+\") do\n        words[#words + 1] = w\n   \
    \ end\n    return words\nend", "    local words = {}\n    for word in s:gmatch(\"\
    %w+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
  "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    words[#words + 1] =\
    \ word\n  end\n  return words\nend", "    local words = {}\n    for word in s:gmatch(\"\
    %w+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
  "    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "    local words = {}\n    for w in\
    \ s:gmatch(\"%w+\") do\n        words[#words + 1] = w\n    end\n    return words\n\
    end", "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    words[#words\
    \ + 1] = word\n  end\n  return words\nend", "  return s:gmatch(\"%w+\")\nend",
  "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    words[#words + 1] =\
    \ word\n  end\n  return words\nend", "    local words = {}\n    for word in s:gmatch(\"\
    %w+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
  "    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "    return s:gmatch(\"%w+\")\nend",
  "  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n\
    \  end\n  return words\nend", "  local words = {}\n  for word in s:gmatch(\"%w+\"\
    ) do\n    words[#words + 1] = word\n  end\n  return words\nend", "  local words\
    \ = {}\n  for word in s:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  return words\nend", "    local words = {}\n    for word in s:gmatch(\"%w+\"\
    ) do\n        table.insert(words, word)\n    end\n    return words\nend", "  \
    \  local words = {}\n    for w in s:gmatch(\"%S+\") do\n        words[#words +\
    \ 1] = w\n    end\n    return words\nend", "    return s:gmatch(\"%w+\")\nend",
  "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    words[#words + 1] =\
    \ word\n  end\n  return words\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
