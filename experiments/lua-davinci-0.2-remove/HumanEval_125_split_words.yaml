name: HumanEval_125_split_words
language: lua
prompt: "-- Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n-- should split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>>\
  \ split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
  \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
  \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
  \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
  \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
  \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local words = {}\n    local word = \"\"\n    for i = 1, #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n    end\n    if word ~= \"\" then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, #txt do\n            local c = txt:sub(i, i)\n            local ord =\
    \ string.byte(c) - string.byte(\"a\")\n            if ord % 2 == 1 then\n    \
    \            count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend", "    local words = {}\n    local word = \"\"\
    \n    local count = 0\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n\
    \        if c == \" \" then\n            if #word > 0 then\n                table.insert(words,\
    \ word)\n                word = \"\"\n            end\n        elseif c == \"\
    ,\" then\n            if #word > 0 then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n            return words\n    \
    \    else\n            word = word .. c\n        end\n    end\n    if #word >\
    \ 0 then\n        table.insert(words, word)\n    end\n    if #words > 0 then\n\
    \        return words\n    end\n    for i = 1, #txt do\n        local c = txt:sub(i,\
    \ i)\n        if c:byte() >= 97 and c:byte() <= 122 then\n            if i % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \    end\n    return count\nend", "    local words = {}\n    local word = ''\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' '\
    \ or c == ',' then\n            if #word > 0 then\n                table.insert(words,\
    \ word)\n                word = ''\n            end\n        else\n          \
    \  word = word .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            local ord = string.byte(c) - string.byte('a')\n            if\
    \ ord % 2 == 1 then\n                count = count + 1\n            end\n    \
    \    end\n        return count\n    end\nend", "    local words = {}\n    local\
    \ word = \"\"\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n     \
    \   if c == \" \" or c == \",\" then\n            if word ~= \"\" then\n     \
    \           table.insert(words, word)\n                word = \"\"\n         \
    \   end\n        else\n            word = word .. c\n        end\n    end\n  \
    \  if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words\
    \ > 0 then\n        return words\n    else\n        local count = 0\n        for\
    \ i = 1, #txt do\n            local c = txt:sub(i, i)\n            if string.byte(c)\
    \ >= string.byte('a') and string.byte(c) <= string.byte('z') then\n          \
    \      if (string.byte(c) - string.byte('a')) % 2 == 1 then\n                \
    \    count = count + 1\n                end\n            end\n        end\n  \
    \      return count\n    end\nend", "    local words = {}\n    local word = \"\
    \"\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == \"\
    \ \" or c == \",\" then\n            if word ~= \"\" then\n                table.insert(words,\
    \ word)\n                word = \"\"\n            end\n        else\n        \
    \    word = word .. c\n        end\n    end\n    if word ~= \"\" then\n      \
    \  table.insert(words, word)\n    end\n    if #words == 0 then\n        local\
    \ count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n\
    \            local o = string.byte(c) - string.byte(\"a\")\n            if o %\
    \ 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return words\nend", "    local words = {}\n\
    \    local word = \"\"\n    local i = 1\n    local c = txt:sub(i, i)\n    while\
    \ c ~= \"\" do\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n        i = i + 1\n        c = txt:sub(i, i)\n    end\n    if word ~=\
    \ \"\" then\n        table.insert(words, word)\n    end\n    if #words == 0 then\n\
    \        local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            local o = string.byte(c) - string.byte(\"a\")\n            if\
    \ o % 2 == 1 then\n                count = count + 1\n            end\n      \
    \  end\n        return count\n    end\n    return words\nend", "    local words\
    \ = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c = txt:sub(i,\
    \ i)\n        if c == \" \" or c == \",\" then\n            if #word > 0 then\n\
    \                table.insert(words, word)\n                word = \"\"\n    \
    \        end\n        else\n            word = word .. c\n        end\n    end\n\
    \    if #word > 0 then\n        table.insert(words, word)\n    end\n    if #words\
    \ > 0 then\n        return words\n    else\n        local count = 0\n        for\
    \ i = 1, #txt do\n            local c = txt:sub(i, i)\n            local o = string.byte(c)\
    \ - string.byte(\"a\")\n            if o % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\nend",
  "    local words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt\
    \ do\n        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n\
    \            if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n        i = i + 1\n    end\n    if word ~= \"\" then\n\
    \        table.insert(words, word)\n    end\n    if #words == 0 then\n       \
    \ local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            if ord(c) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\n    return words\n\
    end", "    local words = {}\n    local word = \"\"\n    local count = 0\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == \" \" then\n\
    \            if word ~= \"\" then\n                words[#words + 1] = word\n\
    \                word = \"\"\n            end\n        elseif c == \",\" then\n\
    \            if word ~= \"\" then\n                words[#words + 1] = word\n\
    \                word = \"\"\n            end\n            return words\n    \
    \    else\n            word = word .. c\n            if i % 2 == 1 then\n    \
    \            count = count + 1\n            end\n        end\n    end\n    if\
    \ word ~= \"\" then\n        words[#words + 1] = word\n    end\n    return count\n\
    end", "    local words = {}\n    local word = \"\"\n    for i = 1, #txt do\n \
    \       local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n  \
    \          if #word > 0 then\n                table.insert(words, word)\n    \
    \            word = \"\"\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            local o = string.byte(c) - string.byte(\"a\")\n            if\
    \ o % 2 == 1 then\n                count = count + 1\n            end\n      \
    \  end\n        return count\n    end\nend", "    if txt:find(\"%s\") then\n \
    \       return txt:split(\"%s\")\n    elseif txt:find(\",\") then\n        return\
    \ txt:split(\",\")\n    else\n        local count = 0\n        for i = 1, #txt\
    \ do\n            local c = txt:sub(i, i)\n            if c:lower() == c and c:byte()\
    \ % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\nend", "    local words = {}\n    local word =\
    \ \"\"\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c\
    \ == \" \" or c == \",\" then\n            if #word > 0 then\n               \
    \ table.insert(words, word)\n                word = \"\"\n            end\n  \
    \      else\n            word = word .. c\n        end\n    end\n    if #word\
    \ > 0 then\n        table.insert(words, word)\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        local count = 0\n        for i = 1, #txt\
    \ do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\nend",
  "    local words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if\
    \ word ~= \"\" then\n                table.insert(words, word)\n             \
    \   word = \"\"\n            end\n        else\n            word = word .. c\n\
    \        end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local odd_count = 0\n        for i\
    \ = 1, #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                odd_count\
    \ = odd_count + 1\n            end\n        end\n        return odd_count\n  \
    \  end\n    return words\nend", "    local words = {}\n    local word = \"\"\n\
    \    for c in txt:gmatch(\".\") do\n        if c == \" \" or c == \",\" then\n\
    \            if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n    end\n    if word ~= \"\" then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ c in txt:gmatch(\".\") do\n            if string.byte(c) - string.byte(\"a\"\
    ) % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return words\nend", "    local words = {}\n\
    \    local word = \"\"\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n\
    \        if c == \" \" or c == \",\" then\n            if word ~= \"\" then\n\
    \                table.insert(words, word)\n                word = \"\"\n    \
    \        end\n        else\n            word = word .. c\n        end\n    end\n\
    \    if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if\
    \ #words == 0 then\n        local count = 0\n        for i = 1, #txt do\n    \
    \        local c = txt:sub(i, i)\n            local n = string.byte(c) - string.byte(\"\
    a\")\n            if n % 2 == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        return count\n    end\n    return words\nend",
  "    if txt:find(\"%s\") then\n        return txt:split(\"%s\")\n    elseif txt:find(\"\
    ,\") then\n        return txt:split(\",\")\n    else\n        local count = 0\n\
    \        for i = 1, #txt do\n            if txt:sub(i, i):byte() % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend", "    local words = {}\n    local word = \"\"\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == \" \" or c\
    \ == \",\" then\n            if #word > 0 then\n                table.insert(words,\
    \ word)\n                word = \"\"\n            end\n        else\n        \
    \    word = word .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            local o = string.byte(c) - string.byte(\"a\")\n            if\
    \ o % 2 == 1 then\n                count = count + 1\n            end\n      \
    \  end\n        return count\n    end\nend", "    local words = {}\n    local\
    \ word = \"\"\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n     \
    \   if c == \" \" or c == \",\" then\n            if word ~= \"\" then\n     \
    \           table.insert(words, word)\n                word = \"\"\n         \
    \   end\n        else\n            word = word .. c\n        end\n    end\n  \
    \  if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ local c = txt:sub(i, i)\n            local ord = string.byte(c) - string.byte(\"\
    a\")\n            if ord % 2 == 1 then\n                count = count + 1\n  \
    \          end\n        end\n        return count\n    end\n    return words\n\
    end", "    local words = {}\n    local i = 1\n    for word in string.gmatch(txt,\
    \ \"%S+\") do\n        words[i] = word\n        i = i + 1\n    end\n    if #words\
    \ == 0 then\n        for word in string.gmatch(txt, \"[^,]+\") do\n          \
    \  words[i] = word\n            i = i + 1\n        end\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for c in string.gmatch(txt, \"[a-z]\"\
    ) do\n            local ord = string.byte(c) - string.byte('a')\n            if\
    \ ord % 2 == 1 then\n                count = count + 1\n            end\n    \
    \    end\n        return count\n    end\n    return words\nend", "    local words\
    \ = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c = txt:sub(i,\
    \ i)\n        if c == \" \" or c == \",\" then\n            if word ~= \"\" then\n\
    \                table.insert(words, word)\n                word = \"\"\n    \
    \        end\n        else\n            word = word .. c\n        end\n    end\n\
    \    if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if\
    \ #words == 0 then\n        local count = 0\n        for i = 1, #txt do\n    \
    \        local c = txt:sub(i, i)\n            local ord = string.byte(c) - string.byte(\"\
    a\")\n            if ord % 2 == 1 then\n                count = count + 1\n  \
    \          end\n        end\n        return count\n    end\n    return words\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
