name: HumanEval_44_change_base
language: lua
prompt: "-- Change numerical base of input number x to base.\n-- return string representation\
  \ after the conversion.\n-- base numbers are less than 10.\nlocal function change_base(x,\
  \ base)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
  \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3),\
  \ '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
  \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
  \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
  \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
  \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
  \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local res = \"\"\n    while x > 0 do\n        local d = x % base\n\
    \        res = res .. tostring(d)\n        x = math.floor(x / base)\n    end\n\
    \    return res\nend", "    local res = \"\"\n    while x > 0 do\n        local\
    \ d = x % base\n        res = string.char(d + 48) .. res\n        x = (x - d)\
    \ / base\n    end\n    return res\nend", "\tlocal s = \"\"\n\twhile x > 0 do\n\
    \t\tlocal r = x % base\n\t\ts = s .. tostring(r)\n\t\tx = math.floor(x / base)\n\
    \tend\n\treturn s\nend", "    local t = {}\n    while x > 0 do\n        local\
    \ d = x % base\n        x = math.floor(x / base)\n        table.insert(t, d)\n\
    \    end\n    return table.concat(t)\nend", "    local result = \"\"\n    local\
    \ digit = 0\n    local digit_str = \"\"\n    local x_int = math.floor(x)\n   \
    \ local x_frac = x - x_int\n    local x_int_str = \"\"\n    local x_frac_str =\
    \ \"\"\n    local x_frac_str_len = 0\n    local x_frac_str_len_max = 0\n    local\
    \ x_frac_str_len_max_str = \"\"\n    local x_frac_str_len_max_str_len = 0\n  \
    \  local x_frac_str_len_max_str_len_str = \"\"\n    local x_frac_str_len_max_str_len_str_len\
    \ = 0\n    local x_frac_str_len_max_str_len_str_len_str = \"\"\n    local x_frac_str_len_max_str_len_str_len_str_len\
    \ = 0\n    local x_frac_str_len_max_str_len_str_len_str_len_str = \"\"\n    local\
    \ x_frac_str_len_max_str_len_str_len_str_len_str_len = 0\n    local x_frac_str_len_max_str_len_str_len_str_len_str_len_str\
    \ = \"\"\n    local x_frac_str_len_max_str_len_str_len_str_len_str_len_str_len\
    \ = 0\n    local x_frac_str_len_max_str_len_str_len_str_len_str_len_str_len_str\
    \ = \"\"\n    local x_frac_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len\
    \ = 0\n    local x_frac_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str\
    \ = \"\"\n    local x_frac_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len\
    \ = 0\n    local x_frac_str_len_max_str_", "    local t = {}\n    while x > 0\
    \ do\n        local r = x % base\n        table.insert(t, r)\n        x = math.floor(x\
    \ / base)\n    end\n    return table.concat(t)\nend", "    local result = \"\"\
    \n    while x > 0 do\n        local digit = x % base\n        result = tostring(digit)\
    \ .. result\n        x = math.floor(x / base)\n    end\n    return result\nend",
  "    local res = \"\"\n    while x > 0 do\n        local d = x % base\n        x\
    \ = math.floor(x / base)\n        res = tostring(d) .. res\n    end\n    return\
    \ res\nend", "    local res = \"\"\n    while x > 0 do\n        local d = x %\
    \ base\n        res = res .. tostring(d)\n        x = math.floor(x / base)\n \
    \   end\n    return res\nend", "    local res = \"\"\n    while x > 0 do\n   \
    \     local r = x % base\n        res = res .. string.char(r + string.byte('0'))\n\
    \        x = math.floor(x / base)\n    end\n    return res\nend", "    local x\
    \ = tonumber(x)\n    local base = tonumber(base)\n    local s = \"\"\n    local\
    \ r = 0\n    while x > 0 do\n        r = x % base\n        x = math.floor(x /\
    \ base)\n        s = string.char(r + string.byte('0')) .. s\n    end\n    return\
    \ s\nend", "    local t = {}\n    local i = 1\n    while x > 0 do\n        local\
    \ r = x % base\n        t[i] = r\n        x = (x - r) / base\n        i = i +\
    \ 1\n    end\n    local s = \"\"\n    for i = #t, 1, -1 do\n        s = s .. tostring(t[i])\n\
    \    end\n    return s\nend", "    local result = \"\"\n    while x > 0 do\n \
    \       local r = x % base\n        x = math.floor(x / base)\n        result =\
    \ string.char(string.byte('0') + r) .. result\n    end\n    return result\nend",
  "    local result = \"\"\n    while x > 0 do\n        local r = x % base\n     \
    \   x = math.floor(x / base)\n        result = string.char(r + string.byte('0'))\
    \ .. result\n    end\n    return result\nend", "    local t = {}\n    local i\
    \ = 1\n    while x > 0 do\n        t[i] = x % base\n        x = math.floor(x /\
    \ base)\n        i = i + 1\n    end\n    local s = \"\"\n    for i = #t, 1, -1\
    \ do\n        s = s .. tostring(t[i])\n    end\n    return s\nend", "    local\
    \ digits = \"0123456789\"\n    local t = {}\n    while x > 0 do\n        local\
    \ d = x % base\n        x = (x - d) / base\n        table.insert(t, 1, digits:sub(d\
    \ + 1, d + 1))\n    end\n    return table.concat(t)\nend", "    local t = {}\n\
    \    local i = 1\n    while x > 0 do\n        local r = x % base\n        x =\
    \ (x - r) / base\n        t[i] = r\n        i = i + 1\n    end\n    local s =\
    \ \"\"\n    for i = #t, 1, -1 do\n        s = s .. t[i]\n    end\n    return s\n\
    end", "  local result = \"\"\n  local x = x\n  while x > 0 do\n    local digit\
    \ = x % base\n    x = math.floor(x / base)\n    result = string.char(digit + 48)\
    \ .. result\n  end\n  return result\nend", "    local r = \"\"\n    while x >\
    \ 0 do\n        r = tostring(x % base) .. r\n        x = math.floor(x / base)\n\
    \    end\n    return r\nend", "  local t = {}\n  local i = 1\n  while x > 0 do\n\
    \    t[i] = x % base\n    x = math.floor(x / base)\n    i = i + 1\n  end\n  local\
    \ s = \"\"\n  for i = #t, 1, -1 do\n    s = s .. tostring(t[i])\n  end\n  return\
    \ s\nend", "    local digits = \"0123456789\"\n    local result = \"\"\n    while\
    \ x > 0 do\n        local d = x % base\n        result = string.sub(digits, d\
    \ + 1, d + 1) .. result\n        x = math.floor(x / base)\n    end\n    return\
    \ result\nend", "    local result = \"\"\n    while x > 0 do\n        local r\
    \ = x % base\n        x = (x - r) / base\n        result = result .. tostring(r)\n\
    \    end\n    return result\nend", "  local res = \"\"\n  while x > 0 do\n   \
    \ local d = x % base\n    res = string.char(d + string.byte('0')) .. res\n   \
    \ x = math.floor(x / base)\n  end\n  return res\nend", "    local t = {}\n   \
    \ local i = 1\n    while x > 0 do\n        local r = x % base\n        t[i] =\
    \ r\n        x = (x - r) / base\n        i = i + 1\n    end\n    local s = \"\"\
    \n    for i = #t, 1, -1 do\n        s = s .. t[i]\n    end\n    return s\nend",
  "    local digits = \"0123456789\"\n    local result = \"\"\n    while x > 0 do\n\
    \        local d = x % base\n        result = string.sub(digits, d + 1, d + 1)\
    \ .. result\n        x = math.floor(x / base)\n    end\n    return result\nend",
  "    local res = \"\"\n    local x = math.floor(x)\n    while x > 0 do\n       \
    \ local d = x % base\n        res = string.char(d + 48) .. res\n        x = math.floor(x\
    \ / base)\n    end\n    return res\nend", "    local res = \"\"\n    local x =\
    \ math.floor(x)\n    while x > 0 do\n        local d = x % base\n        res =\
    \ string.char(d + string.byte('0')) .. res\n        x = math.floor(x / base)\n\
    \    end\n    return res\nend", "    local t = {}\n    local i = 1\n    while\
    \ x > 0 do\n        t[i] = x % base\n        x = math.floor(x / base)\n      \
    \  i = i + 1\n    end\n    local s = ''\n    for i = #t, 1, -1 do\n        s =\
    \ s .. tostring(t[i])\n    end\n    return s\nend", "    local res = \"\"\n  \
    \  while x > 0 do\n        local mod = x % base\n        res = tostring(mod) ..\
    \ res\n        x = math.floor(x / base)\n    end\n    return res\nend", "    local\
    \ digits = \"0123456789\"\n    local result = \"\"\n    while x > 0 do\n     \
    \   local d = x % base\n        result = digits:sub(d + 1, d + 1) .. result\n\
    \        x = math.floor(x / base)\n    end\n    return result\nend", "    local\
    \ s = \"\"\n    while x > 0 do\n        local r = x % base\n        x = (x - r)\
    \ / base\n        s = string.char(r + 48) .. s\n    end\n    return s\nend", " \
    \ local result = ''\n  local x_int = math.floor(x)\n  local x_frac = x - x_int\n\
    \  local x_int_str = ''\n  local x_frac_str = ''\n  local x_frac_str_len = 0\n\
    \  local i = 0\n  local digit = 0", "    local result = \"\"\n    while x > 0\
    \ do\n        local d = x % base\n        x = math.floor(x / base)\n        result\
    \ = string.char(d + string.byte('0')) .. result\n    end\n    return result\n\
    end", "    local s = \"\"\n    while x > 0 do\n        local d = x % base\n  \
    \      x = (x - d) / base\n        s = s .. string.char(d + 48)\n    end\n   \
    \ return s\nend", "    local res = \"\"\n    while x > 0 do\n        local d =\
    \ x % base\n        res = string.char(d + string.byte('0')) .. res\n        x\
    \ = math.floor(x / base)\n    end\n    return res\nend", "    local s = \"\"\n\
    \    while x > 0 do\n        local d = x % base\n        s = s .. string.char(d\
    \ + string.byte(\"0\"))\n        x = (x - d) / base\n    end\n    return s\nend",
  "    local n = tonumber(x)\n    if n == nil then\n        return nil\n    end\n\
    \    local s = \"\"\n    while n > 0 do\n        local m = n % base\n        n\
    \ = math.floor(n / base)\n        s = string.char(m + string.byte('0')) .. s\n\
    \    end\n    return s\nend", "    local s = \"\"\n    local t = {}\n    local\
    \ i = 1\n    while x > 0 do\n        t[i] = x % base\n        x = math.floor(x\
    \ / base)\n        i = i + 1\n    end\n    for i = #t, 1, -1 do\n        s = s\
    \ .. tostring(t[i])\n    end\n    return s\nend", "    local digits = \"0123456789\"\
    \n    local result = \"\"\n    while x > 0 do\n        local d = x % base\n  \
    \      result = string.sub(digits, d + 1, d + 1) .. result\n        x = math.floor(x\
    \ / base)\n    end\n    return result\nend", "  local s = \"\"\n  while x > 0\
    \ do\n    local r = x % base\n    x = (x - r) / base\n    s = s .. string.char(r\
    \ + string.byte(\"0\"))\n  end\n  return s\nend", "    local t = {}\n    while\
    \ x > 0 do\n        local d = x % base\n        x = math.floor(x / base)\n   \
    \     table.insert(t, 1, d)\n    end\n    return table.concat(t)\nend", "\tlocal\
    \ res = \"\"\n\twhile x > 0 do\n\t\tlocal digit = x % base\n\t\tres = res .. tostring(digit)\n\
    \t\tx = math.floor(x / base)\n\tend\n\treturn res\nend", "    local s = \"\"\n\
    \    while x > 0 do\n        local r = x % base\n        s = s .. string.char(r\
    \ + 48)\n        x = math.floor(x / base)\n    end\n    return s\nend", "    local\
    \ res = \"\"\n    while x > 0 do\n        local d = x % base\n        res = string.char(d\
    \ + string.byte('0')) .. res\n        x = (x - d) / base\n    end\n    return\
    \ res\nend", "    local res = \"\"\n    local x = x\n    while x > 0 do\n    \
    \    local d = x % base\n        x = math.floor(x / base)\n        res = tostring(d)\
    \ .. res\n    end\n    return res\nend", "    local res = \"\"\n    local x =\
    \ math.floor(x)\n    while x > 0 do\n        local digit = x % base\n        res\
    \ = string.char(digit + 48) .. res\n        x = math.floor(x / base)\n    end\n\
    \    return res\nend", "    local result = \"\"\n    while x > 0 do\n        local\
    \ r = x % base\n        x = math.floor(x / base)\n        result = string.char(string.byte('0')\
    \ + r) .. result\n    end\n    return result\nend", "    local res = \"\"\n  \
    \  while x > 0 do\n        local d = x % base\n        res = string.char(d + string.byte('0'))\
    \ .. res\n        x = math.floor(x / base)\n    end\n    return res\nend", " \
    \   local result = \"\"\n    local x_int = math.floor(x)\n    local x_frac = x\
    \ - x_int\n    while x_int > 0 do\n        local d = x_int % base\n        x_int\
    \ = math.floor(x_int / base)\n        result = string.char(d + 48) .. result\n\
    \    end\n    if x_frac > 0 then\n        result = result .. \".\"\n        while\
    \ x_frac > 0 do\n            x_frac = x_frac * base\n            local d = math.floor(x_frac)\n\
    \            x_frac = x_frac - d\n            result = result .. string.char(d\
    \ + 48)\n        end\n    end\n    return result\nend", "    local res = \"\"\n\
    \    while x > 0 do\n        local d = x % base\n        res = string.char(d +\
    \ string.byte('0')) .. res\n        x = math.floor(x / base)\n    end\n    return\
    \ res\nend", "    local res = \"\"\n    while x > 0 do\n        res = res .. tostring(x\
    \ % base)\n        x = math.floor(x / base)\n    end\n    return res\nend", " \
    \   local t = {}\n    local i = 1\n    repeat\n        local d = x % base\n  \
    \      x = (x - d) / base\n        t[i] = d\n        i = i + 1\n    until x ==\
    \ 0\n    local s = \"\"\n    for i = #t, 1, -1 do\n        s = s .. tostring(t[i])\n\
    \    end\n    return s\nend", "    local s = \"\"\n    while x > 0 do\n      \
    \  local d = x % base\n        s = string.char(d + string.byte('0')) .. s\n  \
    \      x = math.floor(x / base)\n    end\n    return s\nend", "    local t = {}\n\
    \    while x > 0 do\n        local d = x % base\n        x = math.floor(x / base)\n\
    \        table.insert(t, d)\n    end\n    return table.concat(t, \"\")\nend",
  "    local res = \"\"\n    while x > 0 do\n        local r = x % base\n        x\
    \ = math.floor(x / base)\n        res = string.char(r + string.byte('0')) .. res\n\
    \    end\n    return res\nend", "    local t = {}\n    while x > 0 do\n      \
    \  table.insert(t, x % base)\n        x = math.floor(x / base)\n    end\n    return\
    \ table.concat(t)\nend", "    local result = \"\"\n    while x > 0 do\n      \
    \  local digit = x % base\n        result = string.char(digit + string.byte('0'))\
    \ .. result\n        x = math.floor(x / base)\n    end\n    return result\nend",
  "  local digits = {}\n  local i = 1\n  while x > 0 do\n    digits[i] = x % base\n\
    \    x = math.floor(x / base)\n    i = i + 1\n  end\n  local s = \"\"\n  for i\
    \ = #digits, 1, -1 do\n    s = s .. digits[i]\n  end\n  return s\nend", "    local\
    \ result = \"\"\n    local x_int = math.floor(x)\n    local x_frac = x - x_int\n\
    \    local x_int_str = \"\"\n    local x_frac_str = \"\"\n    local x_int_str_rev\
    \ = \"\"\n    local x_frac_str_rev = \"\"\n    local x_int_str_rev_len = 0\n \
    \   local x_frac_str_rev_len = 0\n    local x_int_str_rev_len_mod = 0\n    local\
    \ x_frac_str_rev_len_mod = 0\n    local x_int_str_rev_len_mod_base = 0\n    local\
    \ x_frac_str_rev_len_mod_base = 0\n    local x_int_str_rev_len_mod_base_str =\
    \ \"\"\n    local x_frac_str_rev_len_mod_base_str = \"\"\n    local x_int_str_rev_len_mod_base_str_rev\
    \ = \"\"\n    local x_frac_str_rev_len_mod_base_str_rev = \"\"\n    local x_int_str_rev_len_mod_base_str_rev_len\
    \ = 0\n    local x_frac_str_rev_len_mod_base_str_rev_len = 0\n    local x_int_str_rev_len_mod_base_str_rev_len_mod\
    \ = 0\n    local x_frac_str_rev_len_mod_base_str_rev_len_mod = 0\n    local x_int_str_rev_len_mod_base_str_rev_len_mod_base\
    \ = 0\n    local x_frac_str_rev_len_mod_base_str_rev_len_mod_base = 0\n    local\
    \ x_int_str_rev_len_mod_base_str_rev_len_mod_base_str = \"\"\n    local x_frac_str_rev_len_mod_base_str_rev_len_mod_base_str\
    \ = \"\"\n    local x_int_str_rev_len_mod_base_str_rev_len_mod_base_str_rev =\
    \ \"\"\n    local x_frac_str_", "    local s = \"\"\n    while x > 0 do\n    \
    \    local d = x % base\n        s = s .. string.char(d + string.byte(\"0\"))\n\
    \        x = math.floor(x / base)\n    end\n    return s\nend", "    local t =\
    \ {}\n    while x > 0 do\n        local r = x % base\n        x = math.floor(x\
    \ / base)\n        table.insert(t, r)\n    end\n    return table.concat(t)\nend",
  "    local res = \"\"\n    local x = tonumber(x)\n    while x > 0 do\n        local\
    \ d = x % base\n        res = res .. tostring(d)\n        x = math.floor(x / base)\n\
    \    end\n    return res\nend", "    local s = \"\"\n    while x > 0 do\n    \
    \    local d = x % base\n        s = s .. string.char(d + 48)\n        x = math.floor(x\
    \ / base)\n    end\n    return s\nend", "    local x = tonumber(x)\n    local\
    \ base = tonumber(base)\n    local result = ''\n    local digits = '0123456789'\n\
    \    local x_div = math.floor(x / base)\n    local x_mod = x % base\n    if x_div\
    \ > 0 then\n        result = change_base(x_div, base)\n    end\n    return result\
    \ .. digits:sub(x_mod + 1, x_mod + 1)\nend", "    local t = {}\n    local i =\
    \ 1\n    while x > 0 do\n        t[i] = x % base\n        x = math.floor(x / base)\n\
    \        i = i + 1\n    end\n    return table.concat(t, \"\")\nend", "    local\
    \ res = \"\"\n    while x > 0 do\n        local d = x % base\n        res = res\
    \ .. tostring(d)\n        x = math.floor(x / base)\n    end\n    return res\n\
    end", "    local result = \"\"\n    while x > 0 do\n        local r = x % base\n\
    \        x = (x - r) / base\n        result = tostring(r) .. result\n    end\n\
    \    return result\nend", "  local digits = {}\n  while x > 0 do\n    local d\
    \ = x % base\n    digits[#digits + 1] = d\n    x = (x - d) / base\n  end\n  local\
    \ s = ''\n  for i = #digits, 1, -1 do\n    s = s .. digits[i]\n  end\n  return\
    \ s\nend", "  local result = \"\"\n  while x > 0 do\n    local remainder = x %\
    \ base\n    x = math.floor(x / base)\n    result = tostring(remainder) .. result\n\
    \  end\n  return result\nend", "    local digits = \"0123456789\"\n    local t\
    \ = {}\n    repeat\n        local d = x % base + 1\n        x = math.floor(x /\
    \ base)\n        table.insert(t, 1, digits:sub(d, d))\n    until x == 0\n    return\
    \ table.concat(t)\nend", "    local s = \"\"\n    while x > 0 do\n        local\
    \ r = x % base\n        x = (x - r) / base\n        s = s .. string.char(r + 48)\n\
    \    end\n    return s\nend", "    local result = ''\n    while x > 0 do\n   \
    \     local r = x % base\n        x = (x - r) / base\n        result = result\
    \ .. tostring(r)\n    end\n    return result\nend", "    local result = \"\"\n\
    \    while x > 0 do\n        local r = x % base\n        x = (x - r) / base\n\
    \        result = tostring(r) .. result\n    end\n    return result\nend", " \
    \ local result = \"\"\n  local x = x\n  while x > 0 do\n    local r = x % base\n\
    \    x = math.floor(x / base)\n    result = result .. string.char(r + 48)\n  end\n\
    \  return result\nend", "  local s = \"\"\n  while x > 0 do\n    local r = x %\
    \ base\n    x = (x - r) / base\n    s = s .. string.char(r + string.byte(\"0\"\
    ))\n  end\n  return s\nend", "    local result = \"\"\n    while x > 0 do\n  \
    \      local r = x % base\n        x = (x - r) / base\n        result = string.char(r\
    \ + 48) .. result\n    end\n    return result\nend", "    local result = \"\"\n\
    \    local d\n    while x > 0 do\n        d = x % base\n        x = math.floor(x\
    \ / base)\n        result = string.char(string.byte('0') + d) .. result\n    end\n\
    \    return result\nend", "    local res = \"\"\n    local x = math.floor(x)\n\
    \    while x > 0 do\n        local r = x % base\n        res = res .. tostring(r)\n\
    \        x = (x - r) / base\n    end\n    return res\nend", "    local result\
    \ = \"\"\n    local x_int = math.floor(x)\n    local x_frac = x - x_int\n    local\
    \ x_int_str = \"\"\n    local x_frac_str = \"\"\n    local x_int_str_rev = \"\"\
    \n    local x_frac_str_rev = \"\"\n    local i = 0\n    local j = 0\n    local\
    \ k = 0\n    local digit = 0\n    local digit_str = \"\"\n    local digit_str_rev\
    \ = \"\"\n    local x_int_str_rev_len = 0\n    local x_frac_str_rev_len = 0\n\
    \    local x_frac_str_len = 0\n    local x_frac_str_rev_len_max = 0\n    local\
    \ x_frac_str_len_max = 0\n    local x_frac_str_rev_len_max_str = \"\"\n    local\
    \ x_frac_str_len_max_str = \"\"\n    local x_frac_str_len_max_str_len = 0\n  \
    \  local x_frac_str_len_max_str_len_str = \"\"\n    local x_frac_str_len_max_str_len_str_len\
    \ = 0\n    local x_frac_str_len_max_str_len_str_len_str = \"\"\n    local x_frac_str_len_max_str_len_str_len_str_len\
    \ = 0\n    local x_frac_str_len_max_str_len_str_len_str_len_str = \"\"\n    local\
    \ x_frac_str_len_max_str_len_str_len_str_len_str_len = 0\n    local x_frac_str_len_max_str_len_str_len_str_len_str_len_str\
    \ = \"\"\n    local x_frac_str_len_max_str_len_str_len_str_len_str_len_str_len\
    \ = 0\n    local x_frac_str_len_max_str_len_str_len_str_len_str_len_str_len_str\
    \ = \"\"\n    local x_frac_str_len_max_str_len_str_len_", "    local digits =\
    \ \"0123456789\"\n    local t = {}\n    repeat\n        local d = (x % base) +\
    \ 1\n        x = math.floor(x / base)\n        table.insert(t, 1, digits:sub(d,\
    \ d))\n    until x == 0\n    return table.concat(t)\nend", "    local result =\
    \ \"\"\n    while x > 0 do\n        local d = x % base\n        x = math.floor(x\
    \ / base)\n        result = string.char(string.byte('0') + d) .. result\n    end\n\
    \    return result\nend", "    local s = \"\"\n    while x > 0 do\n        local\
    \ r = x % base\n        x = math.floor(x / base)\n        s = string.char(r +\
    \ 48) .. s\n    end\n    return s\nend", "    local x_str = tostring(x)\n    local\
    \ x_len = #x_str\n    local x_num = 0\n    local x_base = 1\n    local x_base_str\
    \ = \"\"\n    local x_base_len = 0\n    local x_base_num = 0\n    local x_base_base\
    \ = 1\n    local x_base_base_str = \"\"\n    local x_base_base_len = 0\n    local\
    \ x_base_base_num = 0\n    local x_base_base_base = 1\n    local x_base_base_base_str\
    \ = \"\"\n    local x_base_base_base_len = 0\n    local x_base_base_base_num =\
    \ 0\n    local x_base_base_base_base = 1\n    local x_base_base_base_base_str\
    \ = \"\"\n    local x_base_base_base_base_len = 0\n    local x_base_base_base_base_num\
    \ = 0\n    local x_base_base_base_base_base = 1\n    local x_base_base_base_base_base_str\
    \ = \"\"\n    local x_base_base_base_base_base_len = 0\n    local x_base_base_base_base_base_num\
    \ = 0\n    local x_base_base_base_base_base_base = 1\n    local x_base_base_base_base_base_base_str\
    \ = \"\"\n    local x_base_base_base_base_base_base_len = 0\n    local x_base_base_base_base_base_base_num\
    \ = 0\n    local x_base_base_base_base_base_base_base = 1\n    local x_base_base_base_base_base_base_base_str\
    \ = \"\"\n    local x_base_base_base_base_base_base_base_len = 0\n    local x_base_base_base_base_base_base_base_num\
    \ = 0\n    local x_base_base_base_base_base_base_base_base = 1\n    local x_base_base_base_base_base_base_base_base_str\
    \ = \"\"\n", "    local result = \"\"\n    while x > 0 do\n        local d = x\
    \ % base\n        x = math.floor(x / base)\n        result = string.char(d + string.byte('0'))\
    \ .. result\n    end\n    return result\nend", "    local res = \"\"\n    while\
    \ x > 0 do\n        local d = x % base\n        res = res .. tostring(d)\n   \
    \     x = math.floor(x / base)\n    end\n    return res\nend", "    local t =\
    \ {}\n    local i = 1\n    while x > 0 do\n        t[i] = x % base\n        x\
    \ = math.floor(x / base)\n        i = i + 1\n    end\n    local s = \"\"\n   \
    \ for i = #t, 1, -1 do\n        s = s .. tostring(t[i])\n    end\n    return s\n\
    end", "    local result = \"\"\n    while x > 0 do\n        local digit = x %\
    \ base\n        result = tostring(digit) .. result\n        x = (x - digit) /\
    \ base\n    end\n    return result\nend", "    local result = \"\"\n    local\
    \ x_int = math.floor(x)\n    local x_frac = x - x_int\n    while x_int > 0 do\n\
    \        local digit = x_int % base\n        x_int = math.floor(x_int / base)\n\
    \        result = string.char(string.byte('0') + digit) .. result\n    end\n \
    \   if x_frac > 0 then\n        result = result .. \".\"\n        local precision\
    \ = 0\n        while x_frac > 0 and precision < 10 do\n            x_frac = x_frac\
    \ * base\n            local digit = math.floor(x_frac)\n            x_frac = x_frac\
    \ - digit\n            result = result .. string.char(string.byte('0') + digit)\n\
    \            precision = precision + 1\n        end\n    end\n    return result\n\
    end", "    local digits = \"0123456789\"\n    local result = \"\"\n    while x\
    \ > 0 do\n        local d = x % base\n        result = string.sub(digits, d +\
    \ 1, d + 1) .. result\n        x = math.floor(x / base)\n    end\n    return result\n\
    end", "\tlocal res = \"\"\n\tlocal x_int = math.floor(x)\n\tlocal x_frac = x -\
    \ x_int\n\tlocal x_frac_str = \"\"\n\tlocal x_int_str = \"\"\n\tlocal i = 0\n\t\
    local base_int = math.floor(base)\n\tlocal base_frac = base - base_int\n\tlocal\
    \ base_frac_str = \"\"\n\tlocal base_int_str = \"\"\n\tlocal j = 0\n\tlocal x_frac_int\
    \ = 0\n\tlocal x_frac_frac = 0\n\tlocal x_frac_int_str = \"\"\n\tlocal x_frac_frac_str\
    \ = \"\"\n\tlocal k = 0\n\tlocal x_frac_frac_int = 0\n\tlocal x_frac_frac_frac\
    \ = 0\n\tlocal x_frac_frac_int_str = \"\"\n\tlocal x_frac_frac_frac_str = \"\"\
    \n\tlocal l = 0\n\tlocal x_frac_frac_frac_int = 0\n\tlocal x_frac_frac_frac_frac\
    \ = 0\n\tlocal x_frac_frac_frac_int_str = \"\"\n\tlocal x_frac_frac_frac_frac_str\
    \ = \"\"\n\tlocal m = 0\n\tlocal x_frac_frac_frac_frac_int = 0\n\tlocal x_frac_frac_frac_frac_frac\
    \ = 0\n\tlocal x_frac_frac_frac_frac_int_str = \"\"\n\tlocal x_frac_frac_frac_frac_frac_str\
    \ = \"\"\n\tlocal n = 0\n\tlocal x_frac_frac_frac_frac_frac_int = 0\n\tlocal x_frac_frac_frac_frac_frac_frac\
    \ = 0\n\tlocal x_frac_frac_frac_frac_frac_int_str = \"\"\n\tlocal x_frac_frac_frac_frac_frac_frac_str\
    \ = \"\"\n\tlocal o = 0\n\tlocal x_frac_frac_frac_frac_frac_frac_int = 0\n\tlocal\
    \ x_frac_frac_frac_frac_frac_frac_frac = 0\n\tlocal x_frac_frac_frac_frac_frac_frac_int_str\
    \ = \"\"\n\tlocal x_frac_frac_frac_frac", "    local s = \"\"\n    while x > 0\
    \ do\n        local d = x % base\n        s = s .. string.char(d + 48)\n     \
    \   x = math.floor(x / base)\n    end\n    return s\nend", "  local s = \"\"\n\
    \  while x > 0 do\n    local m = x % base\n    x = (x - m) / base\n    s = string.char(m\
    \ + 48) .. s\n  end\n  return s\nend", "    local t = {}\n    local i = 1\n  \
    \  while x > 0 do\n        t[i] = x % base\n        x = math.floor(x / base)\n\
    \        i = i + 1\n    end\n    local s = \"\"\n    for i = #t, 1, -1 do\n  \
    \      s = s .. tostring(t[i])\n    end\n    return s\nend", "    local s = \"\
    \"\n    while x > 0 do\n        local r = x % base\n        x = math.floor(x /\
    \ base)\n        s = s .. string.char(r + string.byte(\"0\"))\n    end\n    return\
    \ s\nend", "    local s = \"\"\n    while x > 0 do\n        local r = x % base\n\
    \        x = (x - r) / base\n        s = s .. string.char(r + 48)\n    end\n \
    \   return s\nend", "    local s = \"\"\n    while x > 0 do\n        local r =\
    \ x % base\n        x = (x - r) / base\n        s = s .. string.char(r + 48)\n\
    \    end\n    return s\nend", "    local s = {}\n    while x > 0 do\n        local\
    \ r = x % base\n        x = math.floor(x / base)\n        s[#s + 1] = r\n    end\n\
    \    return table.concat(s, \"\")\nend", "    local result = \"\"\n    while x\
    \ > 0 do\n        local digit = x % base\n        result = string.char(digit +\
    \ string.byte('0')) .. result\n        x = math.floor(x / base)\n    end\n   \
    \ return result\nend", "    local result = \"\"\n    while x > 0 do\n        local\
    \ d = x % base\n        x = (x - d) / base\n        result = string.char(d + string.byte('0'))\
    \ .. result\n    end\n    return result\nend", "    local x = tonumber(x)\n  \
    \  local base = tonumber(base)\n    local t = {}\n    local i = 1\n    while x\
    \ > 0 do\n        t[i] = x % base\n        x = math.floor(x / base)\n        i\
    \ = i + 1\n    end\n    local s = ''\n    for i = #t, 1, -1 do\n        s = s\
    \ .. tostring(t[i])\n    end\n    return s\nend", "  local res = \"\"\n  while\
    \ x > 0 do\n    local d = x % base\n    res = string.char(d + string.byte('0'))\
    \ .. res\n    x = (x - d) / base\n  end\n  return res\nend", "    local result\
    \ = \"\"\n    local x_copy = x\n    while x_copy > 0 do\n        local remainder\
    \ = x_copy % base\n        x_copy = math.floor(x_copy / base)\n        result\
    \ = tostring(remainder) .. result\n    end\n    return result\nend", "    local\
    \ res = \"\"\n    while x > 0 do\n        local d = x % base\n        res = res\
    \ .. string.char(d + 48)\n        x = math.floor(x / base)\n    end\n    return\
    \ res\nend", "    local x_str = tostring(x)\n    local x_len = #x_str\n    local\
    \ x_num = tonumber(x_str)\n    local x_base = 10\n    local x_base_str = \"0123456789\"\
    \n    local x_base_len = #x_base_str\n    local x_base_num = tonumber(x_base_str)\n\
    \    local x_base_num_str = tostring(x_base_num)\n    local x_base_num_len = #x_base_num_str\n\
    \    local x_base_num_num = tonumber(x_base_num_str)\n    local x_base_num_num_str\
    \ = tostring(x_base_num_num)\n    local x_base_num_num_len = #x_base_num_num_str\n\
    \    local x_base_num_num_num = tonumber(x_base_num_num_str)\n    local x_base_num_num_num_str\
    \ = tostring(x_base_num_num_num)\n    local x_base_num_num_num_len = #x_base_num_num_num_str\n\
    \    local x_base_num_num_num_num = tonumber(x_base_num_num_num_str)\n    local\
    \ x_base_num_num_num_num_str = tostring(x_base_num_num_num_num)\n    local x_base_num_num_num_num_len\
    \ = #x_base_num_num_num_num_str\n    local x_base_num_num_num_num_num = tonumber(x_base_num_num_num_num_str)\n\
    \    local x_base_num_num_num_num_num_str = tostring(x_base_num_num_num_num_num)\n\
    \    local x_base_num_num_num_num_num_len = #x_base_num_num_num_num_num_str\n\
    \    local x_base_num_num_num_num_num_num = tonumber(x_base_num_num_num", "  \
    \  local result = \"\"\n    while x > 0 do\n        local r = x % base\n     \
    \   result = result .. tostring(r)\n        x = math.floor(x / base)\n    end\n\
    \    return string.reverse(result)\nend", "    local x = tonumber(x)\n    local\
    \ base = tonumber(base)\n    local result = \"\"\n    local i = 0\n    while x\
    \ > 0 do\n        local mod = x % base\n        x = math.floor(x / base)\n   \
    \     result = string.char(string.byte('0') + mod) .. result\n    end\n    return\
    \ result\nend", "  local t = {}\n  local i = 1\n  while x > 0 do\n    local r\
    \ = x % base\n    t[i] = r\n    x = (x - r) / base\n    i = i + 1\n  end\n  local\
    \ s = \"\"\n  for j = i - 1, 1, -1 do\n    s = s .. tostring(t[j])\n  end\n  return\
    \ s\nend", "  local res = \"\"\n  local x = math.floor(x)\n  while x > 0 do\n\
    \    local d = x % base\n    x = math.floor(x / base)\n    res = string.char(d\
    \ + string.byte('0')) .. res\n  end\n  return res\nend", "\tlocal result = \"\"\
    \n\tlocal remainder = 0\n\tlocal quotient = x\n\twhile quotient > 0 do\n\t\tremainder\
    \ = quotient % base\n\t\tquotient = math.floor(quotient / base)\n\t\tresult =\
    \ string.char(remainder + 48) .. result\n\tend\n\treturn result\nend", "    local\
    \ result = \"\"\n    while x > 0 do\n        local r = x % base\n        x = math.floor(x\
    \ / base)\n        result = string.char(string.byte('0') + r) .. result\n    end\n\
    \    return result\nend", "    local res = \"\"\n    while x > 0 do\n        local\
    \ d = x % base\n        x = math.floor(x / base)\n        res = string.char(d\
    \ + string.byte('0')) .. res\n    end\n    return res\nend", "    local r = \"\
    \"\n    while x > 0 do\n        r = string.char(x % base + 48) .. r\n        x\
    \ = math.floor(x / base)\n    end\n    return r\nend", "    local s = \"\"\n \
    \   while x > 0 do\n        local m = x % base\n        x = (x - m) / base\n \
    \       s = s .. string.char(m + 48)\n    end\n    return s\nend", "\tlocal x_str\
    \ = tostring(x)\n\tlocal x_len = #x_str\n\tlocal x_num = 0\n\tlocal x_base = 1\n\
    \tfor i = x_len, 1, -1 do\n\t\tx_num = x_num + tonumber(x_str:sub(i, i)) * x_base\n\
    \t\tx_base = x_base * 10\n\tend\n\tlocal x_base_str = \"\"\n\twhile x_num > 0\
    \ do\n\t\tx_base_str = tostring(x_num % base) .. x_base_str\n\t\tx_num = math.floor(x_num\
    \ / base)\n\tend\n\treturn x_base_str\nend", "    local digits = \"0123456789\"\
    \n    local result = \"\"\n    while x > 0 do\n        local d = x % base\n  \
    \      result = string.sub(digits, d + 1, d + 1) .. result\n        x = math.floor(x\
    \ / base)\n    end\n    return result\nend", "    local result = \"\"\n    repeat\n\
    \        local d = x % base\n        x = (x - d) / base\n        result = string.char(d\
    \ + 48) .. result\n    until x == 0\n    return result\nend", "    local t = {}\n\
    \    repeat\n        local d = x % base\n        table.insert(t, d)\n        x\
    \ = (x - d) / base\n    until x == 0\n    return table.concat(t, \"\")\nend",
  "    local result = \"\"\n    local x = math.floor(x)\n    while x > 0 do\n    \
    \    local r = x % base\n        x = (x - r) / base\n        result = string.char(r\
    \ + string.byte('0')) .. result\n    end\n    return result\nend", "    local\
    \ s = \"\"\n    while x > 0 do\n        local r = x % base\n        s = s .. string.char(r\
    \ + 48)\n        x = math.floor(x / base)\n    end\n    return s\nend", "  local\
    \ t = {}\n  local i = 1\n  while x > 0 do\n    t[i] = x % base\n    x = math.floor(x\
    \ / base)\n    i = i + 1\n  end\n  return table.concat(t, \"\")\nend", "    local\
    \ res = \"\"\n    while x > 0 do\n        local digit = x % base\n        res\
    \ = res .. tostring(digit)\n        x = math.floor(x / base)\n    end\n    return\
    \ res\nend", "    local result = \"\"\n    while x > 0 do\n        local digit\
    \ = x % base\n        x = math.floor(x / base)\n        result = string.char(digit\
    \ + string.byte('0')) .. result\n    end\n    return result\nend", "    local\
    \ digits = {}\n    local i = 1\n    while x > 0 do\n        digits[i] = x % base\n\
    \        x = math.floor(x / base)\n        i = i + 1\n    end\n    return table.concat(digits,\
    \ \"\")\nend", "\tlocal result = \"\"\n\tlocal x_int = math.floor(x)\n\tlocal\
    \ x_frac = x - x_int\n\tlocal x_int_str = \"\"\n\tlocal x_frac_str = \"\"\n\t\
    local i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal digit = 0\n\tlocal digit_str\
    \ = \"\"\n\tlocal digit_str_len = 0\n\tlocal x_int_str_len = 0\n\tlocal x_frac_str_len\
    \ = 0\n\tlocal x_int_str_len_max = 0\n\tlocal x_frac_str_len_max = 0\n\tlocal\
    \ x_int_str_len_max_str = \"\"\n\tlocal x_frac_str_len_max_str = \"\"\n\tlocal\
    \ x_int_str_len_max_str_len = 0\n\tlocal x_frac_str_len_max_str_len = 0\n\tlocal\
    \ x_int_str_len_max_str_len_str = \"\"\n\tlocal x_frac_str_len_max_str_len_str\
    \ = \"\"\n\tlocal x_int_str_len_max_str_len_str_len = 0\n\tlocal x_frac_str_len_max_str_len_str_len\
    \ = 0\n\tlocal x_int_str_len_max_str_len_str_len_str = \"\"\n\tlocal x_frac_str_len_max_str_len_str_len_str\
    \ = \"\"\n\tlocal x_int_str_len_max_str_len_str_len_str_len = 0\n\tlocal x_frac_str_len_max_str_len_str_len_str_len\
    \ = 0\n\tlocal x_int_str_len_max_str_len_str_len_str_len_str = \"\"\n\tlocal x_frac_str_len_max_str_len_str_len_str_len_str\
    \ = \"\"\n\tlocal x_int_str_len_max_str_len_str_len_str_len_str_len = 0\n\tlocal\
    \ x_frac_str_len_max_str_len_str_len_str_len_str_len =", "    local result = \"\
    \"\n    while x > 0 do\n        local d = x % base\n        result = string.char(d\
    \ + 48) .. result\n        x = math.floor(x / base)\n    end\n    return result\n\
    end", "    local result = \"\"\n    while x > 0 do\n        local r = x % base\n\
    \        x = (x - r) / base\n        result = string.char(r + 48) .. result\n\
    \    end\n    return result\nend", "    local result = \"\"\n    while x > 0 do\n\
    \        local digit = x % base\n        result = result .. tostring(digit)\n\
    \        x = math.floor(x / base)\n    end\n    return result\nend", "    local\
    \ x = tonumber(x)\n    local base = tonumber(base)\n    local t = {}\n    local\
    \ s = \"\"\n    while x > 0 do\n        local r = x % base\n        x = math.floor(x\
    \ / base)\n        table.insert(t, r)\n    end\n    for i = #t, 1, -1 do\n   \
    \     s = s .. tostring(t[i])\n    end\n    return s\nend", "    local t = {}\n\
    \    local i = 1\n    while x > 0 do\n        local r = x % base\n        t[i]\
    \ = r\n        x = (x - r) / base\n        i = i + 1\n    end\n    local s = \"\
    \"\n    for i = #t, 1, -1 do\n        s = s .. tostring(t[i])\n    end\n    return\
    \ s\nend", "    local t = {}\n    local i = 1\n    while x > 0 do\n        t[i]\
    \ = x % base\n        x = math.floor(x / base)\n        i = i + 1\n    end\n \
    \   return table.concat(t, \"\")\nend", "    local result = \"\"\n    local digit\
    \ = 0\n    local x_int = math.floor(x)\n    local x_frac = x - x_int\n    repeat\n\
    \        digit = x_int % base\n        x_int = math.floor(x_int / base)\n    \
    \    result = string.char(digit + 48) .. result\n    until x_int == 0\n    if\
    \ x_frac ~= 0 then\n        result = result .. \".\"\n        repeat\n       \
    \     x_frac = x_frac * base\n            digit = math.floor(x_frac)\n       \
    \     x_frac = x_frac - digit\n            result = result .. string.char(digit\
    \ + 48)\n        until x_frac == 0\n    end\n    return result\nend", "    local\
    \ result = \"\"\n    while x > 0 do\n        local digit = x % base\n        result\
    \ = tostring(digit) .. result\n        x = math.floor(x / base)\n    end\n   \
    \ return result\nend", "    local result = \"\"\n    local x_int = math.floor(x)\n\
    \    local x_frac = x - x_int\n    while x_int > 0 do\n        local r = x_int\
    \ % base\n        x_int = math.floor(x_int / base)\n        result = string.char(r\
    \ + 48) .. result\n    end\n    if x_frac > 0 then\n        result = result ..\
    \ \".\"\n        while x_frac > 0 do\n            x_frac = x_frac * base\n   \
    \         local r = math.floor(x_frac)\n            x_frac = x_frac - r\n    \
    \        result = result .. string.char(r + 48)\n        end\n    end\n    return\
    \ result\nend", "    local x_str = tostring(x)\n    local x_len = #x_str\n   \
    \ local result = {}\n    local i = 1\n    while x_len > 0 do\n        local mod\
    \ = x % base\n        x = (x - mod) / base\n        x_len = x_len - 1\n      \
    \  result[i] = mod\n        i = i + 1\n    end\n    return table.concat(result,\
    \ \"\")\nend", "    local result = \"\"\n    local x_int = math.floor(x)\n   \
    \ local x_frac = x - x_int\n    local x_int_str = \"\"\n    local x_frac_str =\
    \ \"\"\n    local i = 0\n    while x_int > 0 do\n        x_int_str = tostring(x_int\
    \ % base) .. x_int_str\n        x_int = math.floor(x_int / base)\n    end\n  \
    \  while x_frac > 0 and i < 6 do\n        x_frac = x_frac * base\n        x_frac_str\
    \ = x_frac_str .. tostring(math.floor(x_frac))\n        x_frac = x_frac - math.floor(x_frac)\n\
    \        i = i + 1\n    end\n    result = x_int_str .. \".\" .. x_frac_str\n \
    \   return result\nend", "    local result = \"\"\n    while x > 0 do\n      \
    \  local remainder = x % base\n        x = math.floor(x / base)\n        result\
    \ = string.char(remainder + 48) .. result\n    end\n    return result\nend", " \
    \   local t = {}\n    while x > 0 do\n        local r = x % base\n        x =\
    \ math.floor(x / base)\n        table.insert(t, r)\n    end\n    local s = \"\"\
    \n    for i = #t, 1, -1 do\n        s = s .. tostring(t[i])\n    end\n    return\
    \ s\nend", "    local res = \"\"\n    while x > 0 do\n        local d = x % base\n\
    \        res = res .. tostring(d)\n        x = math.floor(x / base)\n    end\n\
    \    return res\nend", "    local result = \"\"\n    repeat\n        local r =\
    \ x % base\n        x = (x - r) / base\n        result = string.char(r + 48) ..\
    \ result\n    until x == 0\n    return result\nend", "    local digits = \"0123456789\"\
    \n    local result = \"\"\n    local x = tonumber(x)\n    while x > 0 do\n   \
    \     local d = x % base\n        result = string.sub(digits, d + 1, d + 1) ..\
    \ result\n        x = math.floor(x / base)\n    end\n    return result\nend",
  "    local digits = \"0123456789\"\n    local result = \"\"\n    while x > 0 do\n\
    \        local d = x % base\n        result = string.sub(digits, d + 1, d + 1)\
    \ .. result\n        x = math.floor(x / base)\n    end\n    return result\nend",
  "    local s = \"\"\n    while x > 0 do\n        local r = x % base\n        s =\
    \ s .. tostring(r)\n        x = math.floor(x / base)\n    end\n    return s\n\
    end", "  local res = \"\"\n  while x > 0 do\n    local d = x % base\n    res =\
    \ res .. tostring(d)\n    x = (x - d) / base\n  end\n  return res\nend", "   \
    \ local t = {}\n    local i = 1\n    while x > 0 do\n        t[i] = x % base\n\
    \        x = math.floor(x / base)\n        i = i + 1\n    end\n    return table.concat(t,\
    \ \"\")\nend", "    local s = \"\"\n    while x > 0 do\n        local d = x %\
    \ base\n        s = s .. tostring(d)\n        x = math.floor(x / base)\n    end\n\
    \    return s\nend", "    local result = \"\"\n    while x > 0 do\n        local\
    \ r = x % base\n        x = (x - r) / base\n        result = result .. tostring(r)\n\
    \    end\n    return result\nend", "    local res = \"\"\n    while x > 0 do\n\
    \        local d = x % base\n        res = string.char(d + 48) .. res\n      \
    \  x = math.floor(x / base)\n    end\n    return res\nend", "    local t = {}\n\
    \    local i = 1\n    while x > 0 do\n        t[i] = x % base\n        x = math.floor(x\
    \ / base)\n        i = i + 1\n    end\n    return table.concat(t, \"\")\nend",
  "    local result = ''\n    local x_int = math.floor(x)\n    local x_frac = x -\
    \ x_int\n    local x_int_str = tostring(x_int)\n    local x_frac_str = ''\n  \
    \  local x_frac_str_len = 0\n    local x_frac_str_len_max = 10\n    local x_frac_str_len_max_base\
    \ = math.pow(base, x_frac_str_len_max)\n    local x_frac_str_len_max_base_minus_1\
    \ = x_frac_str_len_max_base - 1\n    local x_frac_str_len_max_base_minus_1_base\
    \ = x_frac_str_len_max_base_minus_1 / base\n    local x_frac_str_len_max_base_minus_1_base_minus_1\
    \ = x_frac_str_len_max_base_minus_1_base - 1\n    local x_frac_str_len_max_base_minus_1_base_minus_1_base\
    \ = x_frac_str_len_max_base_minus_1_base_minus_1 / base\n    local x_frac_str_len_max_base_minus_1_base_minus_1_base_minus_1\
    \ = x_frac_str_len_max_base_minus_1_base_minus_1_base - 1\n    local x_frac_str_len_max_base_minus_1_base_minus_1_base_minus_1_base\
    \ = x_frac_str_len_max_base_minus_1_base_minus_1_base_minus_1 / base\n    local\
    \ x_frac_str_len_max_base_minus_1_base_minus_1_base_minus_1_base_minus_1 = x_frac_str_len_max_base_minus_1_base_minus_1_base_minus_1_base\
    \ - 1\n    local x_frac_str_len_max_base_minus_1_base_minus_1_base_minus_1_base_minus_1_base\
    \ = x_frac_str_len_", "    local digits = \"0123456789\"\n    local result = \"\
    \"\n    while x > 0 do\n        local d = x % base\n        result = string.sub(digits,\
    \ d + 1, d + 1) .. result\n        x = math.floor(x / base)\n    end\n    return\
    \ result\nend", "  local t = {}\n  local i = 1\n  while x > 0 do\n    t[i] = x\
    \ % base\n    x = math.floor(x / base)\n    i = i + 1\n  end\n  local s = \"\"\
    \n  for i = #t, 1, -1 do\n    s = s .. tostring(t[i])\n  end\n  return s\nend",
  "    local res = \"\"\n    while x > 0 do\n        local r = x % base\n        res\
    \ = res .. tostring(r)\n        x = math.floor(x / base)\n    end\n    return\
    \ res\nend", "    local s = \"\"\n    while x > 0 do\n        local r = x % base\n\
    \        x = (x - r) / base\n        s = s .. string.char(r + string.byte(\"0\"\
    ))\n    end\n    return s\nend", "    local result = \"\"\n    while x > 0 do\n\
    \        local d = x % base\n        result = string.char(d + string.byte('0'))\
    \ .. result\n        x = math.floor(x / base)\n    end\n    return result\nend",
  "    local s = \"\"\n    while x > 0 do\n        local r = x % base\n        x =\
    \ (x - r) / base\n        s = s .. string.char(r + 48)\n    end\n    return s\n\
    end", "    local s = \"\"\n    while x > 0 do\n        local r = x % base\n  \
    \      s = s .. tostring(r)\n        x = (x - r) / base\n    end\n    return s\n\
    end", "    local result = \"\"\n    local x = math.floor(x)\n    while x > 0 do\n\
    \        local r = x % base\n        x = (x - r) / base\n        result = string.char(string.byte('0')\
    \ + r) .. result\n    end\n    return result\nend", "    local s = \"\"\n    while\
    \ x > 0 do\n        local r = x % base\n        x = (x - r) / base\n        s\
    \ = string.char(r + 48) .. s\n    end\n    return s\nend", "  local result = \"\
    \"\n  local x_int = math.floor(x)\n  local x_frac = x - x_int\n  local x_int_str\
    \ = \"\"\n  local x_frac_str = \"\"\n  local x_int_str_rev = \"\"\n  local x_frac_str_rev\
    \ = \"\"\n  local x_int_str_rev_len = 0\n  local x_frac_str_rev_len = 0\n  local\
    \ x_int_str_rev_len_mod = 0\n  local x_frac_str_rev_len_mod = 0\n  local x_int_str_rev_len_mod_sub\
    \ = 0\n  local x_frac_str_rev_len_mod_sub = 0\n  local x_int_str_rev_len_mod_sub_div\
    \ = 0\n  local x_frac_str_rev_len_mod_sub_div = 0\n  local x_int_str_rev_len_mod_sub_div_mul\
    \ = 0\n  local x_frac_str_rev_len_mod_sub_div_mul = 0\n  local x_int_str_rev_len_mod_sub_div_mul_sub\
    \ = 0\n  local x_frac_str_rev_len_mod_sub_div_mul_sub = 0\n  local x_int_str_rev_len_mod_sub_div_mul_sub_add\
    \ = 0\n  local x_frac_str_rev_len_mod_sub_div_mul_sub_add = 0\n  local x_int_str_rev_len_mod_sub_div_mul_sub_add_div\
    \ = 0\n  local x_frac_str_rev_len_mod_sub_div_mul_sub_add_div = 0\n  local x_int_str_rev_len_mod_sub_div_mul_sub_add_div_mul\
    \ = 0\n  local x_frac_str_rev_len_mod_sub_div_mul_sub_add_div_mul = 0\n  local\
    \ x_int_str_rev_len_mod_sub_div_mul_sub_add_div_m", "    local res = \"\"\n  \
    \  while x > 0 do\n        local digit = x % base\n        res = string.char(digit\
    \ + 48) .. res\n        x = math.floor(x / base)\n    end\n    return res\nend",
  "    local result = \"\"\n    local x = math.floor(x)\n    while x > 0 do\n    \
    \    local r = x % base\n        x = math.floor(x / base)\n        result = string.char(string.byte('0')\
    \ + r) .. result\n    end\n    return result\nend", "    local s = \"\"\n    local\
    \ t = {}\n    local i = 1\n    while x > 0 do\n        local r = x % base\n  \
    \      t[i] = r\n        x = (x - r) / base\n        i = i + 1\n    end\n    for\
    \ i = #t, 1, -1 do\n        s = s .. tostring(t[i])\n    end\n    return s\nend",
  "    local res = \"\"\n    while x > 0 do\n        local digit = x % base\n    \
    \    x = math.floor(x / base)\n        res = string.char(digit + 48) .. res\n\
    \    end\n    return res\nend", "    local s = \"\"\n    while x > 0 do\n    \
    \    local r = x % base\n        x = math.floor(x / base)\n        s = s .. string.char(r\
    \ + string.byte(\"0\"))\n    end\n    return s\nend", "    local result = \"\"\
    \n    while x > 0 do\n        local digit = x % base\n        result = result\
    \ .. string.char(digit + 48)\n        x = math.floor(x / base)\n    end\n    return\
    \ string.reverse(result)\nend", "    local res = \"\"\n    while x > 0 do\n  \
    \      res = res .. tostring(x % base)\n        x = math.floor(x / base)\n   \
    \ end\n    return res\nend", "    local x_str = tostring(x)\n    local x_len =\
    \ #x_str\n    local result = {}\n    local i = 1\n    local carry = 0\n    while\
    \ i <= x_len do\n        local x_digit = tonumber(x_str:sub(x_len - i + 1, x_len\
    \ - i + 1))\n        local digit = (x_digit + carry) % base\n        carry = (x_digit\
    \ + carry) // base\n        result[i] = digit\n        i = i + 1\n    end\n  \
    \  while carry > 0 do\n        local digit = carry % base\n        carry = carry\
    \ // base\n        result[i] = digit\n        i = i + 1\n    end\n    local result_str\
    \ = \"\"\n    for i = #result, 1, -1 do\n        result_str = result_str .. tostring(result[i])\n\
    \    end\n    return result_str\nend", "    local s = \"\"\n    while x > 0 do\n\
    \        local r = x % base\n        s = s .. string.char(r + 48)\n        x =\
    \ (x - r) / base\n    end\n    return string.reverse(s)\nend", "\tlocal res =\
    \ \"\"\n\twhile x > 0 do\n\t\tlocal d = x % base\n\t\tres = res .. string.char(string.byte('0')\
    \ + d)\n\t\tx = math.floor(x / base)\n\tend\n\treturn res\nend", "    local t\
    \ = {}\n    local i = 1\n    while x > 0 do\n        t[i] = x % base\n       \
    \ x = math.floor(x / base)\n        i = i + 1\n    end\n    local s = \"\"\n \
    \   for i = #t, 1, -1 do\n        s = s .. tostring(t[i])\n    end\n    return\
    \ s\nend", "    local res = \"\"\n    local x = math.floor(x)\n    while x > 0\
    \ do\n        local r = x % base\n        x = math.floor(x / base)\n        res\
    \ = res .. string.char(r + string.byte('0'))\n    end\n    return res\nend", " \
    \   local s = \"\"\n    while x > 0 do\n        local r = x % base\n        x\
    \ = math.floor(x / base)\n        s = s .. string.char(r + 48)\n    end\n    return\
    \ s\nend", "    local res = \"\"\n    while x > 0 do\n        local d = x % base\n\
    \        x = math.floor(x / base)\n        res = tostring(d) .. res\n    end\n\
    \    return res\nend", "  local res = \"\"\n  while x > 0 do\n    local d = x\
    \ % base\n    res = tostring(d) .. res\n    x = math.floor(x / base)\n  end\n\
    \  return res\nend", "    local res = \"\"\n    while x > 0 do\n        local\
    \ r = x % base\n        x = (x - r) / base\n        res = res .. tostring(r)\n\
    \    end\n    return res\nend", "    local x_str = tostring(x)\n    local x_len\
    \ = #x_str\n    local x_num = 0\n    local x_base = 1\n    for i = x_len, 1, -1\
    \ do\n        local x_digit = tonumber(x_str:sub(i, i))\n        x_num = x_num\
    \ + x_digit * x_base\n        x_base = x_base * 10\n    end\n    local x_base_str\
    \ = \"\"\n    while x_num > 0 do\n        local x_digit = x_num % base\n     \
    \   x_base_str = tostring(x_digit) .. x_base_str\n        x_num = math.floor(x_num\
    \ / base)\n    end\n    return x_base_str\nend", "    local x = tonumber(x)\n\
    \    local t = {}\n    local i = 1\n    while x > 0 do\n        local r = x %\
    \ base\n        x = (x - r) / base\n        t[i] = r\n        i = i + 1\n    end\n\
    \    local s = \"\"\n    for i = #t, 1, -1 do\n        s = s .. tostring(t[i])\n\
    \    end\n    return s\nend", "    local x_str = tostring(x)\n    local x_len\
    \ = #x_str\n    local x_base = 10\n    local result = 0\n    local power = 1\n\
    \    for i = x_len, 1, -1 do\n        local digit = tonumber(x_str:sub(i, i))\n\
    \        result = result + digit * power\n        power = power * x_base\n   \
    \ end\n    local result_str = \"\"\n    while result > 0 do\n        local digit\
    \ = result % base\n        result_str = tostring(digit) .. result_str\n      \
    \  result = math.floor(result / base)\n    end\n    return result_str\nend", " \
    \   local result = \"\"\n    while x > 0 do\n        local r = x % base\n    \
    \    result = result .. tostring(r)\n        x = (x - r) / base\n    end\n   \
    \ return result\nend", "    local res = \"\"\n    while x > 0 do\n        local\
    \ r = x % base\n        res = res .. tostring(r)\n        x = math.floor(x / base)\n\
    \    end\n    return res\nend", "    local s = \"\"\n    while x > 0 do\n    \
    \    local r = x % base\n        x = (x - r) / base\n        s = s .. string.char(r\
    \ + 48)\n    end\n    return s\nend", "  local result = \"\"\n  local x_int =\
    \ math.floor(x)\n  local x_frac = x - x_int\n  local x_int_str = \"\"\n  local\
    \ x_frac_str = \"\"\n  local x_int_str_rev = \"\"\n  local x_frac_str_rev = \"\
    \"\n  local x_int_str_rev_len = 0\n  local x_frac_str_rev_len = 0\n  local x_int_str_rev_len_mod\
    \ = 0\n  local x_frac_str_rev_len_mod = 0\n  local x_int_str_rev_len_mod_div =\
    \ 0\n  local x_frac_str_rev_len_mod_div = 0\n  local x_int_str_rev_len_mod_div_int\
    \ = 0\n  local x_frac_str_rev_len_mod_div_int = 0\n  local x_int_str_rev_len_mod_div_int_str\
    \ = \"\"\n  local x_frac_str_rev_len_mod_div_int_str = \"\"\n  local x_int_str_rev_len_mod_div_int_str_rev\
    \ = \"\"\n  local x_frac_str_rev_len_mod_div_int_str_rev = \"\"\n  local x_int_str_rev_len_mod_div_int_str_rev_len\
    \ = 0\n  local x_frac_str_rev_len_mod_div_int_str_rev_len = 0\n  local x_int_str_rev_len_mod_div_int_str_rev_len_mod\
    \ = 0\n  local x_frac_str_rev_len_mod_div_int_str_rev_len_mod = 0\n  local x_int_str_rev_len_mod_div_int_str_rev_len_mod_div\
    \ = 0\n  local x_frac_str_rev_len_mod_div_int_str_rev_len_mod_div = 0\n  local\
    \ x_int_str_rev_len_mod_div_int_str_rev_len_mod_div_int = 0\n  local x_frac_str_",
  "    local t = {}\n    local i = 1\n    while x > 0 do\n        t[i] = x % base\n\
    \        x = math.floor(x / base)\n        i = i + 1\n    end\n    local s = \"\
    \"\n    for i = #t, 1, -1 do\n        s = s .. tostring(t[i])\n    end\n    return\
    \ s\nend", "  local t = {}\n  local i = 1\n  while x > 0 do\n    local r = x %\
    \ base\n    x = (x - r) / base\n    t[i] = r\n    i = i + 1\n  end\n  local s\
    \ = \"\"\n  for i = #t, 1, -1 do\n    s = s .. tostring(t[i])\n  end\n  return\
    \ s\nend", "  local res = \"\"\n  while x > 0 do\n    local d = x % base\n   \
    \ res = res .. tostring(d)\n    x = math.floor(x / base)\n  end\n  return res\n\
    end", "    local res = \"\"\n    while x > 0 do\n        local d = x % base\n\
    \        x = math.floor(x / base)\n        res = tostring(d) .. res\n    end\n\
    \    return res\nend", "  local s = \"\"\n  while x > 0 do\n    local r = x %\
    \ base\n    x = (x - r) / base\n    s = s .. tostring(r)\n  end\n  return s\n\
    end", "    local s = \"\"\n    while x > 0 do\n        local d = x % base\n  \
    \      s = string.char(d + string.byte('0')) .. s\n        x = math.floor(x /\
    \ base)\n    end\n    return s\nend", "    local s = \"\"\n    while x > 0 do\n\
    \        local d = x % base\n        x = (x - d) / base\n        s = s .. tostring(d)\n\
    \    end\n    return s\nend", "    local s = \"\"\n    while x > 0 do\n      \
    \  local r = x % base\n        x = (x - r) / base\n        s = string.char(r +\
    \ string.byte('0')) .. s\n    end\n    return s\nend", "    local result = \"\"\
    \n    while x > 0 do\n        local remainder = x % base\n        result = tostring(remainder)\
    \ .. result\n        x = (x - remainder) / base\n    end\n    return result\n\
    end", "    local t = {}\n    local i = 1\n    while x > 0 do\n        t[i] = x\
    \ % base\n        x = math.floor(x / base)\n        i = i + 1\n    end\n    return\
    \ table.concat(t, \"\")\nend", "    local res = \"\"\n    while x > 0 do\n   \
    \     local digit = x % base\n        res = res .. tostring(digit)\n        x\
    \ = math.floor(x / base)\n    end\n    return res\nend", "    local digits = \"\
    0123456789\"\n    local result = \"\"\n    local x = math.floor(x)\n    while\
    \ x > 0 do\n        local digit = x % base\n        result = string.sub(digits,\
    \ digit + 1, digit + 1) .. result\n        x = math.floor(x / base)\n    end\n\
    \    return result\nend", "    local result = \"\"\n    while x > 0 do\n     \
    \   local d = x % base\n        result = string.char(d + string.byte('0')) ..\
    \ result\n        x = math.floor(x / base)\n    end\n    return result\nend",
  "    local s = \"\"\n    while x > 0 do\n        local r = x % base\n        x =\
    \ (x - r) / base\n        s = string.char(r + 48) .. s\n    end\n    return s\n\
    end", "    local s = \"\"\n    while x > 0 do\n        local r = x % base\n  \
    \      x = (x - r) / base\n        s = s .. string.char(r + string.byte(\"0\"\
    ))\n    end\n    return s\nend", "    local s = ''\n    while x > 0 do\n     \
    \   local r = x % base\n        x = (x - r) / base\n        s = string.char(r\
    \ + 48) .. s\n    end\n    return s\nend", "    local result = \"\"\n    while\
    \ x > 0 do\n        local digit = x % base\n        result = result .. tostring(digit)\n\
    \        x = math.floor(x / base)\n    end\n    return result\nend", "    local\
    \ s = \"\"\n    while x > 0 do\n        local r = x % base\n        x = (x - r)\
    \ / base\n        s = s .. string.char(r + string.byte(\"0\"))\n    end\n    return\
    \ s\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
