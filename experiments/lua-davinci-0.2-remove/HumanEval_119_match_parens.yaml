name: HumanEval_119_match_parens
language: lua
prompt: "-- You are given a list of two strings, both strings consist of open\n--\
  \ parentheses '(' or close parentheses ')' only.\n-- Your job is to check if it\
  \ is possible to concatenate the two strings in\n-- some order, that the resulting\
  \ string will be good.\n-- A string S is considered to be good if and only if all\
  \ parentheses in S\n-- are balanced. For example: the string '(())()' is good, while\
  \ the string\n-- '())' is not.\n-- Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n-- Examples:\nlocal function match_parens(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n\
  \    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')',\
  \ ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n  \
  \  lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))',\
  \ '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n  \
  \  lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((',\
  \ '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n   \
  \ lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(',\
  \ ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local stack = {}\n  for i = 1, #lst do\n    local c = lst:sub(i,\
    \ i)\n    if c == '(' then\n      table.insert(stack, c)\n    else\n      if #stack\
    \ == 0 then\n        return false\n      end\n      table.remove(stack)\n    end\n\
    \  end\n  return #stack == 0\nend", "  local stack = {}\n  for i = 1, #lst do\n\
    \    local c = lst:sub(i, i)\n    if c == '(' then\n      table.insert(stack,\
    \ c)\n    else\n      if #stack == 0 then\n        return false\n      end\n \
    \     table.remove(stack)\n    end\n  end\n  return #stack == 0\nend", "    local\
    \ stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i, i)\n      \
    \  if c == '(' then\n            table.insert(stack, c)\n        else\n      \
    \      if #stack == 0 then\n                return false\n            end\n  \
    \          table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, v in ipairs(lst) do\n        if v == '('\
    \ then\n            table.insert(stack, v)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for i = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n\
    \            table.insert(stack, c)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for i = 1, #lst do\n        local\
    \ c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for i = 1, #lst do\n        local\
    \ c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "  local stack = {}\n  for i = 1, #lst do\n    local c = lst:sub(i, i)\n\
    \    if c == '(' then\n      table.insert(stack, c)\n    else\n      if #stack\
    \ == 0 then\n        return false\n      end\n      table.remove(stack)\n    end\n\
    \  end\n  return #stack == 0\nend", "    local stack = {}\n    for i = 1, #lst\
    \ do\n        local c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local stack = {}\n  for _, c in ipairs(lst) do\n    if\
    \ c == '(' then\n      table.insert(stack, c)\n    elseif c == ')' then\n    \
    \  if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "  local function helper(lst, acc)\n\
    \    if #lst == 0 then\n      return acc == 0\n    elseif lst[1] == '(' then\n\
    \      return helper(lst:sub(2), acc + 1)\n    else\n      return acc > 0 and\
    \ helper(lst:sub(2), acc - 1)\n    end\n  end\n  return helper(lst, 0)\nend",
  "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '(' then\n\
    \            table.insert(stack, c)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
