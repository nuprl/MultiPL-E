name: HumanEval_119_match_parens
language: lua
prompt: "-- You are given a list of two strings, both strings consist of open\n--\
  \ parentheses '(' or close parentheses ')' only.\n-- Your job is to check if it\
  \ is possible to concatenate the two strings in\n-- some order, that the resulting\
  \ string will be good.\n-- A string S is considered to be good if and only if all\
  \ parentheses in S\n-- are balanced. For example: the string '(())()' is good, while\
  \ the string\n-- '())' is not.\n-- Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n-- Examples:\nlocal function match_parens(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n\
  \    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')',\
  \ ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n  \
  \  lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))',\
  \ '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n  \
  \  lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((',\
  \ '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n   \
  \ lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(',\
  \ ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local stack = {}\n  for i = 1, #lst do\n    local c = lst:sub(i,\
    \ i)\n    if c == '(' then\n      table.insert(stack, c)\n    else\n      if #stack\
    \ == 0 then\n        return false\n      end\n      table.remove(stack)\n    end\n\
    \  end\n  return #stack == 0\nend", "  local stack = {}\n  for i = 1, #lst do\n\
    \    local c = lst:sub(i, i)\n    if c == '(' then\n      table.insert(stack,\
    \ c)\n    else\n      if #stack == 0 then\n        return false\n      end\n \
    \     table.remove(stack)\n    end\n  end\n  return #stack == 0\nend", "    local\
    \ stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i, i)\n      \
    \  if c == '(' then\n            table.insert(stack, c)\n        else\n      \
    \      if #stack == 0 then\n                return false\n            end\n  \
    \          table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, v in ipairs(lst) do\n        if v == '('\
    \ then\n            table.insert(stack, v)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for i = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n\
    \            table.insert(stack, c)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for i = 1, #lst do\n        local\
    \ c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for i = 1, #lst do\n        local\
    \ c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "  local stack = {}\n  for i = 1, #lst do\n    local c = lst:sub(i, i)\n\
    \    if c == '(' then\n      table.insert(stack, c)\n    else\n      if #stack\
    \ == 0 then\n        return false\n      end\n      table.remove(stack)\n    end\n\
    \  end\n  return #stack == 0\nend", "    local stack = {}\n    for i = 1, #lst\
    \ do\n        local c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local stack = {}\n  for _, c in ipairs(lst) do\n    if\
    \ c == '(' then\n      table.insert(stack, c)\n    elseif c == ')' then\n    \
    \  if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "  local function helper(lst, acc)\n\
    \    if #lst == 0 then\n      return acc == 0\n    elseif lst[1] == '(' then\n\
    \      return helper(lst:sub(2), acc + 1)\n    else\n      return acc > 0 and\
    \ helper(lst:sub(2), acc - 1)\n    end\n  end\n  return helper(lst, 0)\nend",
  "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '(' then\n\
    \            table.insert(stack, c)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "  local stack = {}\n  for\
    \ _, p in ipairs(lst) do\n    if p == '(' then\n      table.insert(stack, p)\n\
    \    else\n      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "  local stack = {}\n  for _, v in\
    \ ipairs(lst) do\n    if v == '(' then\n      table.insert(stack, v)\n    else\n\
    \      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "    local stack = {}\n    for i\
    \ = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n  \
    \          table.insert(stack, c)\n        else\n            if #stack == 0 then\n\
    \                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "  local stack = {}\n  for\
    \ _, c in ipairs(lst) do\n    if c == '(' then\n      table.insert(stack, c)\n\
    \    else\n      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "    local stack = {}\n    for i\
    \ = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n  \
    \          table.insert(stack, c)\n        else\n            if #stack == 0 then\n\
    \                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for i = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n\
    \            table.insert(stack, c)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local count = 0\n  for _, v in ipairs(lst) do\n    if\
    \ v == '(' then\n      count = count + 1\n    else\n      count = count - 1\n\
    \    end\n    if count < 0 then\n      return false\n    end\n  end\n  return\
    \ count == 0\nend", "    local stack = {}\n    for i = 1, #lst do\n        local\
    \ c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for i = 1, #lst do\n        local\
    \ c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for i = 1, #lst do\n        local\
    \ c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for i = 1, #lst do\n        local\
    \ c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local function aux(lst, acc)\n        if not lst then return acc ==\
    \ 0 end\n        local c = lst[1]\n        if c == '(' then\n            return\
    \ aux(lst[2], acc + 1)\n        elseif c == ')' then\n            return aux(lst[2],\
    \ acc - 1)\n        end\n    end\n    return aux(lst, 0)\nend", "    local stack\
    \ = {}\n    for _, v in ipairs(lst) do\n        if v == '(' then\n           \
    \ table.insert(stack, v)\n        else\n            if #stack == 0 then\n    \
    \            return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, v in ipairs(lst) do\n \
    \       if v == '(' then\n            table.insert(stack, v)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for i = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n\
    \            table.insert(stack, c)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "  local stack = {}\n  for\
    \ i = 1, #lst do\n    local c = lst:sub(i, i)\n    if c == '(' then\n      table.insert(stack,\
    \ c)\n    else\n      if #stack == 0 then\n        return false\n      end\n \
    \     table.remove(stack)\n    end\n  end\n  return #stack == 0\nend", "    local\
    \ stack = {}\n    for _, c in ipairs(lst) do\n        if c == '(' then\n     \
    \       table.insert(stack, c)\n        else\n            if #stack == 0 then\n\
    \                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local stack = {}\n  for _, c in ipairs(lst) do\n    if\
    \ c == '(' then\n      table.insert(stack, c)\n    else\n      if #stack == 0\
    \ then\n        return false\n      end\n      table.remove(stack)\n    end\n\
    \  end\n  return #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst)\
    \ do\n        if p == '(' then\n            table.insert(stack, p)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local stack = {}\n  for _, c in ipairs(lst) do\n    if\
    \ c == '(' then\n      table.insert(stack, c)\n    else\n      if #stack == 0\
    \ then\n        return false\n      end\n      table.remove(stack)\n    end\n\
    \  end\n  return #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst)\
    \ do\n        if p == '(' then\n            table.insert(stack, p)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for i = 1, #lst do\n        local\
    \ c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for i = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n\
    \            table.insert(stack, c)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, v in ipairs(lst) do\n        if v == '(' then\n            table.insert(stack,\
    \ v)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "  local stack = {}\n  for i = 1, #lst do\n    local c = lst:sub(i, i)\n\
    \    if c == '(' then\n      table.insert(stack, c)\n    else\n      if #stack\
    \ == 0 then\n        return false\n      end\n      table.remove(stack)\n    end\n\
    \  end\n  return #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst)\
    \ do\n        if p == '(' then\n            table.insert(stack, p)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local count = 0\n  \
    \  for _, c in ipairs(lst) do\n        if c == '(' then\n            count = count\
    \ + 1\n        else\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c\
    \ == '(' then\n            table.insert(stack, c)\n        else\n            if\
    \ #stack == 0 then\n                return false\n            end\n          \
    \  table.remove(stack)\n        end\n    end\n    return #stack == 0\nend", " \
    \   local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '(' then\n\
    \            table.insert(stack, p)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "  local stack = {}\n  for\
    \ _, p in ipairs(lst) do\n    if p == '(' then\n      table.insert(stack, p)\n\
    \    else\n      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "    local stack = {}\n    for i\
    \ = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n  \
    \          table.insert(stack, c)\n        else\n            if #stack == 0 then\n\
    \                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for i = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n\
    \            table.insert(stack, c)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local stack = {}\n  for i = 1, #lst do\n    local c =\
    \ lst:sub(i, i)\n    if c == '(' then\n      stack[#stack + 1] = c\n    else\n\
    \      if #stack == 0 then\n        return false\n      end\n      stack[#stack]\
    \ = nil\n    end\n  end\n  return #stack == 0\nend", "  local stack = {}\n  for\
    \ i = 1, #lst do\n    local c = lst:sub(i, i)\n    if c == '(' then\n      table.insert(stack,\
    \ c)\n    else\n      if #stack == 0 then\n        return false\n      end\n \
    \     table.remove(stack)\n    end\n  end\n  return #stack == 0\nend", "    local\
    \ stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i, i)\n      \
    \  if c == '(' then\n            table.insert(stack, c)\n        else\n      \
    \      if #stack == 0 then\n                return false\n            end\n  \
    \          table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "  local stack = {}\n  for _, p in ipairs(lst) do\n    if p == '(' then\n\
    \      table.insert(stack, p)\n    else\n      if #stack == 0 then\n        return\
    \ false\n      end\n      table.remove(stack)\n    end\n  end\n  return #stack\
    \ == 0\nend", "    local function helper(lst, acc)\n        if #lst == 0 then\n\
    \            return acc == 0\n        elseif lst[1] == '(' then\n            return\
    \ helper(lst:sub(2), acc + 1)\n        else\n            return acc > 0 and helper(lst:sub(2),\
    \ acc - 1)\n        end\n    end\n    return helper(lst, 0)\nend", "    local\
    \ stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i, i)\n      \
    \  if c == '(' then\n            table.insert(stack, c)\n        else\n      \
    \      if #stack == 0 then\n                return false\n            end\n  \
    \          table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for i = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n\
    \            table.insert(stack, c)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "  local stack = {}\n  for\
    \ _, p in ipairs(lst) do\n    if p == '(' then\n      table.insert(stack, p)\n\
    \    else\n      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "    local stack = {}\n    for _,\
    \ c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "  local stack = {}\n  for _, p in ipairs(lst) do\n    if p == '(' then\n\
    \      table.insert(stack, p)\n    elseif #stack > 0 then\n      table.remove(stack)\n\
    \    else\n      return false\n    end\n  end\n  return #stack == 0\nend", " \
    \   local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '(' then\n\
    \            table.insert(stack, p)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, v in ipairs(lst) do\n \
    \       if v == '(' then\n            table.insert(stack, v)\n        else\n \
    \           local top = table.remove(stack)\n            if top == nil then\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, v in ipairs(lst) do\n        if v == '(' then\n            table.insert(stack,\
    \ v)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "  local stack = {}\n  for i = 1, #lst do\n    local c = lst:sub(i, i)\n\
    \    if c == '(' then\n      table.insert(stack, c)\n    else\n      if #stack\
    \ == 0 then\n        return false\n      end\n      table.remove(stack)\n    end\n\
    \  end\n  return #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst)\
    \ do\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local count = 0\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            count = count + 1\n        else\n            count = count\
    \ - 1\n        end\n        if count < 0 then\n            return false\n    \
    \    end\n    end\n    return count == 0\nend", "    local stack = {}\n    for\
    \ _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local stack = {}\n  for i = 1, #lst do\n    local c =\
    \ lst:sub(i, i)\n    if c == '(' then\n      table.insert(stack, c)\n    else\n\
    \      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "  local stack = {}\n  for _, c in\
    \ ipairs(lst) do\n    if c == '(' then\n      table.insert(stack, c)\n    else\n\
    \      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "    local stack = {}\n    for _,\
    \ c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for i = 1, #lst do\n        local\
    \ c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, v in ipairs(lst) do\n \
    \       if v == '(' then\n            table.insert(stack, v)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local function match(lst, n)\n        if n < 0 then\
    \ return false end\n        if #lst == 0 then return n == 0 end\n        if lst[1]\
    \ == '(' then return match(lst:sub(2), n + 1) end\n        return match(lst:sub(2),\
    \ n - 1)\n    end\n    return match(lst[1], 0) and match(lst[2], 0)\nend\nassert(match_parens{'(())',\
    \ '()'} == true)\nassert(match_parens{'()', '()()'} == true)\nassert(match_parens{'()',\
    \ ')('} == false)\nassert(match_parens{'()', ')(()'} == false)\nassert(match_parens{'()',\
    \ '())('} == false)\nassert(match_parens{'()', '())(()'} == false)\nassert(match_parens{'()',\
    \ '())(())(()'} == false)\nassert(match_parens{'()', '())(())(())(()'} == false)\n\
    assert(match_parens{'()', '())(())(())(())(()'} == false)\nassert(match_parens{'()',\
    \ '())(())(())(())(())(()'} == false)\nassert(match_parens{'()', '())(())(())(())(())(())(()'}\
    \ == false)\nassert(match_parens{'()', '())(())(())(())(())(())(())(()'} == false)\n\
    assert(match_parens{'()', '())(())(())(())(())(())(())(())(()'} == false)\nassert(match_parens{'()',\
    \ '())(())(())(())(())(())(())(())(())(()'} == false)\nassert(match_parens{'()',\
    \ '())(())(())(())(())(())(())(())(())(())(()'} == false)\nassert(match_parens{'()',\
    \ '())(())(())(())(())(()", "    local stack = {}\n    for _, c in ipairs(lst)\
    \ do\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local stack = {}\n  for i = 1, #lst do\n    local c =\
    \ lst:sub(i, i)\n    if c == '(' then\n      table.insert(stack, c)\n    else\n\
    \      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "    local stack = {}\n    for _,\
    \ c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, p in ipairs(lst) do\n \
    \       if p == '(' then\n            table.insert(stack, p)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local function is_good(s)\n        local n = 0\n        for i = 1,\
    \ #s do\n            if s:sub(i, i) == '(' then\n                n = n + 1\n \
    \           else\n                n = n - 1\n            end\n            if n\
    \ < 0 then\n                return false\n            end\n        end\n     \
    \   return n == 0\n    end\n    return is_good(lst[1] .. lst[2]) and 'Yes' or\
    \ 'No'\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if\
    \ c == '(' then\n            table.insert(stack, c)\n        else\n          \
    \  if #stack == 0 then\n                return false\n            end\n      \
    \      table.remove(stack)\n        end\n    end\n    return #stack == 0\nend",
  "    local stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i, i)\n\
    \        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for i = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n\
    \            table.insert(stack, c)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "  local stack = {}\n  for\
    \ i = 1, #lst do\n    local c = lst:sub(i, i)\n    if c == '(' then\n      table.insert(stack,\
    \ c)\n    else\n      if #stack == 0 then\n        return false\n      end\n \
    \     table.remove(stack)\n    end\n  end\n  return #stack == 0\nend", "    local\
    \ stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i, i)\n      \
    \  if c == '(' then\n            table.insert(stack, c)\n        else\n      \
    \      if #stack == 0 then\n                return false\n            end\n  \
    \          table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, v in ipairs(lst) do\n        if v == '('\
    \ then\n            table.insert(stack, v)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "  local stack = {}\n  for\
    \ _, v in ipairs(lst) do\n    if v == '(' then\n      table.insert(stack, v)\n\
    \    else\n      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "    local stack = {}\n    for _,\
    \ c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for i = 1, #lst do\n        local c = lst:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "  local stack = {}\n  for\
    \ i = 1, #lst do\n    local c = lst:sub(i, i)\n    if c == '(' then\n      table.insert(stack,\
    \ c)\n    else\n      if #stack == 0 then\n        return false\n      end\n \
    \     table.remove(stack)\n    end\n  end\n  return #stack == 0\nend", "  local\
    \ stack = {}\n  for _, v in ipairs(lst) do\n    if v == '(' then\n      table.insert(stack,\
    \ v)\n    else\n      if #stack == 0 then\n        return false\n      end\n \
    \     table.remove(stack)\n    end\n  end\n  return #stack == 0\nend", "    local\
    \ stack = {}\n    for _, p in ipairs(lst) do\n        if p == '(' then\n     \
    \       table.insert(stack, p)\n        else\n            if #stack == 0 then\n\
    \                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local stack = {}\n  for _, c in ipairs(lst) do\n    if\
    \ c == '(' then\n      table.insert(stack, c)\n    elseif c == ')' then\n    \
    \  if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "    local stack = {}\n    for _,\
    \ p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for i = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n\
    \            table.insert(stack, c)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local stack = {}\n  for _, c in ipairs(lst) do\n    if\
    \ c == '(' then\n      table.insert(stack, c)\n    else\n      if #stack == 0\
    \ then\n        return false\n      end\n      table.remove(stack)\n    end\n\
    \  end\n  return #stack == 0\nend", "    local stack = {}\n    for i = 1, #lst\
    \ do\n        local c = lst:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local stack = {}\n  for _, v in ipairs(lst) do\n    if\
    \ v == '(' then\n      table.insert(stack, v)\n    else\n      if #stack == 0\
    \ then\n        return false\n      end\n      table.remove(stack)\n    end\n\
    \  end\n  return #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst)\
    \ do\n        if c == '(' then\n            table.insert(stack, c)\n        else\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for _, p in ipairs(lst) do\n        if p == '('\
    \ then\n            table.insert(stack, p)\n        else\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n \
    \       if c == '(' then\n            table.insert(stack, c)\n        else\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "  local stack = {}\n  for _, c in ipairs(lst) do\n    if c == '(' then\n\
    \      table.insert(stack, c)\n    else\n      if #stack == 0 then\n        return\
    \ false\n      end\n      table.remove(stack)\n    end\n  end\n  return #stack\
    \ == 0\nend", "    local stack = {}\n    for _, c in ipairs(lst) do\n        if\
    \ c == '(' then\n            table.insert(stack, c)\n        else\n          \
    \  if #stack == 0 then\n                return false\n            end\n      \
    \      table.remove(stack)\n        end\n    end\n    return #stack == 0\nend",
  "    local stack = {}\n    for _, c in ipairs(lst) do\n        if c == '(' then\n\
    \            table.insert(stack, c)\n        else\n            if #stack == 0\
    \ then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, c in ipairs(lst) do\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local stack = {}\n  for i = 1, #lst do\n    local c =\
    \ lst:sub(i, i)\n    if c == '(' then\n      table.insert(stack, c)\n    else\n\
    \      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "    local stack = {}\n    for i\
    \ = 1, #lst do\n        local c = lst:sub(i, i)\n        if c == '(' then\n  \
    \          table.insert(stack, c)\n        else\n            if #stack == 0 then\n\
    \                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local stack = {}\n \
    \   for _, p in ipairs(lst) do\n        if p == '(' then\n            table.insert(stack,\
    \ p)\n        else\n            if #stack == 0 then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
