name: HumanEval_5_intersperse
language: lua
prompt: "-- Insert a number 'delimeter' between every two consecutive elements of\
  \ input list `numbers'\nlocal function intersperse(numbers, delimeter)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
  \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5, 6,\
  \ 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2),\
  \ {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend", "\tlocal result = {}\n\tfor i =\
    \ 1, #numbers do\n\t\tresult[#result + 1] = numbers[i]\n\t\tif i ~= #numbers then\n\
    \t\t\tresult[#result + 1] = delimeter\n\t\tend\n\tend\n\treturn result\nend",
  "    local result = {}\n    for i = 1, #numbers do\n        if i > 1 then\n    \
    \        table.insert(result, delimeter)\n        end\n        table.insert(result,\
    \ numbers[i])\n    end\n    return result\nend", "\tlocal result = {}\n\tfor i,\
    \ v in ipairs(numbers) do\n\t\tresult[#result + 1] = v\n\t\tif i < #numbers then\n\
    \t\t\tresult[#result + 1] = delimeter\n\t\tend\n\tend\n\treturn result\nend",
  "    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend", "\tlocal result = {}\n\tfor i =\
    \ 1, #numbers do\n\t\tresult[#result + 1] = numbers[i]\n\t\tif i < #numbers then\n\
    \t\t\tresult[#result + 1] = delimeter\n\t\tend\n\tend\n\treturn result\nend",
  "\tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tresult[#result + 1] = numbers[i]\n\
    \t\tif i < #numbers then\n\t\t\tresult[#result + 1] = delimeter\n\t\tend\n\tend\n\
    \treturn result\nend", "    local result = {}\n    for i, number in ipairs(numbers)\
    \ do\n        if i > 1 then\n            table.insert(result, delimeter)\n   \
    \     end\n        table.insert(result, number)\n    end\n    return result\n\
    end", "  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result +\
    \ 1] = numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result\
    \ + 1] = numbers[#numbers]\n  return result\nend", "  local result = {}\n  for\
    \ i = 1, #numbers - 1 do\n    table.insert(result, numbers[i])\n    table.insert(result,\
    \ delimeter)\n  end\n  table.insert(result, numbers[#numbers])\n  return result\n\
    end", "    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend", "    local result = {}\n\
    \    for i = 1, #numbers do\n        if i > 1 then\n            table.insert(result,\
    \ delimeter)\n        end\n        table.insert(result, numbers[i])\n    end\n\
    \    return result\nend", "\tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\
    \t\tresult[#result + 1] = numbers[i]\n\t\tresult[#result + 1] = delimeter\n\t\
    end\n\tresult[#result + 1] = numbers[#numbers]\n\treturn result\nend", "    local\
    \ result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result, numbers[i])\n\
    \        table.insert(result, delimeter)\n    end\n    table.insert(result, numbers[#numbers])\n\
    \    return result\nend", "    local result = {}\n    for i = 1, #numbers do\n\
    \        result[#result + 1] = numbers[i]\n        if i < #numbers then\n    \
    \        result[#result + 1] = delimeter\n        end\n    end\n    return result\n\
    end", "\tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\ttable.insert(result,\
    \ numbers[i])\n\t\ttable.insert(result, delimeter)\n\tend\n\ttable.insert(result,\
    \ numbers[#numbers])\n\treturn result\nend", "    local result = {}\n    for i,\
    \ v in ipairs(numbers) do\n        if i > 1 then\n            table.insert(result,\
    \ delimeter)\n        end\n        table.insert(result, v)\n    end\n    return\
    \ result\nend", "    local result = {}\n    for i = 1, #numbers do\n        if\
    \ i > 1 then\n            table.insert(result, delimeter)\n        end\n     \
    \   table.insert(result, numbers[i])\n    end\n    return result\nend", "    local\
    \ result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result, numbers[i])\n\
    \        table.insert(result, delimeter)\n    end\n    table.insert(result, numbers[#numbers])\n\
    \    return result\nend", "\tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\
    \t\tresult[#result + 1] = numbers[i]\n\t\tresult[#result + 1] = delimeter\n\t\
    end\n\tresult[#result + 1] = numbers[#numbers]\n\treturn result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
