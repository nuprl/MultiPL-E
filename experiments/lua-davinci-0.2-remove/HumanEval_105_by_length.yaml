name: HumanEval_105_by_length
language: lua
prompt: "-- Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n-- reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length([2, 1,\
  \ 1, 4, 5, 8, 2, 3])   \n-- [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
  \ \"Two\", \"One\", \"One\"]\n-- If the array is empty, return an empty array:\n\
  -- If the array has any strange number ignore it:\n-- >>> by_length([1, -1 , 55])\
  \ \n-- ['One']\nlocal function by_length(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
  \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
  \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
  \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
  \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
  \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    local numbers = {\n        [1] = \"One\"\
    ,\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n\
    \        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n \
    \       [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n\
    \        if arr[i] >= 1 and arr[i] <= 9 then\n            result[#result + 1]\
    \ = numbers[arr[i]]\n        end\n    end\n    return result\nend", "  local res\
    \ = {}\n  local map = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"\
    Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7]\
    \ = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for i = 1, #arr\
    \ do\n    local v = arr[i]\n    if v >= 1 and v <= 9 then\n      res[#res + 1]\
    \ = v\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i] = map[res[i]]\n\
    \  end\n  return res\nend", "    local result = {}\n    local numbers = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ numbers[v])\n        end\n    end\n    table.sort(result, function(a, b) return\
    \ #a > #b end)\n    return result\nend", "  local res = {}\n  local nums = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i =\
    \ 1, #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n      res[#res + 1] = nums[arr[i]]\n\
    \    end\n  end\n  return res\nend", "  local result = {}\n  local numbers = {\n\
    \    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\"\
    ,\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"\
    Eight\",\n    [9] = \"Nine\"\n  }\n  for i = 1, #arr do\n    if arr[i] >= 1 and\
    \ arr[i] <= 9 then\n      table.insert(result, numbers[arr[i]])\n    end\n  end\n\
    \  table.sort(result)\n  table.reverse(result)\n  return result\nend", "    local\
    \ result = {}\n    local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'}\n    for i, v in ipairs(arr) do\n        if v >= 1\
    \ and v <= 9 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result, function(a, b) return #a > #b end)\n    return\
    \ result\nend", "  local result = {}\n  local numbers = {\n    [1] = \"One\",\n\
    \    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\"\
    ,\n    [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"\
    Nine\"\n  }\n  for i, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n   \
    \   table.insert(result, numbers[v])\n    end\n  end\n  table.sort(result)\n \
    \ local reversed = {}\n  for i = #result, 1, -1 do\n    table.insert(reversed,\
    \ result[i])\n  end\n  return reversed\nend", "    local res = {}\n    local map\
    \ = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\"\
    ,\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n\
    \        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n\
    \    }\n    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(res, v)\n        end\n    end\n    table.sort(res)\n \
    \   for i, v in ipairs(res) do\n        res[i] = map[v]\n    end\n    return res\n\
    end", "    local new_arr = {}\n    local dict = {\n        [1] = \"One\",\n  \
    \      [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n   \
    \     [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n    \
    \    [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n\
    \        if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(new_arr,\
    \ arr[i])\n        end\n    end\n    table.sort(new_arr)\n    for i = 1, #new_arr\
    \ do\n        new_arr[i] = dict[new_arr[i]]\n    end\n    return new_arr\nend",
  "    local result = {}\n    local numbers = {'One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'}\n    for i = 1, #arr do\n        if arr[i]\
    \ > 0 and arr[i] < 10 then\n            result[#result + 1] = numbers[arr[i]]\n\
    \        end\n    end\n    return result\nend", "  local res = {}\n  local map\
    \ = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] =\
    \ \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\",\n \
    \   [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for _, v in ipairs(arr) do\n\
    \    if v >= 1 and v <= 9 then\n      table.insert(res, v)\n    end\n  end\n \
    \ table.sort(res)\n  for i = 1, #res do\n    res[i] = map[res[i]]\n  end\n  return\
    \ res\nend", "  local result = {}\n  local numbers = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i = 1, #arr do\n    if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n      result[#result + 1] = numbers[arr[i]]\n   \
    \ end\n  end\n  return result\nend", "    local result = {}\n    local numbers\
    \ = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   result[#result + 1] = numbers[v]\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local numbers = {\n        [1] = \"One\",\n\
    \        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n \
    \       [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n  \
    \      [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 and v < 10 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    return result\nend", "    local res = {}\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    local res2 = {}\n    for\
    \ i = #res, 1, -1 do\n        table.insert(res2, res[i])\n    end\n    local res3\
    \ = {}\n    for _, v in ipairs(res2) do\n        table.insert(res3, tostring(v))\n\
    \    end\n    return res3\nend", "    local res = {}\n    local map = {\n    \
    \    [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n      \
    \  [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7]\
    \ = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for\
    \ i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    for i, v in ipairs(res) do\n\
    \        res[i] = map[v]\n    end\n    return res\nend", "  local result = {}\n\
    \  for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      result[#result\
    \ + 1] = v\n    end\n  end\n  table.sort(result)\n  for i, v in ipairs(result)\
    \ do\n    result[i] = names[v]\n  end\n  return result\nend", "  local res = {}\n\
    \  local map = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\"\
    ,\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"\
    Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for i, v in ipairs(arr)\
    \ do\n    if v >= 1 and v <= 9 then\n      table.insert(res, v)\n    end\n  end\n\
    \  table.sort(res)\n  for i, v in ipairs(res) do\n    res[i] = map[v]\n  end\n\
    \  return res\nend", "  local res = {}\n  local map = {\n    [1] = \"One\",\n\
    \    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\"\
    ,\n    [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"\
    Nine\"\n  }\n  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n \
    \     res[#res + 1] = map[arr[i]]\n    end\n  end\n  return res\nend", "  local\
    \ res = {}\n  local map = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] =\
    \ \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n \
    \   [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for _,\
    \ v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      res[#res + 1] = map[v]\n\
    \    end\n  end\n  return res\nend", "    local result = {}\n    local map = {\n\
    \        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n  \
    \      [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n    \
    \    [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result / 2 do\n        result[i], result[#result - i + 1] = result[#result\
    \ - i + 1], result[i]\n    end\n    for i, v in ipairs(result) do\n        result[i]\
    \ = map[v]\n    end\n    return result\nend", "    local result = {}\n    local\
    \ numbers = {\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n    \
    \    if v >= 1 and v <= 9 then\n            result[#result + 1] = numbers[v]\n\
    \        end\n    end\n    table.sort(result)\n    for i = 1, math.floor(#result\
    \ / 2) do\n        result[i], result[#result - i + 1] = result[#result - i + 1],\
    \ result[i]\n    end\n    return result\nend", "    local result = {}\n    local\
    \ numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n        \
    \    result[#result + 1] = numbers[arr[i]]\n        end\n    end\n    return result\n\
    end", "    local res = {}\n    local map = {\n        [1] = \"One\",\n       \
    \ [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5]\
    \ = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] =\
    \ \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n        if\
    \ arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(res, arr[i])\n  \
    \      end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i]\
    \ = map[res[i]]\n    end\n    return res\nend", "  local result = {}\n  for i,\
    \ v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  local names = {\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  for\
    \ i, v in ipairs(result) do\n    result[i] = names[v]\n  end\n  return result\n\
    end", "    local result = {}\n    local numbers = {\n        [1] = \"One\",\n\
    \        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n \
    \       [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n  \
    \      [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 and v < 10 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend", "    local\
    \ t = {}\n    local d = {\n        [1] = \"One\",\n        [2] = \"Two\",\n  \
    \      [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n  \
    \      [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n  \
    \      [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v > 0\
    \ and v < 10 then\n            table.insert(t, v)\n        end\n    end\n    table.sort(t)\n\
    \    for i = 1, #t do\n        t[i] = d[t[i]]\n    end\n    return t\nend", " \
    \   local function sort_func(a, b)\n        return a < b\n    end\n    local function\
    \ filter_func(a)\n        return a >= 1 and a <= 9\n    end\n    local function\
    \ map_func(a)\n        return {\n            [1] = \"One\",\n            [2] =\
    \ \"Two\",\n            [3] = \"Three\",\n            [4] = \"Four\",\n      \
    \      [5] = \"Five\",\n            [6] = \"Six\",\n            [7] = \"Seven\"\
    ,\n            [8] = \"Eight\",\n            [9] = \"Nine\"\n        }[a]\n  \
    \  end\n    local function reverse_func(a, b)\n        return a > b\n    end\n\
    \    return table.sort(table.map(table.filter(arr, filter_func), map_func), reverse_func)\n\
    end", "    local result = {}\n    local numbers = {\n        [1] = \"One\",\n\
    \        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n \
    \       [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n  \
    \      [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n\
    \        if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(result,\
    \ numbers[arr[i]])\n        end\n    end\n    table.sort(result)\n    local reversed\
    \ = {}\n    for i = #result, 1, -1 do\n        table.insert(reversed, result[i])\n\
    \    end\n    return reversed\nend", "  local res = {}\n  local map = {\n    [1]\
    \ = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n\
    \    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\"\
    ,\n    [9] = \"Nine\"\n  }\n  for _, v in ipairs(arr) do\n    if v >= 1 and v\
    \ <= 9 then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n \
    \ for i, v in ipairs(res) do\n    res[i] = map[v]\n  end\n  return res\nend",
  "    local result = {}\n    local numbers = {\n        [1] = \"One\",\n        [2]\
    \ = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] =\
    \ \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"\
    Eight\",\n        [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n    \
    \    if v >= 1 and v <= 9 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    table.sort(result)\n    table.reverse(result)\n   \
    \ return result\nend", "  local result = {}\n  local numbers = {'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i, v in ipairs(arr)\
    \ do\n    if v > 0 and v < 10 then\n      table.insert(result, numbers[v])\n \
    \   end\n  end\n  table.sort(result, function(a, b) return #a > #b end)\n  return\
    \ result\nend", "    local res = {}\n    local map = {\n        [1] = \"One\"\
    ,\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n\
    \        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n \
    \       [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n  \
    \      end\n    end\n    table.sort(res)\n    for i, v in ipairs(res) do\n   \
    \     res[i] = map[v]\n    end\n    return res\nend", "    local result = {}\n\
    \    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n     \
    \   [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n     \
    \   [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n     \
    \   [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v > 0 and\
    \ v < 10 then\n            table.insert(result, numbers[v])\n        end\n   \
    \ end\n    table.sort(result)\n    return result\nend", "    local result = {}\n\
    \    local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for i = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n\
    \            result[#result + 1] = numbers[arr[i]]\n        end\n    end\n   \
    \ return result\nend", "  local function sort_by_length(a, b)\n    return #a <\
    \ #b\n  end\n  local function replace_by_name(a)\n    local names = {'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    return names[a]\n\
    \  end\n  local function is_valid(a)\n    return a >= 1 and a <= 9\n  end\n  local\
    \ function filter_valid(a)\n    return is_valid(a)\n  end\n  local function map_replace(a)\n\
    \    return replace_by_name(a)\n  end\n  return arr\n    :filter(filter_valid)\n\
    \    :sort(sort_by_length)\n    :reverse()\n    :map(map_replace)\nend", "   \
    \ local result = {}\n    local numbers = {'One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'}\n    for i, v in ipairs(arr) do\n        if\
    \ v > 0 and v < 10 then\n            table.insert(result, numbers[v])\n      \
    \  end\n    end\n    table.sort(result)\n    table.reverse(result)\n    return\
    \ result\nend", "    local function sort_numbers(a, b)\n        return a < b\n\
    \    end\n    local function reverse_array(arr)\n        local reversed_arr =\
    \ {}\n        for i = #arr, 1, -1 do\n            table.insert(reversed_arr, arr[i])\n\
    \        end\n        return reversed_arr\n    end\n    local function replace_numbers(arr)\n\
    \        local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'}\n        for i = 1, #arr do\n            arr[i] = numbers[arr[i]]\n\
    \        end\n        return arr\n    end\n    local function filter_numbers(arr)\n\
    \        local filtered_arr = {}\n        for i = 1, #arr do\n            if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n                table.insert(filtered_arr, arr[i])\n\
    \            end\n        end\n        return filtered_arr\n    end\n    local\
    \ filtered_arr = filter_numbers(arr)\n    table.sort(filtered_arr, sort_numbers)\n\
    \    local reversed_arr = reverse_array(filtered_arr)\n    local replaced_arr\
    \ = replace_numbers(reversed_arr)\n    return replaced_arr\nend", "    local result\
    \ = {}\n    local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'}\n    for i, v in ipairs(arr) do\n        if v > 0 and v < 10\
    \ then\n            table.insert(result, numbers[v])\n        end\n    end\n \
    \   table.sort(result)\n    return result\nend", "  local res = {}\n  local nums\
    \ = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \  for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      res[#res +\
    \ 1] = nums[v]\n    end\n  end\n  table.sort(res)\n  local res2 = {}\n  for i\
    \ = #res, 1, -1 do\n    res2[#res2 + 1] = res[i]\n  end\n  return res2\nend",
  "    local res = {}\n    local map = {\n        [1] = \"One\",\n        [2] = \"\
    Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\"\
    ,\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    for i = 1, #res / 2 do\n        res[i], res[#res - i\
    \ + 1] = res[#res - i + 1], res[i]\n    end\n    for i = 1, #res do\n        res[i]\
    \ = map[res[i]]\n    end\n    return res\nend", "  local res = {}\n  local map\
    \ = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] =\
    \ \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\",\n \
    \   [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for _, v in ipairs(arr) do\n\
    \    if v >= 1 and v <= 9 then\n      table.insert(res, v)\n    end\n  end\n \
    \ table.sort(res)\n  for i = 1, #res / 2 do\n    res[i], res[#res - i + 1] = res[#res\
    \ - i + 1], res[i]\n  end\n  for i, v in ipairs(res) do\n    res[i] = map[v]\n\
    \  end\n  return res\nend", "    local result = {}\n    local nums = {\n     \
    \   [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n       \
    \ [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7]\
    \ = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for\
    \ i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ nums[v])\n        end\n    end\n    table.sort(result)\n    return result\n\
    end", "    local res = {}\n    local map = {\n        [1] = \"One\",\n       \
    \ [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5]\
    \ = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] =\
    \ \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n\
    \        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n       \
    \ end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i] =\
    \ map[res[i]]\n    end\n    return res\nend", "    local sorted = {}\n    local\
    \ result = {}\n    local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for i, v in ipairs(arr) do\n \
    \       if v >= 1 and v <= 9 then\n            table.insert(sorted, v)\n     \
    \   end\n    end\n    table.sort(sorted)\n    for i, v in ipairs(sorted) do\n\
    \        table.insert(result, 1, names[v])\n    end\n    return result\nend",
  "  local new_arr = {}\n  local names = {\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  for i,v in ipairs(arr) do\n\
    \    if v > 0 and v < 10 then\n      table.insert(new_arr, v)\n    end\n  end\n\
    \  table.sort(new_arr)\n  for i,v in ipairs(new_arr) do\n    new_arr[i] = names[v]\n\
    \  end\n  return new_arr\nend", "  local result = {}\n  local numbers = {\n  \
    \  [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\"\
    ,\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"\
    Eight\",\n    [9] = \"Nine\"\n  }\n  for _, v in ipairs(arr) do\n    if v >= 1\
    \ and v <= 9 then\n      table.insert(result, numbers[v])\n    end\n  end\n  return\
    \ result\nend", "    local result = {}\n    local numbers = {'One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i = 1, #arr do\n \
    \       if arr[i] > 0 and arr[i] < 10 then\n            result[#result + 1] =\
    \ numbers[arr[i]]\n        end\n    end\n    table.sort(result)\n    for i = 1,\
    \ #result / 2 do\n        result[i], result[#result - i + 1] = result[#result\
    \ - i + 1], result[i]\n    end\n    return result\nend", "  local result = {}\n\
    \  local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n  for i = 1, #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n    \
    \  result[#result + 1] = numbers[arr[i]]\n    end\n  end\n  return result\nend",
  "  local result = {}\n  local numbers = {\n    [1] = \"One\",\n    [2] = \"Two\"\
    ,\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"\
    Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n\
    \  for i = 1, #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n      result[#result\
    \ + 1] = numbers[arr[i]]\n    end\n  end\n  return result\nend", "    local res\
    \ = {}\n    local map = {\n        [1] = \"One\",\n        [2] = \"Two\",\n  \
    \      [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n  \
    \      [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n  \
    \      [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    for i = 1, #res do\n        res[i] = map[res[i]]\n \
    \   end\n    return res\nend", "    local result = {}\n    local numbers = {\n\
    \        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n  \
    \      [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n    \
    \    [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n        \
    \    result[#result + 1] = numbers[arr[i]]\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result / 2 do\n        result[i], result[#result - i + 1] = result[#result\
    \ - i + 1], result[i]\n    end\n    return result\nend", "  local res = {}\n \
    \ local map = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\",\n\
    \    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\"\
    ,\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for _, v in ipairs(arr) do\n\
    \    if v >= 1 and v <= 9 then\n      table.insert(res, v)\n    end\n  end\n \
    \ table.sort(res)\n  for i = 1, #res do\n    res[i] = map[res[i]]\n  end\n  return\
    \ res\nend", "    local result = {}\n    local map = {\n        [1] = \"One\"\
    ,\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n\
    \        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n \
    \       [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n\
    \        if arr[i] > 0 and arr[i] < 10 then\n            table.insert(result,\
    \ arr[i])\n        end\n    end\n    table.sort(result)\n    for i = 1, #result\
    \ do\n        result[i] = map[result[i]]\n    end\n    return result\nend", " \
    \   local result = {}\n    local numbers = {\n        [1] = \"One\",\n       \
    \ [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5]\
    \ = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] =\
    \ \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n\
    \        if v >= 1 and v <= 9 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend", "    local\
    \ function sort_by_length(a, b)\n        return a < b\n    end\n    local function\
    \ reverse_arr(arr)\n        local reversed_arr = {}\n        for i = #arr, 1,\
    \ -1 do\n            table.insert(reversed_arr, arr[i])\n        end\n       \
    \ return reversed_arr\n    end\n    local function replace_by_name(arr)\n    \
    \    local names = {\n            [1] = \"One\",\n            [2] = \"Two\",\n\
    \            [3] = \"Three\",\n            [4] = \"Four\",\n            [5] =\
    \ \"Five\",\n            [6] = \"Six\",\n            [7] = \"Seven\",\n      \
    \      [8] = \"Eight\",\n            [9] = \"Nine\"\n        }\n        local\
    \ new_arr = {}\n        for i = 1, #arr do\n            if names[arr[i]] then\n\
    \                table.insert(new_arr, names[arr[i]])\n            end\n     \
    \   end\n        return new_arr\n    end\n    local function filter_by_length(arr)\n\
    \        local new_arr = {}\n        for i = 1, #arr do\n            if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n                table.insert(new_arr, arr[i])\n \
    \           end\n        end\n        return new_arr\n    end\n    return replace_by_name(reverse_arr(table.sort(filter_by_length(arr),\
    \ sort_by_length)))\nend", "    local result = {}\n    local numbers = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i,\
    \ v in ipairs(arr) do\n        if v > 0 and v < 10 then\n            table.insert(result,\
    \ numbers[v])\n        end\n    end\n    table.sort(result)\n    return result\n\
    end", "  local result = {}\n  local map = {\n    [1] = \"One\",\n    [2] = \"\
    Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6]\
    \ = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n\
    \  }\n  for i, v in ipairs(arr) do\n    if map[v] then\n      table.insert(result,\
    \ map[v])\n    end\n  end\n  table.sort(result)\n  return result\nend", "    local\
    \ result = {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"\
    Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\"\
    ,\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local result =\
    \ {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n\
    \        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n        if arr[i] >= 1\
    \ and arr[i] <= 9 then\n            table.insert(result, numbers[arr[i]])\n  \
    \      end\n    end\n    table.sort(result)\n    return result\nend", "  local\
    \ res = {}\n  local map = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] =\
    \ \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n \
    \   [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for _,\
    \ v in ipairs(arr) do\n    if map[v] then\n      table.insert(res, map[v])\n \
    \   end\n  end\n  table.sort(res)\n  return res\nend", "  local result = {}\n\
    \  local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n  for _, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      table.insert(result,\
    \ numbers[v])\n    end\n  end\n  table.sort(result, function(a, b) return #a >\
    \ #b end)\n  return result\nend", "    local result = {}\n    local numbers =\
    \ {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n \
    \   for i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n           \
    \ table.insert(result, numbers[v])\n        end\n    end\n    table.sort(result,\
    \ function(a, b) return #a > #b end)\n    return result\nend", "    local res\
    \ = {}\n    local map = {\n        [1] = \"One\",\n        [2] = \"Two\",\n  \
    \      [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n  \
    \      [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n  \
    \      [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    for i, v in ipairs(res) do\n        res[i] = map[v]\n\
    \    end\n    return res\nend", "    local result = {}\n    local numbers = {\n\
    \        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n  \
    \      [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n    \
    \    [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, numbers[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local result = {}\n    local numbers = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i,\
    \ v in ipairs(arr) do\n        if v > 0 and v < 10 then\n            table.insert(result,\
    \ numbers[v])\n        end\n    end\n    table.sort(result)\n    return result\n\
    end", "    local result = {}\n    local numbers = {\n        [1] = \"One\",\n\
    \        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n \
    \       [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n  \
    \      [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend", "    local\
    \ function sort_numbers(a, b)\n        return a < b\n    end\n    local function\
    \ reverse_array(arr)\n        local new_arr = {}\n        for i = #arr, 1, -1\
    \ do\n            table.insert(new_arr, arr[i])\n        end\n        return new_arr\n\
    \    end\n    local function replace_numbers(arr)\n        local new_arr = {}\n\
    \        for i = 1, #arr do\n            if arr[i] == 1 then\n               \
    \ table.insert(new_arr, \"One\")\n            elseif arr[i] == 2 then\n      \
    \          table.insert(new_arr, \"Two\")\n            elseif arr[i] == 3 then\n\
    \                table.insert(new_arr, \"Three\")\n            elseif arr[i] ==\
    \ 4 then\n                table.insert(new_arr, \"Four\")\n            elseif\
    \ arr[i] == 5 then\n                table.insert(new_arr, \"Five\")\n        \
    \    elseif arr[i] == 6 then\n                table.insert(new_arr, \"Six\")\n\
    \            elseif arr[i] == 7 then\n                table.insert(new_arr, \"\
    Seven\")\n            elseif arr[i] == 8 then\n                table.insert(new_arr,\
    \ \"Eight\")\n            elseif arr[i] == 9 then\n                table.insert(new_arr,\
    \ \"Nine\")\n            end\n        end\n        return new_arr\n    end\n \
    \   local function filter_numbers(arr)\n        local new_arr = {}\n        for\
    \ i = 1, #arr do\n            if arr[i] >= 1 and arr[i] <= 9 then\n          \
    \      table.insert(new_arr, arr[i])\n            end\n        end\n        return\
    \ new_arr\n    end\n    local function by_length(arr)\n        return replace_numbers(reverse_array(table.sort(filter_numbers(arr),\
    \ sort_numbers)))\n    end\n    return by_length(arr)\nend", "    local result\
    \ = {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n\
    \        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >\
    \ 0 and v < 10 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local result =\
    \ {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n\
    \        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local res = {}\n\
    \    local map = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3]\
    \ = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6]\
    \ = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9]\
    \ = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <=\
    \ 9 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        res[i] = map[res[i]]\n    end\n    return res\n\
    end", "    local result = {}\n    local numbers = {\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for i = 1,\
    \ #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n            result[#result\
    \ + 1] = numbers[arr[i]]\n        end\n    end\n    return result\nend", "   \
    \ local result = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i]\
    \ <= 9 then\n            result[#result + 1] = arr[i]\n        end\n    end\n\
    \    table.sort(result)\n    local reverse_result = {}\n    for i = #result, 1,\
    \ -1 do\n        reverse_result[#reverse_result + 1] = result[i]\n    end\n  \
    \  local final_result = {}\n    for i = 1, #reverse_result do\n        final_result[#final_result\
    \ + 1] = num_to_word[reverse_result[i]]\n    end\n    return final_result\nend",
  "    local function sort_by_length(a, b)\n        return #a < #b\n    end\n    local\
    \ function reverse(arr)\n        local result = {}\n        for i = #arr, 1, -1\
    \ do\n            table.insert(result, arr[i])\n        end\n        return result\n\
    \    end\n    local function replace_by_name(arr)\n        local result = {}\n\
    \        for i = 1, #arr do\n            local name = {\n                [1] =\
    \ \"One\",\n                [2] = \"Two\",\n                [3] = \"Three\",\n\
    \                [4] = \"Four\",\n                [5] = \"Five\",\n          \
    \      [6] = \"Six\",\n                [7] = \"Seven\",\n                [8] =\
    \ \"Eight\",\n                [9] = \"Nine\"\n            }\n            table.insert(result,\
    \ name[arr[i]])\n        end\n        return result\n    end\n    local function\
    \ filter_by_length(arr)\n        local result = {}\n        for i = 1, #arr do\n\
    \            if arr[i] >= 1 and arr[i] <= 9 then\n                table.insert(result,\
    \ arr[i])\n            end\n        end\n        return result\n    end\n    local\
    \ result = filter_by_length(arr)\n    table.sort(result, sort_by_length)\n   \
    \ result = reverse(result)\n    result = replace_by_name(result)\n    return result\n\
    end", "    local res = {}\n    local map = {\n        [1] = \"One\",\n       \
    \ [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5]\
    \ = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] =\
    \ \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n        if\
    \ arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(res, arr[i])\n  \
    \      end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i]\
    \ = map[res[i]]\n    end\n    return res\nend", "    local result = {}\n    local\
    \ numbers = { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\" }\n    for i, v in ipairs(arr) do\n        if v > 0 and\
    \ v < 10 then\n            table.insert(result, numbers[v])\n        end\n   \
    \ end\n    table.sort(result)\n    return result\nend", "    local function sort_by_length(a,\
    \ b)\n        return #a < #b\n    end\n    local function to_name(num)\n     \
    \   local names = {\n            \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"\n        }\n        return names[num]\n\
    \    end\n    local function is_valid(num)\n        return num >= 1 and num <=\
    \ 9\n    end\n    local function map(arr)\n        local new_arr = {}\n      \
    \  for _, num in ipairs(arr) do\n            if is_valid(num) then\n         \
    \       table.insert(new_arr, to_name(num))\n            end\n        end\n  \
    \      return new_arr\n    end\n    local function reverse(arr)\n        local\
    \ new_arr = {}\n        for i = #arr, 1, -1 do\n            table.insert(new_arr,\
    \ arr[i])\n        end\n        return new_arr\n    end\n    local function filter(arr)\n\
    \        local new_arr = {}\n        for _, num in ipairs(arr) do\n          \
    \  if is_valid(num) then\n                table.insert(new_arr, num)\n       \
    \     end\n        end\n        return new_arr\n    end\n    local function sort(arr)\n\
    \        table.sort(arr, sort_by_length)\n        return arr\n    end\n    return\
    \ reverse(map(sort(filter(arr))))\nend", "    local result = {}\n    local numbers\
    \ = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   result[#result + 1] = numbers[v]\n        end\n    end\n    return result\n\
    end", "  local t = {}\n  local res = {}\n  for i = 1, #arr do\n    if arr[i] >=\
    \ 1 and arr[i] <= 9 then\n      table.insert(t, arr[i])\n    end\n  end\n  table.sort(t)\n\
    \  for i = #t, 1, -1 do\n    if t[i] == 1 then\n      table.insert(res, \"One\"\
    )\n    elseif t[i] == 2 then\n      table.insert(res, \"Two\")\n    elseif t[i]\
    \ == 3 then\n      table.insert(res, \"Three\")\n    elseif t[i] == 4 then\n \
    \     table.insert(res, \"Four\")\n    elseif t[i] == 5 then\n      table.insert(res,\
    \ \"Five\")\n    elseif t[i] == 6 then\n      table.insert(res, \"Six\")\n   \
    \ elseif t[i] == 7 then\n      table.insert(res, \"Seven\")\n    elseif t[i] ==\
    \ 8 then\n      table.insert(res, \"Eight\")\n    elseif t[i] == 9 then\n    \
    \  table.insert(res, \"Nine\")\n    end\n  end\n  return res\nend", "    local\
    \ res = {}\n    local dict = {\n        [1] = \"One\",\n        [2] = \"Two\"\
    ,\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n        if dict[arr[i]]\
    \ then\n            table.insert(res, dict[arr[i]])\n        end\n    end\n  \
    \  table.sort(res)\n    return res\nend", "    local result = {}\n    local numbers\
    \ = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\"\
    ,\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n\
    \        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n\
    \    }\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(result, numbers[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local res = {}\n    for i = 1, #arr do\n      \
    \  if arr[i] >= 1 and arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n \
    \       end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i]\
    \ = tostring(res[i])\n    end\n    for i = 1, #res do\n        if res[i] == '1'\
    \ then\n            res[i] = 'One'\n        elseif res[i] == '2' then\n      \
    \      res[i] = 'Two'\n        elseif res[i] == '3' then\n            res[i] =\
    \ 'Three'\n        elseif res[i] == '4' then\n            res[i] = 'Four'\n  \
    \      elseif res[i] == '5' then\n            res[i] = 'Five'\n        elseif\
    \ res[i] == '6' then\n            res[i] = 'Six'\n        elseif res[i] == '7'\
    \ then\n            res[i] = 'Seven'\n        elseif res[i] == '8' then\n    \
    \        res[i] = 'Eight'\n        elseif res[i] == '9' then\n            res[i]\
    \ = 'Nine'\n        end\n    end\n    return res\nend", "    if #arr == 0 then\n\
    \        return {}\n    end\n    local result = {}\n    local map = {\n      \
    \  [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4]\
    \ = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] =\
    \ \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for\
    \ i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(result,\
    \ map[arr[i]])\n        end\n    end\n    table.sort(result)\n    for i = 1, #result\
    \ / 2 do\n        result[i], result[#result - i + 1] = result[#result - i + 1],\
    \ result[i]\n    end\n    return result\nend", "    local result = {}\n    for\
    \ i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n            result[#result\
    \ + 1] = v\n        end\n    end\n    table.sort(result)\n    for i, v in ipairs(result)\
    \ do\n        result[i] = names[v]\n    end\n    return result\nend", "    local\
    \ result = {}\n    local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'}\n    for i, v in ipairs(arr) do\n        if v >= 1\
    \ and v <= 9 then\n            result[#result + 1] = numbers[v]\n        end\n\
    \    end\n    table.sort(result)\n    table.reverse(result)\n    return result\n\
    end", "  local result = {}\n  local map = {\n    [1] = \"One\",\n    [2] = \"\
    Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6]\
    \ = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n\
    \  }\n  for i, v in ipairs(arr) do\n    if map[v] then\n      table.insert(result,\
    \ map[v])\n    end\n  end\n  table.sort(result)\n  return result\nend", "    local\
    \ result = {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"\
    Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\"\
    ,\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >\
    \ 0 and v < 10 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local result =\
    \ {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n\
    \        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n        if arr[i] >= 1\
    \ and arr[i] <= 9 then\n            table.insert(result, numbers[arr[i]])\n  \
    \      end\n    end\n    table.sort(result)\n    return result\nend", "    local\
    \ result = {}\n    local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for i, v in ipairs(arr) do\n \
    \       if v >= 1 and v <= 9 then\n            result[#result + 1] = names[v]\n\
    \        end\n    end\n    return result\nend", "    local res = {}\n    for i,\
    \ v in ipairs(arr) do\n        if v > 0 and v < 10 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    local res2 = {}\n    for\
    \ i, v in ipairs(res) do\n        table.insert(res2, 1, v)\n    end\n    local\
    \ res3 = {}\n    for i, v in ipairs(res2) do\n        if v == 1 then\n       \
    \     table.insert(res3, \"One\")\n        elseif v == 2 then\n            table.insert(res3,\
    \ \"Two\")\n        elseif v == 3 then\n            table.insert(res3, \"Three\"\
    )\n        elseif v == 4 then\n            table.insert(res3, \"Four\")\n    \
    \    elseif v == 5 then\n            table.insert(res3, \"Five\")\n        elseif\
    \ v == 6 then\n            table.insert(res3, \"Six\")\n        elseif v == 7\
    \ then\n            table.insert(res3, \"Seven\")\n        elseif v == 8 then\n\
    \            table.insert(res3, \"Eight\")\n        elseif v == 9 then\n     \
    \       table.insert(res3, \"Nine\")\n        end\n    end\n    return res3\n\
    end", "    local result = {}\n    local numbers = {\n        [1] = \"One\",\n\
    \        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n \
    \       [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n  \
    \      [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend", "    local\
    \ result = {}\n    for i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"}\n    for i, v in ipairs(result) do\n       \
    \ result[i] = names[v]\n    end\n    return result\nend", "    local result =\
    \ {}\n    local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'}\n    for i, v in ipairs(arr) do\n        if v > 0 and v < 10\
    \ then\n            table.insert(result, numbers[v])\n        end\n    end\n \
    \   table.sort(result, function(a, b) return #a > #b end)\n    return result\n\
    end", "    local res = {}\n    for i, v in ipairs(arr) do\n        if v >= 1 and\
    \ v <= 9 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    local res2 = {}\n    for i, v in ipairs(res) do\n        table.insert(res2,\
    \ 1, v)\n    end\n    local res3 = {}\n    for i, v in ipairs(res2) do\n     \
    \   if v == 1 then\n            table.insert(res3, 'One')\n        elseif v ==\
    \ 2 then\n            table.insert(res3, 'Two')\n        elseif v == 3 then\n\
    \            table.insert(res3, 'Three')\n        elseif v == 4 then\n       \
    \     table.insert(res3, 'Four')\n        elseif v == 5 then\n            table.insert(res3,\
    \ 'Five')\n        elseif v == 6 then\n            table.insert(res3, 'Six')\n\
    \        elseif v == 7 then\n            table.insert(res3, 'Seven')\n       \
    \ elseif v == 8 then\n            table.insert(res3, 'Eight')\n        elseif\
    \ v == 9 then\n            table.insert(res3, 'Nine')\n        end\n    end\n\
    \    return res3\nend", "    local sorted = {}\n    local result = {}\n    local\
    \ names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i]\
    \ <= 9 then\n            table.insert(sorted, arr[i])\n        end\n    end\n\
    \    table.sort(sorted)\n    for i = #sorted, 1, -1 do\n        table.insert(result,\
    \ names[sorted[i]])\n    end\n    return result\nend", "    local res = {}\n \
    \   local map = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3]\
    \ = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6]\
    \ = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9]\
    \ = \"Nine\"\n    }\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i]\
    \ <= 9 then\n            table.insert(res, arr[i])\n        end\n    end\n   \
    \ table.sort(res)\n    for i = 1, #res do\n        res[i] = map[res[i]]\n    end\n\
    \    return res\nend", "    local res = {}\n    local nums = {'One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(res, nums[v])\n\
    \        end\n    end\n    table.sort(res, function(a, b) return #a > #b end)\n\
    \    return res\nend", "    local res = {}\n    local map = {\n        [1] = \"\
    One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\"\
    ,\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n\
    \        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n  \
    \      end\n    end\n    table.sort(res)\n    for i = 1, #res / 2 do\n       \
    \ res[i], res[#res - i + 1] = res[#res - i + 1], res[i]\n    end\n    for i =\
    \ 1, #res do\n        res[i] = map[res[i]]\n    end\n    return res\nend", " \
    \ local result = {}\n  local numbers = {'One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'}\n  for i = 1, #arr do\n    if arr[i] >= 1 and\
    \ arr[i] <= 9 then\n      result[#result + 1] = numbers[arr[i]]\n    end\n  end\n\
    \  return result\nend", "    local result = {}\n    local numbers = {'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i = 1, #arr\
    \ do\n        if arr[i] > 0 and arr[i] < 10 then\n            result[#result +\
    \ 1] = numbers[arr[i]]\n        end\n    end\n    return result\nend", "    local\
    \ res = {}\n    local nums = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <=\
    \ 9 then\n            table.insert(res, nums[v])\n        end\n    end\n    table.sort(res,\
    \ function(a, b) return #a > #b end)\n    return res\nend", "    local result\
    \ = {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n\
    \        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n        if arr[i] > 0\
    \ and arr[i] < 10 then\n            result[#result + 1] = numbers[arr[i]]\n  \
    \      end\n    end\n    table.sort(result)\n    for i = 1, #result / 2 do\n \
    \       result[i], result[#result - i + 1] = result[#result - i + 1], result[i]\n\
    \    end\n    return result\nend", "    local result = {}\n    local numbers =\
    \ {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n\
    \        [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n  \
    \      [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n  \
    \  }\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n    \
    \        table.insert(result, numbers[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local new_arr = {}\n    local dict = {\n      \
    \  [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4]\
    \ = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] =\
    \ \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for\
    \ i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(new_arr,\
    \ v)\n        end\n    end\n    table.sort(new_arr)\n    for i, v in ipairs(new_arr)\
    \ do\n        new_arr[i] = dict[v]\n    end\n    return new_arr\nend", "    local\
    \ result = {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"\
    Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\"\
    ,\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local result =\
    \ {}\n    local numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for i, v in ipairs(arr) do\n     \
    \   if v >= 1 and v <= 9 then\n            result[#result + 1] = numbers[v]\n\
    \        end\n    end\n    table.sort(result)\n    for i = 1, math.floor(#result\
    \ / 2) do\n        result[i], result[#result - i + 1] = result[#result - i + 1],\
    \ result[i]\n    end\n    return result\nend", "  local result = {}\n  local numbers\
    \ = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \  for i, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ numbers[v])\n    end\n  end\n  table.sort(result, function(a, b) return #a >\
    \ #b end)\n  return result\nend", "    local res = {}\n    local map = {\n   \
    \     [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n     \
    \   [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n       \
    \ [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i\
    \ = 1, #res do\n        res[i] = map[res[i]]\n    end\n    return res\nend", " \
    \   local result = {}\n    local numbers = {'One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'}\n    for i = 1, #arr do\n        if arr[i]\
    \ > 0 and arr[i] < 10 then\n            result[#result + 1] = numbers[arr[i]]\n\
    \        end\n    end\n    return result\nend", "    local res = {}\n    local\
    \ names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n    for i, v in ipairs(arr) do\n        if v >= 1 and\
    \ v <= 9 then\n            res[#res + 1] = names[v]\n        end\n    end\n  \
    \  return res\nend", "  local function sort_numbers(a, b)\n    return a < b\n\
    \  end\n  local function reverse_array(arr)\n    local reversed_arr = {}\n   \
    \ for i = #arr, 1, -1 do\n      table.insert(reversed_arr, arr[i])\n    end\n\
    \    return reversed_arr\n  end\n  local function replace_numbers(arr)\n    local\
    \ numbers = {\n      [1] = \"One\",\n      [2] = \"Two\",\n      [3] = \"Three\"\
    ,\n      [4] = \"Four\",\n      [5] = \"Five\",\n      [6] = \"Six\",\n      [7]\
    \ = \"Seven\",\n      [8] = \"Eight\",\n      [9] = \"Nine\"\n    }\n    local\
    \ new_arr = {}\n    for _, v in ipairs(arr) do\n      if v >= 1 and v <= 9 then\n\
    \        table.insert(new_arr, numbers[v])\n      end\n    end\n    return new_arr\n\
    \  end\n  local sorted_arr = table.sort(arr, sort_numbers)\n  local reversed_arr\
    \ = reverse_array(sorted_arr)\n  local replaced_arr = replace_numbers(reversed_arr)\n\
    \  return replaced_arr\nend", "  local result = {}\n  local numbers = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i, v\
    \ in ipairs(arr) do\n    if v > 0 and v < 10 then\n      result[#result + 1] =\
    \ numbers[v]\n    end\n  end\n  return result\nend", "    local result = {}\n\
    \    local map = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3]\
    \ = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6]\
    \ = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9]\
    \ = \"Nine\"\n    }\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i]\
    \ <= 9 then\n            result[#result + 1] = map[arr[i]]\n        end\n    end\n\
    \    return result\nend", "    local res = {}\n    local dict = {\n        [1]\
    \ = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] =\
    \ \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"\
    Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    for i = 1, #res do\n    \
    \    res[i] = dict[res[i]]\n    end\n    return res\nend", "    local result =\
    \ {}\n    local map = {\n        [1] = \"One\",\n        [2] = \"Two\",\n    \
    \    [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n    \
    \    [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n    \
    \    [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >= 1\
    \ and v <= 9 then\n            result[#result + 1] = map[v]\n        end\n   \
    \ end\n    table.sort(result)\n    for i = 1, math.floor(#result / 2) do\n   \
    \     result[i], result[#result - i + 1] = result[#result - i + 1], result[i]\n\
    \    end\n    return result\nend", "    local function sort_func(a, b)\n     \
    \   return a < b\n    end\n    local function reverse_func(a, b)\n        return\
    \ a > b\n    end\n    local function replace_func(a)\n        if a == 1 then\n\
    \            return \"One\"\n        elseif a == 2 then\n            return \"\
    Two\"\n        elseif a == 3 then\n            return \"Three\"\n        elseif\
    \ a == 4 then\n            return \"Four\"\n        elseif a == 5 then\n     \
    \       return \"Five\"\n        elseif a == 6 then\n            return \"Six\"\
    \n        elseif a == 7 then\n            return \"Seven\"\n        elseif a ==\
    \ 8 then\n            return \"Eight\"\n        elseif a == 9 then\n         \
    \   return \"Nine\"\n        end\n    end\n    local function filter_func(a)\n\
    \        return a >= 1 and a <= 9\n    end\n    local function map_func(a)\n \
    \       return replace_func(a)\n    end\n    local function reduce_func(a, b)\n\
    \        return a .. b\n    end\n    return arr\n        :filter(filter_func)\n\
    \        :sort(sort_func)\n        :sort(reverse_func)\n        :map(map_func)\n\
    \        :reduce(reduce_func)\nend", "    local result = {}\n    for i, v in ipairs(arr)\
    \ do\n        if v > 0 and v < 10 then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    local reversed = {}\n    for\
    \ i = #result, 1, -1 do\n        table.insert(reversed, result[i])\n    end\n\
    \    local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"}\n    for i, v in ipairs(reversed) do\n     \
    \   reversed[i] = names[v]\n    end\n    return reversed\nend", "  local result\
    \ = {}\n  local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'}\n  for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n\
    \      result[#result + 1] = numbers[v]\n    end\n  end\n  return result\nend",
  "    local result = {}\n    local numbers = {\n        [1] = \"One\",\n        [2]\
    \ = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] =\
    \ \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"\
    Eight\",\n        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n        if arr[i]\
    \ > 0 and arr[i] < 10 then\n            table.insert(result, numbers[arr[i]])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend", "    local\
    \ result = {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"\
    Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\"\
    ,\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 and v < 10 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local res = {}\n\
    \    local map = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3]\
    \ = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6]\
    \ = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9]\
    \ = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <=\
    \ 9 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        res[i] = map[res[i]]\n    end\n    return res\n\
    end", "  local result = {}\n  local map = {\n    [1] = \"One\",\n    [2] = \"\
    Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6]\
    \ = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n\
    \  }\n  for i, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ map[v])\n    end\n  end\n  return result\nend", "    local sorted = {}\n   \
    \ local result = {}\n    local names = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(sorted, v)\n\
    \        end\n    end\n    table.sort(sorted)\n    for i = #sorted, 1, -1 do\n\
    \        table.insert(result, names[sorted[i]])\n    end\n    return result\n\
    end", "    local res = {}\n    local map = {\n        [1] = \"One\",\n       \
    \ [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5]\
    \ = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] =\
    \ \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n\
    \        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n       \
    \ end\n    end\n    table.sort(res)\n    for i = 1, #res / 2 do\n        res[i],\
    \ res[#res - i + 1] = res[#res - i + 1], res[i]\n    end\n    for i = 1, #res\
    \ do\n        res[i] = map[res[i]]\n    end\n    return res\nend", "  local result\
    \ = {}\n  local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'}\n  for i = 1, #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n\
    \      result[#result + 1] = numbers[arr[i]]\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  local numbers = {\n    [1] = \"One\",\n    [2] =\
    \ \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n \
    \   [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\
    \n  }\n  for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      result[#result\
    \ + 1] = numbers[v]\n    end\n  end\n  return result\nend", "    local res = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\nend",
  "    local res = {}\n    local numbers = {\n        [1] = \"One\",\n        [2]\
    \ = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] =\
    \ \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"\
    Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n    \
    \    if v >= 1 and v <= 9 then\n            table.insert(res, numbers[v])\n  \
    \      end\n    end\n    table.sort(res)\n    return res\nend", "    local result\
    \ = {}\n    local words = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for i = 1, #arr do\n        if arr[i]\
    \ > 0 and arr[i] < 10 then\n            result[#result + 1] = words[arr[i]]\n\
    \        end\n    end\n    return result\nend", "    local res = {}\n    local\
    \ map = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\"\
    ,\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n\
    \        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n\
    \    }\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(res, v)\n        end\n    end\n    table.sort(res)\n \
    \   for i = 1, #res do\n        res[i] = map[res[i]]\n    end\n    return res\n\
    end", "    local result = {}\n    local numbers = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i = 1, #arr do\n        if\
    \ arr[i] >= 1 and arr[i] <= 9 then\n            result[#result + 1] = numbers[arr[i]]\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n        \
    \    result[#result + 1] = numbers[arr[i]]\n        end\n    end\n    return result\n\
    end", "  if #arr == 0 then return {} end\n  local t = {}\n  for i = 1, #arr do\n\
    \    if arr[i] > 0 and arr[i] < 10 then\n      t[#t + 1] = arr[i]\n    end\n \
    \ end\n  table.sort(t)\n  local res = {}\n  for i = #t, 1, -1 do\n    res[#res\
    \ + 1] = num_to_str[t[i]]\n  end\n  return res\nend", "    local result = {}\n\
    \    local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for i = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n\
    \            result[#result + 1] = numbers[arr[i]]\n        end\n    end\n   \
    \ return result\nend", "    local res = {}\n    for i = 1, #arr do\n        if\
    \ arr[i] >= 1 and arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n     \
    \   end\n    end\n    table.sort(res)\n    local res2 = {}\n    for i = #res,\
    \ 1, -1 do\n        res2[#res2 + 1] = res[i]\n    end\n    local res3 = {}\n \
    \   for i = 1, #res2 do\n        if res2[i] == 1 then\n            res3[#res3\
    \ + 1] = \"One\"\n        elseif res2[i] == 2 then\n            res3[#res3 + 1]\
    \ = \"Two\"\n        elseif res2[i] == 3 then\n            res3[#res3 + 1] = \"\
    Three\"\n        elseif res2[i] == 4 then\n            res3[#res3 + 1] = \"Four\"\
    \n        elseif res2[i] == 5 then\n            res3[#res3 + 1] = \"Five\"\n \
    \       elseif res2[i] == 6 then\n            res3[#res3 + 1] = \"Six\"\n    \
    \    elseif res2[i] == 7 then\n            res3[#res3 + 1] = \"Seven\"\n     \
    \   elseif res2[i] == 8 then\n            res3[#res3 + 1] = \"Eight\"\n      \
    \  elseif res2[i] == 9 then\n            res3[#res3 + 1] = \"Nine\"\n        end\n\
    \    end\n    return res3\nend", "  local result = {}\n  local numbers = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i, v\
    \ in ipairs(arr) do\n    if v > 0 and v < 10 then\n      table.insert(result,\
    \ numbers[v])\n    end\n  end\n  table.sort(result, function(a, b) return #a >\
    \ #b end)\n  return result\nend", "  local result = {}\n  local numbers = {\n\
    \    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\"\
    ,\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"\
    Eight\",\n    [9] = \"Nine\"\n  }\n  for i = 1, #arr do\n    if arr[i] >= 1 and\
    \ arr[i] <= 9 then\n      result[#result + 1] = numbers[arr[i]]\n    end\n  end\n\
    \  return result\nend", "    local result = {}\n    local map = {\n        [1]\
    \ = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] =\
    \ \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"\
    Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            result[#result\
    \ + 1] = map[v]\n        end\n    end\n    table.sort(result)\n    return result\n\
    end", "    local result = {}\n    local numbers = {\n        [1] = \"One\",\n\
    \        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n \
    \       [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n  \
    \      [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend", "    local\
    \ result = {}\n    local numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for i = 1, #arr do\n   \
    \     if arr[i] > 0 and arr[i] < 10 then\n            result[#result + 1] = numbers[arr[i]]\n\
    \        end\n    end\n    table.sort(result)\n    for i = 1, #result / 2 do\n\
    \        result[i], result[#result - i + 1] = result[#result - i + 1], result[i]\n\
    \    end\n    return result\nend", "    local result = {}\n    local numbers =\
    \ {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n\
    \        [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n  \
    \      [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n  \
    \  }\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n  \
    \          table.insert(result, numbers[arr[i]])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local result = {}\n    local numbers = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i,\
    \ v in ipairs(arr) do\n        if v > 0 and v < 10 then\n            table.insert(result,\
    \ numbers[v])\n        end\n    end\n    table.sort(result)\n    return result\n\
    end", "    local function sort_numbers(a, b)\n        return a < b\n    end\n\
    \    local function reverse_array(arr)\n        local reversed_arr = {}\n    \
    \    for i = #arr, 1, -1 do\n            table.insert(reversed_arr, arr[i])\n\
    \        end\n        return reversed_arr\n    end\n    local function replace_digits(arr)\n\
    \        local digits = {\n            [1] = \"One\",\n            [2] = \"Two\"\
    ,\n            [3] = \"Three\",\n            [4] = \"Four\",\n            [5]\
    \ = \"Five\",\n            [6] = \"Six\",\n            [7] = \"Seven\",\n    \
    \        [8] = \"Eight\",\n            [9] = \"Nine\"\n        }\n        local\
    \ new_arr = {}\n        for i = 1, #arr do\n            if digits[arr[i]] then\n\
    \                table.insert(new_arr, digits[arr[i]])\n            end\n    \
    \    end\n        return new_arr\n    end\n    local function filter_numbers(arr)\n\
    \        local new_arr = {}\n        for i = 1, #arr do\n            if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n                table.insert(new_arr, arr[i])\n \
    \           end\n        end\n        return new_arr\n    end\n    local filtered_arr\
    \ = filter_numbers(arr)\n    table.sort(filtered_arr, sort_numbers)\n    local\
    \ reversed_arr = reverse_array(filtered_arr)\n    local replaced_arr = replace_digits(reversed_arr)\n\
    \    return replaced_arr\nend", "    local function sort_and_reverse(arr)\n  \
    \      local function sort(arr)\n            local function swap(arr, i, j)\n\
    \                local temp = arr[i]\n                arr[i] = arr[j]\n      \
    \          arr[j] = temp\n            end\n            for i = 1, #arr do\n  \
    \              for j = i + 1, #arr do\n                    if arr[i] > arr[j]\
    \ then\n                        swap(arr, i, j)\n                    end\n   \
    \             end\n            end\n            return arr\n        end\n    \
    \    local function reverse(arr)\n            local i = 1\n            local j\
    \ = #arr\n            while i < j do\n                local temp = arr[i]\n  \
    \              arr[i] = arr[j]\n                arr[j] = temp\n              \
    \  i = i + 1\n                j = j - 1\n            end\n            return arr\n\
    \        end\n        return reverse(sort(arr))\n    end\n    local function replace_by_name(arr)\n\
    \        local function replace(arr, i)\n            if arr[i] == 1 then\n   \
    \             arr[i] = \"One\"\n            elseif arr[i] == 2 then\n        \
    \        arr[i] = \"Two\"\n            elseif arr[i] == 3 then\n             \
    \   arr[i] = \"Three\"\n            elseif arr[i] == 4 then\n                arr[i]\
    \ = \"Four\"\n            elseif arr[i] == 5 then\n                arr[i] = \"\
    Five\"\n            elseif arr[i] == 6 then\n                arr[i] = \"Six\"\n\
    \            elseif arr[i] == 7 then\n                arr[i] = \"Seven\"\n   \
    \         elseif arr[i] == 8 then\n                arr[i] = \"Eight\"\n      \
    \      elseif arr[i] == 9 then\n                arr[i] = \"Nine\"\n          \
    \  end\n        end\n        for i = 1, #arr do\n            replace(arr, i)\n\
    \        end\n        return arr\n    end\n    local function filter_by_range(arr)\n\
    \        local result = {}\n        for i = 1, #arr do\n            if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n                result[#result +", "    local result\
    \ = {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n\
    \        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "  local result = {}\n\
    \  for i, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      result[#result\
    \ + 1] = v\n    end\n  end\n  table.sort(result)\n  for i = 1, #result / 2 do\n\
    \    result[i], result[#result - i + 1] = result[#result - i + 1], result[i]\n\
    \  end\n  for i, v in ipairs(result) do\n    result[i] = tostring(v)\n  end\n\
    \  return result\nend", "    local res = {}\n    local map = {\n        [1] =\
    \ \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"\
    Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\"\
    ,\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n  \
    \      end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i]\
    \ = map[res[i]]\n    end\n    return res\nend", "    local result = {}\n    local\
    \ words = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i]\
    \ <= 9 then\n            result[#result + 1] = words[arr[i]]\n        end\n  \
    \  end\n    return result\nend", "    local new_arr = {}\n    local num_names\
    \ = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\"\
    ,\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n\
    \        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n\
    \    }\n    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(new_arr, v)\n        end\n    end\n    table.sort(new_arr)\n\
    \    for i, v in ipairs(new_arr) do\n        new_arr[i] = num_names[v]\n    end\n\
    \    return new_arr\nend", "    local result = {}\n    local numbers = {\n   \
    \     [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n     \
    \   [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n       \
    \ [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, numbers[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local res = {}\n    local names = {\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n    for i = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n      \
    \      res[#res + 1] = names[arr[i]]\n        end\n    end\n    return res\nend",
  "    local function sort_by_length(a, b)\n        return a < b\n    end\n    local\
    \ function reverse_array(arr)\n        local reversed = {}\n        for i = #arr,\
    \ 1, -1 do\n            table.insert(reversed, arr[i])\n        end\n        return\
    \ reversed\n    end\n    local function replace_by_name(arr)\n        local names\
    \ = {\n            [1] = \"One\",\n            [2] = \"Two\",\n            [3]\
    \ = \"Three\",\n            [4] = \"Four\",\n            [5] = \"Five\",\n   \
    \         [6] = \"Six\",\n            [7] = \"Seven\",\n            [8] = \"Eight\"\
    ,\n            [9] = \"Nine\"\n        }\n        local replaced = {}\n      \
    \  for i = 1, #arr do\n            table.insert(replaced, names[arr[i]])\n   \
    \     end\n        return replaced\n    end\n    local function filter_by_range(arr)\n\
    \        local filtered = {}\n        for i = 1, #arr do\n            if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n                table.insert(filtered, arr[i])\n\
    \            end\n        end\n        return filtered\n    end\n    local filtered\
    \ = filter_by_range(arr)\n    table.sort(filtered, sort_by_length)\n    local\
    \ reversed = reverse_array(filtered)\n    local replaced = replace_by_name(reversed)\n\
    \    return replaced\nend", "  local res = {}\n  local map = {\n    [1] = \"One\"\
    ,\n    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"\
    Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9]\
    \ = \"Nine\"\n  }\n  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n\
    \      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  for i = 1, #res\
    \ do\n    res[i] = map[res[i]]\n  end\n  return res\nend", "    local result =\
    \ {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n\
    \        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local result =\
    \ {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n  \
    \          result[#result + 1] = arr[i]\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = numbers[result[i]]\n    end\n\
    \    return result\nend", "    local res = {}\n    local map = {\n        [1]\
    \ = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] =\
    \ \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"\
    Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    for i = 1, #res / 2 do\n\
    \        res[i], res[#res - i + 1] = res[#res - i + 1], res[i]\n    end\n    for\
    \ i, v in ipairs(res) do\n        res[i] = map[v]\n    end\n    return res\nend",
  "    local result = {}\n    local numbers = {\n        [1] = \"One\",\n        [2]\
    \ = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] =\
    \ \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"\
    Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n    \
    \    if v >= 1 and v <= 9 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend", "    local\
    \ result = {}\n    local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'}\n    for _, v in ipairs(arr) do\n        if v > 0\
    \ and v < 10 then\n            result[#result + 1] = numbers[v]\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local result =\
    \ {}\n    local numbers = {\n        'One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'\n    }\n    for i = 1, #arr do\n        if arr[i] >=\
    \ 1 and arr[i] <= 9 then\n            result[#result + 1] = numbers[arr[i]]\n\
    \        end\n    end\n    return result\nend", "  local result = {}\n  local\
    \ numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \  for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      result[#result\
    \ + 1] = numbers[v]\n    end\n  end\n  table.sort(result)\n  return result\nend",
  "    local result = {}\n    local numbers = {'One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'}\n    for i, v in ipairs(arr) do\n        if\
    \ v >= 1 and v <= 9 then\n            table.insert(result, numbers[v])\n     \
    \   end\n    end\n    table.sort(result, function(a, b) return #a > #b end)\n\
    \    return result\nend", "    local result = {}\n    local numbers = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ numbers[v])\n        end\n    end\n    table.sort(result, function(a, b) return\
    \ #a > #b end)\n    return result\nend", "  local result = {}\n  local numbers\
    \ = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \  for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      result[#result\
    \ + 1] = numbers[v]\n    end\n  end\n  return result\nend", "    local result\
    \ = {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n\
    \        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "  local result = {}\n\
    \  local map = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\"\
    ,\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"\
    Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for i, v in ipairs(arr)\
    \ do\n    if v >= 1 and v <= 9 then\n      result[#result + 1] = map[v]\n    end\n\
    \  end\n  return result\nend", "  local result = {}\n  local numbers = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i, v\
    \ in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      result[#result + 1]\
    \ = numbers[v]\n    end\n  end\n  return result\nend", "    local result = {}\n\
    \    local dict = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3]\
    \ = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6]\
    \ = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9]\
    \ = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >= 1 and v <=\
    \ 9 then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i, v in ipairs(result) do\n        result[i] = dict[v]\n    end\n   \
    \ return result\nend", "  local function sort_numbers(a, b)\n    return a < b\n\
    \  end\n  local function sort_strings(a, b)\n    return #a > #b\n  end\n  local\
    \ function replace_numbers(str)\n    if str == '1' then\n      return 'One'\n\
    \    elseif str == '2' then\n      return 'Two'\n    elseif str == '3' then\n\
    \      return 'Three'\n    elseif str == '4' then\n      return 'Four'\n    elseif\
    \ str == '5' then\n      return 'Five'\n    elseif str == '6' then\n      return\
    \ 'Six'\n    elseif str == '7' then\n      return 'Seven'\n    elseif str == '8'\
    \ then\n      return 'Eight'\n    elseif str == '9' then\n      return 'Nine'\n\
    \    end\n  end\n  local function is_number(str)\n    return tonumber(str) ~=\
    \ nil\n  end\n  local function is_between_1_and_9(str)\n    return tonumber(str)\
    \ >= 1 and tonumber(str) <= 9\n  end\n  local function is_valid_number(str)\n\
    \    return is_number(str) and is_between_1_and_9(str)\n  end\n  local function\
    \ filter_numbers(arr)\n    local result = {}\n    for i, v in ipairs(arr) do\n\
    \      if is_valid_number(v) then\n        table.insert(result, v)\n      end\n\
    \    end\n    return result\n  end\n  local function reverse_array(arr)\n    local\
    \ result = {}\n    for i, v in ipairs(arr) do\n      table.insert(result, 1, v)\n\
    \    end\n    return result\n  end\n  local function replace_numbers_by_names(arr)\n\
    \    local result = {}\n    for i, v in ipairs(arr) do\n      table.insert(result,\
    \ replace_numbers(v))\n    end\n    return result\n  end\n  local function sort_array(arr)\n\
    \    table.sort(arr, sort_numbers)\n  end\n  local function sort_strings_", " \
    \   local result = {}\n    local numbers = {'One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'}\n    for i, v in ipairs(arr) do\n        if\
    \ v > 0 and v < 10 then\n            table.insert(result, numbers[v])\n      \
    \  end\n    end\n    table.sort(result)\n    return result\nend", "  local out\
    \ = {}\n  local dict = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"\
    Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7]\
    \ = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for _, v in ipairs(arr)\
    \ do\n    if v >= 1 and v <= 9 then\n      out[#out + 1] = dict[v]\n    end\n\
    \  end\n  return out\nend", "    local result = {}\n    local numbers = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i\
    \ = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n            result[#result\
    \ + 1] = numbers[arr[i]]\n        end\n    end\n    return result\nend", "   \
    \ local res = {}\n    for i, v in ipairs(arr) do\n        if v > 0 and v < 10\
    \ then\n            res[#res + 1] = v\n        end\n    end\n    table.sort(res)\n\
    \    for i, v in ipairs(res) do\n        res[i] = num_map[v]\n    end\n    return\
    \ res\nend", "    local result = {}\n    local numbers = {\n        [1] = \"One\"\
    ,\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n\
    \        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n \
    \       [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 and v < 10 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend", "    local\
    \ result = {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"\
    Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\"\
    ,\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    local reverse = {}\n    for i = #result,\
    \ 1, -1 do\n        table.insert(reverse, result[i])\n    end\n    return reverse\n\
    end", "    local res = {}\n    local nums = {'One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'}\n    for _, v in ipairs(arr) do\n        if\
    \ v > 0 and v < 10 then\n            table.insert(res, nums[v])\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend", "    local result = {}\n\
    \    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n     \
    \   [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n     \
    \   [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n     \
    \   [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n        if arr[i] >= 1 and\
    \ arr[i] <= 9 then\n            table.insert(result, numbers[arr[i]])\n      \
    \  end\n    end\n    table.sort(result)\n    return result\nend", "    local result\
    \ = {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n\
    \        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if numbers[v]\
    \ then\n            table.insert(result, numbers[v])\n        end\n    end\n \
    \   table.sort(result)\n    return result\nend", "  local res = {}\n  local map\
    \ = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] =\
    \ \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\",\n \
    \   [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for _, v in ipairs(arr) do\n\
    \    if v >= 1 and v <= 9 then\n      table.insert(res, v)\n    end\n  end\n \
    \ table.sort(res)\n  for i, v in ipairs(res) do\n    res[i] = map[v]\n  end\n\
    \  return res\nend", "    local result = {}\n    local numbers = {\n        [1]\
    \ = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] =\
    \ \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"\
    Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i =\
    \ 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(result,\
    \ numbers[arr[i]])\n        end\n    end\n    table.sort(result)\n    local reversed\
    \ = {}\n    for i = #result, 1, -1 do\n        table.insert(reversed, result[i])\n\
    \    end\n    return reversed\nend", "    local result = {}\n    local numbers\
    \ = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\"\
    ,\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n\
    \        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n\
    \    }\n    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          result[#result + 1] = numbers[v]\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local result = {}\n    local numbers = {\n    \
    \    [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n      \
    \  [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7]\
    \ = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for\
    \ i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ numbers[v])\n        end\n    end\n    table.sort(result)\n    local reversed\
    \ = {}\n    for i = #result, 1, -1 do\n        table.insert(reversed, result[i])\n\
    \    end\n    return reversed\nend", "    local result = {}\n    local numbers\
    \ = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n        \
    \    result[#result + 1] = numbers[arr[i]]\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local numbers = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i, v in ipairs(arr) do\n \
    \       if v >= 1 and v <= 9 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    table.sort(result, function(a, b) return #a > #b end)\n\
    \    return result\nend", "    local result = {}\n    local numbers = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i,\
    \ v in ipairs(arr) do\n        if v > 0 and v < 10 then\n            table.insert(result,\
    \ numbers[v])\n        end\n    end\n    table.sort(result, function(a, b) return\
    \ #a > #b end)\n    return result\nend", "    local result = {}\n    local numbers\
    \ = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\"\
    ,\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n\
    \        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n\
    \    }\n    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(result, numbers[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "  local result = {}\n  local map = {\n    [1] = \"\
    One\",\n    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5]\
    \ = \"Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n\
    \    [9] = \"Nine\"\n  }\n  for _, v in ipairs(arr) do\n    if v >= 1 and v <=\
    \ 9 then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  for i = 1, #result do\n    result[i] = map[result[i]]\n  end\n  return result\n\
    end", "    local function sort_by_length(a, b)\n        return #a < #b\n    end\n\
    \    local function replace_with_name(num)\n        local names = {\n        \
    \    [1] = \"One\",\n            [2] = \"Two\",\n            [3] = \"Three\",\n\
    \            [4] = \"Four\",\n            [5] = \"Five\",\n            [6] = \"\
    Six\",\n            [7] = \"Seven\",\n            [8] = \"Eight\",\n         \
    \   [9] = \"Nine\"\n        }\n        return names[num]\n    end\n    local function\
    \ is_valid(num)\n        return num >= 1 and num <= 9\n    end\n    local function\
    \ filter_valid(num)\n        return is_valid(num)\n    end\n    local function\
    \ map_to_name(num)\n        return replace_with_name(num)\n    end\n    local\
    \ function reverse(arr)\n        local result = {}\n        for i = #arr, 1, -1\
    \ do\n            table.insert(result, arr[i])\n        end\n        return result\n\
    \    end\n    local result = {}\n    for _, num in ipairs(arr) do\n        if\
    \ is_valid(num) then\n            table.insert(result, num)\n        end\n   \
    \ end\n    table.sort(result, sort_by_length)\n    result = reverse(result)\n\
    \    result = map(result, map_to_name)\n    return result\nend", "    local result\
    \ = {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n\
    \        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "  local res = {}\n\
    \  local dict = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\"\
    ,\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"\
    Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for _, v in ipairs(arr)\
    \ do\n    if dict[v] then\n      table.insert(res, dict[v])\n    end\n  end\n\
    \  table.sort(res)\n  return res\nend", "    local result = {}\n    local numbers\
    \ = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\"\
    ,\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n\
    \        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n\
    \    }\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n\
    \            table.insert(result, numbers[arr[i]])\n        end\n    end\n   \
    \ table.sort(result)\n    table.reverse(result)\n    return result\nend", "  \
    \  local function sort_numbers(a, b)\n        return a < b\n    end\n    local\
    \ function reverse_array(arr)\n        local new_arr = {}\n        for i = #arr,\
    \ 1, -1 do\n            table.insert(new_arr, arr[i])\n        end\n        return\
    \ new_arr\n    end\n    local function replace_with_names(arr)\n        local\
    \ new_arr = {}\n        for i = 1, #arr do\n            if arr[i] == 1 then\n\
    \                table.insert(new_arr, \"One\")\n            elseif arr[i] ==\
    \ 2 then\n                table.insert(new_arr, \"Two\")\n            elseif arr[i]\
    \ == 3 then\n                table.insert(new_arr, \"Three\")\n            elseif\
    \ arr[i] == 4 then\n                table.insert(new_arr, \"Four\")\n        \
    \    elseif arr[i] == 5 then\n                table.insert(new_arr, \"Five\")\n\
    \            elseif arr[i] == 6 then\n                table.insert(new_arr, \"\
    Six\")\n            elseif arr[i] == 7 then\n                table.insert(new_arr,\
    \ \"Seven\")\n            elseif arr[i] == 8 then\n                table.insert(new_arr,\
    \ \"Eight\")\n            elseif arr[i] == 9 then\n                table.insert(new_arr,\
    \ \"Nine\")\n            end\n        end\n        return new_arr\n    end\n \
    \   local new_arr = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i]\
    \ <= 9 then\n            table.insert(new_arr, arr[i])\n        end\n    end\n\
    \    table.sort(new_arr, sort_numbers)\n    new_arr = reverse_array(new_arr)\n\
    \    new_arr = replace_with_names(new_arr)\n    return new_arr\nend", "    local\
    \ function sort_func(a, b)\n        return a < b\n    end\n    local function\
    \ reverse_func(a, b)\n        return a > b\n    end\n    local function replace_func(a)\n\
    \        if a == 1 then\n            return \"One\"\n        elseif a == 2 then\n\
    \            return \"Two\"\n        elseif a == 3 then\n            return \"\
    Three\"\n        elseif a == 4 then\n            return \"Four\"\n        elseif\
    \ a == 5 then\n            return \"Five\"\n        elseif a == 6 then\n     \
    \       return \"Six\"\n        elseif a == 7 then\n            return \"Seven\"\
    \n        elseif a == 8 then\n            return \"Eight\"\n        elseif a ==\
    \ 9 then\n            return \"Nine\"\n        end\n    end\n    local function\
    \ filter_func(a)\n        return a >= 1 and a <= 9\n    end\n    local function\
    \ map_func(a)\n        return replace_func(a)\n    end\n    local function reduce_func(a,\
    \ b)\n        return a .. b\n    end\n    local function compose(...)\n      \
    \  local arg = {...}\n        return function(x)\n            for i = #arg, 1,\
    \ -1 do\n                x = arg[i](x)\n            end\n            return x\n\
    \        end\n    end\n    local function sort(arr, func)\n        for i = 1,\
    \ #arr do\n            for j = i + 1, #arr do\n                if func(arr[i],\
    \ arr[j]) then\n                    arr[i], arr[j] = arr[j], arr[i]\n        \
    \        end\n            end\n        end\n        return arr\n    end\n    local\
    \ function reverse(arr)\n        local len = #arr\n        for i = 1, len / 2\
    \ do\n            arr[i], arr[len - i + 1] = arr[len - i + 1], arr[i]\n      \
    \  end\n        return arr\n    end\n    local function filter(arr, func)\n  \
    \      local new_arr = {}\n        for i = 1, #arr do\n            if func(arr[i])\
    \ then\n                new_arr[#new_arr + 1] = arr[i]\n            end\n    \
    \   ", "  local result = {}\n  local numbers = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i, v in ipairs(arr) do\n   \
    \ if v > 0 and v < 10 then\n      result[#result + 1] = numbers[v]\n    end\n\
    \  end\n  return result\nend", "  local function sort_func(a, b)\n    return a\
    \ < b\n  end\n  local function reverse_func(a, b)\n    return a > b\n  end\n \
    \ local function replace_func(a)\n    if a == 1 then\n      return \"One\"\n \
    \   elseif a == 2 then\n      return \"Two\"\n    elseif a == 3 then\n      return\
    \ \"Three\"\n    elseif a == 4 then\n      return \"Four\"\n    elseif a == 5\
    \ then\n      return \"Five\"\n    elseif a == 6 then\n      return \"Six\"\n\
    \    elseif a == 7 then\n      return \"Seven\"\n    elseif a == 8 then\n    \
    \  return \"Eight\"\n    elseif a == 9 then\n      return \"Nine\"\n    end\n\
    \  end\n  local function filter_func(a)\n    return a >= 1 and a <= 9\n  end\n\
    \  local function map_func(a)\n    return replace_func(a)\n  end\n  local function\
    \ reduce_func(a, b)\n    return a .. b\n  end\n  local function reduce_func_2(a,\
    \ b)\n    return a .. \" \" .. b\n  end\n  local function reduce_func_3(a, b)\n\
    \    return a .. \",\" .. b\n  end\n  local function reduce_func_4(a, b)\n   \
    \ return a .. \".\" .. b\n  end\n  local function reduce_func_5(a, b)\n    return\
    \ a .. \"!\" .. b\n  end\n  local function reduce_func_6(a, b)\n    return a ..\
    \ \"?\" .. b\n  end\n  local function reduce_func_7(a, b)\n    return a .. \"\
    \ \" .. b\n  end\n  local function reduce_func_8(a, b)\n    return a .. \",\"\
    \ .. b\n  end\n  local function reduce_func_9(a, b)\n    return a .. \".\" ..\
    \ b\n  end\n  local function reduce_func_10(a, b)\n    return a .. \"!\" .. b\n\
    \  end\n  local function reduce_func_11(a, b)\n    return a .. \"?\" .. b\n  end\n\
    \  local", "    local result = {}\n    local numbers = {\n        [1] = \"One\"\
    ,\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n\
    \        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n \
    \       [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr)\
    \ do\n        if v > 0 and v < 10 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    table.sort(result)\n    local reverse = {}\n    for\
    \ i = #result, 1, -1 do\n        table.insert(reverse, result[i])\n    end\n \
    \   return reverse\nend", "    local res = {}\n    local map = {\n        [1]\
    \ = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] =\
    \ \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"\
    Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    for i, v in ipairs(res) do\n\
    \        res[i] = map[v]\n    end\n    return res\nend", "    local result = {}\n\
    \    local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n\
    \            table.insert(result, numbers[v])\n        end\n    end\n    table.sort(result,\
    \ function(a, b) return #a > #b end)\n    return result\nend", "    local result\
    \ = {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n\
    \        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >\
    \ 0 and v < 10 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local result =\
    \ {}\n    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n\
    \        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local res = {}\n\
    \    local dict = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3]\
    \ = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6]\
    \ = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9]\
    \ = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v > 0 and v <\
    \ 10 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    for i, v in ipairs(res) do\n        res[i] = dict[v]\n    end\n    return\
    \ res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
