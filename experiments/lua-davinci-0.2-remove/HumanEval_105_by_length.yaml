name: HumanEval_105_by_length
language: lua
prompt: "-- Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n-- reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length([2, 1,\
  \ 1, 4, 5, 8, 2, 3])   \n-- [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
  \ \"Two\", \"One\", \"One\"]\n-- If the array is empty, return an empty array:\n\
  -- If the array has any strange number ignore it:\n-- >>> by_length([1, -1 , 55])\
  \ \n-- ['One']\nlocal function by_length(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
  \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
  \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
  \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
  \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
  \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    local numbers = {\n        [1] = \"One\"\
    ,\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n\
    \        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n \
    \       [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n\
    \        if arr[i] >= 1 and arr[i] <= 9 then\n            result[#result + 1]\
    \ = numbers[arr[i]]\n        end\n    end\n    return result\nend", "  local res\
    \ = {}\n  local map = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"\
    Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7]\
    \ = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for i = 1, #arr\
    \ do\n    local v = arr[i]\n    if v >= 1 and v <= 9 then\n      res[#res + 1]\
    \ = v\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i] = map[res[i]]\n\
    \  end\n  return res\nend", "    local result = {}\n    local numbers = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ numbers[v])\n        end\n    end\n    table.sort(result, function(a, b) return\
    \ #a > #b end)\n    return result\nend", "  local res = {}\n  local nums = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i =\
    \ 1, #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n      res[#res + 1] = nums[arr[i]]\n\
    \    end\n  end\n  return res\nend", "  local result = {}\n  local numbers = {\n\
    \    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\"\
    ,\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"\
    Eight\",\n    [9] = \"Nine\"\n  }\n  for i = 1, #arr do\n    if arr[i] >= 1 and\
    \ arr[i] <= 9 then\n      table.insert(result, numbers[arr[i]])\n    end\n  end\n\
    \  table.sort(result)\n  table.reverse(result)\n  return result\nend", "    local\
    \ result = {}\n    local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'}\n    for i, v in ipairs(arr) do\n        if v >= 1\
    \ and v <= 9 then\n            table.insert(result, numbers[v])\n        end\n\
    \    end\n    table.sort(result, function(a, b) return #a > #b end)\n    return\
    \ result\nend", "  local result = {}\n  local numbers = {\n    [1] = \"One\",\n\
    \    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\"\
    ,\n    [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"\
    Nine\"\n  }\n  for i, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n   \
    \   table.insert(result, numbers[v])\n    end\n  end\n  table.sort(result)\n \
    \ local reversed = {}\n  for i = #result, 1, -1 do\n    table.insert(reversed,\
    \ result[i])\n  end\n  return reversed\nend", "    local res = {}\n    local map\
    \ = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\"\
    ,\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n\
    \        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n\
    \    }\n    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(res, v)\n        end\n    end\n    table.sort(res)\n \
    \   for i, v in ipairs(res) do\n        res[i] = map[v]\n    end\n    return res\n\
    end", "    local new_arr = {}\n    local dict = {\n        [1] = \"One\",\n  \
    \      [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n   \
    \     [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n    \
    \    [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for i = 1, #arr do\n\
    \        if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(new_arr,\
    \ arr[i])\n        end\n    end\n    table.sort(new_arr)\n    for i = 1, #new_arr\
    \ do\n        new_arr[i] = dict[new_arr[i]]\n    end\n    return new_arr\nend",
  "    local result = {}\n    local numbers = {'One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'}\n    for i = 1, #arr do\n        if arr[i]\
    \ > 0 and arr[i] < 10 then\n            result[#result + 1] = numbers[arr[i]]\n\
    \        end\n    end\n    return result\nend", "  local res = {}\n  local map\
    \ = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] =\
    \ \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\",\n \
    \   [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for _, v in ipairs(arr) do\n\
    \    if v >= 1 and v <= 9 then\n      table.insert(res, v)\n    end\n  end\n \
    \ table.sort(res)\n  for i = 1, #res do\n    res[i] = map[res[i]]\n  end\n  return\
    \ res\nend", "  local result = {}\n  local numbers = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i = 1, #arr do\n    if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n      result[#result + 1] = numbers[arr[i]]\n   \
    \ end\n  end\n  return result\nend", "    local result = {}\n    local numbers\
    \ = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   result[#result + 1] = numbers[v]\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local numbers = {\n        [1] = \"One\",\n\
    \        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n \
    \       [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n  \
    \      [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 and v < 10 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    return result\nend", "    local res = {}\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    local res2 = {}\n    for\
    \ i = #res, 1, -1 do\n        table.insert(res2, res[i])\n    end\n    local res3\
    \ = {}\n    for _, v in ipairs(res2) do\n        table.insert(res3, tostring(v))\n\
    \    end\n    return res3\nend", "    local res = {}\n    local map = {\n    \
    \    [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n      \
    \  [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7]\
    \ = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for\
    \ i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    for i, v in ipairs(res) do\n\
    \        res[i] = map[v]\n    end\n    return res\nend", "  local result = {}\n\
    \  for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      result[#result\
    \ + 1] = v\n    end\n  end\n  table.sort(result)\n  for i, v in ipairs(result)\
    \ do\n    result[i] = names[v]\n  end\n  return result\nend", "  local res = {}\n\
    \  local map = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\"\
    ,\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"\
    Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for i, v in ipairs(arr)\
    \ do\n    if v >= 1 and v <= 9 then\n      table.insert(res, v)\n    end\n  end\n\
    \  table.sort(res)\n  for i, v in ipairs(res) do\n    res[i] = map[v]\n  end\n\
    \  return res\nend", "  local res = {}\n  local map = {\n    [1] = \"One\",\n\
    \    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\"\
    ,\n    [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"\
    Nine\"\n  }\n  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n \
    \     res[#res + 1] = map[arr[i]]\n    end\n  end\n  return res\nend", "  local\
    \ res = {}\n  local map = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] =\
    \ \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n \
    \   [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for _,\
    \ v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      res[#res + 1] = map[v]\n\
    \    end\n  end\n  return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
