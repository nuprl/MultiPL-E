language: lua
name: HumanEval_85_add
results:
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if lst[i] % 2 == 0 and i % 2 ~= 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jo23pak.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp7jo23pak.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if i % 2 == 1 and lst[i] % 2 == 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48t5g4za.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp48t5g4za.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if i % 2 == 1 and lst[i] % 2 == 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48t5g4za.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp48t5g4za.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if i % 2 == 1 and lst[i] % 2 == 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48t5g4za.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp48t5g4za.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 0 and i % 2 ~= 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pio5qtj.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_pio5qtj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8oxuc72.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpj8oxuc72.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8oxuc72.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpj8oxuc72.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8oxuc72.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpj8oxuc72.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if i % 2 == 1 and lst[i] % 2 == 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48t5g4za.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp48t5g4za.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8oxuc72.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpj8oxuc72.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if (i % 2 == 1) and (v % 2 == 0) then\n    \
    \  sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jo1njbm.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp8jo1njbm.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i = 1, #lst do\n        if i % 2 == 1 and lst[i] % 2 == 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjeknj3m.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpcjeknj3m.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if lst[i] % 2 == 0 and i % 2 ~= 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jo23pak.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp7jo23pak.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if i % 2 == 1 and lst[i] % 2 == 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48t5g4za.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp48t5g4za.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0hmbqnc.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc0hmbqnc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8oxuc72.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpj8oxuc72.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8oxuc72.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpj8oxuc72.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwqugw3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3gwqugw3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u65jyb7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0u65jyb7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
