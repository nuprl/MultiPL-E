name: HumanEval_56_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
  \ bracket has a corresponding closing bracket.\nlocal function correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
  \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
  \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
  \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
  \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal stack = {}\n\tfor i = 1, #brackets do\n\t\tlocal c = brackets:sub(i,\
    \ i)\n\t\tif c == \"<\" then\n\t\t\ttable.insert(stack, c)\n\t\telseif c == \"\
    >\" then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\ttable.remove(stack)\n\
    \t\tend\n\tend\n\treturn #stack == 0\nend", "    local stack = {}\n    for i =\
    \ 1, #brackets do\n        local c = brackets:sub(i, i)\n        if c == \"<\"\
    \ then\n            table.insert(stack, c)\n        elseif c == \">\" then\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local stack = {}\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == \"<\" then\n            table.insert(stack, c)\n       \
    \ elseif c == \">\" then\n            if #stack == 0 then\n                return\
    \ false\n            end\n            table.remove(stack)\n        end\n    end\n\
    \    return #stack == 0\nend", "    local stack = {}\n    for i = 1, #brackets\
    \ do\n        local c = brackets:sub(i, i)\n        if c == \"<\" then\n     \
    \       table.insert(stack, c)\n        elseif c == \">\" then\n            if\
    \ #stack == 0 then\n                return false\n            end\n          \
    \  table.remove(stack)\n        end\n    end\n    return #stack == 0\nend", " \
    \ local stack = {}\n  for i = 1, #brackets do\n    local c = brackets:sub(i, i)\n\
    \    if c == \"<\" then\n      stack[#stack + 1] = c\n    elseif c == \">\" then\n\
    \      if #stack == 0 then\n        return false\n      end\n      stack[#stack]\
    \ = nil\n    end\n  end\n  return #stack == 0\nend", "\tlocal stack = {}\n\tfor\
    \ i = 1, #brackets do\n\t\tlocal c = brackets:sub(i, i)\n\t\tif c == \"<\" then\n\
    \t\t\ttable.insert(stack, c)\n\t\telseif c == \">\" then\n\t\t\tif #stack == 0\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\ttable.remove(stack)\n\t\tend\n\t\
    end\n\treturn #stack == 0\nend", "    local stack = {}\n    for i = 1, #brackets\
    \ do\n        local c = brackets:sub(i, i)\n        if c == \"<\" then\n     \
    \       stack[#stack + 1] = c\n        elseif c == \">\" then\n            if\
    \ #stack == 0 then\n                return false\n            end\n          \
    \  stack[#stack] = nil\n        end\n    end\n    return #stack == 0\nend", " \
    \ local stack = {}\n  for i = 1, #brackets do\n    local b = brackets:sub(i, i)\n\
    \    if b == \"<\" then\n      table.insert(stack, b)\n    elseif b == \">\" then\n\
    \      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "\tlocal stack = {}\n\tfor i = 1,\
    \ #brackets do\n\t\tlocal c = brackets:sub(i, i)\n\t\tif c == \"<\" then\n\t\t\
    \ttable.insert(stack, c)\n\t\telseif c == \">\" then\n\t\t\tif #stack == 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\ttable.remove(stack)\n\t\tend\n\tend\n\t\
    return #stack == 0\nend", "    local stack = {}\n    for i = 1, #brackets do\n\
    \        local bracket = brackets:sub(i, i)\n        if bracket == \"<\" then\n\
    \            table.insert(stack, bracket)\n        elseif bracket == \">\" then\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "    local count = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == \"<\" then\n            count = count + 1\n        else\n            count\
    \ = count - 1\n        end\n        if count < 0 then\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "  local stack = {}\n  for\
    \ i = 1, #brackets do\n    local c = brackets:sub(i, i)\n    if c == \"<\" then\n\
    \      table.insert(stack, c)\n    elseif c == \">\" then\n      if #stack ==\
    \ 0 then\n        return false\n      end\n      table.remove(stack)\n    end\n\
    \  end\n  return #stack == 0\nend", "  local stack = {}\n  for i = 1, #brackets\
    \ do\n    local c = brackets:sub(i, i)\n    if c == \"<\" then\n      table.insert(stack,\
    \ c)\n    elseif c == \">\" then\n      if #stack == 0 then\n        return false\n\
    \      end\n      table.remove(stack)\n    end\n  end\n  return #stack == 0\n\
    end", "  local stack = {}\n  for i = 1, #brackets do\n    local c = brackets:sub(i,\
    \ i)\n    if c == \"<\" then\n      table.insert(stack, c)\n    elseif c == \"\
    >\" then\n      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "    local stack = {}\n    for i\
    \ = 1, #brackets do\n        local c = brackets:sub(i, i)\n        if c == \"\
    <\" then\n            table.insert(stack, c)\n        elseif c == \">\" then\n\
    \            if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "\tlocal stack = {}\n\tfor i = 1, #brackets do\n\t\tlocal c = brackets:sub(i,\
    \ i)\n\t\tif c == \"<\" then\n\t\t\ttable.insert(stack, c)\n\t\telseif c == \"\
    >\" then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\ttable.remove(stack)\n\
    \t\tend\n\tend\n\treturn #stack == 0\nend", "  local stack = {}\n  for i = 1,\
    \ #brackets do\n    local c = brackets:sub(i, i)\n    if c == \"<\" then\n   \
    \   table.insert(stack, c)\n    elseif c == \">\" then\n      if #stack == 0 then\n\
    \        return false\n      end\n      table.remove(stack)\n    end\n  end\n\
    \  return #stack == 0\nend", "    local stack = {}\n    for i = 1, #brackets do\n\
    \        local b = brackets:sub(i, i)\n        if b == \"<\" then\n          \
    \  table.insert(stack, b)\n        elseif b == \">\" then\n            if #stack\
    \ == 0 then\n                return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "    local count = 0\n  \
    \  for i = 1, #brackets do\n        local c = brackets:sub(i, i)\n        if c\
    \ == \"<\" then\n            count = count + 1\n        elseif c == \">\" then\n\
    \            count = count - 1\n        end\n        if count < 0 then\n     \
    \       return false\n        end\n    end\n    return count == 0\nend", "   \
    \ local stack = {}\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == \"<\" then\n            table.insert(stack, c)\n       \
    \ elseif c == \">\" then\n            if #stack == 0 then\n                return\
    \ false\n            end\n            table.remove(stack)\n        end\n    end\n\
    \    return #stack == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
