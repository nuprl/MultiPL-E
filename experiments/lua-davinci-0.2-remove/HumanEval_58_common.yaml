name: HumanEval_58_common
language: lua
prompt: "-- Return sorted unique common elements for two lists.\nlocal function common(l1,\
  \ l2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
  \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}),\
  \ {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n \
  \   lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4,\
  \ 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local t = {}\n  for _, v in ipairs(l1) do\n    if contains(l2, v)\
    \ then\n      t[#t+1] = v\n    end\n  end\n  return sort(t)\nend", "  local t\
    \ = {}\n  for _, v in ipairs(l1) do\n    if contains(l2, v) then\n      t[#t+1]\
    \ = v\n    end\n  end\n  return unique(t)\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l1) do\n    if utils.contains(l2, v) then\n      table.insert(t, v)\n\
    \    end\n  end\n  table.sort(t)\n  return t\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l1) do\n        if contains(l2, v) then\n            table.insert(t,\
    \ v)\n        end\n    end\n    return sort_unique(t)\nend", "    local t = {}\n\
    \    for _, v in ipairs(l1) do\n        if contains(l2, v) then\n            t[#t+1]\
    \ = v\n        end\n    end\n    return sort(t)\nend", "  local t = {}\n  for\
    \ _, v in ipairs(l1) do\n    if contains(l2, v) then\n      t[#t+1] = v\n    end\n\
    \  end\n  return sort(t)\nend", "    local t = {}\n    for _, v in ipairs(l1)\
    \ do\n        if contains(l2, v) then\n            t[#t+1] = v\n        end\n\
    \    end\n    return sort_unique(t)\nend", "  local t = {}\n  for _, v in ipairs(l1)\
    \ do\n    if contains(l2, v) then\n      t[#t+1] = v\n    end\n  end\n  return\
    \ sort(t)\nend", "  local t = {}\n  for _, v in ipairs(l1) do\n    if contains(l2,\
    \ v) then\n      t[#t+1] = v\n    end\n  end\n  return sort(t)\nend", "\tlocal\
    \ t = {}\n\tfor _, v in ipairs(l1) do\n\t\tif contains(l2, v) then\n\t\t\tt[#t+1]\
    \ = v\n\t\tend\n\tend\n\treturn sort_unique(t)\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l1) do\n        if contains(l2, v) then\n            t[#t+1]\
    \ = v\n        end\n    end\n    return unique(t)\nend", "    local t = {}\n \
    \   for _, v in ipairs(l1) do\n        if contains(l2, v) then\n            t[#t+1]\
    \ = v\n        end\n    end\n    return sort(t)\nend", "  local t = {}\n  for\
    \ _, v in ipairs(l1) do\n    if contains(l2, v) then\n      t[#t+1] = v\n    end\n\
    \  end\n  return sort(t)\nend", "  local t = {}\n  for _, v in ipairs(l1) do\n\
    \    if contains(l2, v) then\n      t[#t+1] = v\n    end\n  end\n  return unique(t)\n\
    end", "    local t = {}\n    for _, v in ipairs(l1) do\n        if contains(l2,\
    \ v) then\n            t[#t+1] = v\n        end\n    end\n    return sort(t)\n\
    end", "    local t = {}\n    for _, v in ipairs(l1) do\n        if contains(l2,\
    \ v) then\n            t[#t+1] = v\n        end\n    end\n    return sort(t)\n\
    end", "  local t = {}\n  for _, v in ipairs(l1) do\n    if contains(l2, v) then\n\
    \      t[#t+1] = v\n    end\n  end\n  return unique(t)\nend", "\tlocal t = {}\n\
    \tfor _, v in ipairs(l1) do\n\t\tif contains(l2, v) then\n\t\t\tt[#t+1] = v\n\t\
    \tend\n\tend\n\treturn sort(t)\nend", "    local t = {}\n    for _, v in ipairs(l1)\
    \ do\n        if contains(l2, v) then\n            t[#t+1] = v\n        end\n\
    \    end\n    return sort(t)\nend", "  local t = {}\n  for _, v in ipairs(l1)\
    \ do\n    if contains(l2, v) then\n      table.insert(t, v)\n    end\n  end\n\
    \  return sort(t)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
