name: HumanEval_12_longest
language: lua
prompt: "-- Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n-- strings of the same length. Return None in case the input\
  \ list is empty.\nlocal function longest(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
  \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk',\
  \ 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local longest = nil\n    for _, s in ipairs(strings) do\n     \
    \   if not longest or #s > #longest then\n            longest = s\n        end\n\
    \    end\n    return longest\nend", "    if #strings == 0 then\n        return\
    \ nil\n    end\n    local longest = strings[1]\n    for _, s in ipairs(strings)\
    \ do\n        if #s > #longest then\n            longest = s\n        end\n  \
    \  end\n    return longest\nend", "    if #strings == 0 then\n        return nil\n\
    \    end\n    local longest = strings[1]\n    for _, s in ipairs(strings) do\n\
    \        if #s > #longest then\n            longest = s\n        end\n    end\n\
    \    return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n \
    \ local longest = strings[1]\n  for _, s in ipairs(strings) do\n    if #s > #longest\
    \ then\n      longest = s\n    end\n  end\n  return longest\nend", "    if #strings\
    \ == 0 then\n        return nil\n    end\n    local longest_string = strings[1]\n\
    \    for _, str in ipairs(strings) do\n        if #str > #longest_string then\n\
    \            longest_string = str\n        end\n    end\n    return longest_string\n\
    end", "    local longest_string = nil\n    local longest_length = 0\n    for _,\
    \ s in ipairs(strings) do\n        if #s > longest_length then\n            longest_string\
    \ = s\n            longest_length = #s\n        end\n    end\n    return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_string\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] > #longest_string\
    \ then\n      longest_string = strings[i]\n    end\n  end\n  return longest_string\n\
    end", "    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end", "    local longest_string = nil\n    local longest_length = 0\n    for _,\
    \ string in ipairs(strings) do\n        local length = string.len(string)\n  \
    \      if length > longest_length then\n            longest_string = string\n\
    \            longest_length = length\n        end\n    end\n    return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest then\n      longest =\
    \ s\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_string = strings[1]\n  for _, s in ipairs(strings)\
    \ do\n    if #s > #longest_string then\n      longest_string = s\n    end\n  end\n\
    \  return longest_string\nend", "    if #strings == 0 then\n        return nil\n\
    \    end\n    local longest_string = strings[1]\n    for _, s in ipairs(strings)\
    \ do\n        if #s > #longest_string then\n            longest_string = s\n \
    \       end\n    end\n    return longest_string\nend", "    if #strings == 0 then\n\
    \        return nil\n    end\n    local longest = strings[1]\n    for _, s in\
    \ ipairs(strings) do\n        if #s > #longest then\n            longest = s\n\
    \        end\n    end\n    return longest\nend", "    local max_length = 0\n \
    \   local longest_string = nil\n    for _, s in ipairs(strings) do\n        if\
    \ s:len() > max_length then\n            max_length = s:len()\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for _, s in ipairs(strings)\
    \ do\n    if #s > #longest then\n      longest = s\n    end\n  end\n  return longest\n\
    end", "    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest_string = strings[1]\n  for _, s in ipairs(strings) do\n    if #s > #longest_string\
    \ then\n      longest_string = s\n    end\n  end\n  return longest_string\nend",
  "    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend", "    if #strings\
    \ == 0 then\n        return nil\n    end\n    local longest_string = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest_string then\n  \
    \          longest_string = s\n        end\n    end\n    return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest then\n      longest =\
    \ s\n    end\n  end\n  return longest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
