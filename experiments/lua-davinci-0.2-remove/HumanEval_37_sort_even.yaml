name: HumanEval_37_sort_even
language: lua
prompt: "-- This function takes a list l and returns a list l' such that\n-- l' is\
  \ identical to l in the odd indicies, while its values at the even indicies are\
  \ equal\n-- to the values of the even indicies of l, but sorted.\nlocal function\
  \ sort_even(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_even\n\
  \    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n\
  \    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8,\
  \ 3, 4, 5, 2, 12, 11, 23, -10})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local l_even = {}\n    local l_odd = {}\n    local l_sorted = {}\n\
    \    for i, v in ipairs(l) do\n        if i % 2 == 0 then\n            table.insert(l_even,\
    \ v)\n        else\n            table.insert(l_odd, v)\n        end\n    end\n\
    \    table.sort(l_even)\n    for i, v in ipairs(l_odd) do\n        table.insert(l_sorted,\
    \ v)\n        table.insert(l_sorted, l_even[i])\n    end\n    return l_sorted\n\
    end", "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\
    \tif i % 2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,\
    \ v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in\
    \ ipairs(l_odd) do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\
    \tend\n\treturn l_new\nend", "\tlocal l_new = {}\n\tfor i = 1, #l do\n\t\tif i\
    \ % 2 == 0 then\n\t\t\tlocal l_sub = {}\n\t\t\tfor j = 1, #l[i] do\n\t\t\t\tl_sub[j]\
    \ = l[i][j]\n\t\t\tend\n\t\t\ttable.sort(l_sub)\n\t\t\tl_new[i] = l_sub\n\t\t\
    else\n\t\t\tl_new[i] = l[i]\n\t\tend\n\tend\n\treturn l_new\nend", "  local l_even\
    \ = {}\n  local l_odd = {}\n  local l_sorted = {}\n  for i, v in ipairs(l) do\n\
    \    if i % 2 == 0 then\n      table.insert(l_even, v)\n    else\n      table.insert(l_odd,\
    \ v)\n    end\n  end\n  table.sort(l_even)\n  for i, v in ipairs(l_odd) do\n \
    \   table.insert(l_sorted, v)\n    table.insert(l_sorted, l_even[i])\n  end\n\
    \  return l_sorted\nend", "\tlocal l_new = {}\n\tfor i, v in ipairs(l) do\n\t\t\
    if i % 2 == 0 then\n\t\t\tlocal temp = {}\n\t\t\tfor j, w in ipairs(v) do\n\t\t\
    \t\ttable.insert(temp, w)\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\ttable.insert(l_new,\
    \ temp)\n\t\telse\n\t\t\ttable.insert(l_new, v)\n\t\tend\n\tend\n\treturn l_new\n\
    end", "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tlocal l_sorted = {}\n\tlocal\
    \ i = 1\n\tfor k, v in ipairs(l) do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_even,\
    \ v)\n\t\telse\n\t\t\ttable.insert(l_odd, v)\n\t\tend\n\t\ti = i + 1\n\tend\n\t\
    table.sort(l_even)\n\ti = 1\n\tfor k, v in ipairs(l_odd) do\n\t\ttable.insert(l_sorted,\
    \ v)\n\t\ttable.insert(l_sorted, l_even[i])\n\t\ti = i + 1\n\tend\n\treturn l_sorted\n\
    end", "    local l_even = {}\n    local l_odd = {}\n    for i, v in ipairs(l)\
    \ do\n        if i % 2 == 0 then\n            table.insert(l_even, v)\n      \
    \  else\n            table.insert(l_odd, v)\n        end\n    end\n    table.sort(l_even)\n\
    \    local l_new = {}\n    for i, v in ipairs(l_odd) do\n        table.insert(l_new,\
    \ v)\n        table.insert(l_new, l_even[i])\n    end\n    return l_new\nend",
  "    local l_even = {}\n    local l_odd = {}\n    local l_sorted = {}\n    for i,\
    \ v in ipairs(l) do\n        if i % 2 == 0 then\n            table.insert(l_even,\
    \ v)\n        else\n            table.insert(l_odd, v)\n        end\n    end\n\
    \    table.sort(l_even)\n    for i, v in ipairs(l_odd) do\n        table.insert(l_sorted,\
    \ v)\n        table.insert(l_sorted, l_even[i])\n    end\n    return l_sorted\n\
    end", "    local l_even = {}\n    local l_odd = {}\n    for i = 1, #l do\n   \
    \     if i % 2 == 0 then\n            table.insert(l_even, l[i])\n        else\n\
    \            table.insert(l_odd, l[i])\n        end\n    end\n    table.sort(l_even)\n\
    \    local l_new = {}\n    for i = 1, #l_odd do\n        table.insert(l_new, l_odd[i])\n\
    \        table.insert(l_new, l_even[i])\n    end\n    return l_new\nend", "  \
    \  local l_even = {}\n    local l_odd = {}\n    for i, v in ipairs(l) do\n   \
    \     if i % 2 == 0 then\n            table.insert(l_even, v)\n        else\n\
    \            table.insert(l_odd, v)\n        end\n    end\n    table.sort(l_even)\n\
    \    local l_new = {}\n    for i, v in ipairs(l_odd) do\n        table.insert(l_new,\
    \ v)\n        table.insert(l_new, l_even[i])\n    end\n    return l_new\nend",
  "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %\
    \ 2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,\
    \ v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in\
    \ ipairs(l_odd) do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\
    \tend\n\treturn l_new\nend", "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tlocal\
    \ l_sorted = {}\n\tfor i = 1, #l do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_even,\
    \ l[i])\n\t\telse\n\t\t\ttable.insert(l_odd, l[i])\n\t\tend\n\tend\n\ttable.sort(l_even)\n\
    \tfor i = 1, #l_odd do\n\t\ttable.insert(l_sorted, l_odd[i])\n\t\ttable.insert(l_sorted,\
    \ l_even[i])\n\tend\n\treturn l_sorted\nend", "    local l_even = {}\n    local\
    \ l_odd = {}\n    local l_sorted = {}\n    for k, v in ipairs(l) do\n        if\
    \ k % 2 == 0 then\n            table.insert(l_even, v)\n        else\n       \
    \     table.insert(l_odd, v)\n        end\n    end\n    table.sort(l_even)\n \
    \   for k, v in ipairs(l_odd) do\n        table.insert(l_sorted, v)\n        table.insert(l_sorted,\
    \ l_even[k])\n    end\n    return l_sorted\nend", "\tlocal l_even = {}\n\tlocal\
    \ l_odd = {}\n\tlocal l_sorted = {}\n\tfor i,v in ipairs(l) do\n\t\tif i % 2 ==\
    \ 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd, v)\n\
    \t\tend\n\tend\n\ttable.sort(l_even)\n\tfor i,v in ipairs(l_odd) do\n\t\ttable.insert(l_sorted,\
    \ v)\n\t\ttable.insert(l_sorted, l_even[i])\n\tend\n\treturn l_sorted\nend", "\t\
    local l_even = {}\n\tlocal l_odd = {}\n\tlocal l_sorted = {}\n\tfor i, v in ipairs(l)\
    \ do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\t\
    table.insert(l_odd, v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tfor i, v in ipairs(l_odd)\
    \ do\n\t\ttable.insert(l_sorted, v)\n\t\ttable.insert(l_sorted, l_even[i])\n\t\
    end\n\treturn l_sorted\nend", "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor\
    \ i, v in ipairs(l) do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\
    \t\telse\n\t\t\ttable.insert(l_odd, v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\
    \tlocal l_new = {}\n\tfor i, v in ipairs(l_odd) do\n\t\ttable.insert(l_new, v)\n\
    \t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn l_new\nend", "    local l_even\
    \ = {}\n    local l_odd = {}\n    for i, v in ipairs(l) do\n        if i % 2 ==\
    \ 0 then\n            table.insert(l_even, v)\n        else\n            table.insert(l_odd,\
    \ v)\n        end\n    end\n    table.sort(l_even)\n    local l_new = {}\n   \
    \ for i, v in ipairs(l_odd) do\n        table.insert(l_new, v)\n        table.insert(l_new,\
    \ l_even[i])\n    end\n    return l_new\nend", "    local l_even = {}\n    local\
    \ l_odd = {}\n    for i, v in ipairs(l) do\n        if i % 2 == 0 then\n     \
    \       table.insert(l_even, v)\n        else\n            table.insert(l_odd,\
    \ v)\n        end\n    end\n    table.sort(l_even)\n    local l_new = {}\n   \
    \ for i, v in ipairs(l_odd) do\n        table.insert(l_new, v)\n        table.insert(l_new,\
    \ l_even[i])\n    end\n    return l_new\nend", "  local l_ = {}\n  for i = 1,\
    \ #l do\n    if i % 2 == 0 then\n      table.insert(l_, i, table.sort(l[i]))\n\
    \    else\n      table.insert(l_, i, l[i])\n    end\n  end\n  return l_\nend",
  "\tlocal l_new = {}\n\tfor i = 1, #l do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_new,\
    \ table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_new, l[i])\n\t\tend\n\tend\n\
    \treturn l_new\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
