language: lua
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickselect(arr, l, r, k)\n   \
    \     local p = partition(arr, l, r)\n        if p == k then\n            return\n\
    \        elseif p > k then\n            quickselect(arr, l, p - 1, k)\n      \
    \  else\n            quickselect(arr, p + 1, r, k)\n        end\n    end\n   \
    \ quickselect(arr, 1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1,\
    \ n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakftdi9q.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpakftdi9q.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            if i < j then\n     \
    \           arr[i] = arr[j]\n                i = i + 1\n            end\n    \
    \        while i < j and arr[i] >= pivot do\n                i = i + 1\n     \
    \       end\n            if i < j then\n                arr[j] = arr[i]\n    \
    \            j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local p = partition(arr, l, r)\n            quickSort(arr,\
    \ l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, n)\n    local res = {}\n    for i = n, n - k + 1, -1 do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtab4cq5.lua:56:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmphtab4cq5.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        local\
    \ j = 1\n        while j <= k do\n            if arr[i] > res[j] then\n      \
    \          table.remove(res, j)\n                table.insert(res, j, arr[i])\n\
    \                break\n            end\n            j = j + 1\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpba9_535l.lua:42:\
    \ expected: {0, 1, 2, 20}\nactual: {2, 0, 1, 20}\nstack traceback:\n\t/tmp/tmpba9_535l.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            if i < j then\n                arr[i] = arr[j]\n \
    \               i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quick_sort(l, r)\n        if l < r then\n            local pivot\
    \ = partition(l, r)\n            quick_sort(l, pivot - 1)\n            quick_sort(pivot\
    \ + 1, r)\n        end\n    end\n    quick_sort(1, n)\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7jg687w.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpe7jg687w.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxprcx291.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpxprcx291.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    local function partition(left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(left, right)\n        if left < right\
    \ then\n            local mid = partition(left, right)\n            quick_sort(left,\
    \ mid - 1)\n            quick_sort(mid + 1, right)\n        end\n    end\n   \
    \ quick_sort(1, len)\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ancn38u.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp7ancn38u.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local heap = {}\n    for i =\
    \ 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n      \
    \  local j = i\n        while j * 2 <= k do\n            local l = j * 2\n   \
    \         local r = l + 1\n            if r <= k and heap[r] < heap[l] then\n\
    \                l = r\n            end\n            if heap[j] > heap[l] then\n\
    \                heap[j], heap[l] = heap[l], heap[j]\n                j = l\n\
    \            else\n                break\n            end\n        end\n    end\n\
    \    for i = k + 1, n do\n        if arr[i] > heap[1] then\n            heap[1]\
    \ = arr[i]\n            local j = 1\n            while j * 2 <= k do\n       \
    \         local l = j * 2\n                local r = l + 1\n                if\
    \ r <= k and heap[r] < heap[l] then\n                    l = r\n             \
    \   end\n                if heap[j] > heap[l] then\n                    heap[j],\
    \ heap[l] = heap[l], heap[j]\n                    j = l\n                else\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0xoqtus.lua:60:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpo0xoqtus.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quickSort(arr, l, m - 1)\n            quickSort(arr, m +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk88t7wsd.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpk88t7wsd.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == 0 then\n        return {}\n    elseif k ==\
    \ len then\n        return arr\n    end\n    local function partition(arr, l,\
    \ r)\n        local pivot = arr[l]\n        local i = l + 1\n        local j =\
    \ r\n        while i <= j do\n            while i <= j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            while i <= j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n \
    \       end\n        arr[l], arr[j] = arr[j], arr[l]\n        return j\n    end\n\
    \    local function quickSelect(arr, l, r, k)\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return arr\n        elseif p > k\
    \ then\n            return quickSelect(arr, l, p - 1, k)\n        else\n     \
    \       return quickSelect(arr, p + 1, r, k)\n        end\n    end\n    return\
    \ quickSelect(arr, 1, len, k)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwy10yg6.lua:51:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpjwy10yg6.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, n do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpupn8zslf.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpupn8zslf.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpupn8zslf.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local heap = {}\n    for i = 1, k do\n        heap[i]\
    \ = arr[i]\n    end\n    table.sort(heap)\n    for i = k + 1, len do\n       \
    \ if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            table.sort(heap)\n\
    \        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmd57vcs.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpvmd57vcs.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpvmd57vcs.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function quickSort(arr, left, right)\n        if\
    \ left >= right then return end\n        local i, j = left, right\n        local\
    \ pivot = arr[i]\n        while i < j do\n            while i < j and arr[j] <=\
    \ pivot do j = j - 1 end\n            arr[i] = arr[j]\n            while i < j\
    \ and arr[i] >= pivot do i = i + 1 end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        quickSort(arr, left, i - 1)\n        quickSort(arr,\
    \ i + 1, right)\n    end\n    quickSort(arr, 1, n)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpske0kbyl.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpske0kbyl.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n\
    \ then\n        return arr\n    end\n    local function partition(left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local left = 1\n    local right = n\n    local\
    \ index = partition(left, right)\n    while index ~= k - 1 do\n        if index\
    \ > k - 1 then\n            right = index - 1\n            index = partition(left,\
    \ right)\n        else\n            left = index + 1\n            index = partition(left,\
    \ right)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n    \
    \    res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ir5ici8.lua:56:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp7ir5ici8.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(l, r)\n        if l < r then\n            local\
    \ p = partition(l, r)\n            if p == k then\n                return\n  \
    \          elseif p < k then\n                quickSelect(p + 1, r)\n        \
    \    else\n                quickSelect(l, p - 1)\n            end\n        end\n\
    \    end\n    quickSelect(1, n)\n    local res = {}\n    for i = 1, k do\n   \
    \     res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e11apqc.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp7e11apqc.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    local heap = {}\n \
    \   for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n\
    \        heapify(heap, i, k)\n    end\n    for i = k + 1, n do\n        if arr[i]\
    \ > heap[1] then\n            heap[1] = arr[i]\n            heapify(heap, 1, k)\n\
    \        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv2zjx90p.lua:18:\
    \ attempt to call global 'heapify' (a nil value)\nstack traceback:\n\t/tmp/tmpv2zjx90p.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpv2zjx90p.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    local heap = {}\n    for i = 1, k do\n        heap[i]\
    \ = arr[i]\n    end\n    for i = k, len do\n        local j = 1\n        while\
    \ j <= k and heap[j] > arr[i] do\n            j = j + 1\n        end\n       \
    \ if j <= k then\n            for l = k, j + 1, -1 do\n                heap[l]\
    \ = heap[l - 1]\n            end\n            heap[j] = arr[i]\n        end\n\
    \    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptk5z4xmo.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmptk5z4xmo.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if len == 0 then return {} end\n    if len == 1 then\
    \ return arr end\n    local res = {}\n    for i = 1, k do\n        local max =\
    \ arr[i]\n        local idx = i\n        for j = i + 1, len do\n            if\
    \ arr[j] > max then\n                max = arr[j]\n                idx = j\n \
    \           end\n        end\n        res[i] = max\n        arr[idx] = arr[i]\n\
    \        arr[i] = max\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8i9lvnnn.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp8i9lvnnn.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            table.remove(res, 1)\n            table.insert(res,\
    \ arr[i])\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwmv49t8.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdwmv49t8.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpdwmv49t8.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSort(arr, l, r)\n        if l < r then\n      \
    \      local pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, len)\n    local res = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res,\
    \ arr[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xul9l9j.lua:48:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp2xul9l9j.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, n do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpupn8zslf.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpupn8zslf.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpupn8zslf.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    local function heapify(arr, i, n)\n\
    \        local l, r = 2 * i, 2 * i + 1\n        local max = i\n        if l <=\
    \ n and arr[l] > arr[max] then\n            max = l\n        end\n        if r\
    \ <= n and arr[r] > arr[max] then\n            max = r\n        end\n        if\
    \ max ~= i then\n            arr[i], arr[max] = arr[max], arr[i]\n           \
    \ heapify(arr, max, n)\n        end\n    end\n    local function build_heap(arr,\
    \ n)\n        for i = math.floor(n / 2), 1, -1 do\n            heapify(arr, i,\
    \ n)\n        end\n    end\n    build_heap(res, k)\n    for i = k + 1, n do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            heapify(res,\
    \ 1, k)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_rsa8ys.lua:51:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpd_rsa8ys.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(l, r)\n        if l >= r then\n            return\n\
    \        end\n        local m = partition(l, r)\n        if m == k - 1 then\n\
    \            return\n        elseif m > k - 1 then\n            quickSelect(l,\
    \ m - 1)\n        else\n            quickSelect(m + 1, r)\n        end\n    end\n\
    \    quickSelect(1, n)\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7p2jw0u.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpe7p2jw0u.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l + 1\n        local\
    \ j = r\n        while i <= j do\n            while i <= j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            while i <= j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ if i < j then\n                arr[i], arr[j] = arr[j], arr[i]\n           \
    \ end\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n        return j\n\
    \    end\n    local function quickSelect(arr, l, r, k)\n        if l == r then\
    \ return arr[l] end\n        local j = partition(arr, l, r)\n        if j == k\
    \ then return arr[j] end\n        if j > k then\n            return quickSelect(arr,\
    \ l, j - 1, k)\n        else\n            return quickSelect(arr, j + 1, r, k)\n\
    \        end\n    end\n    local pivot = quickSelect(arr, 1, n, k)\n    local\
    \ res = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n           \
    \ res[#res + 1] = arr[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov8lvc__.lua:56:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpov8lvc__.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return arr[pivot]\n  \
    \      elseif pivot > k then\n            return quickSelect(arr, left, pivot\
    \ - 1, k)\n        else\n            return quickSelect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    local function sort(arr, left, right)\n      \
    \  if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            sort(arr, left, pivot - 1)\n            sort(arr, pivot + 1, right)\n\
    \        end\n    end\n    local function merge(arr, left, mid, right)\n     \
    \   local tmp = {}\n        local i = left\n        local j = mid + 1\n      \
    \  local k = 1\n        while i <= mid and j <= right do\n            if arr[i]\
    \ <= arr[j] then\n                tmp[k] = arr[i]\n                i = i + 1\n\
    \            else\n                tmp[k] = arr[j]\n                j = j + 1\n\
    \            end\n            k = k + 1\n        end\n        while i <= mid do\n\
    \            tmp[k] = arr[i]\n            i = i + 1\n            k = k + 1\n \
    \       end\n        while j <= right do\n            tmp[k] = arr[j]\n      \
    \      j = j + 1\n            k = k + 1\n        end\n        for i = left, right\
    \ do\n            arr[i] = tmp[i - left + 1]\n        end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd5pqurxc.lua:93: ''end'' expected (to close ''function'' at
    line 48) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            table.remove(res, 1)\n            table.insert(res,\
    \ arr[i])\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwmv49t8.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdwmv49t8.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpdwmv49t8.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    for i = k + 1, n do\n        local\
    \ j = 1\n        while j <= k and arr[i] > res[j] do\n            j = j + 1\n\
    \        end\n        if j <= k then\n            for l = k, j + 1, -1 do\n  \
    \              res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44ro0qgx.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp44ro0qgx.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l + 1\n        local j = r\n        while true do\n\
    \            while arr[i] < pivot and i < r do\n                i = i + 1\n  \
    \          end\n            while arr[j] > pivot and j > l do\n              \
    \  j = j - 1\n            end\n            if i >= j then\n                break\n\
    \            end\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n \
    \       arr[l], arr[j] = arr[j], arr[l]\n        return j\n    end\n    local\
    \ function quickselect(arr, l, r, k)\n        if l >= r then\n            return\n\
    \        end\n        local j = partition(arr, l, r)\n        if j == k then\n\
    \            return\n        elseif j > k then\n            quickselect(arr, l,\
    \ j - 1, k)\n        else\n            quickselect(arr, j + 1, r, k)\n       \
    \ end\n    end\n    quickselect(arr, 1, n, n - k + 1)\n    return arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0kafctc.lua:52:\
    \ expected: {4, 4}\nactual: {-4, 4, 4}\nstack traceback:\n\t/tmp/tmpy0kafctc.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local heap = {}\n    for i =\
    \ 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n      \
    \  heapify(heap, i, k)\n    end\n    for i = k + 1, n do\n        if arr[i] >\
    \ heap[1] then\n            heap[1] = arr[i]\n            heapify(heap, 1, k)\n\
    \        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6_ih8op.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpq6_ih8op.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if len == 0 then\n        return {}\n    end\n    if\
    \ k == 0 then\n        return {}\n    end\n    if k == len then\n        return\
    \ arr\n    end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    for i = k, 1, -1 do\n        local j = i * 2\n        while j <=\
    \ k do\n            if j + 1 <= k and heap[j + 1] > heap[j] then\n           \
    \     j = j + 1\n            end\n            if heap[i] >= heap[j] then\n   \
    \             break\n            end\n            heap[i], heap[j] = heap[j],\
    \ heap[i]\n            i = j\n            j = i * 2\n        end\n    end\n  \
    \  for i = k + 1, len do\n        if arr[i] > heap[1] then\n            heap[1]\
    \ = arr[i]\n            local j = 1\n            while j <= k do\n           \
    \     local t = j * 2\n                if t <= k and heap[t] > heap[t + 1] then\n\
    \                    t = t + 1\n                end\n                if heap[j]\
    \ >= heap[t] then\n                    break\n                end\n          \
    \      heap[j], heap[t] = heap[t], heap[j]\n                j = t\n          \
    \  end\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5x7znipp.lua:62:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp5x7znipp.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n\
    \ then\n        return arr\n    end\n    local function partition(l, r)\n    \
    \    local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(l,\
    \ r, k)\n        if l == r then\n            return\n        end\n        local\
    \ p = partition(l, r)\n        if p == k then\n            return\n        elseif\
    \ p < k then\n            quickSelect(p + 1, r, k)\n        else\n           \
    \ quickSelect(l, p - 1, k)\n        end\n    end\n    quickSelect(1, n, n - k\
    \ + 1)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hqvue5o.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp5hqvue5o.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    for i = k + 1, n do\n\
    \        local j = 1\n        while j <= k and res[j] < arr[i] do\n          \
    \  j = j + 1\n        end\n        if j <= k then\n            for l = k, j +\
    \ 1, -1 do\n                res[l] = res[l - 1]\n            end\n           \
    \ res[j] = arr[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrpe7lso.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpsrpe7lso.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(l, r)\n        if l < r then\n            local\
    \ p = partition(l, r)\n            if p == k then\n                return\n  \
    \          elseif p < k then\n                quickSelect(p + 1, r)\n        \
    \    else\n                quickSelect(l, p - 1)\n            end\n        end\n\
    \    end\n    quickSelect(1, n)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfx_smjo.lua:48:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmprfx_smjo.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_yg6cbm.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpw_yg6cbm.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpw_yg6cbm.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l + 1\n        local\
    \ j = r\n        while true do\n            while i <= j and arr[i] >= pivot do\
    \ i = i + 1 end\n            while i <= j and arr[j] <= pivot do j = j - 1 end\n\
    \            if i > j then break end\n            arr[i], arr[j] = arr[j], arr[i]\n\
    \        end\n        arr[l], arr[j] = arr[j], arr[l]\n        return j\n    end\n\
    \    local function quickselect(arr, l, r, k)\n        local j = partition(arr,\
    \ l, r)\n        if j == k then return arr[j] end\n        if j > k then return\
    \ quickselect(arr, l, j - 1, k) end\n        return quickselect(arr, j + 1, r,\
    \ k)\n    end\n    local function quickselect2(arr, l, r, k)\n        local j\
    \ = partition(arr, l, r)\n        if j == k then return arr end\n        if j\
    \ > k then return quickselect2(arr, l, j - 1, k) end\n        return quickselect2(arr,\
    \ j + 1, r, k)\n    end\n    local function quickselect3(arr, l, r, k)\n     \
    \   local j = partition(arr, l, r)\n        if j == k then return arr end\n  \
    \      if j > k then return quickselect3(arr, l, j - 1, k) end\n        return\
    \ quickselect3(arr, j + 1, r, k)\n    end\n    local function quickselect4(arr,\
    \ l, r, k)\n        local j = partition(arr, l, r)\n        if j == k then return\
    \ arr end\n        if j > k then return quickselect4(arr, l, j - 1, k) end\n \
    \       return quickselect4(arr, j + 1, r, k)\n    end\n    local function quickselect5(arr,\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv665rtrk.lua:53: '')'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local heap = {}\n    for i =\
    \ 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n      \
    \  local j = i * 2\n        while j <= k do\n            if j + 1 <= k and heap[j\
    \ + 1] < heap[j] then\n                j = j + 1\n            end\n          \
    \  if heap[i] <= heap[j] then\n                break\n            end\n      \
    \      heap[i], heap[j] = heap[j], heap[i]\n            i = j\n            j =\
    \ i * 2\n        end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1]\
    \ then\n            heap[1] = arr[i]\n            local j = 1\n            while\
    \ j <= k do\n                local l = j * 2\n                if l <= k and heap[l]\
    \ < heap[j] then\n                    j = l\n                end\n           \
    \     if l + 1 <= k and heap[l + 1] < heap[j] then\n                    j = l\
    \ + 1\n                end\n                if heap[i] <= heap[j] then\n     \
    \               break\n                end\n                heap[i], heap[j] =\
    \ heap[j], heap[i]\n                i = j\n                j = i * 2\n       \
    \     end\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6hgsu29.lua:60:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpm6hgsu29.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickselect(l, r, k)\n        if l == r then\n            return\n\
    \        end\n        local i = partition(l, r)\n        if i == k then\n    \
    \        return\n        elseif i < k then\n            quickselect(i + 1, r,\
    \ k)\n        else\n            quickselect(l, i - 1, k)\n        end\n    end\n\
    \    quickselect(1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1,\
    \ n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3e3jmw7.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpt3e3jmw7.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(left, right)\n        if left < right\
    \ then\n            local pivot = partition(left, right)\n            if pivot\
    \ == k then\n                return\n            elseif pivot > k then\n     \
    \           quickSort(left, pivot - 1)\n            else\n                quickSort(pivot\
    \ + 1, right)\n            end\n        end\n    end\n    quickSort(1, n)\n  \
    \  local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n   \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_91o5ko7.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp_91o5ko7.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if len == 0 then return {} end\n    if len <= k then\
    \ return arr end\n    local heap = {}\n    for i = 1, k do\n        heap[i] =\
    \ arr[i]\n    end\n    for i = k, len do\n        local j = 1\n        while j\
    \ <= k and heap[j] > arr[i] do\n            j = j + 1\n        end\n        if\
    \ j <= k then\n            for l = k, j + 1, -1 do\n                heap[l] =\
    \ heap[l - 1]\n            end\n            heap[j] = arr[i]\n        end\n  \
    \  end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcxws7d_.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpkcxws7d_.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local i = partition(arr,\
    \ left, right)\n        if i == k then\n            return arr[i]\n        elseif\
    \ i > k then\n            return quickSelect(arr, left, i - 1, k)\n        else\n\
    \            return quickSelect(arr, i + 1, right, k)\n        end\n    end\n\
    \    local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local i = partition(arr, left, right)\n            quickSort(arr,\
    \ left, i - 1)\n            quickSort(arr, i + 1, right)\n        end\n    end\n\
    \    local function merge(arr1, arr2)\n        local i = 1\n        local j =\
    \ 1\n        local arr = {}\n        while i <= #arr1 and j <= #arr2 do\n    \
    \        if arr1[i] > arr2[j] then\n                arr[#arr + 1] = arr1[i]\n\
    \                i = i + 1\n            else\n                arr[#arr + 1] =\
    \ arr2[j]\n                j = j + 1\n            end\n        end\n        while\
    \ i <= #arr1 do\n            arr[#arr + 1] = arr1[i]\n            i = i + 1\n\
    \        end\n        while j <= #arr2 do\n            arr[#arr + 1] = arr2[j]\n\
    \            j = j + 1\n        end\n        return arr\n    end\n    local function\
    \ mergeSort(arr)\n        if #arr <= 1 then\n            return arr\n       \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt8vxohp6.lua:75: ''end'' expected (to close ''if'' at line
    72) near ''lu''

    '
  stdout: ''
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n\
    \ then\n        return arr\n    end\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        local p = partition(arr, l, r)\n        if p == k then\n \
    \           return\n        elseif p > k then\n            quickselect(arr, l,\
    \ p - 1, k)\n        else\n            quickselect(arr, p + 1, r, k)\n       \
    \ end\n    end\n    quickselect(arr, 1, n, k)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetxa6axf.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpetxa6axf.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            table.remove(res, 1)\n            table.insert(res,\
    \ arr[i])\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwmv49t8.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdwmv49t8.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpdwmv49t8.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ select(arr, l, r, k)\n        if l == r then\n            return arr[l]\n  \
    \      end\n        local i = partition(arr, l, r)\n        local j = i - l +\
    \ 1\n        if j == k then\n            return arr[i]\n        elseif j > k then\n\
    \            return select(arr, l, i - 1, k)\n        else\n            return\
    \ select(arr, i + 1, r, k - j)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local i = partition(arr, l, r)\n \
    \           quickSort(arr, l, i - 1)\n            quickSort(arr, i + 1, r)\n \
    \       end\n    end\n    local function merge(arr1, arr2)\n        local arr\
    \ = {}\n        local i, j = 1, 1\n        while i <= #arr1 and j <= #arr2 do\n\
    \            if arr1[i] > arr2[j] then\n                arr[#arr + 1] = arr1[i]\n\
    \                i = i + 1\n            else\n                arr[#arr + 1] =\
    \ arr2[j]\n                j = j + 1\n            end\n        end\n        while\
    \ i <= #arr1 do\n            arr[#arr + 1] = arr1[i]\n            i = i + 1\n\
    \        end\n        while j <= #arr2 do\n            arr[#arr + 1] = arr2[j]\n\
    \            j = j + 1\n        end\n        return arr\n    end\n    local function\
    \ mergeSort(arr, l, r)\n        if\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbix4u0kr.lua:73: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local function partition(l, r)\n\
    \        local i, j = l, r\n        local pivot = arr[l]\n        while i < j\
    \ do\n            while i < j and arr[j] <= pivot do\n                j = j -\
    \ 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local l, r = 1, n\n    while true do\n        local p = partition(l,\
    \ r)\n        if p == k then\n            break\n        elseif p < k then\n \
    \           l = p + 1\n        else\n            r = p - 1\n        end\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz84y1_71.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpz84y1_71.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return arr[pivot]\n  \
    \      elseif pivot > k then\n            return quickSelect(arr, left, pivot\
    \ - 1, k)\n        else\n            return quickSelect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    local function quickSort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    local function merge(arr1, arr2)\n  \
    \      local i, j = 1, 1\n        local arr = {}\n        while i <= #arr1 and\
    \ j <= #arr2 do\n            if arr1[i] > arr2[j] then\n                arr[#arr\
    \ + 1] = arr1[i]\n                i = i + 1\n            else\n              \
    \  arr[#arr + 1] = arr2[j]\n                j = j + 1\n            end\n     \
    \   end\n        while i <= #arr1 do\n            arr[#arr + 1] = arr1[i]\n  \
    \          i = i + 1\n        end\n        while j <= #arr2 do\n            arr[#arr\
    \ + 1] = arr2[j]\n            j = j + 1\n        end\n        return arr\n   \
    \ end\n    local function mergeSort(arr)\n        if #arr == 1 then\n        \
    \    return arr\n        end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6_df0scp.lua:91: ''end'' expected (to close ''function'' at
    line 70) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local function partition(arr,\
    \ l, r)\n        local i, j = l, r\n        local pivot = arr[l]\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSelect(arr, l, r, k)\n        if l == r then\
    \ return arr[l] end\n        local i = partition(arr, l, r)\n        if i == k\
    \ then return arr[i] end\n        if i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local pivot = quickSelect(arr, 1, n, k)\n    local\
    \ res = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n           \
    \ res[#res + 1] = arr[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfk6yltlr.lua:54:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpfk6yltlr.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local i, j =\
    \ l, r\n        local pivot = arr[l]\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local l, r =\
    \ 1, n\n    while l <= r do\n        local m = partition(l, r)\n        if m ==\
    \ k then\n            break\n        elseif m < k then\n            l = m + 1\n\
    \        else\n            r = m - 1\n        end\n    end\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ca00n3f.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp5ca00n3f.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    for i = k + 1, n do\n        local\
    \ j = 1\n        while j <= k and res[j] < arr[i] do\n            j = j + 1\n\
    \        end\n        if j <= k then\n            for l = k, j + 1, -1 do\n  \
    \              res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeieu86hv.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpeieu86hv.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i == k then\n\
    \            return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local function quickSort(arr, l, r)\n        if l <\
    \ r then\n            local i = partition(arr, l, r)\n            quickSort(arr,\
    \ l, i - 1)\n            quickSort(arr, i + 1, r)\n        end\n    end\n    local\
    \ function mergeSort(arr, l, r)\n        if l < r then\n            local m =\
    \ math.floor((l + r) / 2)\n            mergeSort(arr, l, m)\n            mergeSort(arr,\
    \ m + 1, r)\n            local i = l\n            local j = m + 1\n          \
    \  local tmp = {}\n            while i <= m and j <= r do\n                if\
    \ arr[i] <= arr[j] then\n                    table.insert(tmp, arr[i])\n     \
    \               i = i + 1\n                else\n                    table.insert(tmp,\
    \ arr[j])\n                    j = j + 1\n                end\n            end\n\
    \            while i <= m do\n                table.insert(tmp, arr[i])\n    \
    \            i = i + 1\n            end\n            while j <= r do\n       \
    \         table.insert(tmp, arr[j])\n                j = j + 1\n            end\n\
    \           \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpio7rnpy7.lua:91: ''end'' expected (to close ''if'' at line
    49) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     local m = partition(arr, l, r)\n        if m == k then\n            return\n\
    \        elseif m < k then\n            quickSelect(arr, m + 1, r, k)\n      \
    \  else\n            quickSelect(arr, l, m - 1, k)\n        end\n    end\n   \
    \ quickSelect(arr, 1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1,\
    \ n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwndxqev5.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpwndxqev5.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == 0 then return {} end\n    if k == n then return\
    \ arr end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    for i = k + 1, n do\n        for j = 1, k do\n            if arr[i]\
    \ > res[j] then\n                for l = k, j + 1, -1 do\n                   \
    \ res[l] = res[l - 1]\n                end\n                res[j] = arr[i]\n\
    \                break\n            end\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk71xpfkt.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpk71xpfkt.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, left, right, k)\n        if\
    \ left == right then\n            return arr[left]\n        end\n        local\
    \ i = partition(arr, left, right)\n        if i == k then\n            return\
    \ arr[i]\n        elseif i > k then\n            return quickSelect(arr, left,\
    \ i - 1, k)\n        else\n            return quickSelect(arr, i + 1, right, k)\n\
    \        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n    local res =\
    \ {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj491qj4j.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpj491qj4j.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        return arr\n    end\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k / 2, 1, -1 do\n        local j = i * 2\n        while j <= k do\n      \
    \      if j + 1 <= k and heap[j] < heap[j + 1] then\n                j = j + 1\n\
    \            end\n            if heap[i] < heap[j] then\n                heap[i],\
    \ heap[j] = heap[j], heap[i]\n                i = j\n                j = i * 2\n\
    \            else\n                break\n            end\n        end\n    end\n\
    \    for i = k + 1, n do\n        if arr[i] > heap[1] then\n            heap[1]\
    \ = arr[i]\n            local j = 1\n            while j <= k do\n           \
    \     local m = j * 2\n                if m <= k and heap[m] < heap[m + 1] then\n\
    \                    m = m + 1\n                end\n                if m <= k\
    \ and heap[j] < heap[m] then\n                    heap[j], heap[m] = heap[m],\
    \ heap[j]\n                    j = m\n                else\n                 \
    \   break\n                end\n            end\n        end\n    end\n    return\
    \ heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps75oe6w3.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmps75oe6w3.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local pivot = partition(arr,\
    \ l, r)\n            quickSort(arr, l, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgz2e_w_1.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpgz2e_w_1.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, n do\n        if arr[i] > res[1]\
    \ then\n            table.remove(res, 1)\n            table.insert(res, arr[i])\n\
    \            table.sort(res)\n        end\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7pw_d_b_.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp7pw_d_b_.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7pw_d_b_.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return arr[pivot]\n  \
    \      elseif pivot > k then\n            return quickSelect(arr, left, pivot\
    \ - 1, k)\n        else\n            return quickSelect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    local\
    \ res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjg_y3jtz.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpjg_y3jtz.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local p = partition(arr,\
    \ l, r)\n            quickSort(arr, l, p - 1)\n            quickSort(arr, p +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01dp05tm.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp01dp05tm.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ji02qa8.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp8ji02qa8.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            table.remove(res, 1)\n            table.insert(res,\
    \ arr[i])\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwmv49t8.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdwmv49t8.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpdwmv49t8.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        local\
    \ j = 1\n        while j <= k do\n            if arr[i] > res[j] then\n      \
    \          table.remove(res, k)\n                table.insert(res, j, arr[i])\n\
    \                break\n            end\n            j = j + 1\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprzdoymd5.lua:39:\
    \ expected: {4, 4}\nactual: {4, -4}\nstack traceback:\n\t/tmp/tmprzdoymd5.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     local pivot = partition(arr, l, r)\n        if pivot == k then\n       \
    \     return\n        elseif pivot > k then\n            quickSelect(arr, l, pivot\
    \ - 1, k)\n        else\n            quickSelect(arr, pivot + 1, r, k)\n     \
    \   end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n    local res = {}\n\
    \    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yomljcb.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp7yomljcb.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local heap = {}\n    for i =\
    \ 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, n do\n        table.sort(heap)\n\
    \        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n        end\n\
    \    end\n    table.sort(heap)\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp637xmpzn.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp637xmpzn.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n\
    \    end\n    table.sort(t)\n    for i = k + 1, n do\n        local j = 1\n  \
    \      while j <= k and arr[i] > t[j] do\n            j = j + 1\n        end\n\
    \        if j <= k then\n            table.insert(t, j, arr[i])\n            table.remove(t)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9e4pk7_.lua:38:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmpo9e4pk7_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, start, stop)\n        local pivot = arr[stop]\n\
    \        local i = start - 1\n        for j = start, stop - 1 do\n           \
    \ if arr[j] < pivot then\n                i = i + 1\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[stop]\
    \ = arr[stop], arr[i + 1]\n        return i + 1\n    end\n    local function quickSelect(arr,\
    \ start, stop, k)\n        if start < stop then\n            local pivot = partition(arr,\
    \ start, stop)\n            if pivot == k then\n                return\n     \
    \       elseif pivot < k then\n                quickSelect(arr, pivot + 1, stop,\
    \ k)\n            else\n                quickSelect(arr, start, pivot - 1, k)\n\
    \            end\n        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k\
    \ + 1)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yjhxtao.lua:43:\
    \ expected: {4, 4}\nactual: {-4, 4, 4}\nstack traceback:\n\t/tmp/tmp3yjhxtao.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quick_sort(arr, l, m - 1)\n            quick_sort(arr, m\
    \ + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnzksckv.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpfnzksckv.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i == k then\n\
    \            return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local function quickSort(arr, l, r)\n        if l <\
    \ r then\n            local i = partition(arr, l, r)\n            quickSort(arr,\
    \ l, i - 1)\n            quickSort(arr, i + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9_vb0lm.lua:59:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpr9_vb0lm.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(l, r)\n        if l < r then\n            local m\
    \ = partition(l, r)\n            if m == k then\n                return\n    \
    \        elseif m < k then\n                quickSort(m + 1, r)\n            else\n\
    \                quickSort(l, m - 1)\n            end\n        end\n    end\n\
    \    quickSort(1, n)\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgdsfluq.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpvgdsfluq.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    for i = k + 1, n do\n        local\
    \ j = 1\n        while j <= k and res[j] < arr[i] do\n            j = j + 1\n\
    \        end\n        if j <= k then\n            for l = k, j + 1, -1 do\n  \
    \              res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeieu86hv.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpeieu86hv.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local function partition(left, right)\n        local pivot\
    \ = arr[right]\n        local i = left\n        for j = left, right - 1 do\n \
    \           if arr[j] < pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \                i = i + 1\n            end\n        end\n        arr[i], arr[right]\
    \ = arr[right], arr[i]\n        return i\n    end\n    local function quickSelect(left,\
    \ right, k)\n        if left == right then\n            return arr[left]\n   \
    \     end\n        local pivot = partition(left, right)\n        if pivot == k\
    \ then\n            return arr[pivot]\n        elseif pivot > k then\n       \
    \     return quickSelect(left, pivot - 1, k)\n        else\n            return\
    \ quickSelect(pivot + 1, right, k)\n        end\n    end\n    quickSelect(1, n,\
    \ k)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxwe35ox.lua:49:\
    \ expected: {4, 4}\nactual: {-4, 4, 4}\nstack traceback:\n\t/tmp/tmppxwe35ox.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            table.remove(res, 1)\n            table.insert(res,\
    \ arr[i])\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwmv49t8.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdwmv49t8.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpdwmv49t8.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local function partition(l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            if i < j then\n             \
    \   arr[i] = arr[j]\n                i = i + 1\n            end\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           if i < j then\n                arr[j] = arr[i]\n                j\
    \ = j - 1\n            end\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(l, r)\n        if l < r then\n    \
    \        local m = partition(l, r)\n            quickSort(l, m - 1)\n        \
    \    quickSort(m + 1, r)\n        end\n    end\n    quickSort(1, n)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r9dn41p.lua:56:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp8r9dn41p.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            if i < j then\n                arr[i] = arr[j]\n \
    \               i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSelect(l, r, k)\n        local p = partition(l, r)\n  \
    \      if p == k then\n            return\n        elseif p > k then\n       \
    \     quickSelect(l, p - 1, k)\n        else\n            quickSelect(p + 1, r,\
    \ k)\n        end\n    end\n    quickSelect(1, n, n - k + 1)\n    local res =\
    \ {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugsdbrpz.lua:56:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpugsdbrpz.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, n do\n        local j = 1\n\
    \        while j <= k and res[j] < arr[i] do\n            j = j + 1\n        end\n\
    \        if j <= k then\n            table.insert(res, j, arr[i])\n          \
    \  table.remove(res)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasv7lwst.lua:38:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmpasv7lwst.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ mid = partition(arr, left, right)\n            quick_sort(arr, left, mid - 1)\n\
    \            quick_sort(arr, mid + 1, right)\n        end\n    end\n    quick_sort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx2kpwxn.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpvx2kpwxn.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if len == 0 then return {} end\n    if len == 1 then\
    \ return arr end\n    if k == 0 then return {} end\n    if k == 1 then\n     \
    \   local max = arr[1]\n        for i = 2, len do\n            if arr[i] > max\
    \ then\n                max = arr[i]\n            end\n        end\n        return\
    \ {max}\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    for i = k, len do\n        local j = 1\n        while j <= k and\
    \ res[j] > arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n\
    \            for l = k, j + 1, -1 do\n                res[l] = res[l - 1]\n  \
    \          end\n            res[j] = arr[i]\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplypu7uuf.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmplypu7uuf.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(left, right)\n        if left < right\
    \ then\n            local pivot = partition(left, right)\n            if pivot\
    \ == k then\n                return\n            elseif pivot < k then\n     \
    \           quickSelect(pivot + 1, right)\n            else\n                quickSelect(left,\
    \ pivot - 1)\n            end\n        end\n    end\n    quickSelect(1, n)\n \
    \   local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n  \
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_63dcth1.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp_63dcth1.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == k then\n        return arr\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ if i < j then\n                arr[i] = arr[j]\n                i = i + 1\n\
    \            end\n            while i < j and arr[i] >= pivot do\n           \
    \     i = i + 1\n            end\n            if i < j then\n                arr[j]\
    \ = arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quickSelect(arr, l, r,\
    \ k)\n        if l >= r then\n            return\n        end\n        local i\
    \ = partition(arr, l, r)\n        if i == k then\n            return\n       \
    \ elseif i > k then\n            quickSelect(arr, l, i - 1, k)\n        else\n\
    \            quickSelect(arr, i + 1, r, k)\n        end\n    end\n    quickSelect(arr,\
    \ 1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1, n do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozh2ku6x.lua:62:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpozh2ku6x.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_yg6cbm.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpw_yg6cbm.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpw_yg6cbm.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(left, right)\n        if left < right then\n\
    \            local pivot = partition(left, right)\n            quickSort(left,\
    \ pivot - 1)\n            quickSort(pivot + 1, right)\n        end\n    end\n\
    \    quickSort(1, n)\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2a3kwyc6.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp2a3kwyc6.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if len == 0 then return {} end\n    if len == 1 then\
    \ return arr end\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, left, right)\n        if left\
    \ < right then\n            local pivot = partition(arr, left, right)\n      \
    \      quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot + 1,\
    \ right)\n        end\n    end\n    quickSort(arr, 1, len)\n    local res = {}\n\
    \    for i = len, len - k + 1, -1 do\n        table.insert(res, arr[i])\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx8jps74.lua:50:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmpfx8jps74.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    local heap = require(\"algo.Heap\"\
    ).new(res, function(a, b) return a > b end)\n    for i = k + 1, n do\n       \
    \ if arr[i] > heap:top() then\n            heap:pop()\n            heap:push(arr[i])\n\
    \        end\n    end\n    return heap:toArray()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp731c2oo7.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp731c2oo7.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then return {} end\n    local n = #arr\n    if k == n then return\
    \ arr end\n    local function partition(l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        for j = l + 1, r do\n            if arr[j] > pivot\
    \ then\n                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            end\n        end\n        arr[l], arr[i] = arr[i], arr[l]\n     \
    \   return i\n    end\n    local l, r = 1, n\n    while true do\n        local\
    \ p = partition(l, r)\n        if p == k then\n            return arr\n      \
    \  elseif p < k then\n            l = p + 1\n        else\n            r = p -\
    \ 1\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9izw3_f.lua:42:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpa9izw3_f.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k >= len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        local\
    \ j = 1\n        while j <= k do\n            if arr[i] > res[j] then\n      \
    \          table.remove(res, k)\n                table.insert(res, j, arr[i])\n\
    \                break\n            end\n            j = j + 1\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf90hp4w3.lua:39:\
    \ expected: {4, 4}\nactual: {4, -4}\nstack traceback:\n\t/tmp/tmpf90hp4w3.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local l = 1\n    local r = n\n    while l <= r do\n        local m = partition(l,\
    \ r)\n        if m == k then\n            break\n        elseif m < k then\n \
    \           l = m + 1\n        else\n            r = m - 1\n        end\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9se6fb8d.lua:51:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp9se6fb8d.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    for i = k + 1, n do\n        local\
    \ j = 1\n        while j <= k and res[j] > arr[i] do\n            j = j + 1\n\
    \        end\n        if j <= k then\n            for l = k, j + 1, -1 do\n  \
    \              res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvwxmv6q.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmprvwxmv6q.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, left, right, k)\n        if left == right then\n          \
    \  return arr[left]\n        end\n        local pivot = partition(arr, left, right)\n\
    \        if pivot == k then\n            return arr[pivot]\n        elseif pivot\
    \ > k then\n            return quickSelect(arr, left, pivot - 1, k)\n        else\n\
    \            return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n\
    \    local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xz1mdry.lua:65:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp2xz1mdry.lua:65:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l < r then\n            local pivot =\
    \ partition(arr, l, r)\n            if pivot == k then\n                return\n\
    \            elseif pivot < k then\n                quickSelect(arr, pivot + 1,\
    \ r, k)\n            else\n                quickSelect(arr, l, pivot - 1, k)\n\
    \            end\n        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k\
    \ + 1)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnfsrt8f.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpnnfsrt8f.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local i, j =\
    \ l, r\n        local pivot = arr[l]\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(l, r)\n        if l >= r then\n            return\n        end\n\
    \        local p = partition(l, r)\n        if p == k - 1 then\n            return\n\
    \        elseif p > k - 1 then\n            quickSelect(l, p - 1)\n        else\n\
    \            quickSelect(p + 1, r)\n        end\n    end\n    quickSelect(1, n)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk1hk0th.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpmk1hk0th.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local p = partition(arr,\
    \ l, r)\n            quickSort(arr, l, p - 1)\n            quickSort(arr, p +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01dp05tm.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp01dp05tm.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local p = partition(arr,\
    \ l, r)\n            quickSort(arr, l, p - 1)\n            quickSort(arr, p +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lu745o3.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp0lu745o3.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickSelect(l, r)\n  \
    \      if l < r then\n            local p = partition(l, r)\n            if p\
    \ == k then\n                return\n            elseif p < k then\n         \
    \       quickSelect(p + 1, r)\n            else\n                quickSelect(l,\
    \ p - 1)\n            end\n        end\n    end\n    quickSelect(1, n)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1ymp1n8.lua:47:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpw1ymp1n8.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l >= r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i == k then\n\
    \            return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local function merge(arr1, arr2)\n        local i,\
    \ j = 1, 1\n        local arr = {}\n        while i <= #arr1 and j <= #arr2 do\n\
    \            if arr1[i] > arr2[j] then\n                arr[#arr + 1] = arr1[i]\n\
    \                i = i + 1\n            else\n                arr[#arr + 1] =\
    \ arr2[j]\n                j = j + 1\n            end\n        end\n        while\
    \ i <= #arr1 do\n            arr[#arr + 1] = arr1[i]\n            i = i + 1\n\
    \        end\n        while j <= #arr2 do\n            arr[#arr + 1] = arr2[j]\n\
    \            j = j + 1\n        end\n        return arr\n    end\n    local function\
    \ mergeSort(arr, l, r)\n        if l >= r then\n            return {arr[l]}\n\
    \        end\n        local mid = math.floor((l + r) / 2)\n        local arr1\
    \ = mergeSort(arr, l, mid)\n        local arr2 = mergeSort(arr, mid + 1, r)\n\
    \        return merge(arr1, arr2)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdgcbjk2j.lua:71: ''end'' expected (to close ''function'' at
    line 63) near ''lu''

    '
  stdout: ''
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(l, r)\n        if l < r then\n            local\
    \ pivot = partition(l, r)\n            if pivot == k then\n                return\n\
    \            elseif pivot < k then\n                quickSelect(pivot + 1, r)\n\
    \            else\n                quickSelect(l, pivot - 1)\n            end\n\
    \        end\n    end\n    quickSelect(1, n)\n    local res = {}\n    for i =\
    \ 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn46pjikb.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpn46pjikb.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if len == 0 then return {} end\n    if len <= k then\
    \ return arr end\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left + 1\n        local j = right\n   \
    \     while true do\n            while arr[i] < pivot and i < right do i = i +\
    \ 1 end\n            while arr[j] > pivot and j > left do j = j - 1 end\n    \
    \        if i >= j then break end\n            arr[i], arr[j] = arr[j], arr[i]\n\
    \        end\n        arr[left], arr[j] = arr[j], arr[left]\n        return j\n\
    \    end\n    local function quickselect(arr, left, right, k)\n        if left\
    \ == right then return arr[left] end\n        local pivot = partition(arr, left,\
    \ right)\n        if pivot == k then return arr[pivot]\n        elseif pivot >\
    \ k then return quickselect(arr, left, pivot - 1, k)\n        else return quickselect(arr,\
    \ pivot + 1, right, k) end\n    end\n    quickselect(arr, 1, len, k)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpud7a0h87.lua:41:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpud7a0h87.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(left, right)\n        if left ==\
    \ right then\n            return\n        end\n        local pivot = partition(left,\
    \ right)\n        if pivot == k then\n            return\n        elseif pivot\
    \ > k then\n            quickSelect(left, pivot - 1)\n        else\n         \
    \   quickSelect(pivot + 1, right)\n        end\n    end\n    quickSelect(1, n)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0fc7xdn.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpw0fc7xdn.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return arr[pivot]\n  \
    \      elseif pivot > k then\n            return quickSelect(arr, left, pivot\
    \ - 1, k)\n        else\n            return quickSelect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    local function quickSort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0vp8d2c.lua:59:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp_0vp8d2c.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        local\
    \ j = 1\n        while j <= k do\n            if arr[i] > res[j] then\n      \
    \          table.remove(res, j)\n                table.insert(res, j, arr[i])\n\
    \                break\n            end\n            j = j + 1\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpba9_535l.lua:42:\
    \ expected: {0, 1, 2, 20}\nactual: {2, 0, 1, 20}\nstack traceback:\n\t/tmp/tmpba9_535l.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == 0 then\n        return {}\n    elseif k ==\
    \ len then\n        return arr\n    end\n    local res = {}\n    for i = 1, k\
    \ do\n        res[i] = arr[i]\n    end\n    for i = k + 1, len do\n        local\
    \ j = 1\n        while j <= k and res[j] > arr[i] do\n            j = j + 1\n\
    \        end\n        if j <= k then\n            for l = k, j + 1, -1 do\n  \
    \              res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqy8wqhr.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpnqy8wqhr.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local mid = partition(arr,\
    \ left, right)\n        if mid == k then\n            return arr[mid]\n      \
    \  elseif mid < k then\n            return quickSelect(arr, mid + 1, right, k)\n\
    \        else\n            return quickSelect(arr, left, mid - 1, k)\n       \
    \ end\n    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    local res = {}\n\
    \    for i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurbmjesf.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpurbmjesf.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return arr[pivot]\n  \
    \      elseif pivot > k then\n            return quickSelect(arr, left, pivot\
    \ - 1, k)\n        else\n            return quickSelect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    local function quickSort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2hdvxkt.lua:55:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpf2hdvxkt.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            table.remove(res, 1)\n            table.insert(res,\
    \ arr[i])\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwmv49t8.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdwmv49t8.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpdwmv49t8.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            if i < j then\n                arr[i] = arr[j]\n \
    \               i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(l, r)\n        if l < r then\n            local p\
    \ = partition(l, r)\n            quickSort(l, p - 1)\n            quickSort(p\
    \ + 1, r)\n        end\n    end\n    quickSort(1, n)\n    local res = {}\n   \
    \ for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_gjvhh7.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp4_gjvhh7.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(l, r)\n        if l < r then\n            local\
    \ p = partition(l, r)\n            if p == k then\n                return\n  \
    \          elseif p < k then\n                quickSelect(p + 1, r)\n        \
    \    else\n                quickSelect(l, p - 1)\n            end\n        end\n\
    \    end\n    quickSelect(1, n)\n    local res = {}\n    for i = 1, k do\n   \
    \     res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e11apqc.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp7e11apqc.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k +\
    \ 1, n do\n        local j = 1\n        while j <= k and res[j] < arr[i] do\n\
    \            j = j + 1\n        end\n        if j <= k then\n            table.insert(res,\
    \ j, arr[i])\n            table.remove(res)\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhm41mka.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpdhm41mka.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i == k then\n\
    \            return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local function merge(arr1, arr2)\n        local i =\
    \ 1\n        local j = 1\n        local res = {}\n        while i <= #arr1 and\
    \ j <= #arr2 do\n            if arr1[i] > arr2[j] then\n                table.insert(res,\
    \ arr1[i])\n                i = i + 1\n            else\n                table.insert(res,\
    \ arr2[j])\n                j = j + 1\n            end\n        end\n        while\
    \ i <= #arr1 do\n            table.insert(res, arr1[i])\n            i = i + 1\n\
    \        end\n        while j <= #arr2 do\n            table.insert(res, arr2[j])\n\
    \            j = j + 1\n        end\n        return res\n    end\n    local function\
    \ mergeSort(arr, l, r)\n        if l == r then\n            return {arr[l]}\n\
    \        end\n        local mid = math.floor((l + r) / 2)\n        local arr1\
    \ = mergeSort(arr, l, mid)\n        local arr2 = mergeSort(arr, mid + 1, r)\n\
    \        return merge(arr1, arr2)\n    end\n    local\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp093tnot0.lua:91: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local l = 1\n    local r = n\n    while l <= r do\n        local m = partition(l,\
    \ r)\n        if m == k then\n            break\n        elseif m < k then\n \
    \           l = m + 1\n        else\n            r = m - 1\n        end\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9se6fb8d.lua:51:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp9se6fb8d.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            if i < j then\n                arr[i] = arr[j]\n \
    \               i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(l, r)\n        if l < r then\n            local m\
    \ = partition(l, r)\n            quickSort(l, m - 1)\n            quickSort(m\
    \ + 1, r)\n        end\n    end\n    quickSort(1, n)\n    local res = {}\n   \
    \ for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0jkrn7k.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpp0jkrn7k.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local res = {}\n    for i = 1, k do\n        res[i] =\
    \ arr[i]\n    end\n    local function sift_down(i)\n        local left = 2 * i\n\
    \        local right = 2 * i + 1\n        local largest = i\n        if left <=\
    \ k and res[left] > res[largest] then\n            largest = left\n        end\n\
    \        if right <= k and res[right] > res[largest] then\n            largest\
    \ = right\n        end\n        if largest ~= i then\n            res[i], res[largest]\
    \ = res[largest], res[i]\n            sift_down(largest)\n        end\n    end\n\
    \    for i = k // 2, 1, -1 do\n        sift_down(i)\n    end\n    for i = k +\
    \ 1, n do\n        if arr[i] > res[1] then\n            res[1] = arr[i]\n    \
    \        sift_down(1)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgfx3a1z_.lua:31: unexpected symbol near ''/''

    '
  stdout: ''
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, left, right, k)\n        if\
    \ left == right then\n            return arr[left]\n        end\n        local\
    \ pivot = partition(arr, left, right)\n        if pivot == k then\n          \
    \  return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ left, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot\
    \ + 1, right, k)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = quickSelect(arr, 1, n, i)\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzey5cnb.lua:59:\
    \ expected: {2, 20, 123}\nactual: {123, 20, 2}\nstack traceback:\n\t/tmp/tmpyzey5cnb.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == 0 then\n        return {}\n    elseif k ==\
    \ len then\n        return arr\n    end\n    local function partition(arr, left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    local res = {}\n    for i =\
    \ 1, k do\n        res[i] = quickSelect(arr, 1, len, i)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5evy_ss.lua:57:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpz5evy_ss.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qz29wws.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp5qz29wws.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            if i < j then\n                arr[i] = arr[j]\n \
    \               i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(l, r)\n        if l < r then\n            local m\
    \ = partition(l, r)\n            quickSort(l, m - 1)\n            quickSort(m\
    \ + 1, r)\n        end\n    end\n    quickSort(1, n)\n    local res = {}\n   \
    \ for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0jkrn7k.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpp0jkrn7k.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local pivot = partition(arr,\
    \ l, r)\n            quickSort(arr, l, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgz2e_w_1.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpgz2e_w_1.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quickSort(arr, l, m - 1)\n            quickSort(arr, m +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjzcw6wj.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpxjzcw6wj.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        local\
    \ j = 1\n        while j <= k do\n            if arr[i] > res[j] then\n      \
    \          for l = k, j + 1, -1 do\n                    res[l] = res[l - 1]\n\
    \                end\n                res[j] = arr[i]\n                break\n\
    \            end\n            j = j + 1\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqgc3bv5.lua:41:\
    \ expected: {4, 4}\nactual: {4, -4}\nstack traceback:\n\t/tmp/tmplqgc3bv5.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n\
    \    end\n    for i = k + 1, n do\n        local j = 1\n        while j <= k and\
    \ t[j] > arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n\
    \            for l = k, j + 1, -1 do\n                t[l] = t[l - 1]\n      \
    \      end\n            t[j] = arr[i]\n        end\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3lrkgv7t.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp3lrkgv7t.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    for i = k + 1, n do\n        local\
    \ j = 1\n        while j <= k and res[j] > arr[i] do\n            j = j + 1\n\
    \        end\n        if j <= k then\n            for l = k, j + 1, -1 do\n  \
    \              res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvwxmv6q.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmprvwxmv6q.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(arr, l, r)\n        local i,\
    \ j = l, r\n        local x = arr[i]\n        while i < j do\n            while\
    \ i < j and arr[j] <= x do\n                j = j - 1\n            end\n     \
    \       if i < j then\n                arr[i] = arr[j]\n                i = i\
    \ + 1\n            end\n            while i < j and arr[i] >= x do\n         \
    \       i = i + 1\n            end\n            if i < j then\n              \
    \  arr[j] = arr[i]\n                j = j - 1\n            end\n        end\n\
    \        arr[i] = x\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local i = partition(arr, l, r)\n        if i == k then\n            return\
    \ arr[i]\n        elseif i > k then\n            return quickSelect(arr, l, i\
    \ - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n  \
    \      end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n    local res = {}\n\
    \    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5ukd5ui.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpa5ukd5ui.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxprcx291.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpxprcx291.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n\
    \ then\n        return arr\n    end\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local i = partition(arr, l, r)\n        if i == k then\n            return\
    \ arr[i]\n        elseif i > k then\n            return quickSelect(arr, l, i\
    \ - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n  \
    \      end\n    end\n    quickSelect(arr, 1, n, k)\n    return arr\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5pscu9qi.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp5pscu9qi.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickSelect(l, r)\n  \
    \      if l < r then\n            local p = partition(l, r)\n            if p\
    \ == k then\n                return\n            elseif p < k then\n         \
    \       quickSelect(p + 1, r)\n            else\n                quickSelect(l,\
    \ p - 1)\n            end\n        end\n    end\n    quickSelect(1, n)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1ymp1n8.lua:47:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpw1ymp1n8.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxprcx291.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpxprcx291.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxprcx291.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpxprcx291.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSort(arr, l, r)\n        if l < r then\n      \
    \      local pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, len)\n    local res = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res,\
    \ arr[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xul9l9j.lua:48:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp2xul9l9j.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quick_sort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7lhpwsk.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpb7lhpwsk.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        local\
    \ j = 1\n        while j <= k do\n            if arr[i] > res[j] then\n      \
    \          table.remove(res, j)\n                table.insert(res, j, arr[i])\n\
    \                break\n            end\n            j = j + 1\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpba9_535l.lua:42:\
    \ expected: {0, 1, 2, 20}\nactual: {2, 0, 1, 20}\nstack traceback:\n\t/tmp/tmpba9_535l.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        local\
    \ j = 1\n        while j <= k do\n            if arr[i] > res[j] then\n      \
    \          table.remove(res, j)\n                table.insert(res, j, arr[i])\n\
    \                break\n            end\n            j = j + 1\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpba9_535l.lua:42:\
    \ expected: {0, 1, 2, 20}\nactual: {2, 0, 1, 20}\nstack traceback:\n\t/tmp/tmpba9_535l.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, n do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpupn8zslf.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpupn8zslf.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpupn8zslf.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    local function heapify(arr, i, n)\n\
    \        local l = 2 * i\n        local r = 2 * i + 1\n        local largest =\
    \ i\n        if l <= n and arr[l] > arr[largest] then\n            largest = l\n\
    \        end\n        if r <= n and arr[r] > arr[largest] then\n            largest\
    \ = r\n        end\n        if largest ~= i then\n            arr[i], arr[largest]\
    \ = arr[largest], arr[i]\n            heapify(arr, largest, n)\n        end\n\
    \    end\n    local function build_heap(arr, n)\n        for i = math.floor(n\
    \ / 2), 1, -1 do\n            heapify(arr, i, n)\n        end\n    end\n    build_heap(res,\
    \ k)\n    for i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            heapify(res, 1, k)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptk8ffa4k.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmptk8ffa4k.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l >= r then\n            return\n    \
    \    end\n        local pivot = partition(arr, l, r)\n        if pivot == k then\n\
    \            return\n        elseif pivot > k then\n            quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            quickSelect(arr, pivot + 1, r, k)\n\
    \        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    local\
    \ res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5o8rqst.lua:58:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp_5o8rqst.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] < pivot do\n                j = j - 1\n            end\n  \
    \          if i < j then\n                arr[i] = arr[j]\n                i =\
    \ i + 1\n            end\n            while i < j and arr[i] > pivot do\n    \
    \            i = i + 1\n            end\n            if i < j then\n         \
    \       arr[j] = arr[i]\n                j = j - 1\n            end\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local m = partition(arr, l, r)\n \
    \           quickSort(arr, l, m - 1)\n            quickSort(arr, m + 1, r)\n \
    \       end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z0gpxgx.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp9z0gpxgx.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickselect(l, r, k)\n        if l == r then\n            return\n\
    \        end\n        local i = partition(l, r)\n        if i == k then\n    \
    \        return\n        elseif i < k then\n            quickselect(i + 1, r,\
    \ k)\n        else\n            quickselect(l, i - 1, k)\n        end\n    end\n\
    \    quickselect(1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1,\
    \ n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3e3jmw7.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpt3e3jmw7.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local pivot = partition(arr, l, r)\n        if pivot ==\
    \ k then\n            return arr[pivot]\n        elseif pivot > k then\n     \
    \       return quickSelect(arr, l, pivot - 1, k)\n        else\n            return\
    \ quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local pivot = partition(arr,\
    \ l, r)\n            quickSort(arr, l, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, r)\n        end\n    end\n    local function heapify(arr, i, n)\n\
    \        local l = 2 * i + 1\n        local r = 2 * i + 2\n        local largest\
    \ = i\n        if l <= n and arr[l] > arr[largest] then\n            largest =\
    \ l\n        end\n        if r <= n and arr[r] > arr[largest] then\n         \
    \   largest = r\n        end\n        if largest ~= i then\n            arr[i],\
    \ arr[largest] = arr[largest], arr[i]\n            heapify(arr, largest, n)\n\
    \        end\n    end\n    local function buildHeap(arr, n)\n        for i = math.floor(n\
    \ / 2), 1, -1 do\n            heapify(arr, i, n)\n        end\n    end\n    local\
    \ function heapSort(arr, n)\n        buildHeap(arr, n)\n        for i = n, 2,\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgojbjusn.lua:71: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quickSort(arr, l, m - 1)\n            quickSort(arr, m +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk88t7wsd.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpk88t7wsd.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then return arr[l] end\n        local p = partition(arr, l, r)\n\
    \        if p == k then return arr[p] end\n        if p > k then\n           \
    \ return quickSelect(arr, l, p - 1, k)\n        else\n            return quickSelect(arr,\
    \ p + 1, r, k)\n        end\n    end\n    local pivot = quickSelect(arr, 1, n,\
    \ k)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n\
    \            res[#res + 1] = arr[i]\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uud2g94.lua:55:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp8uud2g94.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local function partition(l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local l = 1\n    local r = n\n    local index = partition(l,\
    \ r)\n    while index ~= k - 1 do\n        if index > k - 1 then\n           \
    \ r = index - 1\n            index = partition(l, r)\n        else\n         \
    \   l = index + 1\n            index = partition(l, r)\n        end\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprahmandq.lua:54:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmprahmandq.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i == k then\n\
    \            return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local function quickSort(arr, l, r)\n        if l <\
    \ r then\n            local i = partition(arr, l, r)\n            quickSort(arr,\
    \ l, i - 1)\n            quickSort(arr, i + 1, r)\n        end\n    end\n    local\
    \ n = #arr\n    quickSort(arr, 1, n)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rpx8260.lua:56:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp4rpx8260.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickSelect(l, r)\n  \
    \      if l < r then\n            local p = partition(l, r)\n            if p\
    \ == k then\n                return\n            elseif p < k then\n         \
    \       quickSelect(p + 1, r)\n            else\n                quickSelect(l,\
    \ p - 1)\n            end\n        end\n    end\n    quickSelect(1, n)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kr73ndi.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp5kr73ndi.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quick_select(arr, l, r, k)\n  \
    \      local i = partition(arr, l, r)\n        if i == k then\n            return\n\
    \        elseif i > k then\n            quick_select(arr, l, i - 1, k)\n     \
    \   else\n            quick_select(arr, i + 1, r, k)\n        end\n    end\n \
    \   quick_select(arr, 1, n, n - k + 1)\n    local res = {}\n    for i = n - k\
    \ + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfigilh_h.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpfigilh_h.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local pivot = partition(arr, l, r)\n        if pivot ==\
    \ k then\n            return arr[pivot]\n        elseif pivot > k then\n     \
    \       return quickSelect(arr, l, pivot - 1, k)\n        else\n            return\
    \ quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local pivot = partition(arr,\
    \ l, r)\n            quickSort(arr, l, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, r)\n        end\n    end\n    local n = #arr\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = quickSelect(arr, 1, n, i)\n    end\n  \
    \  quickSort(res, 1, k)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsagc3dke.lua:60:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpsagc3dke.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l >= r then\n            return\n    \
    \    end\n        local mid = partition(arr, l, r)\n        if mid == k then\n\
    \            return\n        elseif mid < k then\n            quickSelect(arr,\
    \ mid + 1, r, k)\n        else\n            quickSelect(arr, l, mid - 1, k)\n\
    \        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    local\
    \ res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzmh4uch.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmplzmh4uch.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, n do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpupn8zslf.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpupn8zslf.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpupn8zslf.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    local heap = {}\n    for i = 1, k do\n        heap[i]\
    \ = arr[i]\n    end\n    for i = k, len do\n        local min = heap[1]\n    \
    \    if arr[i] > min then\n            heap[1] = arr[i]\n            for j = 1,\
    \ k do\n                local l = j * 2\n                local r = l + 1\n   \
    \             if l <= k then\n                    if r <= k then\n           \
    \             if heap[l] < heap[r] then\n                            if heap[l]\
    \ < heap[j] then\n                                heap[l], heap[j] = heap[j],\
    \ heap[l]\n                            end\n                        else\n   \
    \                         if heap[r] < heap[j] then\n                        \
    \        heap[r], heap[j] = heap[j], heap[r]\n                            end\n\
    \                        end\n                    else\n                     \
    \   if heap[l] < heap[j] then\n                            heap[l], heap[j] =\
    \ heap[j], heap[l]\n                        end\n                    end\n   \
    \             end\n            end\n        end\n    end\n    return heap\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbadgyqim.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {-4, 5, 5}\nstack traceback:\n\t/tmp/tmpbadgyqim.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k >= len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            table.remove(res, 1)\n            table.insert(res,\
    \ arr[i])\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqp3_86vl.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpqp3_86vl.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpqp3_86vl.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local res = {}\n    for i = 1, k do\n        res[i] =\
    \ arr[i]\n    end\n    for i = k + 1, n do\n        local j = 1\n        while\
    \ j <= k and res[j] < arr[i] do\n            j = j + 1\n        end\n        if\
    \ j <= k then\n            for l = k, j + 1, -1 do\n                res[l] = res[l\
    \ - 1]\n            end\n            res[j] = arr[i]\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9zlb0kz.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmps9zlb0kz.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quickSort(arr, l, m - 1)\n            quickSort(arr, m +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjzcw6wj.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpxjzcw6wj.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    for i = k + 1, n do\n        local\
    \ j = 1\n        while j <= k and res[j] > arr[i] do\n            j = j + 1\n\
    \        end\n        if j <= k then\n            for l = k, j + 1, -1 do\n  \
    \              res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvwxmv6q.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmprvwxmv6q.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ left, right, k)\n        if left == right then return arr[left] end\n      \
    \  local pivot = partition(arr, left, right)\n        if pivot == k then return\
    \ arr[pivot] end\n        if pivot > k then\n            return quickSelect(arr,\
    \ left, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot\
    \ + 1, right, k)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = quickSelect(arr, 1, n, i)\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8o2tw_dv.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp8o2tw_dv.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n\
    \ then\n        return arr\n    end\n    local function partition(left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local left = 1\n    local right = n\n    local\
    \ index = partition(left, right)\n    while index ~= k - 1 do\n        if index\
    \ > k - 1 then\n            right = index - 1\n            index = partition(left,\
    \ right)\n        else\n            left = index + 1\n            index = partition(left,\
    \ right)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n    \
    \    res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ir5ici8.lua:56:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp7ir5ici8.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_yg6cbm.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpw_yg6cbm.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpw_yg6cbm.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == 0 then\n        return {}\n    elseif k ==\
    \ len then\n        table.sort(arr)\n        return arr\n    end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local pivot = partition(arr,\
    \ l, r)\n            quickSort(arr, l, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgz2e_w_1.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpgz2e_w_1.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot - 1)\n   \
    \         quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, len)\n    local res = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res,\
    \ arr[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfog9v94m.lua:58:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmpfog9v94m.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local p = partition(arr,\
    \ l, r)\n            quickSort(arr, l, p - 1)\n            quickSort(arr, p +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lu745o3.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp0lu745o3.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(left, right)\n        if left ==\
    \ right then\n            return\n        end\n        local mid = partition(left,\
    \ right)\n        if mid == k then\n            return\n        elseif mid < k\
    \ then\n            quickSelect(mid + 1, right)\n        else\n            quickSelect(left,\
    \ mid - 1)\n        end\n    end\n    quickSelect(1, n)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wbwjt80.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp7wbwjt80.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local p = partition(arr, l, r)\n        if p == k then\n\
    \            return arr[p]\n        elseif p < k then\n            return quickSelect(arr,\
    \ p + 1, r, k)\n        else\n            return quickSelect(arr, l, p - 1, k)\n\
    \        end\n    end\n    local function quickSort(arr, l, r)\n        if l <\
    \ r then\n            local p = partition(arr, l, r)\n            quickSort(arr,\
    \ l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    local\
    \ n = #arr\n    local res = {}\n    for i = 1, k do\n        res[i] = quickSelect(arr,\
    \ 1, n, i)\n    end\n    quickSort(res, 1, k)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4k5ldepr.lua:60:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp4k5ldepr.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local pivot = partition(arr,\
    \ l, r)\n            quickSort(arr, l, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgz2e_w_1.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpgz2e_w_1.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ >= pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n           \
    \     i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickselect(l, r)\n  \
    \      if l >= r then\n            return\n        end\n        local p = partition(l,\
    \ r)\n        if p == k then\n            return\n        elseif p < k then\n\
    \            quickselect(p + 1, r)\n        else\n            quickselect(l, p\
    \ - 1)\n        end\n    end\n    quickselect(1, n)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgu7zf07c.lua:48:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpgu7zf07c.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, left, right, k)\n        if\
    \ left == right then\n            return arr[left]\n        end\n        local\
    \ i = partition(arr, left, right)\n        if i == k then\n            return\
    \ arr[i]\n        elseif i > k then\n            return quickSelect(arr, left,\
    \ i - 1, k)\n        else\n            return quickSelect(arr, i + 1, right, k)\n\
    \        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n    local res =\
    \ {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj491qj4j.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpj491qj4j.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quick_sort(arr, l, m - 1)\n            quick_sort(arr, m\
    \ + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnzksckv.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpfnzksckv.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l < r then\n            local pivot =\
    \ partition(arr, l, r)\n            if pivot == k then\n                return\n\
    \            elseif pivot > k then\n                quickSelect(arr, l, pivot\
    \ - 1, k)\n            else\n                quickSelect(arr, pivot + 1, r, k)\n\
    \            end\n        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k\
    \ + 1)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdd24yaqz.lua:51:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpdd24yaqz.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxprcx291.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpxprcx291.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local l, r = 1, n\n    while l <= r do\n\
    \        local m = partition(l, r)\n        if m == k then\n            break\n\
    \        elseif m < k then\n            l = m + 1\n        else\n            r\
    \ = m - 1\n        end\n    end\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8fsw7wl.lua:41:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmph8fsw7wl.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local pivot = partition(arr, l, r)\n        if pivot ==\
    \ k then\n            return arr[pivot]\n        elseif pivot > k then\n     \
    \       return quickSelect(arr, l, pivot - 1, k)\n        else\n            return\
    \ quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local pivot = partition(arr,\
    \ l, r)\n            quickSort(arr, l, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwopb1s2.lua:59:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpqwopb1s2.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    local function swap(i,\
    \ j)\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n    local function partition(l,\
    \ r)\n        local pivot = arr[l]\n        local i, j = l, r\n        while i\
    \ < j do\n            while i < j and arr[j] <= pivot do\n                j =\
    \ j - 1\n            end\n            swap(i, j)\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ swap(i, j)\n        end\n        return i\n    end\n    local function quick_select(l,\
    \ r, k)\n        if l >= r then return end\n        local p = partition(l, r)\n\
    \        if p == k then return end\n        if p > k then\n            quick_select(l,\
    \ p - 1, k)\n        else\n            quick_select(p + 1, r, k)\n        end\n\
    \    end\n    quick_select(1, n, n - k + 1)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpveiw8iy2.lua:48:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpveiw8iy2.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function swap(i, j)\n        arr[i], arr[j] = arr[j],\
    \ arr[i]\n    end\n    local function partition(l, r)\n        local pivot = arr[r]\n\
    \        local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot\
    \ then\n                swap(i, j)\n                i = i + 1\n            end\n\
    \        end\n        swap(i, r)\n        return i\n    end\n    local function\
    \ quickSelect(l, r, k)\n        if l == r then\n            return arr[l]\n  \
    \      end\n        local i = partition(l, r)\n        if i == k then\n      \
    \      return arr[i]\n        elseif i > k then\n            return quickSelect(l,\
    \ i - 1, k)\n        else\n            return quickSelect(i + 1, r, k)\n     \
    \   end\n    end\n    return quickSelect(1, n, k)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v1b1da0.lua:46:\
    \ expected: {-4, -3, 5}\nactual: -4\nstack traceback:\n\t/tmp/tmp0v1b1da0.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(arr, l, r)\n        local i,\
    \ j = l, r\n        local pivot = arr[l]\n        while i < j do\n           \
    \ while i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n\
    \            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l >= r then\n            return\n    \
    \    end\n        local i = partition(arr, l, r)\n        if i == k then\n   \
    \         return\n        elseif i > k then\n            quickSelect(arr, l, i\
    \ - 1, k)\n        else\n            quickSelect(arr, i + 1, r, k)\n        end\n\
    \    end\n    quickSelect(arr, 1, n, n - k + 1)\n    local res = {}\n    for i\
    \ = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm05ppyu.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpsm05ppyu.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l >= r then\n            return\n    \
    \    end\n        local pivot = partition(arr, l, r)\n        if pivot == k then\n\
    \            return\n        elseif pivot > k then\n            quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            quickSelect(arr, pivot + 1, r, k)\n\
    \        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    local\
    \ res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uen8r6q.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp3uen8r6q.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local function partition(arr, l, r)\n        local pivot =\
    \ arr[l]\n        local i = l + 1\n        for j = l + 1, r do\n            if\
    \ arr[j] > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n     \
    \           i = i + 1\n            end\n        end\n        arr[l], arr[i - 1]\
    \ = arr[i - 1], arr[l]\n        return i - 1\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local pivot = partition(arr, l, r)\n        if pivot == k then\n     \
    \       return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, n, k)\n    table.sort(arr,\
    \ 1, k)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp81q28xv4.lua:42:\
    \ bad argument #2 to 'sort' (function expected, got number)\nstack traceback:\n\
    \t/tmp/tmp81q28xv4.lua:42: in function 'candidate'\n\t/tmp/tmp81q28xv4.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function quickSelect(arr, l, r, k)\n        local\
    \ i, j = l, r\n        local pivot = arr[l]\n        while i < j do\n        \
    \    while i < j and arr[j] <= pivot do\n                j = j - 1\n         \
    \   end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        if i == k then\n            return\n\
    \        elseif i > k then\n            quickSelect(arr, l, i - 1, k)\n      \
    \  else\n            quickSelect(arr, i + 1, r, k)\n        end\n    end\n   \
    \ quickSelect(arr, 1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1,\
    \ n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvwbinx7.lua:45:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpfvwbinx7.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ mid = partition(arr, left, right)\n            quickSort(arr, left, mid - 1)\n\
    \            quickSort(arr, mid + 1, right)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphe9tz5r9.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmphe9tz5r9.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i == k then\n\
    \            return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local function merge(arr1, arr2)\n        local i =\
    \ 1\n        local j = 1\n        local arr = {}\n        while i <= #arr1 and\
    \ j <= #arr2 do\n            if arr1[i] > arr2[j] then\n                arr[#arr\
    \ + 1] = arr1[i]\n                i = i + 1\n            else\n              \
    \  arr[#arr + 1] = arr2[j]\n                j = j + 1\n            end\n     \
    \   end\n        while i <= #arr1 do\n            arr[#arr + 1] = arr1[i]\n  \
    \          i = i + 1\n        end\n        while j <= #arr2 do\n            arr[#arr\
    \ + 1] = arr2[j]\n            j = j + 1\n        end\n        return arr\n   \
    \ end\n    local function quickSort(arr, l, r)\n        if l < r then\n      \
    \      local i = partition(arr, l, r)\n            quickSort(arr, l, i - 1)\n\
    \            quickSort(arr, i + 1, r)\n        end\n    end\n    local function\
    \ sort(arr, k)\n        local arr1 = {}\n        local arr2 =\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuczy_ior.lua:74: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local function swap(i, j)\n        arr[i], arr[j] = arr[j],\
    \ arr[i]\n    end\n    local function partition(l, r)\n        local pivot = arr[r]\n\
    \        local i = l\n        for j = l, r - 1 do\n            if arr[j] < pivot\
    \ then\n                swap(i, j)\n                i = i + 1\n            end\n\
    \        end\n        swap(i, r)\n        return i\n    end\n    local function\
    \ select(l, r, k)\n        if l == r then\n            return arr[l]\n       \
    \ end\n        local pivot = partition(l, r)\n        if pivot == k then\n   \
    \         return arr[pivot]\n        elseif pivot < k then\n            return\
    \ select(pivot + 1, r, k)\n        else\n            return select(l, pivot -\
    \ 1, k)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = select(1, n, n - i + 1)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6w4az8d.lua:57:\
    \ expected: {2, 20, 123}\nactual: {123, 20, 2}\nstack traceback:\n\t/tmp/tmps6w4az8d.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        local\
    \ j = 1\n        while j <= k do\n            if arr[i] > res[j] then\n      \
    \          table.remove(res, j)\n                table.insert(res, j, arr[i])\n\
    \                break\n            end\n            j = j + 1\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpba9_535l.lua:42:\
    \ expected: {0, 1, 2, 20}\nactual: {2, 0, 1, 20}\nstack traceback:\n\t/tmp/tmpba9_535l.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            if i < j then\n                arr[i] = arr[j]\n \
    \               i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(l, r)\n        if l < r then\n            local pivot\
    \ = partition(l, r)\n            quickSort(l, pivot - 1)\n            quickSort(pivot\
    \ + 1, r)\n        end\n    end\n    quickSort(1, n)\n    local res = {}\n   \
    \ for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6i9rng9d.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp6i9rng9d.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n\
    \ then\n        table.sort(arr)\n        return arr\n    end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l\n  \
    \      for j = l, r - 1 do\n            if arr[j] > pivot then\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n\
    \        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n\
    \    local function quickselect(arr, l, r, k)\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return\n        elseif p > k then\n\
    \            quickselect(arr, l, p - 1, k)\n        else\n            quickselect(arr,\
    \ p + 1, r, k)\n        end\n    end\n    quickselect(arr, 1, n, k)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrphtl_m.lua:48:\
    \ expected: {4, 4}\nactual: {4, 4, -4}\nstack traceback:\n\t/tmp/tmptrphtl_m.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(l, r)\n        if l >= r then\n            return\n\
    \        end\n        local i = partition(l, r)\n        if i == k - 1 then\n\
    \            return\n        elseif i > k - 1 then\n            quickSelect(l,\
    \ i - 1)\n        else\n            quickSelect(i + 1, r)\n        end\n    end\n\
    \    quickSelect(1, n)\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1auqoxck.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp1auqoxck.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local p = partition(arr,\
    \ l, r)\n            quickSort(arr, l, p - 1)\n            quickSort(arr, p +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lu745o3.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp0lu745o3.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local x = arr[l]\n\
    \        local i = l\n        for j = l + 1, r do\n            if arr[j] > x then\n\
    \                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            end\n        end\n        arr[l], arr[i] = arr[i], arr[l]\n     \
    \   return i\n    end\n    local function quickselect(l, r, k)\n        if l ==\
    \ r then\n            return\n        end\n        local i = partition(l, r)\n\
    \        if i == k then\n            return\n        elseif i > k then\n     \
    \       quickselect(l, i - 1, k)\n        else\n            quickselect(i + 1,\
    \ r, k)\n        end\n    end\n    quickselect(1, n, k)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdkuzenor.lua:48:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpdkuzenor.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local mid = partition(arr,\
    \ l, r)\n            quickSort(arr, l, mid - 1)\n            quickSort(arr, mid\
    \ + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_7gvo6y.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpq_7gvo6y.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == 0 then\n        return {}\n    elseif k ==\
    \ len then\n        return arr\n    end\n    local res = {}\n    for i = 1, k\
    \ do\n        res[i] = arr[i]\n    end\n    for i = k + 1, len do\n        local\
    \ j = k\n        while j > 0 and res[j] < arr[i] do\n            res[j + 1] =\
    \ res[j]\n            j = j - 1\n        end\n        res[j + 1] = arr[i]\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye8tvus9.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpye8tvus9.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quick_sort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7lhpwsk.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpb7lhpwsk.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, n do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpupn8zslf.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpupn8zslf.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpupn8zslf.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local i = partition(arr,\
    \ l, r)\n            quickSort(arr, l, i - 1)\n            quickSort(arr, i +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5adlros.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmps5adlros.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ji02qa8.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp8ji02qa8.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickselect(l, r, k)\n\
    \        if l == r then\n            return\n        end\n        local p = partition(l,\
    \ r)\n        if p == k then\n            return\n        elseif p < k then\n\
    \            quickselect(p + 1, r, k)\n        else\n            quickselect(l,\
    \ p - 1, k)\n        end\n    end\n    quickselect(1, n, k)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8b1ek32f.lua:48:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp8b1ek32f.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n\
    \ then\n        table.sort(arr)\n        return arr\n    end\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, n)\n    local\
    \ res = {}\n    for i = n, n - k + 1, -1 do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqml2oyf.lua:50:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpkqml2oyf.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ji02qa8.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp8ji02qa8.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, n do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpupn8zslf.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpupn8zslf.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpupn8zslf.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_yg6cbm.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpw_yg6cbm.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpw_yg6cbm.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local t = {}\n    for i = 1, k do\n        table.insert(t, arr[i])\n    end\n\
    \    table.sort(t)\n    for i = k + 1, #arr do\n        if arr[i] > t[1] then\n\
    \            table.remove(t, 1)\n            table.insert(t, arr[i])\n       \
    \     table.sort(t)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6y9z16nr.lua:17:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6y9z16nr.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp6y9z16nr.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] < pivot do\n                j = j - 1\n            end\n  \
    \          arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            arr[j] = arr[i]\n    \
    \    end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quickSort(arr, l, m - 1)\n            quickSort(arr, m +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7ucwbum.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpb7ucwbum.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    for i = k + 1, n do\n        local\
    \ j = 1\n        while j <= k and res[j] > arr[i] do\n            j = j + 1\n\
    \        end\n        if j <= k then\n            for l = k, j + 1, -1 do\n  \
    \              res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kn72you.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp8kn72you.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local i = partition(arr, l, r)\n   \
    \     if i == k then\n            return arr[i]\n        elseif i > k then\n \
    \           return quickSelect(arr, l, i - 1, k)\n        else\n            return\
    \ quickSelect(arr, i + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1,\
    \ n, n - k + 1)\n    local res = {}\n    for i = n - k + 1, n do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmzu4we3.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpvmzu4we3.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, n do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpupn8zslf.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpupn8zslf.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpupn8zslf.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i == k then\n\
    \            return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local function sort(arr, l, r)\n        if l < r then\n\
    \            local i = partition(arr, l, r)\n            sort(arr, l, i - 1)\n\
    \            sort(arr, i + 1, r)\n        end\n    end\n    local res = {}\n \
    \   local n = #arr\n    local pivot = quickSelect(arr, 1, n, n - k + 1)\n    local\
    \ j = 1\n    for i = 1, n do\n        if arr[i] >= pivot then\n            res[j]\
    \ = arr[i]\n            j = j + 1\n        end\n    end\n    sort(res, 1, k)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8x0mtnb.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpo8x0mtnb.lua:16:\
    \ in function 'partition'\n\t/tmp/tmpo8x0mtnb.lua:43: in function 'sort'\n\t/tmp/tmpo8x0mtnb.lua:58:\
    \ in function 'candidate'\n\t/tmp/tmpo8x0mtnb.lua:65: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ >= pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n           \
    \     i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickSelect(l, r, k)\n\
    \        if l == r then\n            return\n        end\n        local i = partition(l,\
    \ r)\n        if i == k then\n            return\n        elseif i > k then\n\
    \            quickSelect(l, i - 1, k)\n        else\n            quickSelect(i\
    \ + 1, r, k)\n        end\n    end\n    quickSelect(1, n, k)\n    return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkq75k2e.lua:44:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpkkq75k2e.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    for i = k + 1, n do\n        local\
    \ j = 1\n        while j <= k and res[j] >= arr[i] do\n            j = j + 1\n\
    \        end\n        if j <= k then\n            for t = k, j + 1, -1 do\n  \
    \              res[t] = res[t - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzi0v447k.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpzi0v447k.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_yg6cbm.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpw_yg6cbm.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpw_yg6cbm.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            table.remove(res, 1)\n            table.insert(res,\
    \ arr[i])\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwmv49t8.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdwmv49t8.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpdwmv49t8.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
