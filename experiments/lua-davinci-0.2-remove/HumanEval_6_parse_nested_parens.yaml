name: HumanEval_6_parse_nested_parens
language: lua
prompt: "-- Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n-- For each of the group, output the deepest\
  \ level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
  \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n \
  \   lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
  \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local levels = {}\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         level = level + 1\n        elseif c == ')' then\n            levels[level]\
    \ = (levels[level] or 0) + 1\n            level = level - 1\n        end\n   \
    \ end\n    return levels\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local max_depth = 0\n    local depth\
    \ = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren == \"(\"\
    \ then\n        depth = depth + 1\n      elseif paren == \")\" then\n        depth\
    \ = depth - 1\n      end\n      if depth > max_depth then\n        max_depth =\
    \ depth\n      end\n    end\n    table.insert(paren_groups, max_depth)\n  end\n\
    \  return paren_groups\nend", "  local paren_levels = {}\n  local paren_level\
    \ = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n \
    \   if c == '(' then\n      paren_level = paren_level + 1\n    elseif c == ')'\
    \ then\n      paren_level = paren_level - 1\n    elseif c == ' ' then\n      table.insert(paren_levels,\
    \ paren_level)\n      paren_level = 0\n    end\n  end\n  table.insert(paren_levels,\
    \ paren_level)\n  return paren_levels\nend", "  local paren_levels = {}\n  for\
    \ paren_group in paren_string:gmatch(\"%S+\") do\n    local level = 0\n    local\
    \ max_level = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren\
    \ == \"(\" then\n        level = level + 1\n      elseif paren == \")\" then\n\
    \        level = level - 1\n      end\n      if level > max_level then\n     \
    \   max_level = level\n      end\n    end\n    table.insert(paren_levels, max_level)\n\
    \  end\n  return paren_levels\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    local max_nesting = 0\n    local nesting\
    \ = 0\n    for char in paren_group:gmatch(\".\") do\n      if char == \"(\" then\n\
    \        nesting = nesting + 1\n      elseif char == \")\" then\n        nesting\
    \ = nesting - 1\n      end\n      if nesting > max_nesting then\n        max_nesting\
    \ = nesting\n      end\n    end\n    table.insert(paren_groups, max_nesting)\n\
    \  end\n  return paren_groups\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    local max_nesting = 0\n    local nesting\
    \ = 0\n    for c in paren_group:gmatch(\".\") do\n      if c == \"(\" then\n \
    \       nesting = nesting + 1\n        if nesting > max_nesting then\n       \
    \   max_nesting = nesting\n        end\n      elseif c == \")\" then\n       \
    \ nesting = nesting - 1\n      end\n    end\n    table.insert(paren_groups, max_nesting)\n\
    \  end\n  return paren_groups\nend", "  local max_depth = 0\n  local depth = 0\n\
    \  for i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c\
    \ == '(' then\n      depth = depth + 1\n      if depth > max_depth then\n    \
    \    max_depth = depth\n      end\n    elseif c == ')' then\n      depth = depth\
    \ - 1\n    end\n  end\n  return max_depth\nend", "    local max_depth = 0\n  \
    \  local depth = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            depth = depth + 1\n           \
    \ if depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif char == ')' then\n            depth = depth - 1\n        end\n\
    \    end\n    return max_depth\nend", "    local paren_groups = {}\n    for group\
    \ in paren_string:gmatch(\"%b()\") do\n        local level = 0\n        local\
    \ max_level = 0\n        for char in group:gmatch(\".\") do\n            if char\
    \ == \"(\" then\n                level = level + 1\n            elseif char ==\
    \ \")\" then\n                level = level - 1\n            end\n           \
    \ max_level = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch(\"%S+\") do\n        local\
    \ max_depth = 0\n        local depth = 0\n        for paren in paren_group:gmatch(\"\
    .\") do\n            if paren == \"(\" then\n                depth = depth + 1\n\
    \            elseif paren == \")\" then\n                depth = depth - 1\n \
    \           end\n            if depth > max_depth then\n                max_depth\
    \ = depth\n            end\n        end\n        table.insert(paren_groups, max_depth)\n\
    \    end\n    return paren_groups\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local max_nesting = 0\n    local nesting\
    \ = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren == \"(\"\
    \ then\n        nesting = nesting + 1\n      elseif paren == \")\" then\n    \
    \    nesting = nesting - 1\n      end\n      if nesting > max_nesting then\n \
    \       max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local max_nesting = 0\n\
    \    local current_nesting = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            current_nesting\
    \ = current_nesting + 1\n            if current_nesting > max_nesting then\n \
    \               max_nesting = current_nesting\n            end\n        elseif\
    \ char == ')' then\n            current_nesting = current_nesting - 1\n      \
    \  end\n    end\n    return max_nesting\nend", "  local levels = {}\n  local level\
    \ = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n\
    \    if char == '(' then\n      level = level + 1\n    elseif char == ')' then\n\
    \      level = level - 1\n    end\n    levels[i] = level\n  end\n  return levels\n\
    end", "    local paren_levels = {}\n    for paren_group in string.gmatch(paren_string,\
    \ \"%S+\") do\n        local paren_level = 0\n        local max_paren_level =\
    \ 0\n        for paren in string.gmatch(paren_group, \".\") do\n            if\
    \ paren == \"(\" then\n                paren_level = paren_level + 1\n       \
    \     elseif paren == \")\" then\n                paren_level = paren_level -\
    \ 1\n            end\n            if paren_level > max_paren_level then\n    \
    \            max_paren_level = paren_level\n            end\n        end\n   \
    \     table.insert(paren_levels, max_paren_level)\n    end\n    return paren_levels\n\
    end", "  local paren_levels = {}\n  for group in paren_string:gmatch(\"%S+\")\
    \ do\n    local level = 0\n    local max_level = 0\n    for paren in group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      if level >\
    \ max_level then\n        max_level = level\n      end\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend", "\tlocal paren_levels = {}\n\
    \tlocal paren_level = 0\n\tfor paren in paren_string:gmatch(\"%b()\") do\n\t\t\
    paren_level = paren_level + 1\n\t\tparen_levels[paren_level] = paren_levels[paren_level]\
    \ or 0\n\t\tparen_levels[paren_level] = paren_levels[paren_level] + 1\n\t\tfor\
    \ paren_sub in paren:gmatch(\"%b()\") do\n\t\t\tparen_level = paren_level + 1\n\
    \t\t\tparen_levels[paren_level] = paren_levels[paren_level] or 0\n\t\t\tparen_levels[paren_level]\
    \ = paren_levels[paren_level] + 1\n\t\tend\n\tend\n\treturn paren_levels\nend",
  "    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n        elseif char == ')' then\n\
    \            paren_level = paren_level - 1\n        end\n        paren_levels[i]\
    \ = paren_level\n    end\n    return paren_levels\nend", "  local paren_groups\
    \ = {}\n  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_level\
    \ = 0\n    local level = 0\n    for c in paren_group:gmatch(\".\") do\n      if\
    \ c == \"(\" then\n        level = level + 1\n      elseif c == \")\" then\n \
    \       level = level - 1\n      end\n      max_level = math.max(max_level, level)\n\
    \    end\n    table.insert(paren_groups, max_level)\n  end\n  return paren_groups\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    local paren_start\
    \ = 0\n    local paren_end = 0\n    local paren_string_len = string.len(paren_string)\n\
    \    for i = 1, paren_string_len do\n        local char = string.sub(paren_string,\
    \ i, i)\n        if char == \"(\" then\n            paren_level = paren_level\
    \ + 1\n            if paren_level == 1 then\n                paren_start = i\n\
    \            end\n        elseif char == \")\" then\n            if paren_level\
    \ == 1 then\n                paren_end = i\n                table.insert(paren_levels,\
    \ paren_end - paren_start - 1)\n                paren_level = 0\n            else\n\
    \                paren_level = paren_level - 1\n            end\n        end\n\
    \    end\n    return paren_levels\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    local paren_depth = 0\n    local max_depth\
    \ = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren == \"(\"\
    \ then\n        paren_depth = paren_depth + 1\n      elseif paren == \")\" then\n\
    \        paren_depth = paren_depth - 1\n      end\n      if paren_depth > max_depth\
    \ then\n        max_depth = paren_depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "  local max_depth = 0\n  local\
    \ depth = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i,\
    \ i)\n    if char == '(' then\n      depth = depth + 1\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    elseif char == ')' then\n  \
    \    depth = depth - 1\n    end\n  end\n  return max_depth\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    local paren_level_max = 0\n    for i =\
    \ 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if c\
    \ == '(' then\n            paren_level = paren_level + 1\n            if paren_level\
    \ > paren_level_max then\n                paren_level_max = paren_level\n    \
    \        end\n        elseif c == ')' then\n            paren_level = paren_level\
    \ - 1\n        end\n    end\n    return paren_level_max\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif char == ')' then\n            paren_level\
    \ = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n    end\n\
    \    return paren_levels\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    local max_nest = 0\n    local nest\
    \ = 0\n    for c in paren_group:gmatch(\".\") do\n      if c == \"(\" then\n \
    \       nest = nest + 1\n        if nest > max_nest then\n          max_nest =\
    \ nest\n        end\n      elseif c == \")\" then\n        nest = nest - 1\n \
    \     end\n    end\n    table.insert(paren_groups, max_nest)\n  end\n  return\
    \ paren_groups\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %S+\") do\n    local max_depth = 0\n    local depth = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        depth = depth + 1\n      elseif\
    \ paren == \")\" then\n        depth = depth - 1\n      end\n      if depth >\
    \ max_depth then\n        max_depth = depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "    local max_depth = 0\n \
    \   local curr_depth = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == '(' then\n            curr_depth\
    \ = curr_depth + 1\n            if curr_depth > max_depth then\n             \
    \   max_depth = curr_depth\n            end\n        elseif char == ')' then\n\
    \            curr_depth = curr_depth - 1\n        end\n    end\n    return max_depth\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local max_depth = 0\n        local depth = 0\n        for char\
    \ in paren_group:gmatch(\".\") do\n            if char == \"(\" then\n       \
    \         depth = depth + 1\n                if depth > max_depth then\n     \
    \               max_depth = depth\n                end\n            elseif char\
    \ == \")\" then\n                depth = depth - 1\n            end\n        end\n\
    \        table.insert(paren_groups, max_depth)\n    end\n    return paren_groups\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    local paren_start\
    \ = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_max\
    \ = 0\n    local paren_max_start = 0\n    local paren_max_end = 0\n    local paren_max_count\
    \ = 0\n    for i = 1, #paren_string do\n        if paren_string:sub(i, i) == '('\
    \ then\n            paren_level = paren_level + 1\n            paren_count = paren_count\
    \ + 1\n            if paren_level > paren_max then\n                paren_max\
    \ = paren_level\n                paren_max_start = i\n                paren_max_count\
    \ = paren_count\n            end\n        elseif paren_string:sub(i, i) == ')'\
    \ then\n            paren_level = paren_level - 1\n            paren_count = paren_count\
    \ + 1\n            if paren_level == paren_max then\n                paren_max_end\
    \ = i\n            end\n        end\n    end\n    table.insert(paren_levels, paren_max)\n\
    \    if paren_max_end < #paren_string then\n        table.insert(paren_levels,\
    \ parse_nested_parens(paren_string:sub(paren_max_end + 1, #paren_string)))\n \
    \   end\n    return paren_levels\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local max_nesting = 0\n    local nesting\
    \ = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren == \"(\"\
    \ then\n        nesting = nesting + 1\n      elseif paren == \")\" then\n    \
    \    nesting = nesting - 1\n      end\n      if nesting > max_nesting then\n \
    \       max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "  local max_nest = 0\n  local\
    \ nest = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n\
    \    if c == '(' then\n      nest = nest + 1\n      if nest > max_nest then\n\
    \        max_nest = nest\n      end\n    elseif c == ')' then\n      nest = nest\
    \ - 1\n    end\n  end\n  return max_nest\nend", "    local paren_levels = {}\n\
    \    local paren_level = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif char == ')' then\n            paren_level\
    \ = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n    end\n\
    \    return paren_levels\nend", "    local max_depth = 0\n    local depth = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            depth = depth + 1\n            if depth\
    \ > max_depth then\n                max_depth = depth\n            end\n     \
    \   elseif c == ')' then\n            depth = depth - 1\n        end\n    end\n\
    \    return max_depth\nend", "    local paren_levels = {}\n    local level = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            level = level + 1\n        elseif c == ')'\
    \ then\n            level = level - 1\n        end\n        table.insert(paren_levels,\
    \ level)\n    end\n    return paren_levels\nend", "    local max_depth = 0\n \
    \   local depth = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            depth = depth + 1\n            if\
    \ depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif c == ')' then\n            depth = depth - 1\n        end\n  \
    \  end\n    return max_depth\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n        local max_level = 0\n        local\
    \ level = 0\n        for paren in paren_group:gmatch(\".\") do\n            if\
    \ paren == \"(\" then\n                level = level + 1\n            elseif paren\
    \ == \")\" then\n                level = level - 1\n            end\n        \
    \    if level > max_level then\n                max_level = level\n          \
    \  end\n        end\n        table.insert(paren_groups, max_level)\n    end\n\
    \    return paren_groups\nend", "  local paren_list = {}\n  for paren in paren_string:gmatch(\"\
    %b()\") do\n    local level = 0\n    for c in paren:gmatch(\".\") do\n      if\
    \ c == \"(\" then\n        level = level + 1\n      elseif c == \")\" then\n \
    \       level = level - 1\n      end\n    end\n    table.insert(paren_list, level)\n\
    \  end\n  return paren_list\nend", "  local paren_levels = {}\n  for group in\
    \ paren_string:gmatch(\"%S+\") do\n    local level = 0\n    local max_level =\
    \ 0\n    for paren in group:gmatch(\".\") do\n      if paren == \"(\" then\n \
    \       level = level + 1\n      elseif paren == \")\" then\n        level = level\
    \ - 1\n      end\n      if level > max_level then\n        max_level = level\n\
    \      end\n    end\n    table.insert(paren_levels, max_level)\n  end\n  return\
    \ paren_levels\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %b()\") do\n    local max_nesting = 0\n    local current_nesting = 0\n    for\
    \ paren in paren_group:gmatch(\".\") do\n      if paren == \"(\" then\n      \
    \  current_nesting = current_nesting + 1\n      elseif paren == \")\" then\n \
    \       current_nesting = current_nesting - 1\n      end\n      if current_nesting\
    \ > max_nesting then\n        max_nesting = current_nesting\n      end\n    end\n\
    \    table.insert(paren_groups, max_nesting)\n  end\n  return paren_groups\nend",
  "  local max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n    local\
    \ char = paren_string:sub(i, i)\n    if char == '(' then\n      depth = depth\
    \ + 1\n      if depth > max_depth then\n        max_depth = depth\n      end\n\
    \    elseif char == ')' then\n      depth = depth - 1\n    end\n  end\n  return\
    \ max_depth\nend", "  local paren_levels = {}\n  for paren_group in paren_string:gmatch(\"\
    %S+\") do\n    local paren_level = 0\n    local max_level = 0\n    for paren in\
    \ paren_group:gmatch(\".\") do\n      if paren == \"(\" then\n        paren_level\
    \ = paren_level + 1\n      elseif paren == \")\" then\n        paren_level = paren_level\
    \ - 1\n      end\n      if paren_level > max_level then\n        max_level = paren_level\n\
    \      end\n    end\n    table.insert(paren_levels, max_level)\n  end\n  return\
    \ paren_levels\nend", "    local paren_levels = {}\n    local current_level =\
    \ 0\n    local max_level = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == '(' then\n            current_level\
    \ = current_level + 1\n            max_level = math.max(max_level, current_level)\n\
    \        elseif char == ')' then\n            current_level = current_level -\
    \ 1\n        end\n    end\n    return max_level\nend", "    local max_nesting\
    \ = 0\n    local current_nesting = 0\n    for i = 1, #paren_string do\n      \
    \  local c = paren_string:sub(i, i)\n        if c == '(' then\n            current_nesting\
    \ = current_nesting + 1\n            if current_nesting > max_nesting then\n \
    \               max_nesting = current_nesting\n            end\n        elseif\
    \ c == ')' then\n            current_nesting = current_nesting - 1\n        end\n\
    \    end\n    return max_nesting\nend", "    local max_depth = 0\n    local depth\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            depth = depth + 1\n            if\
    \ depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif c == ')' then\n            depth = depth - 1\n        end\n  \
    \  end\n    return max_depth\nend", "    local max_depth = 0\n    local current_depth\
    \ = 0\n    local paren_stack = {}\n    local paren_map = {\n        ['('] = ')',\n\
    \        ['['] = ']',\n        ['{'] = '}',\n    }\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' or char\
    \ == '[' or char == '{' then\n            table.insert(paren_stack, char)\n  \
    \          current_depth = current_depth + 1\n            if current_depth > max_depth\
    \ then\n                max_depth = current_depth\n            end\n        elseif\
    \ char == ')' or char == ']' or char == '}' then\n            if #paren_stack\
    \ == 0 then\n                return -1\n            end\n            local last_paren\
    \ = table.remove(paren_stack)\n            if paren_map[last_paren] ~= char then\n\
    \                return -1\n            end\n            current_depth = current_depth\
    \ - 1\n        end\n    end\n    if #paren_stack ~= 0 then\n        return -1\n\
    \    end\n    return max_depth\nend", "  local max_depth = 0\n  local curr_depth\
    \ = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n\
    \    if char == '(' then\n      curr_depth = curr_depth + 1\n      if curr_depth\
    \ > max_depth then\n        max_depth = curr_depth\n      end\n    elseif char\
    \ == ')' then\n      curr_depth = curr_depth - 1\n    end\n  end\n  return max_depth\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %b()\") do\n    table.insert(paren_groups, paren_group)\n  end\n  local max_nesting\
    \ = 0\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    for _ in paren_group:gmatch(\"%(\") do\n      nesting = nesting + 1\n   \
    \ end\n    max_nesting = math.max(max_nesting, nesting)\n  end\n  return max_nesting\n\
    end", "    local paren_groups = {}\n    local paren_group = {}\n    local paren_level\
    \ = 0\n    local max_level = 0\n    local paren_start = 0\n    local paren_end\
    \ = 0\n    local paren_index = 0\n    local paren_char = ''\n    local paren_string_len\
    \ = string.len(paren_string)\n    local paren_string_sub = string.sub\n    local\
    \ paren_string_find = string.find\n    local paren_string_sub = string.sub\n \
    \   local paren_string_gsub = string.gsub\n    local paren_string_match = string.match\n\
    \    local paren_string_gmatch = string.gmatch\n    local paren_string_format\
    \ = string.format\n    local paren_string_byte = string.byte\n    local paren_string_char\
    \ = string.char\n    local paren_string_reverse = string.reverse\n    local paren_string_rep\
    \ = string.rep\n    local paren_string_len = string.len\n    local paren_string_upper\
    \ = string.upper\n    local paren_string_lower = string.lower\n    local paren_string_gsub\
    \ = string.gsub\n    local paren_string_find = string.find\n    local paren_string_match\
    \ = string.match\n    local paren_string_gmatch = string.gmatch\n    local paren_string_format\
    \ = string.format\n    local paren_string_byte = string.byte\n    local paren_string_char\
    \ = string.char\n    local paren_string_reverse = string.reverse\n    local paren_string_rep\
    \ = string.rep\n    local paren_string_len = string.len\n    local paren_string_upper\
    \ = string.upper\n    local paren_string_lower = string.lower\n    local paren_string_gsub\
    \ = string.gsub\n    local paren_string_find = string.find\n    local paren_string_match\
    \ = string.match\n    local paren_string_gmatch = string.gmatch\n    local paren_string_format\
    \ = string.format\n    local paren_string_", "    local paren_groups = {}\n  \
    \  for group in paren_string:gmatch(\"%b()\") do\n        local level = 0\n  \
    \      local max_level = 0\n        for c in group:gmatch(\".\") do\n        \
    \    if c == \"(\" then\n                level = level + 1\n                if\
    \ level > max_level then\n                    max_level = level\n            \
    \    end\n            elseif c == \")\" then\n                level = level -\
    \ 1\n            end\n        end\n        paren_groups[#paren_groups + 1] = max_level\n\
    \    end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ group in paren_string:gmatch(\"%b()\") do\n        local level = 0\n       \
    \ local max_level = 0\n        for c in group:gmatch(\".\") do\n            if\
    \ c == \"(\" then\n                level = level + 1\n                if level\
    \ > max_level then\n                    max_level = level\n                end\n\
    \            elseif c == \")\" then\n                level = level - 1\n     \
    \       end\n        end\n        table.insert(paren_groups, max_level)\n    end\n\
    \    return paren_groups\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    paren_groups[#paren_groups + 1] = paren_group\n\
    \  end\n  local max_nesting = 0\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    for _ in paren_group:gmatch(\"%(\") do\n    \
    \  nesting = nesting + 1\n    end\n    max_nesting = math.max(max_nesting, nesting)\n\
    \  end\n  return max_nesting\nend", "    local paren_groups = {}\n    for group\
    \ in paren_string:gmatch(\"%b()\") do\n        local level = 0\n        local\
    \ max_level = 0\n        for char in group:gmatch(\".\") do\n            if char\
    \ == \"(\" then\n                level = level + 1\n                if level >\
    \ max_level then\n                    max_level = level\n                end\n\
    \            elseif char == \")\" then\n                level = level - 1\n  \
    \          end\n        end\n        table.insert(paren_groups, max_level)\n \
    \   end\n    return paren_groups\nend", "  local max_depth = 0\n  local depth\
    \ = 0\n  for i = 1, #paren_string do\n    if paren_string:sub(i, i) == '(' then\n\
    \      depth = depth + 1\n      if depth > max_depth then\n        max_depth =\
    \ depth\n      end\n    elseif paren_string:sub(i, i) == ')' then\n      depth\
    \ = depth - 1\n    end\n  end\n  return max_depth\nend", "  local level = 0\n\
    \  local max_level = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      level = level + 1\n      if level > max_level\
    \ then\n        max_level = level\n      end\n    elseif c == ')' then\n     \
    \ level = level - 1\n    end\n  end\n  return max_level\nend", "  local paren_groups\
    \ = {}\n  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_depth\
    \ = 0\n    local depth = 0\n    for c in paren_group:gmatch(\".\") do\n      if\
    \ c == \"(\" then\n        depth = depth + 1\n        if depth > max_depth then\n\
    \          max_depth = depth\n        end\n      elseif c == \")\" then\n    \
    \    depth = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "    local max_nesting = 0\n    local current_nesting\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_nesting = current_nesting\
    \ + 1\n            if current_nesting > max_nesting then\n                max_nesting\
    \ = current_nesting\n            end\n        elseif char == ')' then\n      \
    \      current_nesting = current_nesting - 1\n        end\n    end\n    return\
    \ max_nesting\nend", "    local paren_levels = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local level = 0\n        local max_level = 0\n        for paren\
    \ in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n      \
    \          level = level + 1\n            elseif paren == \")\" then\n       \
    \         level = level - 1\n            end\n            if level > max_level\
    \ then\n                max_level = level\n            end\n        end\n    \
    \    table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local max_nesting = 0\n        local nesting = 0\n        for\
    \ paren in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n\
    \                nesting = nesting + 1\n            elseif paren == \")\" then\n\
    \                nesting = nesting - 1\n            end\n            if nesting\
    \ > max_nesting then\n                max_nesting = nesting\n            end\n\
    \        end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend", "    local paren_levels = {}\n    local paren_level = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            paren_level = paren_level + 1\n        elseif\
    \ c == ')' then\n            paren_level = paren_level - 1\n        end\n    \
    \    paren_levels[i] = paren_level\n    end\n    return paren_levels\nend", " \
    \ local paren_table = {}\n  for paren_group in paren_string:gmatch(\"%S+\") do\n\
    \    local paren_count = 0\n    local max_paren_count = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        paren_count = paren_count + 1\n\
    \      elseif paren == \")\" then\n        paren_count = paren_count - 1\n   \
    \   end\n      if paren_count > max_paren_count then\n        max_paren_count\
    \ = paren_count\n      end\n    end\n    table.insert(paren_table, max_paren_count)\n\
    \  end\n  return paren_table\nend", "  local paren_levels = {}\n  local paren_level\
    \ = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n\
    \    if char == '(' then\n      paren_level = paren_level + 1\n    elseif char\
    \ == ')' then\n      paren_level = paren_level - 1\n    end\n    paren_levels[i]\
    \ = paren_level\n  end\n  return paren_levels\nend", "    local paren_levels =\
    \ {}\n    local paren_level = 0\n    local paren_start = 0\n    local paren_end\
    \ = 0\n    local paren_string_len = string.len(paren_string)\n    for i = 1, paren_string_len\
    \ do\n        local char = string.sub(paren_string, i, i)\n        if char ==\
    \ \"(\" then\n            paren_level = paren_level + 1\n            if paren_level\
    \ == 1 then\n                paren_start = i\n            end\n        elseif\
    \ char == \")\" then\n            if paren_level == 1 then\n                paren_end\
    \ = i\n                table.insert(paren_levels, paren_end - paren_start + 1)\n\
    \            end\n            paren_level = paren_level - 1\n        end\n   \
    \ end\n    return paren_levels\nend", "  local max_depth = 0\n  local depth =\
    \ 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n\
    \    if char == '(' then\n      depth = depth + 1\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    elseif char == ')' then\n  \
    \    depth = depth - 1\n    end\n  end\n  return max_depth\nend", "  local paren_groups\
    \ = {}\n  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_depth\
    \ = 0\n    local depth = 0\n    for c in paren_group:gmatch(\".\") do\n      if\
    \ c == \"(\" then\n        depth = depth + 1\n        if depth > max_depth then\n\
    \          max_depth = depth\n        end\n      elseif c == \")\" then\n    \
    \    depth = depth - 1\n      end\n    end\n    paren_groups[#paren_groups + 1]\
    \ = max_depth\n  end\n  return paren_groups\nend", "    local paren_groups = {}\n\
    \    for paren_group in paren_string:gmatch(\"%S+\") do\n        local max_depth\
    \ = 0\n        local depth = 0\n        for c in paren_group:gmatch(\".\") do\n\
    \            if c == \"(\" then\n                depth = depth + 1\n         \
    \       if depth > max_depth then\n                    max_depth = depth\n   \
    \             end\n            elseif c == \")\" then\n                depth =\
    \ depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local max_nesting =\
    \ 0\n    local current_nesting = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            current_nesting\
    \ = current_nesting + 1\n            if current_nesting > max_nesting then\n \
    \               max_nesting = current_nesting\n            end\n        elseif\
    \ char == ')' then\n            current_nesting = current_nesting - 1\n      \
    \  end\n    end\n    return max_nesting\nend", "    local paren_groups = {}\n\
    \    for paren_group in paren_string:gmatch(\"%S+\") do\n        local max_level\
    \ = 0\n        local level = 0\n        for char in paren_group:gmatch(\".\")\
    \ do\n            if char == \"(\" then\n                level = level + 1\n \
    \           elseif char == \")\" then\n                level = level - 1\n   \
    \         end\n            if level > max_level then\n                max_level\
    \ = level\n            end\n        end\n        table.insert(paren_groups, max_level)\n\
    \    end\n    return paren_groups\nend", "  local max_depth = 0\n  local depth\
    \ = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n \
    \   if c == '(' then\n      depth = depth + 1\n      if depth > max_depth then\n\
    \        max_depth = depth\n      end\n    elseif c == ')' then\n      depth =\
    \ depth - 1\n    end\n  end\n  return max_depth\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    local paren_start = 0\n    local paren_end\
    \ = 0\n    local paren_count = 0\n    local paren_max_level = 0\n    local paren_max_count\
    \ = 0\n    local paren_max_start = 0\n    local paren_max_end = 0\n    local paren_max_string\
    \ = \"\"\n    local paren_string_len = string.len(paren_string)\n    for i = 1,\
    \ paren_string_len do\n        local paren_char = string.sub(paren_string, i,\
    \ i)\n        if paren_char == \"(\" then\n            paren_level = paren_level\
    \ + 1\n            if paren_level > paren_max_level then\n                paren_max_level\
    \ = paren_level\n            end\n            if paren_count == 0 then\n     \
    \           paren_start = i\n            end\n            paren_count = paren_count\
    \ + 1\n        elseif paren_char == \")\" then\n            paren_level = paren_level\
    \ - 1\n            paren_count = paren_count - 1\n            if paren_count ==\
    \ 0 then\n                paren_end = i\n                local paren_string =\
    \ string.sub(paren_string, paren_start, paren_end)\n                if paren_max_count\
    \ < paren_count then\n                    paren_max_count = paren_count\n    \
    \                paren_max_start = paren_start\n                    paren_max_end\
    \ = paren_end\n                    paren_max_string = paren_string\n         \
    \       end\n            end\n        end\n    end\n    return paren_max_level,\
    \ paren_max_string\nend", "  local result = {}\n  local max_depth = 0\n  local\
    \ depth = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      depth = depth + 1\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    elseif c == ')' then\n     \
    \ depth = depth - 1\n    end\n  end\n  return max_depth\nend", "  local paren_levels\
    \ = {}\n  local paren_level = 0\n  local max_level = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ paren_level = paren_level + 1\n      if paren_level > max_level then\n     \
    \   max_level = paren_level\n      end\n    elseif char == ')' then\n      paren_level\
    \ = paren_level - 1\n    end\n  end\n  return max_level\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch(\"%S+\") do\n        local\
    \ paren_count = 0\n        local max_paren_count = 0\n        for paren in paren_group:gmatch(\"\
    .\") do\n            if paren == \"(\" then\n                paren_count = paren_count\
    \ + 1\n            elseif paren == \")\" then\n                paren_count = paren_count\
    \ - 1\n            end\n            if paren_count > max_paren_count then\n  \
    \              max_paren_count = paren_count\n            end\n        end\n \
    \       table.insert(paren_groups, max_paren_count)\n    end\n    return paren_groups\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %b()\") do\n    local max_nesting = 0\n    local nesting = 0\n    for char in\
    \ paren_group:gmatch(\".\") do\n      if char == \"(\" then\n        nesting =\
    \ nesting + 1\n      elseif char == \")\" then\n        nesting = nesting - 1\n\
    \      end\n      if nesting > max_nesting then\n        max_nesting = nesting\n\
    \      end\n    end\n    table.insert(paren_groups, max_nesting)\n  end\n  return\
    \ paren_groups\nend", "    local paren_levels = {}\n    local paren_level = 0\n\
    \    for i = 1, #paren_string do\n        if paren_string:sub(i, i) == '(' then\n\
    \            paren_level = paren_level + 1\n        elseif paren_string:sub(i,\
    \ i) == ')' then\n            paren_level = paren_level - 1\n        end\n   \
    \     table.insert(paren_levels, paren_level)\n    end\n    return paren_levels\n\
    end", "  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\"\
    ) do\n    table.insert(paren_groups, group)\n  end\n  local max_nesting = 0\n\
    \  for _, group in ipairs(paren_groups) do\n    local nesting = 0\n    for _ in\
    \ group:gmatch(\"%(\") do\n      nesting = nesting + 1\n    end\n    max_nesting\
    \ = math.max(max_nesting, nesting)\n  end\n  return max_nesting\nend", "    local\
    \ paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\") do\n     \
    \   local max_nesting = 0\n        local nesting = 0\n        for c in group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                nesting = nesting + 1\n\
    \                if nesting > max_nesting then\n                    max_nesting\
    \ = nesting\n                end\n            elseif c == \")\" then\n       \
    \         nesting = nesting - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local max_depth =\
    \ 0\n    local curr_depth = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            curr_depth\
    \ = curr_depth + 1\n            if curr_depth > max_depth then\n             \
    \   max_depth = curr_depth\n            end\n        elseif char == ')' then\n\
    \            curr_depth = curr_depth - 1\n        end\n    end\n    return max_depth\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %S+\") do\n    local max_level = 0\n    local level = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      if level >\
    \ max_level then\n        max_level = level\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_level = 0\n\
    \    local level = 0\n    for char in paren_group:gmatch(\".\") do\n      if char\
    \ == \"(\" then\n        level = level + 1\n      elseif char == \")\" then\n\
    \        level = level - 1\n      end\n      if level > max_level then\n     \
    \   max_level = level\n      end\n    end\n    table.insert(paren_groups, max_level)\n\
    \  end\n  return paren_groups\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for paren in paren_group:gmatch(\".\") do\n           \
    \ if paren == \"(\" then\n                nesting = nesting + 1\n            elseif\
    \ paren == \")\" then\n                nesting = nesting - 1\n            end\n\
    \            if nesting > max_nesting then\n                max_nesting = nesting\n\
    \            end\n        end\n        table.insert(paren_groups, max_nesting)\n\
    \    end\n    return paren_groups\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    table.insert(paren_groups, paren_group)\n\
    \  end\n  local max_nesting = 0\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    for _ in paren_group:gmatch(\"%(\") do\n    \
    \  nesting = nesting + 1\n    end\n    if nesting > max_nesting then\n      max_nesting\
    \ = nesting\n    end\n  end\n  return max_nesting\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch(\"%S+\") do\n        local\
    \ max_nesting = 0\n        local current_nesting = 0\n        for paren in paren_group:gmatch(\"\
    .\") do\n            if paren == \"(\" then\n                current_nesting =\
    \ current_nesting + 1\n            elseif paren == \")\" then\n              \
    \  current_nesting = current_nesting - 1\n            end\n            if current_nesting\
    \ > max_nesting then\n                max_nesting = current_nesting\n        \
    \    end\n        end\n        table.insert(paren_groups, max_nesting)\n    end\n\
    \    return paren_groups\nend", "    local paren_groups = {}\n    for group in\
    \ paren_string:gmatch(\"%b()\") do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for char in group:gmatch(\".\") do\n            if char\
    \ == \"(\" then\n                nesting = nesting + 1\n                if nesting\
    \ > max_nesting then\n                    max_nesting = nesting\n            \
    \    end\n            elseif char == \")\" then\n                nesting = nesting\
    \ - 1\n            end\n        end\n        table.insert(paren_groups, max_nesting)\n\
    \    end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch(\"%S+\") do\n        local paren_stack =\
    \ {}\n        local max_level = 0\n        for paren in paren_group:gmatch(\"\
    .\") do\n            if paren == \"(\" then\n                table.insert(paren_stack,\
    \ paren)\n                max_level = math.max(max_level, #paren_stack)\n    \
    \        elseif paren == \")\" then\n                table.remove(paren_stack)\n\
    \            end\n        end\n        table.insert(paren_groups, max_level)\n\
    \    end\n    return paren_groups\nend", "  local paren_groups = {}\n  for group\
    \ in paren_string:gmatch(\"%b()\") do\n    local max_level = 0\n    local level\
    \ = 0\n    for c in group:gmatch(\".\") do\n      if c == \"(\" then\n       \
    \ level = level + 1\n        if level > max_level then\n          max_level =\
    \ level\n        end\n      elseif c == \")\" then\n        level = level - 1\n\
    \      end\n    end\n    table.insert(paren_groups, max_level)\n  end\n  return\
    \ paren_groups\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %b()\") do\n    local paren_levels = {}\n    local level = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        level = level + 1\n      elseif c ==\
    \ \")\" then\n        level = level - 1\n      end\n      paren_levels[level]\
    \ = true\n    end\n    table.insert(paren_groups, #paren_levels)\n  end\n  return\
    \ paren_groups\nend", "  local max_depth = 0\n  local curr_depth = 0\n  for c\
    \ in paren_string:gmatch('.') do\n    if c == '(' then\n      curr_depth = curr_depth\
    \ + 1\n      if curr_depth > max_depth then\n        max_depth = curr_depth\n\
    \      end\n    elseif c == ')' then\n      curr_depth = curr_depth - 1\n    end\n\
    \  end\n  return max_depth\nend", "    local paren_table = {}\n    local paren_level\
    \ = 0\n    local paren_max = 0\n    local paren_start = 0\n    local paren_end\
    \ = 0\n    local paren_count = 0\n    local paren_string_len = string.len(paren_string)\n\
    \    for i = 1, paren_string_len do\n        if string.sub(paren_string, i, i)\
    \ == \"(\" then\n            paren_level = paren_level + 1\n            if paren_level\
    \ > paren_max then\n                paren_max = paren_level\n            end\n\
    \            if paren_count == 0 then\n                paren_start = i\n     \
    \       end\n            paren_count = paren_count + 1\n        elseif string.sub(paren_string,\
    \ i, i) == \")\" then\n            paren_level = paren_level - 1\n           \
    \ paren_count = paren_count - 1\n            if paren_count == 0 then\n      \
    \          paren_end = i\n                table.insert(paren_table, {paren_start,\
    \ paren_end})\n            end\n        end\n    end\n    return paren_max, paren_table\n\
    end", "  local max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n\
    \    local c = paren_string:sub(i, i)\n    if c == '(' then\n      depth = depth\
    \ + 1\n      if depth > max_depth then\n        max_depth = depth\n      end\n\
    \    elseif c == ')' then\n      depth = depth - 1\n    end\n  end\n  return max_depth\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local max_nesting = 0\n        local nesting = 0\n        for\
    \ paren in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n\
    \                nesting = nesting + 1\n            elseif paren == \")\" then\n\
    \                nesting = nesting - 1\n            end\n            if nesting\
    \ > max_nesting then\n                max_nesting = nesting\n            end\n\
    \        end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend", "  local max_depth = 0\n  local depth = 0\n  for i = 1,\
    \ #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n\
    \      depth = depth + 1\n      if depth > max_depth then\n        max_depth =\
    \ depth\n      end\n    elseif c == ')' then\n      depth = depth - 1\n    end\n\
    \  end\n  return max_depth\nend", "    local max_nesting = 0\n    local current_nesting\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_nesting = current_nesting\
    \ + 1\n            if current_nesting > max_nesting then\n                max_nesting\
    \ = current_nesting\n            end\n        elseif char == ')' then\n      \
    \      current_nesting = current_nesting - 1\n        end\n    end\n    return\
    \ max_nesting\nend", "  local paren_table = {}\n  local paren_count = 0\n  local\
    \ max_paren_count = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i,\
    \ i)\n    if char == '(' then\n      paren_count = paren_count + 1\n      if paren_count\
    \ > max_paren_count then\n        max_paren_count = paren_count\n      end\n \
    \   elseif char == ')' then\n      paren_count = paren_count - 1\n    end\n  end\n\
    \  return max_paren_count\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n        local max_level = 0\n        local\
    \ level = 0\n        for c in paren_group:gmatch(\".\") do\n            if c ==\
    \ \"(\" then\n                level = level + 1\n            elseif c == \")\"\
    \ then\n                level = level - 1\n            end\n            if level\
    \ > max_level then\n                max_level = level\n            end\n     \
    \   end\n        table.insert(paren_groups, max_level)\n    end\n    return paren_groups\n\
    end", "  local paren_table = {}\n  local max_level = 0\n  local level = 0\n  local\
    \ paren_start = 0\n  local paren_end = 0\n  local paren_len = 0\n  local paren_string_len\
    \ = string.len(paren_string)\n  local paren_string_sub = string.sub\n  local paren_string_find\
    \ = string.find\n  local paren_string_sub_start = 1\n  local paren_string_sub_end\
    \ = paren_string_len\n  local paren_string_sub_start_new = 1\n  local paren_string_sub_end_new\
    \ = paren_string_len\n  local paren_string_sub_new = nil\n  local paren_string_sub_new_len\
    \ = 0\n  local paren_string_sub_new_find_start = 1\n  local paren_string_sub_new_find_end\
    \ = paren_string_len\n  local paren_string_sub_new_find_start_new = 1\n  local\
    \ paren_string_sub_new_find_end_new = paren_string_len\n  local paren_string_sub_new_find_start_new_new\
    \ = 1\n  local paren_string_sub_new_find_end_new_new = paren_string_len\n  local\
    \ paren_string_sub_new_find_new = nil\n  local paren_string_sub_new_find_new_len\
    \ = 0\n  local paren_string_sub_new_find_new_find_start = 1\n  local paren_string_sub_new_find_new_find_end\
    \ = paren_string_len\n  local paren_string_sub_new_find_new_find_start_new = 1\n\
    \  local paren_string_sub_new_find_new_find_end_new = paren_string_len\n  local\
    \ paren_string_sub_new_find_new_find_new = nil\n  local paren_string_sub_new_find_new_find_new_len\
    \ = 0\n  local paren_string_sub_new_find_new_find", "  local paren_levels = {}\n\
    \  local paren_level = 0\n  local paren_start = 0\n  local paren_end = 0\n  for\
    \ i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == '('\
    \ then\n      paren_level = paren_level + 1\n      if paren_level == 1 then\n\
    \        paren_start = i\n      end\n    elseif c == ')' then\n      if paren_level\
    \ == 1 then\n        paren_end = i\n        table.insert(paren_levels, paren_end\
    \ - paren_start + 1)\n        paren_level = 0\n      else\n        paren_level\
    \ = paren_level - 1\n      end\n    end\n  end\n  return paren_levels\nend", " \
    \ local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n \
    \   table.insert(paren_groups, group)\n  end\n  local max_nesting = 0\n  for _,\
    \ group in ipairs(paren_groups) do\n    local nesting = 0\n    for char in group:gmatch(\"\
    .\") do\n      if char == \"(\" then\n        nesting = nesting + 1\n      elseif\
    \ char == \")\" then\n        nesting = nesting - 1\n      end\n    end\n    if\
    \ nesting > max_nesting then\n      max_nesting = nesting\n    end\n  end\n  return\
    \ max_nesting\nend", "  local max_depth = 0\n  local depth = 0\n  for i=1,#paren_string\
    \ do\n    local c = paren_string:sub(i,i)\n    if c == '(' then\n      depth =\
    \ depth + 1\n      if depth > max_depth then\n        max_depth = depth\n    \
    \  end\n    elseif c == ')' then\n      depth = depth - 1\n    end\n  end\n  return\
    \ max_depth\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %b()\") do\n    local max_nesting = 0\n    local nesting = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        nesting = nesting + 1\n      elseif\
    \ c == \")\" then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "  local paren_levels = {}\n\
    \  local paren_level = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i,\
    \ i)\n    if char == '(' then\n      paren_level = paren_level + 1\n    elseif\
    \ char == ')' then\n      paren_level = paren_level - 1\n    end\n    paren_levels[i]\
    \ = paren_level\n  end\n  return paren_levels\nend", "    local paren_list = {}\n\
    \    for paren_group in paren_string:gmatch(\"%S+\") do\n        local paren_stack\
    \ = {}\n        local max_depth = 0\n        for paren in paren_group:gmatch(\"\
    .\") do\n            if paren == \"(\" then\n                table.insert(paren_stack,\
    \ paren)\n                max_depth = math.max(max_depth, #paren_stack)\n    \
    \        elseif paren == \")\" then\n                table.remove(paren_stack)\n\
    \            end\n        end\n        table.insert(paren_list, max_depth)\n \
    \   end\n    return paren_list\nend", "    local max_nesting = 0\n    local nesting\
    \ = 0\n    for c in paren_string:gmatch(\".\") do\n        if c == \"(\" then\n\
    \            nesting = nesting + 1\n            if nesting > max_nesting then\n\
    \                max_nesting = nesting\n            end\n        elseif c == \"\
    )\" then\n            nesting = nesting - 1\n        end\n    end\n    return\
    \ max_nesting\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %S+\") do\n    local max_depth = 0\n    local depth = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        depth = depth + 1\n      elseif\
    \ paren == \")\" then\n        depth = depth - 1\n      end\n      if depth >\
    \ max_depth then\n        max_depth = depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "    local paren_groups = {}\n\
    \    for group in paren_string:gmatch(\"%b()\") do\n        local level = 0\n\
    \        local max_level = 0\n        for c in group:gmatch(\".\") do\n      \
    \      if c == \"(\" then\n                level = level + 1\n               \
    \ if level > max_level then\n                    max_level = level\n         \
    \       end\n            elseif c == \")\" then\n                level = level\
    \ - 1\n            end\n        end\n        table.insert(paren_groups, max_level)\n\
    \    end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch(\"%b()\") do\n        table.insert(paren_groups,\
    \ paren_group)\n    end\n    local max_nesting = 0\n    for _, paren_group in\
    \ ipairs(paren_groups) do\n        local nesting = 0\n        for _ in paren_group:gmatch(\"\
    %(\") do\n            nesting = nesting + 1\n        end\n        if nesting >\
    \ max_nesting then\n            max_nesting = nesting\n        end\n    end\n\
    \    return max_nesting\nend", "    local paren_levels = {}\n    local paren_level\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            paren_level = paren_level + 1\n\
    \        elseif char == ')' then\n            paren_level = paren_level - 1\n\
    \        end\n        paren_levels[i] = paren_level\n    end\n    return paren_levels\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %S+\") do\n    local max_depth = 0\n    local depth = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        depth = depth + 1\n      elseif\
    \ paren == \")\" then\n        depth = depth - 1\n      end\n      if depth >\
    \ max_depth then\n        max_depth = depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%b()\") do\n    local max_depth =\
    \ 0\n    local depth = 0\n    for c in paren_group:gmatch(\".\") do\n      if\
    \ c == \"(\" then\n        depth = depth + 1\n        if depth > max_depth then\n\
    \          max_depth = depth\n        end\n      elseif c == \")\" then\n    \
    \    depth = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "  local max_depth = 0\n  local depth = 0\n\
    \  for i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c\
    \ == '(' then\n      depth = depth + 1\n      if depth > max_depth then\n    \
    \    max_depth = depth\n      end\n    elseif c == ')' then\n      depth = depth\
    \ - 1\n    end\n  end\n  return max_depth\nend", "  local paren_groups = {}\n\
    \  for group in paren_string:gmatch(\"%b()\") do\n    local max_level = 0\n  \
    \  local level = 0\n    for c in group:gmatch(\".\") do\n      if c == \"(\" then\n\
    \        level = level + 1\n        if level > max_level then\n          max_level\
    \ = level\n        end\n      elseif c == \")\" then\n        level = level -\
    \ 1\n      end\n    end\n    table.insert(paren_groups, max_level)\n  end\n  return\
    \ paren_groups\nend", "    local max_nesting = 0\n    local current_nesting =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_nesting = current_nesting\
    \ + 1\n            if current_nesting > max_nesting then\n                max_nesting\
    \ = current_nesting\n            end\n        elseif char == ')' then\n      \
    \      current_nesting = current_nesting - 1\n        end\n    end\n    return\
    \ max_nesting\nend", "    local max_nesting = 0\n    local nesting = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            nesting = nesting + 1\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        elseif\
    \ c == ')' then\n            nesting = nesting - 1\n        end\n    end\n   \
    \ return max_nesting\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n        local max_depth = 0\n        local\
    \ depth = 0\n        for paren in paren_group:gmatch(\".\") do\n            if\
    \ paren == \"(\" then\n                depth = depth + 1\n            elseif paren\
    \ == \")\" then\n                depth = depth - 1\n            end\n        \
    \    if depth > max_depth then\n                max_depth = depth\n          \
    \  end\n        end\n        paren_groups[#paren_groups + 1] = max_depth\n   \
    \ end\n    return paren_groups\nend", "    local max_nesting = 0\n    local nesting\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            nesting = nesting + 1\n          \
    \  if nesting > max_nesting then\n                max_nesting = nesting\n    \
    \        end\n        elseif c == ')' then\n            nesting = nesting - 1\n\
    \        end\n    end\n    return max_nesting\nend", "    local paren_levels =\
    \ {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif char == ')' then\n            paren_level\
    \ = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n    end\n\
    \    return paren_levels\nend", "    local paren_levels = {}\n    local paren_level\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \      elseif c == ')' then\n            paren_level = paren_level - 1\n     \
    \   end\n        if c == ' ' then\n            table.insert(paren_levels, paren_level)\n\
    \            paren_level = 0\n        end\n    end\n    return paren_levels\n\
    end", "    local max_nesting = 0\n    local nesting = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            nesting = nesting + 1\n            if nesting > max_nesting then\n\
    \                max_nesting = nesting\n            end\n        elseif char ==\
    \ ')' then\n            nesting = nesting - 1\n        end\n    end\n    return\
    \ max_nesting\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %b()\") do\n    local max_depth = 0\n    local current_depth = 0\n    for paren\
    \ in paren_group:gmatch(\".\") do\n      if paren == \"(\" then\n        current_depth\
    \ = current_depth + 1\n        if current_depth > max_depth then\n          max_depth\
    \ = current_depth\n        end\n      elseif paren == \")\" then\n        current_depth\
    \ = current_depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n        table.insert(paren_groups, paren_group)\n\
    \    end\n    local max_nesting = 0\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        for paren in paren_group:gmatch(\"%(\"\
    ) do\n            nesting = nesting + 1\n        end\n        if nesting > max_nesting\
    \ then\n            max_nesting = nesting\n        end\n    end\n    return max_nesting\n\
    end", "    local paren_groups = {}\n    local paren_group = {}\n    local paren_level\
    \ = 0\n    local paren_level_max = 0\n    for i = 1, #paren_string do\n      \
    \  local c = paren_string:sub(i, i)\n        if c == '(' then\n            paren_level\
    \ = paren_level + 1\n            if paren_level > paren_level_max then\n     \
    \           paren_level_max = paren_level\n            end\n        elseif c ==\
    \ ')' then\n            paren_level = paren_level - 1\n        elseif c == ' '\
    \ then\n            table.insert(paren_groups, paren_level_max)\n            paren_level_max\
    \ = 0\n            paren_level = 0\n        end\n    end\n    table.insert(paren_groups,\
    \ paren_level_max)\n    return paren_groups\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_nesting =\
    \ 0\n    local nesting = 0\n    for paren in paren_group:gmatch(\".\") do\n  \
    \    if paren == \"(\" then\n        nesting = nesting + 1\n      elseif paren\
    \ == \")\" then\n        nesting = nesting - 1\n      end\n      if nesting >\
    \ max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%b()\") do\n    table.insert(paren_groups,\
    \ paren_group)\n  end\n  local max_nesting = 0\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    for _ in paren_group:gmatch(\"%(\") do\n    \
    \  nesting = nesting + 1\n    end\n    if nesting > max_nesting then\n      max_nesting\
    \ = nesting\n    end\n  end\n  return max_nesting\nend", "  local paren_levels\
    \ = {}\n  local paren_level = 0\n  for i = 1, #paren_string do\n    if paren_string:sub(i,\
    \ i) == '(' then\n      paren_level = paren_level + 1\n    elseif paren_string:sub(i,\
    \ i) == ')' then\n      paren_level = paren_level - 1\n    end\n    paren_levels[i]\
    \ = paren_level\n  end\n  return paren_levels\nend", "    local paren_groups =\
    \ {}\n    for paren_group in paren_string:gmatch(\"[^%s]+\") do\n        local\
    \ max_depth = 0\n        local depth = 0\n        for char in paren_group:gmatch(\"\
    .\") do\n            if char == \"(\" then\n                depth = depth + 1\n\
    \                if depth > max_depth then\n                    max_depth = depth\n\
    \                end\n            elseif char == \")\" then\n                depth\
    \ = depth - 1\n            end\n        end\n        paren_groups[#paren_groups\
    \ + 1] = max_depth\n    end\n    return paren_groups\nend", "  local paren_groups\
    \ = {}\n  for group in paren_string:gmatch(\"%b()\") do\n    local max_nesting\
    \ = 0\n    local nesting = 0\n    for c in group:gmatch(\".\") do\n      if c\
    \ == \"(\" then\n        nesting = nesting + 1\n      elseif c == \")\" then\n\
    \        nesting = nesting - 1\n      end\n      if nesting > max_nesting then\n\
    \        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local paren_groups =\
    \ paren_string:split(\" \")\n    local max_nesting = 0\n    for _, paren_group\
    \ in ipairs(paren_groups) do\n        local current_nesting = 0\n        for _,\
    \ char in ipairs(paren_group:split(\"\")) do\n            if char == \"(\" then\n\
    \                current_nesting = current_nesting + 1\n            elseif char\
    \ == \")\" then\n                current_nesting = current_nesting - 1\n     \
    \       end\n        end\n        if current_nesting > max_nesting then\n    \
    \        max_nesting = current_nesting\n        end\n    end\n    return max_nesting\n\
    end", "    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            depth = depth + 1\n            if depth > max_depth then\n      \
    \          max_depth = depth\n            end\n        elseif char == ')' then\n\
    \            depth = depth - 1\n        end\n    end\n    return max_depth\nend",
  "    local levels = {}\n    local level = 0\n    for i = 1, #paren_string do\n \
    \       local c = paren_string:sub(i, i)\n        if c == '(' then\n         \
    \   level = level + 1\n        elseif c == ')' then\n            levels[level]\
    \ = (levels[level] or 0) + 1\n            level = level - 1\n        end\n   \
    \ end\n    return levels\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local max_nesting = 0\n    local nesting\
    \ = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren == \"(\"\
    \ then\n        nesting = nesting + 1\n      elseif paren == \")\" then\n    \
    \    nesting = nesting - 1\n      end\n      if nesting > max_nesting then\n \
    \       max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local paren_levels =\
    \ {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif char == ')' then\n            paren_level\
    \ = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n    end\n\
    \    return paren_levels\nend", "    local paren_levels = {}\n    local paren_level\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \      elseif c == ')' then\n            paren_level = paren_level - 1\n     \
    \   end\n        table.insert(paren_levels, paren_level)\n    end\n    return\
    \ paren_levels\nend", "  local paren_levels = {}\n  local paren_level = 0\n  for\
    \ i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char\
    \ == '(' then\n      paren_level = paren_level + 1\n    elseif char == ')' then\n\
    \      paren_level = paren_level - 1\n    end\n    paren_levels[i] = paren_level\n\
    \  end\n  return paren_levels\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n        local max_depth = 0\n        local\
    \ depth = 0\n        for paren in paren_group:gmatch(\".\") do\n            if\
    \ paren == \"(\" then\n                depth = depth + 1\n            elseif paren\
    \ == \")\" then\n                depth = depth - 1\n            end\n        \
    \    if depth > max_depth then\n                max_depth = depth\n          \
    \  end\n        end\n        table.insert(paren_groups, max_depth)\n    end\n\
    \    return paren_groups\nend", "    local max_nesting = 0\n    local current_nesting\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_nesting = current_nesting\
    \ + 1\n            if current_nesting > max_nesting then\n                max_nesting\
    \ = current_nesting\n            end\n        elseif char == ')' then\n      \
    \      current_nesting = current_nesting - 1\n        end\n    end\n    return\
    \ max_nesting\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %b()\") do\n    local max_depth = 0\n    local depth = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        depth = depth + 1\n        if depth\
    \ > max_depth then\n          max_depth = depth\n        end\n      elseif c ==\
    \ \")\" then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "    local paren_levels = {}\n\
    \    local paren_level = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif char == ')' then\n            paren_level\
    \ = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n    end\n\
    \    return paren_levels\nend", "    local paren_levels = {}\n    local paren_level\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            paren_level = paren_level + 1\n\
    \        elseif char == ')' then\n            paren_level = paren_level - 1\n\
    \        end\n        paren_levels[i] = paren_level\n    end\n    return paren_levels\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local paren_levels = {}\n        local level = 0\n        for\
    \ paren in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n\
    \                level = level + 1\n            elseif paren == \")\" then\n \
    \               level = level - 1\n            end\n            table.insert(paren_levels,\
    \ level)\n        end\n        table.insert(paren_groups, math.max(unpack(paren_levels)))\n\
    \    end\n    return paren_groups\nend", "    local paren_levels = {}\n    local\
    \ paren_level = 0\n    for c in paren_string:gmatch(\".\") do\n        if c ==\
    \ \"(\" then\n            paren_level = paren_level + 1\n        elseif c == \"\
    )\" then\n            paren_level = paren_level - 1\n        end\n        table.insert(paren_levels,\
    \ paren_level)\n    end\n    return paren_levels\nend", "  local max_depth = 0\n\
    \  local curr_depth = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      curr_depth = curr_depth + 1\n      if curr_depth\
    \ > max_depth then\n        max_depth = curr_depth\n      end\n    elseif c ==\
    \ ')' then\n      curr_depth = curr_depth - 1\n    end\n  end\n  return max_depth\n\
    end", "  local level_count = 0\n  local max_level = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ level_count = level_count + 1\n      if level_count > max_level then\n     \
    \   max_level = level_count\n      end\n    elseif char == ')' then\n      level_count\
    \ = level_count - 1\n    end\n  end\n  return max_level\nend", "  local paren_groups\
    \ = {}\n  for group in paren_string:gmatch(\"%b()\") do\n    local level = 0\n\
    \    local max_level = 0\n    for c in group:gmatch(\".\") do\n      if c == \"\
    (\" then\n        level = level + 1\n        if level > max_level then\n     \
    \     max_level = level\n        end\n      elseif c == \")\" then\n        level\
    \ = level - 1\n      end\n    end\n    table.insert(paren_groups, max_level)\n\
    \  end\n  return paren_groups\nend", "    local max_depth = 0\n    local current_depth\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_depth = current_depth +\
    \ 1\n            if current_depth > max_depth then\n                max_depth\
    \ = current_depth\n            end\n        elseif char == ')' then\n        \
    \    current_depth = current_depth - 1\n        end\n    end\n    return max_depth\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for _, paren\
    \ in ipairs(split(paren_string, \" \")) do\n        paren_level = 0\n        for\
    \ _, char in ipairs(split(paren, \"\")) do\n            if char == \"(\" then\n\
    \                paren_level = paren_level + 1\n            elseif char == \"\
    )\" then\n                paren_level = paren_level - 1\n            end\n   \
    \     end\n        table.insert(paren_levels, paren_level)\n    end\n    return\
    \ paren_levels\nend", "  local paren_levels = {}\n  local level = 0\n  for i =\
    \ 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n\
    \      level = level + 1\n    elseif c == ')' then\n      level = level - 1\n\
    \    end\n    paren_levels[i] = level\n  end\n  return paren_levels\nend", " \
    \   local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n        elseif char == ')' then\n\
    \            paren_level = paren_level - 1\n        end\n        table.insert(paren_levels,\
    \ paren_level)\n    end\n    return paren_levels\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch(\"%S+\") do\n        local\
    \ max_nesting = 0\n        local nesting = 0\n        for c in paren_group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                nesting = nesting + 1\n\
    \            elseif c == \")\" then\n                nesting = nesting - 1\n \
    \           end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif char == ')' then\n            paren_level\
    \ = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n    end\n\
    \    local max_level = 0\n    for i = 1, #paren_levels do\n        if paren_levels[i]\
    \ > max_level then\n            max_level = paren_levels[i]\n        end\n   \
    \ end\n    return max_level\nend", "    local paren_levels = {}\n    local paren_level\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \      elseif c == ')' then\n            paren_level = paren_level - 1\n     \
    \   end\n        paren_levels[i] = paren_level\n    end\n    return paren_levels\n\
    end", "  local max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n\
    \    local char = paren_string:sub(i, i)\n    if char == '(' then\n      depth\
    \ = depth + 1\n      if depth > max_depth then\n        max_depth = depth\n  \
    \    end\n    elseif char == ')' then\n      depth = depth - 1\n    end\n  end\n\
    \  return max_depth\nend", "  local paren_levels = {}\n  for group in paren_string:gmatch(\"\
    %S+\") do\n    local level = 0\n    local max_level = 0\n    for paren in group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      if level >\
    \ max_level then\n        max_level = level\n      end\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend", "    local paren_groups = {}\n\
    \    for group in paren_string:gmatch(\"%S+\") do\n        local max_depth = 0\n\
    \        local depth = 0\n        for char in group:gmatch(\".\") do\n       \
    \     if char == \"(\" then\n                depth = depth + 1\n             \
    \   if depth > max_depth then\n                    max_depth = depth\n       \
    \         end\n            elseif char == \")\" then\n                depth =\
    \ depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch(\"%S+\") do\n        local\
    \ max_nesting = 0\n        local nesting = 0\n        for paren in paren_group:gmatch(\"\
    .\") do\n            if paren == \"(\" then\n                nesting = nesting\
    \ + 1\n            elseif paren == \")\" then\n                nesting = nesting\
    \ - 1\n            end\n            if nesting > max_nesting then\n          \
    \      max_nesting = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local max_depth =\
    \ 0\n    local depth = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            depth = depth + 1\n            if\
    \ depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif c == ')' then\n            depth = depth - 1\n        end\n  \
    \  end\n    return max_depth\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    table.insert(paren_groups, paren_group)\n\
    \  end\n  local max_nesting = 0\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    for char in paren_group:gmatch(\".\") do\n  \
    \    if char == \"(\" then\n        nesting = nesting + 1\n      elseif char ==\
    \ \")\" then\n        nesting = nesting - 1\n      end\n    end\n    if nesting\
    \ > max_nesting then\n      max_nesting = nesting\n    end\n  end\n  return max_nesting\n\
    end", "    local max_depth = 0\n    local current_depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_depth = current_depth + 1\n            if current_depth >\
    \ max_depth then\n                max_depth = current_depth\n            end\n\
    \        elseif char == ')' then\n            current_depth = current_depth -\
    \ 1\n        end\n    end\n    return max_depth\nend", "  local paren_groups =\
    \ {}\n  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_depth\
    \ = 0\n    local depth = 0\n    for c in paren_group:gmatch(\".\") do\n      if\
    \ c == \"(\" then\n        depth = depth + 1\n        if depth > max_depth then\n\
    \          max_depth = depth\n        end\n      elseif c == \")\" then\n    \
    \    depth = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "  local max_nesting = 0\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    local nesting = 0\n    for _ in paren_group:gmatch(\"\
    %(\") do\n      nesting = nesting + 1\n    end\n    if nesting > max_nesting then\n\
    \      max_nesting = nesting\n    end\n  end\n  return max_nesting\nend", "  local\
    \ paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%b()\") do\n \
    \   table.insert(paren_groups, paren_group)\n  end\n  local max_nesting = 0\n\
    \  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n    for\
    \ _ in paren_group:gmatch(\"%(\") do\n      nesting = nesting + 1\n    end\n \
    \   max_nesting = math.max(max_nesting, nesting)\n  end\n  return max_nesting\n\
    end", "  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\"\
    ) do\n    table.insert(paren_groups, group)\n  end\n  local max_nesting = 0\n\
    \  for _, group in ipairs(paren_groups) do\n    local nesting = 0\n    for char\
    \ in group:gmatch(\".\") do\n      if char == \"(\" then\n        nesting = nesting\
    \ + 1\n      elseif char == \")\" then\n        nesting = nesting - 1\n      end\n\
    \    end\n    if nesting > max_nesting then\n      max_nesting = nesting\n   \
    \ end\n  end\n  return max_nesting\nend", "  local max_depth = 0\n  local current_depth\
    \ = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n\
    \    if char == '(' then\n      current_depth = current_depth + 1\n      if current_depth\
    \ > max_depth then\n        max_depth = current_depth\n      end\n    elseif char\
    \ == ')' then\n      current_depth = current_depth - 1\n    end\n  end\n  return\
    \ max_depth\nend", "  local max_nesting = 0\n  local current_nesting = 0\n  for\
    \ i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == '('\
    \ then\n      current_nesting = current_nesting + 1\n      if current_nesting\
    \ > max_nesting then\n        max_nesting = current_nesting\n      end\n    elseif\
    \ c == ')' then\n      current_nesting = current_nesting - 1\n    end\n  end\n\
    \  return max_nesting\nend", "  local paren_groups = {}\n  for paren_group in\
    \ paren_string:gmatch(\"%S+\") do\n    local max_nesting = 0\n    local nesting\
    \ = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren == \"(\"\
    \ then\n        nesting = nesting + 1\n      elseif paren == \")\" then\n    \
    \    nesting = nesting - 1\n      end\n      if nesting > max_nesting then\n \
    \       max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local paren_groups =\
    \ {}\n    for group in paren_string:gmatch(\"[^%s]+\") do\n        local max_depth\
    \ = 0\n        local depth = 0\n        for char in group:gmatch(\".\") do\n \
    \           if char == \"(\" then\n                depth = depth + 1\n       \
    \         if depth > max_depth then\n                    max_depth = depth\n \
    \               end\n            elseif char == \")\" then\n                depth\
    \ = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "  local paren_groups =\
    \ {}\n  for paren_group in paren_string:gmatch(\"%S+\") do\n    local paren_stack\
    \ = {}\n    local max_nesting = 0\n    for paren in paren_group:gmatch(\".\")\
    \ do\n      if paren == \"(\" then\n        table.insert(paren_stack, paren)\n\
    \        max_nesting = math.max(max_nesting, #paren_stack)\n      elseif paren\
    \ == \")\" then\n        table.remove(paren_stack)\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%b()\") do\n    local depth = 0\n\
    \    local max_depth = 0\n    for c in paren_group:gmatch(\".\") do\n      if\
    \ c == \"(\" then\n        depth = depth + 1\n        if depth > max_depth then\n\
    \          max_depth = depth\n        end\n      elseif c == \")\" then\n    \
    \    depth = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "    local max_depth = 0\n    local depth\
    \ = 0\n    for i=1,#paren_string do\n        if paren_string:sub(i,i) == '(' then\n\
    \            depth = depth + 1\n            if depth > max_depth then\n      \
    \          max_depth = depth\n            end\n        elseif paren_string:sub(i,i)\
    \ == ')' then\n            depth = depth - 1\n        end\n    end\n    return\
    \ max_depth\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %S+\") do\n    local max_level = 0\n    local level = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        level = level + 1\n      elseif c ==\
    \ \")\" then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_groups, max_level)\n  end\n  return\
    \ paren_groups\nend", "    local paren_levels = {}\n    local paren_level = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_level = paren_level + 1\n    \
    \    elseif char == ')' then\n            paren_level = paren_level - 1\n    \
    \    end\n        table.insert(paren_levels, paren_level)\n    end\n    return\
    \ paren_levels\nend", "  local paren_levels = {}\n  local paren_level = 0\n  for\
    \ i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char\
    \ == '(' then\n      paren_level = paren_level + 1\n    elseif char == ')' then\n\
    \      paren_level = paren_level - 1\n    end\n    paren_levels[i] = paren_level\n\
    \  end\n  return paren_levels\nend", "  local max_depth = 0\n  local current_depth\
    \ = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n\
    \    if char == '(' then\n      current_depth = current_depth + 1\n      if current_depth\
    \ > max_depth then\n        max_depth = current_depth\n      end\n    elseif char\
    \ == ')' then\n      current_depth = current_depth - 1\n    end\n  end\n  return\
    \ max_depth\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local max_nesting = 0\n        local nesting = 0\n        for\
    \ paren in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n\
    \                nesting = nesting + 1\n            elseif paren == \")\" then\n\
    \                nesting = nesting - 1\n            end\n            if nesting\
    \ > max_nesting then\n                max_nesting = nesting\n            end\n\
    \        end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend", "  local max_depth = 0\n  local depth = 0\n  for i = 1,\
    \ #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n\
    \      depth = depth + 1\n      if depth > max_depth then\n        max_depth =\
    \ depth\n      end\n    elseif c == ')' then\n      depth = depth - 1\n    end\n\
    \  end\n  return max_depth\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n        local max_depth = 0\n        local\
    \ depth = 0\n        for char in paren_group:gmatch(\".\") do\n            if\
    \ char == \"(\" then\n                depth = depth + 1\n                if depth\
    \ > max_depth then\n                    max_depth = depth\n                end\n\
    \            elseif char == \")\" then\n                depth = depth - 1\n  \
    \          end\n        end\n        table.insert(paren_groups, max_depth)\n \
    \   end\n    return paren_groups\nend", "  local paren_groups = {}\n  local paren_group\
    \ = {}\n  local paren_level = 0\n  local max_level = 0\n  for c in paren_string:gmatch('.')\
    \ do\n    if c == '(' then\n      paren_level = paren_level + 1\n      if paren_level\
    \ > max_level then\n        max_level = paren_level\n      end\n    elseif c ==\
    \ ')' then\n      paren_level = paren_level - 1\n    elseif c == ' ' then\n  \
    \    paren_groups[#paren_groups + 1] = max_level\n      paren_group = {}\n   \
    \   max_level = 0\n    end\n  end\n  paren_groups[#paren_groups + 1] = max_level\n\
    \  return paren_groups\nend", "  local paren_groups = {}\n  for paren_group in\
    \ paren_string:gmatch(\"%b()\") do\n    local max_nesting = 0\n    local current_nesting\
    \ = 0\n    for char in paren_group:gmatch(\".\") do\n      if char == \"(\" then\n\
    \        current_nesting = current_nesting + 1\n        if current_nesting > max_nesting\
    \ then\n          max_nesting = current_nesting\n        end\n      elseif char\
    \ == \")\" then\n        current_nesting = current_nesting - 1\n      end\n  \
    \  end\n    table.insert(paren_groups, max_nesting)\n  end\n  return paren_groups\n\
    end", "    local max_depth = 0\n    local current_depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_depth = current_depth + 1\n            if current_depth >\
    \ max_depth then\n                max_depth = current_depth\n            end\n\
    \        elseif char == ')' then\n            current_depth = current_depth -\
    \ 1\n        end\n    end\n    return max_depth\nend", "    local paren_string\
    \ = paren_string or \"\"\n    local paren_string = paren_string:gsub(\"%s+\",\
    \ \"\")\n    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == \"(\" then\n \
    \           depth = depth + 1\n            if depth > max_depth then\n       \
    \         max_depth = depth\n            end\n        elseif c == \")\" then\n\
    \            depth = depth - 1\n        end\n    end\n    return max_depth\nend",
  "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local paren_levels = {}\n        local paren_level = 0\n       \
    \ for paren in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n\
    \                paren_level = paren_level + 1\n            elseif paren == \"\
    )\" then\n                paren_level = paren_level - 1\n            end\n   \
    \         paren_levels[paren_level] = (paren_levels[paren_level] or 0) + 1\n \
    \       end\n        table.insert(paren_groups, paren_levels)\n    end\n    return\
    \ paren_groups\nend", "  local max_depth = 0\n  local depth = 0\n  for i = 1,\
    \ #paren_string do\n    local char = paren_string:sub(i, i)\n    if char == '('\
    \ then\n      depth = depth + 1\n      if depth > max_depth then\n        max_depth\
    \ = depth\n      end\n    elseif char == ')' then\n      depth = depth - 1\n \
    \   end\n  end\n  return max_depth\nend", "  local paren_groups = {}\n  for paren_group\
    \ in string.gmatch(paren_string, \"%S+\") do\n    local max_depth = 0\n    local\
    \ depth = 0\n    for char in string.gmatch(paren_group, \".\") do\n      if char\
    \ == \"(\" then\n        depth = depth + 1\n      elseif char == \")\" then\n\
    \        depth = depth - 1\n      end\n      if depth > max_depth then\n     \
    \   max_depth = depth\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "    local paren_levels = {}\n    local paren_level\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \      elseif c == ')' then\n            paren_level = paren_level - 1\n     \
    \   end\n        paren_levels[i] = paren_level\n    end\n    return paren_levels\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for i = 1,\
    \ #paren_string do\n        local c = paren_string:sub(i, i)\n        if c ==\
    \ '(' then\n            paren_level = paren_level + 1\n        elseif c == ')'\
    \ then\n            paren_level = paren_level - 1\n        end\n        paren_levels[i]\
    \ = paren_level\n    end\n    return paren_levels\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif char == ')' then\n            paren_level\
    \ = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n    end\n\
    \    return paren_levels\nend", "  local paren_groups = {}\n  local paren_group\
    \ = {}\n  local paren_level = 0\n  local paren_max_level = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ paren_level = paren_level + 1\n      if paren_level > paren_max_level then\n\
    \        paren_max_level = paren_level\n      end\n    elseif char == ')' then\n\
    \      paren_level = paren_level - 1\n    elseif char == ' ' then\n      if paren_level\
    \ > 0 then\n        paren_group[#paren_group + 1] = paren_level\n      end\n \
    \     paren_level = 0\n      paren_max_level = 0\n      paren_groups[#paren_groups\
    \ + 1] = paren_group\n      paren_group = {}\n    end\n  end\n  if paren_level\
    \ > 0 then\n    paren_group[#paren_group + 1] = paren_level\n  end\n  paren_groups[#paren_groups\
    \ + 1] = paren_group\n  return paren_groups\nend", "  local max_depth = 0\n  local\
    \ depth = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      depth = depth + 1\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    elseif c == ')' then\n     \
    \ depth = depth - 1\n    end\n  end\n  return max_depth\nend", "    local paren_groups\
    \ = {}\n    for group in paren_string:gmatch(\"%S+\") do\n        local max_depth\
    \ = 0\n        local depth = 0\n        for c in group:gmatch(\".\") do\n    \
    \        if c == \"(\" then\n                depth = depth + 1\n             \
    \   if depth > max_depth then\n                    max_depth = depth\n       \
    \         end\n            elseif c == \")\" then\n                depth = depth\
    \ - 1\n            end\n        end\n        table.insert(paren_groups, max_depth)\n\
    \    end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch(\"%S+\") do\n        local max_level = 0\n\
    \        local level = 0\n        for c in paren_group:gmatch(\".\") do\n    \
    \        if c == \"(\" then\n                level = level + 1\n            elseif\
    \ c == \")\" then\n                level = level - 1\n            end\n      \
    \      if level > max_level then\n                max_level = level\n        \
    \    end\n        end\n        paren_groups[#paren_groups + 1] = max_level\n \
    \   end\n    return paren_groups\nend", "  local max_nesting = 0\n  local nesting\
    \ = 0\n  local paren_string_len = string.len(paren_string)\n  for i = 1, paren_string_len\
    \ do\n    local char = string.sub(paren_string, i, i)\n    if char == '(' then\n\
    \      nesting = nesting + 1\n      if nesting > max_nesting then\n        max_nesting\
    \ = nesting\n      end\n    elseif char == ')' then\n      nesting = nesting -\
    \ 1\n    end\n  end\n  return max_nesting\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%b()\") do\n    local max_depth =\
    \ 0\n    local depth = 0\n    for c in paren_group:gmatch(\".\") do\n      if\
    \ c == \"(\" then\n        depth = depth + 1\n        if depth > max_depth then\n\
    \          max_depth = depth\n        end\n      elseif c == \")\" then\n    \
    \    depth = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "    local max_depth = 0\n    local curr_depth\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            curr_depth = curr_depth + 1\n    \
    \        if curr_depth > max_depth then\n                max_depth = curr_depth\n\
    \            end\n        elseif c == ')' then\n            curr_depth = curr_depth\
    \ - 1\n        end\n    end\n    return max_depth\nend", "  local paren_levels\
    \ = {}\n  for paren_group in paren_string:gmatch(\"%S+\") do\n    local paren_level\
    \ = 0\n    local max_level = 0\n    for paren in paren_group:gmatch(\".\") do\n\
    \      if paren == \"(\" then\n        paren_level = paren_level + 1\n      elseif\
    \ paren == \")\" then\n        paren_level = paren_level - 1\n      end\n    \
    \  if paren_level > max_level then\n        max_level = paren_level\n      end\n\
    \    end\n    table.insert(paren_levels, max_level)\n  end\n  return paren_levels\n\
    end", "  local max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n\
    \    local c = paren_string:sub(i, i)\n    if c == '(' then\n      depth = depth\
    \ + 1\n      if depth > max_depth then\n        max_depth = depth\n      end\n\
    \    elseif c == ')' then\n      depth = depth - 1\n    end\n  end\n  return max_depth\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %b()\") do\n        table.insert(paren_groups, paren_group)\n    end\n    local\
    \ max_nesting = 0\n    for _, paren_group in ipairs(paren_groups) do\n       \
    \ local nesting = 0\n        for _ in paren_group:gmatch(\"%(\") do\n        \
    \    nesting = nesting + 1\n        end\n        if nesting > max_nesting then\n\
    \            max_nesting = nesting\n        end\n    end\n    return max_nesting\n\
    end", "  local paren_levels = {}\n  local paren_level = 0\n  for i = 1, #paren_string\
    \ do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n      paren_level\
    \ = paren_level + 1\n    elseif c == ')' then\n      paren_level = paren_level\
    \ - 1\n    elseif c == ' ' then\n      table.insert(paren_levels, paren_level)\n\
    \      paren_level = 0\n    end\n  end\n  return paren_levels\nend", "  local\
    \ max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n    local char\
    \ = paren_string:sub(i, i)\n    if char == '(' then\n      depth = depth + 1\n\
    \      if depth > max_depth then\n        max_depth = depth\n      end\n    elseif\
    \ char == ')' then\n      depth = depth - 1\n    end\n  end\n  return max_depth\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    [^%s]+\") do\n    local max_level = 0\n    local level = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      if level >\
    \ max_level then\n        max_level = level\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for group in string.gmatch(paren_string, '%S+') do\n    local max_depth = 0\n\
    \    local depth = 0\n    for c in string.gmatch(group, '.') do\n      if c ==\
    \ '(' then\n        depth = depth + 1\n        if depth > max_depth then\n   \
    \       max_depth = depth\n        end\n      elseif c == ')' then\n        depth\
    \ = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "  local paren_groups = {}\n  for group in\
    \ string.gmatch(paren_string, \"%S+\") do\n    local max_nesting = 0\n    local\
    \ nesting = 0\n    for char in string.gmatch(group, \".\") do\n      if char ==\
    \ \"(\" then\n        nesting = nesting + 1\n        if nesting > max_nesting\
    \ then\n          max_nesting = nesting\n        end\n      elseif char == \"\
    )\" then\n        nesting = nesting - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local paren_levels =\
    \ {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif char == ')' then\n            paren_level\
    \ = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n    end\n\
    \    return paren_levels\nend", "  local paren_levels = {}\n  local current_level\
    \ = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n\
    \    if char == '(' then\n      current_level = current_level + 1\n    elseif\
    \ char == ')' then\n      table.insert(paren_levels, current_level)\n      current_level\
    \ = current_level - 1\n    end\n  end\n  return paren_levels\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
