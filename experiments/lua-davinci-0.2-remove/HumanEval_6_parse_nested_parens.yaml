name: HumanEval_6_parse_nested_parens
language: lua
prompt: "-- Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n-- For each of the group, output the deepest\
  \ level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
  \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n \
  \   lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
  \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local levels = {}\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         level = level + 1\n        elseif c == ')' then\n            level =\
    \ level - 1\n        end\n        levels[i] = level\n    end\n    return levels\n\
    end", "  local paren_groups = {}\n  for paren_group in string.gmatch(paren_string,\
    \ \"%S+\") do\n    local paren_stack = {}\n    local max_depth = 0\n    for paren\
    \ in string.gmatch(paren_group, \".\") do\n      if paren == \"(\" then\n    \
    \    table.insert(paren_stack, paren)\n        max_depth = math.max(max_depth,\
    \ #paren_stack)\n      elseif paren == \")\" then\n        table.remove(paren_stack)\n\
    \      end\n    end\n    table.insert(paren_groups, max_depth)\n  end\n  return\
    \ paren_groups\nend", "    local max_depth = 0\n    local depth = 0\n    for i\
    \ = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            depth = depth + 1\n            if depth > max_depth\
    \ then\n                max_depth = depth\n            end\n        elseif c ==\
    \ ')' then\n            depth = depth - 1\n        end\n    end\n    return max_depth\n\
    end", "    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\"\
    ) do\n        local max_level = 0\n        local level = 0\n        for c in group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                level = level + 1\n \
    \           elseif c == \")\" then\n                level = level - 1\n      \
    \      end\n            if level > max_level then\n                max_level =\
    \ level\n            end\n        end\n        table.insert(paren_groups, max_level)\n\
    \    end\n    return paren_groups\nend", "    local paren_levels = {}\n    local\
    \ paren_level = 0\n    local paren_start = 0\n    local paren_end = 0\n    local\
    \ paren_count = 0\n    local paren_max = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    paren_count = paren_count + 1\n            if paren_count > paren_max then\n\
    \                paren_max = paren_count\n            end\n            paren_level\
    \ = paren_level + 1\n            if paren_level == 1 then\n                paren_start\
    \ = i\n            end\n        elseif c == ')' then\n            paren_count\
    \ = paren_count - 1\n            paren_level = paren_level - 1\n            if\
    \ paren_level == 0 then\n                paren_end = i\n                table.insert(paren_levels,\
    \ paren_string:sub(paren_start, paren_end))\n            end\n        end\n  \
    \  end\n    return paren_levels, paren_max\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_depth = 0\n\
    \    local depth = 0\n    for c in paren_group:gmatch(\".\") do\n      if c ==\
    \ \"(\" then\n        depth = depth + 1\n        if depth > max_depth then\n \
    \         max_depth = depth\n        end\n      elseif c == \")\" then\n     \
    \   depth = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "    local levels = {}\n    local level =\
    \ 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n\
    \        if c == '(' then\n            level = level + 1\n        elseif c ==\
    \ ')' then\n            levels[level] = (levels[level] or 0) + 1\n           \
    \ level = level - 1\n        end\n    end\n    return levels\nend", "  local max_depth\
    \ = 0\n  local depth = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      depth = depth + 1\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    elseif c == ')' then\n     \
    \ depth = depth - 1\n    end\n  end\n  return max_depth\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch(\"%S+\") do\n        local\
    \ max_nesting = 0\n        local current_nesting = 0\n        for paren in paren_group:gmatch(\"\
    .\") do\n            if paren == \"(\" then\n                current_nesting =\
    \ current_nesting + 1\n            elseif paren == \")\" then\n              \
    \  current_nesting = current_nesting - 1\n            end\n            if current_nesting\
    \ > max_nesting then\n                max_nesting = current_nesting\n        \
    \    end\n        end\n        table.insert(paren_groups, max_nesting)\n    end\n\
    \    return paren_groups\nend", "    local paren_levels = {}\n    local paren_level\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \      elseif c == ')' then\n            paren_level = paren_level - 1\n     \
    \   end\n        paren_levels[i] = paren_level\n    end\n    return paren_levels\n\
    end", "    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         depth = depth + 1\n            if depth > max_depth then\n         \
    \       max_depth = depth\n            end\n        elseif c == ')' then\n   \
    \         depth = depth - 1\n        end\n    end\n    return max_depth\nend",
  "    local levels = {}\n    local level = 0\n    for i = 1, #paren_string do\n \
    \       local ch = paren_string:sub(i, i)\n        if ch == '(' then\n       \
    \     level = level + 1\n        elseif ch == ')' then\n            levels[level]\
    \ = (levels[level] or 0) + 1\n            level = level - 1\n        end\n   \
    \ end\n    return levels\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for paren in paren_group:gmatch(\".\") do\n           \
    \ if paren == \"(\" then\n                nesting = nesting + 1\n            elseif\
    \ paren == \")\" then\n                nesting = nesting - 1\n            end\n\
    \            if nesting > max_nesting then\n                max_nesting = nesting\n\
    \            end\n        end\n        table.insert(paren_groups, max_nesting)\n\
    \    end\n    return paren_groups\nend", "  local max_nesting = 0\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    local nesting = 0\n    for _ in paren_group:gmatch(\"\
    %(\") do\n      nesting = nesting + 1\n    end\n    max_nesting = math.max(max_nesting,\
    \ nesting)\n  end\n  return max_nesting\nend", "    local paren_groups = {}\n\
    \    for paren_group in paren_string:gmatch(\"%b()\") do\n        table.insert(paren_groups,\
    \ paren_group)\n    end\n    local max_nesting = 0\n    for _, paren_group in\
    \ ipairs(paren_groups) do\n        local nesting = 0\n        for _ in paren_group:gmatch(\"\
    %(\") do\n            nesting = nesting + 1\n        end\n        if nesting >\
    \ max_nesting then\n            max_nesting = nesting\n        end\n    end\n\
    \    return max_nesting\nend", "    local max_depth = 0\n    local depth = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            depth = depth + 1\n            if depth\
    \ > max_depth then\n                max_depth = depth\n            end\n     \
    \   elseif char == ')' then\n            depth = depth - 1\n        end\n    end\n\
    \    return max_depth\nend", "  local paren_groups = {}\n  for paren_group in\
    \ paren_string:gmatch(\"%b()\") do\n    table.insert(paren_groups, paren_group)\n\
    \  end\n  local max_nesting = 0\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local cur_nesting = 0\n    for c in paren_group:gmatch(\".\") do\n \
    \     if c == \"(\" then\n        cur_nesting = cur_nesting + 1\n      elseif\
    \ c == \")\" then\n        cur_nesting = cur_nesting - 1\n      end\n      max_nesting\
    \ = math.max(max_nesting, cur_nesting)\n    end\n  end\n  return max_nesting\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for i=1,#paren_string\
    \ do\n        local c = paren_string:sub(i,i)\n        if c == '(' then\n    \
    \        paren_level = paren_level + 1\n        elseif c == ')' then\n       \
    \     paren_level = paren_level - 1\n        elseif c == ' ' then\n          \
    \  paren_levels[#paren_levels+1] = paren_level\n            paren_level = 0\n\
    \        end\n    end\n    paren_levels[#paren_levels+1] = paren_level\n    return\
    \ paren_levels\nend", "    local max_nesting = 0\n    local current_nesting =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_nesting = current_nesting\
    \ + 1\n            if current_nesting > max_nesting then\n                max_nesting\
    \ = current_nesting\n            end\n        elseif char == ')' then\n      \
    \      current_nesting = current_nesting - 1\n        end\n    end\n    return\
    \ max_nesting\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %S+\") do\n    local paren_levels = {}\n    local level = 0\n    for paren in\
    \ paren_group:gmatch(\".\") do\n      if paren == \"(\" then\n        level =\
    \ level + 1\n      elseif paren == \")\" then\n        level = level - 1\n   \
    \   end\n      paren_levels[level] = (paren_levels[level] or 0) + 1\n    end\n\
    \    table.insert(paren_groups, paren_levels)\n  end\n  return paren_groups\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %b()\") do\n    table.insert(paren_groups, paren_group)\n  end\n  local max_depth\
    \ = 0\n  for _, paren_group in ipairs(paren_groups) do\n    local depth = 0\n\
    \    for _ in paren_group:gmatch(\"%(\") do\n      depth = depth + 1\n    end\n\
    \    max_depth = math.max(max_depth, depth)\n  end\n  return max_depth\nend",
  "  local paren_levels = {}\n  for paren_group in paren_string:gmatch(\"%S+\") do\n\
    \    local level = 0\n    local max_level = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        level = level + 1\n      elseif c ==\
    \ \")\" then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_levels, max_level)\n  end\n  return\
    \ paren_levels\nend", "  local max_nesting = 0\n  local nesting = 0\n  for i =\
    \ 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n\
    \      nesting = nesting + 1\n      if nesting > max_nesting then\n        max_nesting\
    \ = nesting\n      end\n    elseif c == ')' then\n      nesting = nesting - 1\n\
    \    end\n  end\n  return max_nesting\nend", "    local paren_groups = {}\n  \
    \  for paren_group in paren_string:gmatch(\"%S+\") do\n        local max_depth\
    \ = 0\n        local depth = 0\n        for c in paren_group:gmatch(\".\") do\n\
    \            if c == \"(\" then\n                depth = depth + 1\n         \
    \       if depth > max_depth then\n                    max_depth = depth\n   \
    \             end\n            elseif c == \")\" then\n                depth =\
    \ depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "  local paren_groups =\
    \ {}\n  for group in paren_string:gmatch(\"%b()\") do\n    local max_depth = 0\n\
    \    local depth = 0\n    for c in group:gmatch(\".\") do\n      if c == \"(\"\
    \ then\n        depth = depth + 1\n        if depth > max_depth then\n       \
    \   max_depth = depth\n        end\n      elseif c == \")\" then\n        depth\
    \ = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local max_level = 0\n    local level\
    \ = 0\n    for char in paren_group:gmatch(\".\") do\n      if char == \"(\" then\n\
    \        level = level + 1\n      elseif char == \")\" then\n        level = level\
    \ - 1\n      end\n      if level > max_level then\n        max_level = level\n\
    \      end\n    end\n    paren_groups[#paren_groups + 1] = max_level\n  end\n\
    \  return paren_groups\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n        paren_groups[#paren_groups + 1]\
    \ = paren_group\n    end\n    local max_nesting = 0\n    for _, paren_group in\
    \ ipairs(paren_groups) do\n        local nesting = 0\n        for paren in paren_group:gmatch(\"\
    %(\") do\n            nesting = nesting + 1\n        end\n        if nesting >\
    \ max_nesting then\n            max_nesting = nesting\n        end\n    end\n\
    \    return max_nesting\nend", "  local paren_groups = {}\n  for paren_group in\
    \ paren_string:gmatch(\"%b()\") do\n    local max_nesting = 0\n    local current_nesting\
    \ = 0\n    for _ in paren_group:gmatch(\"%(\") do\n      current_nesting = current_nesting\
    \ + 1\n      if current_nesting > max_nesting then\n        max_nesting = current_nesting\n\
    \      end\n    end\n    for _ in paren_group:gmatch(\"%)\") do\n      current_nesting\
    \ = current_nesting - 1\n    end\n    table.insert(paren_groups, max_nesting)\n\
    \  end\n  return paren_groups\nend", "  local paren_levels = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local max_level = 0\n    local level\
    \ = 0\n    for char in paren_group:gmatch(\".\") do\n      if char == \"(\" then\n\
    \        level = level + 1\n      elseif char == \")\" then\n        level = level\
    \ - 1\n      end\n      if level > max_level then\n        max_level = level\n\
    \      end\n    end\n    table.insert(paren_levels, max_level)\n  end\n  return\
    \ paren_levels\nend", "\tlocal max_depth = 0\n\tlocal depth = 0\n\tfor i = 1,\
    \ #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == '(' then\n\
    \t\t\tdepth = depth + 1\n\t\t\tif depth > max_depth then\n\t\t\t\tmax_depth =\
    \ depth\n\t\t\tend\n\t\telseif c == ')' then\n\t\t\tdepth = depth - 1\n\t\tend\n\
    \tend\n\treturn max_depth\nend", "    local max_level = 0\n    local level = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            level = level + 1\n            if level\
    \ > max_level then\n                max_level = level\n            end\n     \
    \   elseif c == ')' then\n            level = level - 1\n        end\n    end\n\
    \    return max_level\nend", "  local max_depth = 0\n  local depth = 0\n  for\
    \ c in paren_string:gmatch(\".\") do\n    if c == \"(\" then\n      depth = depth\
    \ + 1\n      if depth > max_depth then\n        max_depth = depth\n      end\n\
    \    elseif c == \")\" then\n      depth = depth - 1\n    end\n  end\n  return\
    \ max_depth\nend", "    local paren_groups = {}\n    for group in paren_string:gmatch(\"\
    %b()\") do\n        table.insert(paren_groups, group)\n    end\n    local max_nesting\
    \ = 0\n    for _, group in ipairs(paren_groups) do\n        local nesting = 0\n\
    \        for _ in group:gmatch(\"%(\") do\n            nesting = nesting + 1\n\
    \        end\n        if nesting > max_nesting then\n            max_nesting =\
    \ nesting\n        end\n    end\n    return max_nesting\nend", "  local paren_groups\
    \ = {}\n  for group in paren_string:gmatch(\"%b()\") do\n    local depth = 0\n\
    \    local max_depth = 0\n    for c in group:gmatch(\".\") do\n      if c == \"\
    (\" then\n        depth = depth + 1\n        if depth > max_depth then\n     \
    \     max_depth = depth\n        end\n      elseif c == \")\" then\n        depth\
    \ = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    paren_groups[#paren_groups + 1] = paren_group\n\
    \  end\n  local max_nesting = 0\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    for paren in paren_group:gmatch(\"%(\") do\n\
    \      nesting = nesting + 1\n    end\n    if nesting > max_nesting then\n   \
    \   max_nesting = nesting\n    end\n  end\n  return max_nesting\nend", "  local\
    \ paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n    table.insert(paren_groups,\
    \ group)\n  end\n  local max_nesting = 0\n  for _, group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    for c in group:gmatch(\".\") do\n      if c ==\
    \ \"(\" then\n        nesting = nesting + 1\n      elseif c == \")\" then\n  \
    \      nesting = nesting - 1\n      end\n    end\n    if nesting > max_nesting\
    \ then\n      max_nesting = nesting\n    end\n  end\n  return max_nesting\nend",
  "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_depth = 0\n        local depth = 0\n        for char in\
    \ paren_group:gmatch(\".\") do\n            if char == \"(\" then\n          \
    \      depth = depth + 1\n                if depth > max_depth then\n        \
    \            max_depth = depth\n                end\n            elseif char ==\
    \ \")\" then\n                depth = depth - 1\n            end\n        end\n\
    \        table.insert(paren_groups, max_depth)\n    end\n    return paren_groups\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %S+\") do\n    local depth = 0\n    local max_depth = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        depth = depth + 1\n      elseif\
    \ paren == \")\" then\n        depth = depth - 1\n      end\n      if depth >\
    \ max_depth then\n        max_depth = depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "    local max_depth = 0\n \
    \   local depth = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            depth = depth + 1\n            if\
    \ depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif c == ')' then\n            depth = depth - 1\n        end\n  \
    \  end\n    return max_depth\nend", "    local levels = {}\n    local level =\
    \ 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n\
    \        if c == '(' then\n            level = level + 1\n        elseif c ==\
    \ ')' then\n            levels[level] = (levels[level] or 0) + 1\n           \
    \ level = level - 1\n        end\n    end\n    return levels\nend", "  local max_depth\
    \ = 0\n  local current_depth = 0\n  for i = 1, #paren_string do\n    if paren_string:sub(i,\
    \ i) == '(' then\n      current_depth = current_depth + 1\n      if current_depth\
    \ > max_depth then\n        max_depth = current_depth\n      end\n    elseif paren_string:sub(i,\
    \ i) == ')' then\n      current_depth = current_depth - 1\n    end\n  end\n  return\
    \ max_depth\nend", "    local paren_levels = {}\n    local paren_level = 0\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_level = paren_level + 1\n    \
    \    elseif char == ')' then\n            paren_level = paren_level - 1\n    \
    \    end\n        paren_levels[i] = paren_level\n    end\n    return paren_levels\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    local paren_start\
    \ = 0\n    local paren_end = 0\n    local paren_string_len = string.len(paren_string)\n\
    \    for i = 1, paren_string_len do\n        local c = string.sub(paren_string,\
    \ i, i)\n        if c == '(' then\n            paren_level = paren_level + 1\n\
    \            if paren_level == 1 then\n                paren_start = i\n     \
    \       end\n        elseif c == ')' then\n            if paren_level == 1 then\n\
    \                paren_end = i\n                table.insert(paren_levels, paren_end\
    \ - paren_start + 1)\n            end\n            paren_level = paren_level -\
    \ 1\n        end\n    end\n    return paren_levels\nend", "  local paren_table\
    \ = {}\n  for paren_group in string.gmatch(paren_string, \"%S+\") do\n    local\
    \ level = 0\n    local max_level = 0\n    for i = 1, #paren_group do\n      local\
    \ char = paren_group:sub(i, i)\n      if char == \"(\" then\n        level = level\
    \ + 1\n      elseif char == \")\" then\n        level = level - 1\n      end\n\
    \      if level > max_level then\n        max_level = level\n      end\n    end\n\
    \    table.insert(paren_table, max_level)\n  end\n  return paren_table\nend",
  "    local max_depth = 0\n    local depth = 0\n    local paren_stack = {}\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            depth = depth + 1\n            if depth > max_depth\
    \ then\n                max_depth = depth\n            end\n            paren_stack[#paren_stack\
    \ + 1] = c\n        elseif c == ')' then\n            depth = depth - 1\n    \
    \        paren_stack[#paren_stack] = nil\n        end\n    end\n    return max_depth\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local paren_count = 0\n        local max_paren_count = 0\n\
    \        for paren in paren_group:gmatch(\".\") do\n            if paren == \"\
    (\" then\n                paren_count = paren_count + 1\n            elseif paren\
    \ == \")\" then\n                paren_count = paren_count - 1\n            end\n\
    \            if paren_count > max_paren_count then\n                max_paren_count\
    \ = paren_count\n            end\n        end\n        table.insert(paren_groups,\
    \ max_paren_count)\n    end\n    return paren_groups\nend", "    local max_depth\
    \ = 0\n    local depth = 0\n    for i = 1, #paren_string do\n        local c =\
    \ paren_string:sub(i, i)\n        if c == '(' then\n            depth = depth\
    \ + 1\n            if depth > max_depth then\n                max_depth = depth\n\
    \            end\n        elseif c == ')' then\n            depth = depth - 1\n\
    \        end\n    end\n    return max_depth\nend", "    local max_nesting = 0\n\
    \    local current_nesting = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            current_nesting\
    \ = current_nesting + 1\n            if current_nesting > max_nesting then\n \
    \               max_nesting = current_nesting\n            end\n        elseif\
    \ char == ')' then\n            current_nesting = current_nesting - 1\n      \
    \  end\n    end\n    return max_nesting\nend", "  local max_nesting = 0\n  local\
    \ current_nesting = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i,\
    \ i)\n    if char == '(' then\n      current_nesting = current_nesting + 1\n \
    \     if current_nesting > max_nesting then\n        max_nesting = current_nesting\n\
    \      end\n    elseif char == ')' then\n      current_nesting = current_nesting\
    \ - 1\n    end\n  end\n  return max_nesting\nend", "  local paren_groups = {}\n\
    \  for group in paren_string:gmatch(\"%b()\") do\n    local max_nesting = 0\n\
    \    for _ in group:gmatch(\"%b()\") do\n      max_nesting = max_nesting + 1\n\
    \    end\n    table.insert(paren_groups, max_nesting)\n  end\n  return paren_groups\n\
    end", "    local max_depth = 0\n    local curr_depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            curr_depth = curr_depth + 1\n            if curr_depth > max_depth\
    \ then\n                max_depth = curr_depth\n            end\n        elseif\
    \ char == ')' then\n            curr_depth = curr_depth - 1\n        end\n   \
    \ end\n    return max_depth\nend", "    local levels = {}\n    local level = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            level = level + 1\n        elseif c == ')'\
    \ then\n            levels[level] = (levels[level] or 0) + 1\n            level\
    \ = level - 1\n        end\n    end\n    return levels\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ c = paren_string:sub(i, i)\n        if c == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif c == ')' then\n            paren_level = paren_level\
    \ - 1\n        end\n        paren_levels[i] = paren_level\n    end\n    return\
    \ paren_levels\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %b()\") do\n    table.insert(paren_groups, paren_group)\n  end\n  local max_depth\
    \ = 0\n  for _, paren_group in ipairs(paren_groups) do\n    local depth = 0\n\
    \    for _ in paren_group:gmatch(\"%(\") do\n      depth = depth + 1\n    end\n\
    \    max_depth = math.max(max_depth, depth)\n  end\n  return max_depth\nend",
  "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = 0\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        for c in paren_group:gmatch('.') do\n            if c == '(' then\n\
    \                nesting = nesting + 1\n            elseif c == ')' then\n   \
    \             nesting = nesting - 1\n            end\n            max_nesting\
    \ = math.max(max_nesting, nesting)\n        end\n    end\n    return max_nesting\n\
    end", "    local max_depth = 0\n    local depth = 0\n    local paren_groups =\
    \ {}\n    for paren in paren_string:gmatch(\"%S+\") do\n        depth = 0\n  \
    \      for c in paren:gmatch(\".\") do\n            if c == \"(\" then\n     \
    \           depth = depth + 1\n            elseif c == \")\" then\n          \
    \      depth = depth - 1\n            end\n            if depth > max_depth then\n\
    \                max_depth = depth\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local paren_levels\
    \ = {}\n    local current_level = 0\n    for i = 1, #paren_string do\n       \
    \ local char = paren_string:sub(i, i)\n        if char == '(' then\n         \
    \   current_level = current_level + 1\n        elseif char == ')' then\n     \
    \       current_level = current_level - 1\n        end\n        table.insert(paren_levels,\
    \ current_level)\n    end\n    return paren_levels\nend", "  local paren_levels\
    \ = {}\n  for paren_group in paren_string:gmatch(\"%b()\") do\n    local paren_level\
    \ = 0\n    for c in paren_group:gmatch(\".\") do\n      if c == \"(\" then\n \
    \       paren_level = paren_level + 1\n      elseif c == \")\" then\n        paren_level\
    \ = paren_level - 1\n      end\n    end\n    table.insert(paren_levels, paren_level)\n\
    \  end\n  return paren_levels\nend", "  local levels = {}\n  local max_level =\
    \ 0\n  local level = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      level = level + 1\n      max_level = math.max(max_level,\
    \ level)\n    elseif c == ')' then\n      level = level - 1\n    end\n  end\n\
    \  return max_level\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %S+\") do\n    local level = 0\n    local max_level = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      if level >\
    \ max_level then\n        max_level = level\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend", "    local paren_levels = {}\n\
    \    local current_level = 0\n    local max_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_level = current_level + 1\n            if current_level >\
    \ max_level then\n                max_level = current_level\n            end\n\
    \        elseif char == ')' then\n            current_level = current_level -\
    \ 1\n        end\n    end\n    return max_level\nend", "  local paren_groups =\
    \ {}\n  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_level\
    \ = 0\n    local level = 0\n    for c in paren_group:gmatch(\".\") do\n      if\
    \ c == \"(\" then\n        level = level + 1\n      elseif c == \")\" then\n \
    \       level = level - 1\n      end\n      max_level = math.max(max_level, level)\n\
    \    end\n    table.insert(paren_groups, max_level)\n  end\n  return paren_groups\n\
    end", "\tlocal paren_groups = {}\n\tfor paren_group in paren_string:gmatch(\"\
    %b()\") do\n\t\ttable.insert(paren_groups, paren_group)\n\tend\n\tlocal max_nesting\
    \ = 0\n\tfor _, paren_group in ipairs(paren_groups) do\n\t\tlocal nesting = 0\n\
    \t\tfor paren in paren_group:gmatch(\"%(\") do\n\t\t\tnesting = nesting + 1\n\t\
    \tend\n\t\tif nesting > max_nesting then\n\t\t\tmax_nesting = nesting\n\t\tend\n\
    \tend\n\treturn max_nesting\nend", "    local paren_levels = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n        local paren_level = 0\n       \
    \ for paren in paren_group:gmatch(\"%b()\") do\n            paren_level = paren_level\
    \ + 1\n        end\n        table.insert(paren_levels, paren_level)\n    end\n\
    \    return paren_levels\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local max_depth = 0\n    local depth\
    \ = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren == \"(\"\
    \ then\n        depth = depth + 1\n      elseif paren == \")\" then\n        depth\
    \ = depth - 1\n      end\n      if depth > max_depth then\n        max_depth =\
    \ depth\n      end\n    end\n    paren_groups[#paren_groups + 1] = max_depth\n\
    \  end\n  return paren_groups\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n        table.insert(paren_groups, paren_group)\n\
    \    end\n    local max_nesting = 0\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        for _ in paren_group:gmatch(\"%(\") do\n\
    \            nesting = nesting + 1\n        end\n        if nesting > max_nesting\
    \ then\n            max_nesting = nesting\n        end\n    end\n    return max_nesting\n\
    end", "  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\"\
    ) do\n    local level = 0\n    local max_level = 0\n    for paren in group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      max_level =\
    \ math.max(max_level, level)\n    end\n    table.insert(paren_groups, max_level)\n\
    \  end\n  return paren_groups\nend", "  local max_depth = 0\n  local depth = 0\n\
    \  for i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c\
    \ == '(' then\n      depth = depth + 1\n      if depth > max_depth then\n    \
    \    max_depth = depth\n      end\n    elseif c == ')' then\n      depth = depth\
    \ - 1\n    end\n  end\n  return max_depth\nend", "    local paren_groups = {}\n\
    \    for paren_group in paren_string:gmatch(\"%S+\") do\n        local max_level\
    \ = 0\n        local level = 0\n        for c in paren_group:gmatch(\".\") do\n\
    \            if c == \"(\" then\n                level = level + 1\n         \
    \   elseif c == \")\" then\n                level = level - 1\n            end\n\
    \            if level > max_level then\n                max_level = level\n  \
    \          end\n        end\n        paren_groups[#paren_groups + 1] = max_level\n\
    \    end\n    return paren_groups\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local max_depth = 0\n    local depth\
    \ = 0\n    for c in paren_group:gmatch(\".\") do\n      if c == \"(\" then\n \
    \       depth = depth + 1\n        if depth > max_depth then\n          max_depth\
    \ = depth\n        end\n      elseif c == \")\" then\n        depth = depth -\
    \ 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n  end\n  return\
    \ paren_groups\nend", "  local max_depth = 0\n  local depth = 0\n  for i = 1,\
    \ #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n\
    \      depth = depth + 1\n      if depth > max_depth then\n        max_depth =\
    \ depth\n      end\n    elseif c == ')' then\n      depth = depth - 1\n    end\n\
    \  end\n  return max_depth\nend", "    local max_nesting = 0\n    local current_nesting\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_nesting = current_nesting\
    \ + 1\n            if current_nesting > max_nesting then\n                max_nesting\
    \ = current_nesting\n            end\n        elseif char == ')' then\n      \
    \      current_nesting = current_nesting - 1\n        end\n    end\n    return\
    \ max_nesting\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local max_level = 0\n        local level = 0\n        for c\
    \ in paren_group:gmatch(\".\") do\n            if c == \"(\" then\n          \
    \      level = level + 1\n            elseif c == \")\" then\n               \
    \ level = level - 1\n            end\n            if level > max_level then\n\
    \                max_level = level\n            end\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "    local max_depth = 0\n\
    \    local depth = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            depth = depth + 1\n            if\
    \ depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif c == ')' then\n            depth = depth - 1\n        end\n  \
    \  end\n    return max_depth\nend", "    local paren_levels = {}\n    local paren_level\
    \ = 0\n    local paren_level_max = 0\n    for i = 1, #paren_string do\n      \
    \  local c = paren_string:sub(i, i)\n        if c == '(' then\n            paren_level\
    \ = paren_level + 1\n            if paren_level > paren_level_max then\n     \
    \           paren_level_max = paren_level\n            end\n        elseif c ==\
    \ ')' then\n            paren_level = paren_level - 1\n        end\n    end\n\
    \    return paren_level_max\nend", "    local paren_levels = {}\n    local current_level\
    \ = 0\n    local max_level = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            current_level\
    \ = current_level + 1\n            if current_level > max_level then\n       \
    \         max_level = current_level\n            end\n        elseif char == ')'\
    \ then\n            current_level = current_level - 1\n        end\n        paren_levels[i]\
    \ = current_level\n    end\n    return paren_levels\nend", "  local paren_groups\
    \ = {}\n  for paren_group in string.gmatch(paren_string, '%S+') do\n    local\
    \ max_depth = 0\n    local depth = 0\n    for c in string.gmatch(paren_group,\
    \ '.') do\n      if c == '(' then\n        depth = depth + 1\n        if depth\
    \ > max_depth then\n          max_depth = depth\n        end\n      elseif c ==\
    \ ')' then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "  local max_depth = 0\n  local\
    \ current_depth = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i,\
    \ i)\n    if char == '(' then\n      current_depth = current_depth + 1\n     \
    \ if current_depth > max_depth then\n        max_depth = current_depth\n     \
    \ end\n    elseif char == ')' then\n      current_depth = current_depth - 1\n\
    \    end\n  end\n  return max_depth\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local max_level = 0\n    local level\
    \ = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren == \"(\"\
    \ then\n        level = level + 1\n      elseif paren == \")\" then\n        level\
    \ = level - 1\n      end\n      if level > max_level then\n        max_level =\
    \ level\n      end\n    end\n    table.insert(paren_groups, max_level)\n  end\n\
    \  return paren_groups\nend", "  local max_level = 0\n  local level = 0\n  for\
    \ i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == '('\
    \ then\n      level = level + 1\n      if level > max_level then\n        max_level\
    \ = level\n      end\n    elseif c == ')' then\n      level = level - 1\n    end\n\
    \  end\n  return max_level\nend", "    local paren_groups = {}\n    for group\
    \ in paren_string:gmatch(\"%b()\") do\n        local level = 0\n        local\
    \ max_level = 0\n        for c in group:gmatch(\".\") do\n            if c ==\
    \ \"(\" then\n                level = level + 1\n                if level > max_level\
    \ then\n                    max_level = level\n                end\n         \
    \   elseif c == \")\" then\n                level = level - 1\n            end\n\
    \        end\n        table.insert(paren_groups, max_level)\n    end\n    return\
    \ paren_groups\nend", "    local paren_levels = {}\n    local paren_level = 0\n\
    \    local paren_start = 0\n    local paren_end = 0\n    local paren_start_index\
    \ = 0\n    local paren_end_index = 0\n    local paren_string_length = string.len(paren_string)\n\
    \    for i = 1, paren_string_length do\n        local char = string.sub(paren_string,\
    \ i, i)\n        if char == \"(\" then\n            paren_level = paren_level\
    \ + 1\n            if paren_level == 1 then\n                paren_start = i\n\
    \                paren_start_index = i\n            end\n        elseif char ==\
    \ \")\" then\n            paren_level = paren_level - 1\n            if paren_level\
    \ == 0 then\n                paren_end = i\n                paren_end_index =\
    \ i\n                table.insert(paren_levels, {paren_start, paren_end})\n  \
    \          end\n        end\n    end\n    return paren_levels\nend", "  local\
    \ paren_levels = {}\n  local paren_level = 0\n  for i = 1, #paren_string do\n\
    \    local c = paren_string:sub(i, i)\n    if c == '(' then\n      paren_level\
    \ = paren_level + 1\n    elseif c == ')' then\n      paren_level = paren_level\
    \ - 1\n    elseif c == ' ' then\n      table.insert(paren_levels, paren_level)\n\
    \      paren_level = 0\n    end\n  end\n  table.insert(paren_levels, paren_level)\n\
    \  return paren_levels\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n        table.insert(paren_groups, paren_group)\n\
    \    end\n    local max_nesting = 0\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        for paren in paren_group:gmatch(\"%(\"\
    ) do\n            nesting = nesting + 1\n        end\n        if nesting > max_nesting\
    \ then\n            max_nesting = nesting\n        end\n    end\n    return max_nesting\n\
    end", "  local max_nesting = 0\n  for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n    local nesting = 0\n    for paren in paren_group:gmatch(\".\") do\n \
    \     if paren == \"(\" then\n        nesting = nesting + 1\n      elseif paren\
    \ == \")\" then\n        nesting = nesting - 1\n      end\n      max_nesting =\
    \ math.max(max_nesting, nesting)\n    end\n  end\n  return max_nesting\nend",
  "    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\") do\n\
    \        local depth = 0\n        local max_depth = 0\n        for c in group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                depth = depth + 1\n \
    \               if depth > max_depth then\n                    max_depth = depth\n\
    \                end\n            elseif c == \")\" then\n                depth\
    \ = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local max_depth = 0\n\
    \    local depth = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            depth = depth + 1\n            if\
    \ depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif c == ')' then\n            depth = depth - 1\n        end\n  \
    \  end\n    return max_depth\nend", "  local paren_levels = {}\n  local paren_level\
    \ = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n\
    \    if char == '(' then\n      paren_level = paren_level + 1\n    elseif char\
    \ == ')' then\n      paren_level = paren_level - 1\n    end\n    paren_levels[i]\
    \ = paren_level\n  end\n  return paren_levels\nend", "    local max_nesting =\
    \ 0\n    local current_nesting = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            current_nesting\
    \ = current_nesting + 1\n            if current_nesting > max_nesting then\n \
    \               max_nesting = current_nesting\n            end\n        elseif\
    \ char == ')' then\n            current_nesting = current_nesting - 1\n      \
    \  end\n    end\n    return max_nesting\nend", "    local paren_levels = {}\n\
    \    local paren_level = 0\n    for c in paren_string:gmatch(\".\") do\n     \
    \   if c == \"(\" then\n            paren_level = paren_level + 1\n        elseif\
    \ c == \")\" then\n            paren_level = paren_level - 1\n        end\n  \
    \      table.insert(paren_levels, paren_level)\n    end\n    return paren_levels\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %b()\") do\n        local max_nesting = 0\n        local nesting = 0\n       \
    \ for c in paren_group:gmatch(\".\") do\n            if c == \"(\" then\n    \
    \            nesting = nesting + 1\n                if nesting > max_nesting then\n\
    \                    max_nesting = nesting\n                end\n            elseif\
    \ c == \")\" then\n                nesting = nesting - 1\n            end\n  \
    \      end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend", "  local paren_groups = {}\n  for group in paren_string:gmatch(\"\
    %b()\") do\n    local level = 0\n    local max_level = 0\n    for char in group:gmatch(\"\
    .\") do\n      if char == \"(\" then\n        level = level + 1\n      elseif\
    \ char == \")\" then\n        level = level - 1\n      end\n      if level > max_level\
    \ then\n        max_level = level\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend", "    local max_depth = 0\n \
    \   local depth = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            depth = depth + 1\n            if\
    \ depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif c == ')' then\n            depth = depth - 1\n        end\n  \
    \  end\n    return max_depth\nend", "    local paren_levels = {}\n    local paren_level\
    \ = 0\n    local paren_level_max = 0\n    for i = 1, #paren_string do\n      \
    \  local c = paren_string:sub(i, i)\n        if c == '(' then\n            paren_level\
    \ = paren_level + 1\n            if paren_level > paren_level_max then\n     \
    \           paren_level_max = paren_level\n            end\n        elseif c ==\
    \ ')' then\n            paren_level = paren_level - 1\n        end\n    end\n\
    \    return paren_level_max\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local max_nesting = 0\n    local nesting\
    \ = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren == \"(\"\
    \ then\n        nesting = nesting + 1\n      elseif paren == \")\" then\n    \
    \    nesting = nesting - 1\n      end\n      if nesting > max_nesting then\n \
    \       max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for group in paren_string:gmatch(\"%b()\") do\n    local depth = 0\n    local\
    \ max_depth = 0\n    for char in group:gmatch(\".\") do\n      if char == \"(\"\
    \ then\n        depth = depth + 1\n        if depth > max_depth then\n       \
    \   max_depth = depth\n        end\n      elseif char == \")\" then\n        depth\
    \ = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "    local paren_count = 0\n    local max_paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        if paren_string:sub(i, i) == '('\
    \ then\n            paren_count = paren_count + 1\n            if paren_count\
    \ > max_paren_count then\n                max_paren_count = paren_count\n    \
    \        end\n        elseif paren_string:sub(i, i) == ')' then\n            paren_count\
    \ = paren_count - 1\n        end\n    end\n    return max_paren_count\nend", " \
    \   local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         paren_level = paren_level + 1\n        elseif c == ')' then\n      \
    \      paren_level = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n\
    \    end\n    return paren_levels\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch(\"%S+\") do\n        local max_depth = 0\n\
    \        local depth = 0\n        for c in paren_group:gmatch(\".\") do\n    \
    \        if c == \"(\" then\n                depth = depth + 1\n             \
    \   if depth > max_depth then\n                    max_depth = depth\n       \
    \         end\n            elseif c == \")\" then\n                depth = depth\
    \ - 1\n            end\n        end\n        table.insert(paren_groups, max_depth)\n\
    \    end\n    return paren_groups\nend", "  local paren_levels = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local level = 0\n    local max_level\
    \ = 0\n    for c in paren_group:gmatch(\".\") do\n      if c == \"(\" then\n \
    \       level = level + 1\n      elseif c == \")\" then\n        level = level\
    \ - 1\n      end\n      max_level = math.max(max_level, level)\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend", "    local paren_levels = {}\n\
    \    local paren_level = 0\n    local paren_start = 0\n    local paren_end = 0\n\
    \    local paren_count = 0\n    local paren_max = 0\n    local paren_max_start\
    \ = 0\n    local paren_max_end = 0\n    local paren_max_count = 0\n    local paren_max_level\
    \ = 0\n    local paren_max_level_start = 0\n    local paren_max_level_end = 0\n\
    \    local paren_max_level_count = 0\n    local paren_max_level_max = 0\n    local\
    \ paren_max_level_max_start = 0\n    local paren_max_level_max_end = 0\n    local\
    \ paren_max_level_max_count = 0\n    local paren_max_level_max_level = 0\n   \
    \ local paren_max_level_max_level_start = 0\n    local paren_max_level_max_level_end\
    \ = 0\n    local paren_max_level_max_level_count = 0\n    local paren_max_level_max_level_max\
    \ = 0\n    local paren_max_level_max_level_max_start = 0\n    local paren_max_level_max_level_max_end\
    \ = 0\n    local paren_max_level_max_level_max_count = 0\n    local paren_max_level_max_level_max_level\
    \ = 0\n    local paren_max_level_max_level_max_level_start = 0\n    local paren_max_level_max_level_max_level_end\
    \ = 0\n    local paren_max_level_max_level_max_level_count = 0\n    local paren_max_level_max_level_max_level_max\
    \ = 0\n    local paren_max_level_max_level_max_level_max_start = 0\n    local\
    \ paren_max_level_max_level_max_level_max_end = 0\n    local paren_max_level_max_level_max_level_max_count\
    \ = 0\n    local paren", "    local depth = 0\n    local max_depth = 0\n    for\
    \ i = 1, #paren_string do\n        if paren_string:sub(i, i) == '(' then\n   \
    \         depth = depth + 1\n            if depth > max_depth then\n         \
    \       max_depth = depth\n            end\n        elseif paren_string:sub(i,\
    \ i) == ')' then\n            depth = depth - 1\n        end\n    end\n    return\
    \ max_depth\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %S+\") do\n    local max_depth = 0\n    local depth = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        depth = depth + 1\n        if depth\
    \ > max_depth then\n          max_depth = depth\n        end\n      elseif c ==\
    \ \")\" then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for group in paren_string:gmatch(\"%b()\") do\n    local max_nesting = 0\n\
    \    local current_nesting = 0\n    for _ in group:gmatch(\"%(\") do\n      current_nesting\
    \ = current_nesting + 1\n      if current_nesting > max_nesting then\n       \
    \ max_nesting = current_nesting\n      end\n    end\n    for _ in group:gmatch(\"\
    %)\") do\n      current_nesting = current_nesting - 1\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local max_depth = 0\n\
    \    local current_depth = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == '(' then\n            current_depth\
    \ = current_depth + 1\n            if current_depth > max_depth then\n       \
    \         max_depth = current_depth\n            end\n        elseif char == ')'\
    \ then\n            current_depth = current_depth - 1\n        end\n    end\n\
    \    return max_depth\nend", "  local paren_groups = {}\n  for paren_group in\
    \ paren_string:gmatch(\"%S+\") do\n    local depth = 0\n    local max_depth =\
    \ 0\n    for char in paren_group:gmatch(\".\") do\n      if char == \"(\" then\n\
    \        depth = depth + 1\n        if depth > max_depth then\n          max_depth\
    \ = depth\n        end\n      elseif char == \")\" then\n        depth = depth\
    \ - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n  end\n\
    \  return paren_groups\nend", "    local paren_levels = {}\n    local paren_level\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \      elseif c == ')' then\n            paren_level = paren_level - 1\n     \
    \   end\n        paren_levels[i] = paren_level\n    end\n    return paren_levels\n\
    end", "    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\"\
    ) do\n        local depth = 0\n        local max_depth = 0\n        for char in\
    \ group:gmatch(\".\") do\n            if char == \"(\" then\n                depth\
    \ = depth + 1\n                if depth > max_depth then\n                   \
    \ max_depth = depth\n                end\n            elseif char == \")\" then\n\
    \                depth = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "  local paren_groups =\
    \ {}\n  for paren_group in paren_string:gmatch(\"[^%s]+\") do\n    local max_nesting\
    \ = 0\n    local nesting = 0\n    for paren in paren_group:gmatch(\".\") do\n\
    \      if paren == \"(\" then\n        nesting = nesting + 1\n      elseif paren\
    \ == \")\" then\n        nesting = nesting - 1\n      end\n      if nesting >\
    \ max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local paren_levels =\
    \ {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif char == ')' then\n            paren_level\
    \ = paren_level - 1\n        end\n        table.insert(paren_levels, paren_level)\n\
    \    end\n    return paren_levels\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    local max_nesting = 0\n    local nesting\
    \ = 0\n    for c in paren_group:gmatch(\".\") do\n      if c == \"(\" then\n \
    \       nesting = nesting + 1\n        if nesting > max_nesting then\n       \
    \   max_nesting = nesting\n        end\n      elseif c == \")\" then\n       \
    \ nesting = nesting - 1\n      end\n    end\n    table.insert(paren_groups, max_nesting)\n\
    \  end\n  return paren_groups\nend", "  local paren_levels = {}\n  local paren_level\
    \ = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n \
    \   if c == '(' then\n      paren_level = paren_level + 1\n    elseif c == ')'\
    \ then\n      paren_level = paren_level - 1\n    elseif c == ' ' then\n      table.insert(paren_levels,\
    \ paren_level)\n      paren_level = 0\n    end\n  end\n  table.insert(paren_levels,\
    \ paren_level)\n  return paren_levels\nend", "  local paren_groups = {}\n  for\
    \ paren_group in paren_string:gmatch(\"%S+\") do\n    local max_nesting = 0\n\
    \    local nesting = 0\n    for paren in paren_group:gmatch(\".\") do\n      if\
    \ paren == \"(\" then\n        nesting = nesting + 1\n      elseif paren == \"\
    )\" then\n        nesting = nesting - 1\n      end\n      if nesting > max_nesting\
    \ then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"[^%s]+\") do\n    local max_depth\
    \ = 0\n    local depth = 0\n    for paren in paren_group:gmatch(\".\") do\n  \
    \    if paren == \"(\" then\n        depth = depth + 1\n      elseif paren ==\
    \ \")\" then\n        depth = depth - 1\n      end\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_nesting =\
    \ 0\n    local nesting = 0\n    for paren in paren_group:gmatch(\".\") do\n  \
    \    if paren == \"(\" then\n        nesting = nesting + 1\n      elseif paren\
    \ == \")\" then\n        nesting = nesting - 1\n      end\n      if nesting >\
    \ max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%b()\") do\n    table.insert(paren_groups,\
    \ paren_group)\n  end\n  local max_nesting = 0\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    for paren in paren_group:gmatch(\"%(\") do\n\
    \      nesting = nesting + 1\n    end\n    if nesting > max_nesting then\n   \
    \   max_nesting = nesting\n    end\n  end\n  return max_nesting\nend", "    local\
    \ max_depth = 0\n    local current_depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    current_depth = current_depth + 1\n            if current_depth > max_depth\
    \ then\n                max_depth = current_depth\n            end\n        elseif\
    \ c == ')' then\n            current_depth = current_depth - 1\n        end\n\
    \    end\n    return max_depth\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    paren_groups[#paren_groups + 1] = paren_group\n\
    \  end\n  local max_nesting = 0\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    for char in paren_group:gmatch(\".\") do\n  \
    \    if char == \"(\" then\n        nesting = nesting + 1\n      elseif char ==\
    \ \")\" then\n        nesting = nesting - 1\n      end\n    end\n    max_nesting\
    \ = math.max(max_nesting, nesting)\n  end\n  return max_nesting\nend", "    local\
    \ paren_levels = {}\n    local level = 0\n    for _, c in utf8.codes(paren_string)\
    \ do\n        if c == 40 then\n            level = level + 1\n        elseif c\
    \ == 41 then\n            level = level - 1\n        end\n        paren_levels[#paren_levels\
    \ + 1] = level\n    end\n    return paren_levels\nend", "    local max_depth =\
    \ 0\n    local depth = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == '(' then\n            depth = depth\
    \ + 1\n            if depth > max_depth then\n                max_depth = depth\n\
    \            end\n        elseif char == ')' then\n            depth = depth -\
    \ 1\n        end\n    end\n    return max_depth\nend", "    local max_nesting\
    \ = 0\n    local current_nesting = 0\n    for i = 1, #paren_string do\n      \
    \  local char = paren_string:sub(i, i)\n        if char == '(' then\n        \
    \    current_nesting = current_nesting + 1\n            if current_nesting > max_nesting\
    \ then\n                max_nesting = current_nesting\n            end\n     \
    \   elseif char == ')' then\n            current_nesting = current_nesting - 1\n\
    \        end\n    end\n    return max_nesting\nend", "  local paren_levels = {}\n\
    \  local current_level = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i,\
    \ i)\n    if char == '(' then\n      current_level = current_level + 1\n    elseif\
    \ char == ')' then\n      current_level = current_level - 1\n    end\n    paren_levels[i]\
    \ = current_level\n  end\n  return paren_levels\nend", "  local paren_groups =\
    \ {}\n  local paren_group = \"\"\n  for i = 1, #paren_string do\n    local char\
    \ = paren_string:sub(i, i)\n    if char == \" \" then\n      table.insert(paren_groups,\
    \ paren_group)\n      paren_group = \"\"\n    else\n      paren_group = paren_group\
    \ .. char\n    end\n  end\n  table.insert(paren_groups, paren_group)\n  local\
    \ max_nesting = 0\n  for _, paren_group in ipairs(paren_groups) do\n    local\
    \ nesting = 0\n    for i = 1, #paren_group do\n      local char = paren_group:sub(i,\
    \ i)\n      if char == \"(\" then\n        nesting = nesting + 1\n      elseif\
    \ char == \")\" then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n  end\n\
    \  return max_nesting\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n        local max_level = 0\n        local\
    \ level = 0\n        for char in paren_group:gmatch(\".\") do\n            if\
    \ char == \"(\" then\n                level = level + 1\n            elseif char\
    \ == \")\" then\n                level = level - 1\n            end\n        \
    \    if level > max_level then\n                max_level = level\n          \
    \  end\n        end\n        table.insert(paren_groups, max_level)\n    end\n\
    \    return paren_groups\nend", "    local paren_string = paren_string:gsub(\"\
    %s+\", \"\")\n    local max_nesting = 0\n    local nesting = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == \"(\" then\n            nesting = nesting + 1\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        elseif\
    \ char == \")\" then\n            nesting = nesting - 1\n        end\n    end\n\
    \    return max_nesting\nend", "  local max_depth = 0\n  local depth = 0\n  for\
    \ i = 1, #paren_string do\n    if paren_string:sub(i, i) == '(' then\n      depth\
    \ = depth + 1\n      if depth > max_depth then\n        max_depth = depth\n  \
    \    end\n    elseif paren_string:sub(i, i) == ')' then\n      depth = depth -\
    \ 1\n    end\n  end\n  return max_depth\nend", "  local paren_levels = {}\n  local\
    \ paren_level = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      paren_level = paren_level + 1\n    elseif c\
    \ == ')' then\n      paren_level = paren_level - 1\n    end\n    paren_levels[i]\
    \ = paren_level\n  end\n  return paren_levels\nend", "    local max_nesting =\
    \ 0\n    local nesting = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == '(' then\n            nesting =\
    \ nesting + 1\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        elseif char == ')' then\n            nesting\
    \ = nesting - 1\n        end\n    end\n    return max_nesting\nend", "    local\
    \ max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n      \
    \  local c = paren_string:sub(i, i)\n        if c == '(' then\n            depth\
    \ = depth + 1\n            if depth > max_depth then\n                max_depth\
    \ = depth\n            end\n        elseif c == ')' then\n            depth =\
    \ depth - 1\n        end\n    end\n    return max_depth\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    local paren_level_max = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == '(' then\n            paren_level = paren_level + 1\n            if\
    \ paren_level > paren_level_max then\n                paren_level_max = paren_level\n\
    \            end\n        elseif char == ')' then\n            paren_level = paren_level\
    \ - 1\n        end\n    end\n    return paren_level_max\nend", "  local max_nesting\
    \ = 0\n  local current_nesting = 0\n  for i = 1, #paren_string do\n    local char\
    \ = paren_string:sub(i, i)\n    if char == '(' then\n      current_nesting = current_nesting\
    \ + 1\n      if current_nesting > max_nesting then\n        max_nesting = current_nesting\n\
    \      end\n    elseif char == ')' then\n      current_nesting = current_nesting\
    \ - 1\n    end\n  end\n  return max_nesting\nend", "  local paren_levels = {}\n\
    \  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_level = 0\n\
    \    local level = 0\n    for c in paren_group:gmatch(\".\") do\n      if c ==\
    \ \"(\" then\n        level = level + 1\n      elseif c == \")\" then\n      \
    \  level = level - 1\n      end\n      if level > max_level then\n        max_level\
    \ = level\n      end\n    end\n    table.insert(paren_levels, max_level)\n  end\n\
    \  return paren_levels\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n        local level = 0\n        local max_level\
    \ = 0\n        for c in paren_group:gmatch(\".\") do\n            if c == \"(\"\
    \ then\n                level = level + 1\n            elseif c == \")\" then\n\
    \                level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(paren_groups, max_level)\n    end\n\
    \    return paren_groups\nend", "  local max_depth = 0\n  local curr_depth = 0\n\
    \  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if\
    \ char == '(' then\n      curr_depth = curr_depth + 1\n      if curr_depth > max_depth\
    \ then\n        max_depth = curr_depth\n      end\n    elseif char == ')' then\n\
    \      curr_depth = curr_depth - 1\n    end\n  end\n  return max_depth\nend",
  "  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n  \
    \  local max_level = 0\n    local level = 0\n    for c in group:gmatch(\".\")\
    \ do\n      if c == \"(\" then\n        level = level + 1\n        if level >\
    \ max_level then\n          max_level = level\n        end\n      elseif c ==\
    \ \")\" then\n        level = level - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend", "  local paren_levels = {}\n\
    \  local paren_level = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      paren_level = paren_level + 1\n    elseif c\
    \ == ')' then\n      paren_level = paren_level - 1\n    elseif c == ' ' then\n\
    \      paren_levels[#paren_levels + 1] = paren_level\n      paren_level = 0\n\
    \    end\n  end\n  paren_levels[#paren_levels + 1] = paren_level\n  return paren_levels\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == '(' then\n            paren_level = paren_level + 1\n        elseif char\
    \ == ')' then\n            paren_level = paren_level - 1\n        end\n      \
    \  paren_levels[i] = paren_level\n    end\n    return paren_levels\nend", "  \
    \  local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\") do\n\
    \        table.insert(paren_groups, group)\n    end\n    local max_nesting = 0\n\
    \    for _, group in ipairs(paren_groups) do\n        local nesting = 0\n    \
    \    for paren in group:gmatch(\"%(\") do\n            nesting = nesting + 1\n\
    \        end\n        if nesting > max_nesting then\n            max_nesting =\
    \ nesting\n        end\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = {}\n    for group in paren_string:gmatch(\"%b()\") do\n        table.insert(paren_groups,\
    \ group)\n    end\n    local max_nesting = 0\n    for _, group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        for _ in group:gmatch(\"%(\") do\n  \
    \          nesting = nesting + 1\n        end\n        if nesting > max_nesting\
    \ then\n            max_nesting = nesting\n        end\n    end\n    return max_nesting\n\
    end", "  local max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n\
    \    local char = paren_string:sub(i, i)\n    if char == '(' then\n      depth\
    \ = depth + 1\n      if depth > max_depth then\n        max_depth = depth\n  \
    \    end\n    elseif char == ')' then\n      depth = depth - 1\n    end\n  end\n\
    \  return max_depth\nend", "    local paren_groups = {}\n    for paren_group in\
    \ paren_string:gmatch(\"%S+\") do\n        local max_depth = 0\n        local\
    \ depth = 0\n        for c in paren_group:gmatch(\".\") do\n            if c ==\
    \ \"(\" then\n                depth = depth + 1\n                if depth > max_depth\
    \ then\n                    max_depth = depth\n                end\n         \
    \   elseif c == \")\" then\n                depth = depth - 1\n            end\n\
    \        end\n        table.insert(paren_groups, max_depth)\n    end\n    return\
    \ paren_groups\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local max_depth = 0\n        local depth = 0\n        for paren\
    \ in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n      \
    \          depth = depth + 1\n            elseif paren == \")\" then\n       \
    \         depth = depth - 1\n            end\n            if depth > max_depth\
    \ then\n                max_depth = depth\n            end\n        end\n    \
    \    table.insert(paren_groups, max_depth)\n    end\n    return paren_groups\n\
    end", "    local max_depth = 0\n    local current_depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         current_depth = current_depth + 1\n            if current_depth > max_depth\
    \ then\n                max_depth = current_depth\n            end\n        elseif\
    \ c == ')' then\n            current_depth = current_depth - 1\n        end\n\
    \    end\n    return max_depth\nend", "  local paren_levels = {}\n  local paren_level\
    \ = 0\n  for paren in paren_string:gmatch(\"%S\") do\n    if paren == \"(\" then\n\
    \      paren_level = paren_level + 1\n    elseif paren == \")\" then\n      paren_levels[paren_level]\
    \ = true\n      paren_level = paren_level - 1\n    end\n  end\n  local max_level\
    \ = 0\n  for level, _ in pairs(paren_levels) do\n    max_level = math.max(max_level,\
    \ level)\n  end\n  return max_level\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch(\"%S+\") do\n        local paren_stack =\
    \ {}\n        local max_level = 0\n        for paren in paren_group:gmatch(\"\
    .\") do\n            if paren == \"(\" then\n                table.insert(paren_stack,\
    \ paren)\n                max_level = math.max(max_level, #paren_stack)\n    \
    \        elseif paren == \")\" then\n                table.remove(paren_stack)\n\
    \            end\n        end\n        table.insert(paren_groups, max_level)\n\
    \    end\n    return paren_groups\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = 0\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    for _, c in utf8.next, paren_group do\n     \
    \ if c == '(' then\n        nesting = nesting + 1\n      elseif c == ')' then\n\
    \        nesting = nesting - 1\n      end\n    end\n    max_nesting = math.max(max_nesting,\
    \ nesting)\n  end\n  return max_nesting\nend", "    local paren_groups = {}\n\
    \    for group in paren_string:gmatch(\"%b()\") do\n        local depth = 0\n\
    \        local max_depth = 0\n        for c in group:gmatch(\".\") do\n      \
    \      if c == \"(\" then\n                depth = depth + 1\n               \
    \ if depth > max_depth then\n                    max_depth = depth\n         \
    \       end\n            elseif c == \")\" then\n                depth = depth\
    \ - 1\n            end\n        end\n        table.insert(paren_groups, max_depth)\n\
    \    end\n    return paren_groups\nend", "    local paren_levels = {}\n    local\
    \ paren_level = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            paren_level = paren_level + 1\n\
    \        elseif char == ')' then\n            paren_level = paren_level - 1\n\
    \        end\n        paren_levels[i] = paren_level\n    end\n    return paren_levels\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local max_depth = 0\n        local depth = 0\n        for c\
    \ in paren_group:gmatch(\".\") do\n            if c == \"(\" then\n          \
    \      depth = depth + 1\n                if depth > max_depth then\n        \
    \            max_depth = depth\n                end\n            elseif c == \"\
    )\" then\n                depth = depth - 1\n            end\n        end\n  \
    \      table.insert(paren_groups, max_depth)\n    end\n    return paren_groups\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == '(' then\n            paren_level = paren_level + 1\n        elseif char\
    \ == ')' then\n            paren_level = paren_level - 1\n        end\n      \
    \  paren_levels[i] = paren_level\n    end\n    return paren_levels\nend", "  local\
    \ paren_levels = {}\n  local paren_level = 0\n  for i = 1, #paren_string do\n\
    \    local char = paren_string:sub(i, i)\n    if char == '(' then\n      paren_level\
    \ = paren_level + 1\n    elseif char == ')' then\n      paren_level = paren_level\
    \ - 1\n    end\n    if char == ' ' then\n      paren_levels[#paren_levels + 1]\
    \ = paren_level\n      paren_level = 0\n    end\n  end\n  paren_levels[#paren_levels\
    \ + 1] = paren_level\n  return paren_levels\nend", "    local paren_groups = {}\n\
    \    for group in paren_string:gmatch(\"%S+\") do\n        local max_depth = 0\n\
    \        local depth = 0\n        for c in group:gmatch(\".\") do\n          \
    \  if c == \"(\" then\n                depth = depth + 1\n                if depth\
    \ > max_depth then\n                    max_depth = depth\n                end\n\
    \            elseif c == \")\" then\n                depth = depth - 1\n     \
    \       end\n        end\n        table.insert(paren_groups, max_depth)\n    end\n\
    \    return paren_groups\nend", "  local max_nesting = 0\n  local current_nesting\
    \ = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n\
    \    if char == '(' then\n      current_nesting = current_nesting + 1\n      if\
    \ current_nesting > max_nesting then\n        max_nesting = current_nesting\n\
    \      end\n    elseif char == ')' then\n      current_nesting = current_nesting\
    \ - 1\n    end\n  end\n  return max_nesting\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_depth = 0\n\
    \    local depth = 0\n    for c in paren_group:gmatch(\".\") do\n      if c ==\
    \ \"(\" then\n        depth = depth + 1\n        if depth > max_depth then\n \
    \         max_depth = depth\n        end\n      elseif c == \")\" then\n     \
    \   depth = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "  local paren_levels = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local level = 0\n    local max_level\
    \ = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren == \"(\"\
    \ then\n        level = level + 1\n      elseif paren == \")\" then\n        level\
    \ = level - 1\n      end\n      if level > max_level then\n        max_level =\
    \ level\n      end\n    end\n    table.insert(paren_levels, max_level)\n  end\n\
    \  return paren_levels\nend", "  local max_nesting = 0\n  local curr_nesting =\
    \ 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n   \
    \ if c == '(' then\n      curr_nesting = curr_nesting + 1\n      if curr_nesting\
    \ > max_nesting then\n        max_nesting = curr_nesting\n      end\n    elseif\
    \ c == ')' then\n      curr_nesting = curr_nesting - 1\n    end\n  end\n  return\
    \ max_nesting\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %b()\") do\n        table.insert(paren_groups, paren_group)\n    end\n    local\
    \ max_nesting = 0\n    for _, paren_group in ipairs(paren_groups) do\n       \
    \ local nesting = 0\n        for _ in paren_group:gmatch(\"%(\") do\n        \
    \    nesting = nesting + 1\n        end\n        if nesting > max_nesting then\n\
    \            max_nesting = nesting\n        end\n    end\n    return max_nesting\n\
    end", "  local paren_levels = {}\n  local paren_level = 0\n  local paren_start\
    \ = 0\n  local paren_end = 0\n  local paren_start_index = 0\n  local paren_end_index\
    \ = 0\n  local paren_string_length = string.len(paren_string)\n  local paren_group_index\
    \ = 0\n  local paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_start_index\
    \ = 0\n  local paren_group_end_index = 0\n  local paren_group_length = 0\n  local\
    \ paren_group_string = \"\"\n  local paren_group_levels = {}\n  local paren_group_level\
    \ = 0\n  local paren_group_level_index = 0\n  local paren_group_level_start =\
    \ 0\n  local paren_group_level_end = 0\n  local paren_group_level_start_index\
    \ = 0\n  local paren_group_level_end_index = 0\n  local paren_group_level_string\
    \ = \"\"\n  local paren_group_level_length = 0\n  local paren_group_level_count\
    \ = 0\n  local paren_group_level_count_index = 0\n  local paren_group_level_count_start\
    \ = 0\n  local paren_group_level_count_end = 0\n  local paren_group_level_count_start_index\
    \ = 0\n  local paren_group_level_count_end_index = 0\n  local paren_group_level_count_string\
    \ = \"\"\n  local paren_group_level_count_length = 0\n  local paren_group_level_count_number\
    \ = 0\n  local paren_group_level_count_number_index = 0\n  local paren_group_level_count_number_start\
    \ = 0\n  local paren_group_level_count_number_end = 0\n  local paren_group_level_count_number_start_index\
    \ = 0\n  local paren_group_level_count_number_end_index = 0\n  local paren_group_level_count_",
  "  local max_nesting = 0\n  for paren_group in paren_string:gmatch(\"%b()\") do\n\
    \    local nesting = 0\n    for _ in paren_group:gmatch(\"%(\") do\n      nesting\
    \ = nesting + 1\n    end\n    if nesting > max_nesting then\n      max_nesting\
    \ = nesting\n    end\n  end\n  return max_nesting\nend", "  local max_depth =\
    \ 0\n  local depth = 0\n  local paren_string = paren_string:gsub(\"%s+\", \"\"\
    )\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n  \
    \  if char == \"(\" then\n      depth = depth + 1\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    elseif char == \")\" then\n\
    \      depth = depth - 1\n    end\n  end\n  return max_depth\nend", "    local\
    \ max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n      \
    \  local c = paren_string:sub(i, i)\n        if c == '(' then\n            depth\
    \ = depth + 1\n            if depth > max_depth then\n                max_depth\
    \ = depth\n            end\n        elseif c == ')' then\n            depth =\
    \ depth - 1\n        end\n    end\n    return max_depth\nend", "    local max_nesting\
    \ = 0\n    local current_nesting = 0\n    for i = 1, #paren_string do\n      \
    \  local c = paren_string:sub(i, i)\n        if c == '(' then\n            current_nesting\
    \ = current_nesting + 1\n            if current_nesting > max_nesting then\n \
    \               max_nesting = current_nesting\n            end\n        elseif\
    \ c == ')' then\n            current_nesting = current_nesting - 1\n        end\n\
    \    end\n    return max_nesting\nend", "    local max_depth = 0\n    local depth\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            depth = depth + 1\n            if\
    \ depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif c == ')' then\n            depth = depth - 1\n        end\n  \
    \  end\n    return max_depth\nend", "  local max_nesting = 0\n  local current_nesting\
    \ = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n\
    \    if char == '(' then\n      current_nesting = current_nesting + 1\n      if\
    \ current_nesting > max_nesting then\n        max_nesting = current_nesting\n\
    \      end\n    elseif char == ')' then\n      current_nesting = current_nesting\
    \ - 1\n    end\n  end\n  return max_nesting\nend", "    local paren_string = paren_string:gsub(\"\
    %s+\", \"\")\n    local paren_string_len = paren_string:len()\n    local max_nesting\
    \ = 0\n    local nesting = 0\n    for i = 1, paren_string_len do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == \"(\" then\n            nesting\
    \ = nesting + 1\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        elseif char == \")\" then\n            nesting\
    \ = nesting - 1\n        end\n    end\n    return max_nesting\nend", "    local\
    \ max_nesting = 0\n    local nesting = 0\n    for i = 1, #paren_string do\n  \
    \      local char = paren_string:sub(i, i)\n        if char == '(' then\n    \
    \        nesting = nesting + 1\n            if nesting > max_nesting then\n  \
    \              max_nesting = nesting\n            end\n        elseif char ==\
    \ ')' then\n            nesting = nesting - 1\n        end\n    end\n    return\
    \ max_nesting\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local max_depth = 0\n        local depth = 0\n        for c\
    \ in paren_group:gmatch(\".\") do\n            if c == \"(\" then\n          \
    \      depth = depth + 1\n                if depth > max_depth then\n        \
    \            max_depth = depth\n                end\n            elseif c == \"\
    )\" then\n                depth = depth - 1\n            end\n        end\n  \
    \      table.insert(paren_groups, max_depth)\n    end\n    return paren_groups\n\
    end", "    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            depth = depth + 1\n            if depth > max_depth then\n      \
    \          max_depth = depth\n            end\n        elseif char == ')' then\n\
    \            depth = depth - 1\n        end\n    end\n    return max_depth\nend",
  "  local max_level = 0\n  local level = 0\n  for i = 1, #paren_string do\n    local\
    \ c = paren_string:sub(i, i)\n    if c == '(' then\n      level = level + 1\n\
    \      if level > max_level then\n        max_level = level\n      end\n    elseif\
    \ c == ')' then\n      level = level - 1\n    end\n  end\n  return max_level\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local paren_stack = {}\n        local max_depth = 0\n     \
    \   for paren in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n\
    \                table.insert(paren_stack, paren)\n                max_depth =\
    \ math.max(max_depth, #paren_stack)\n            elseif paren == \")\" then\n\
    \                table.remove(paren_stack)\n            end\n        end\n   \
    \     table.insert(paren_groups, max_depth)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"\
    %S+\") do\n        local max_nesting = 0\n        local current_nesting = 0\n\
    \        for paren in paren_group:gmatch(\".\") do\n            if paren == \"\
    (\" then\n                current_nesting = current_nesting + 1\n            elseif\
    \ paren == \")\" then\n                current_nesting = current_nesting - 1\n\
    \            end\n            if current_nesting > max_nesting then\n        \
    \        max_nesting = current_nesting\n            end\n        end\n       \
    \ table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "  local paren_groups = {}\n  for group in string.gmatch(paren_string, \"\
    %S+\") do\n    local max_level = 0\n    local level = 0\n    for char in string.gmatch(group,\
    \ \".\") do\n      if char == \"(\" then\n        level = level + 1\n      elseif\
    \ char == \")\" then\n        level = level - 1\n      end\n      if level > max_level\
    \ then\n        max_level = level\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend", "    local paren_groups = {}\n\
    \    for group in paren_string:gmatch(\"%b()\") do\n        local level = 0\n\
    \        local max_level = 0\n        for c in group:gmatch(\".\") do\n      \
    \      if c == \"(\" then\n                level = level + 1\n               \
    \ if level > max_level then\n                    max_level = level\n         \
    \       end\n            elseif c == \")\" then\n                level = level\
    \ - 1\n            end\n        end\n        table.insert(paren_groups, max_level)\n\
    \    end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch(\"%S+\") do\n        local max_nesting =\
    \ 0\n        local current_nesting = 0\n        for paren in paren_group:gmatch(\"\
    .\") do\n            if paren == \"(\" then\n                current_nesting =\
    \ current_nesting + 1\n            elseif paren == \")\" then\n              \
    \  current_nesting = current_nesting - 1\n            end\n            if current_nesting\
    \ > max_nesting then\n                max_nesting = current_nesting\n        \
    \    end\n        end\n        table.insert(paren_groups, max_nesting)\n    end\n\
    \    return paren_groups\nend", "  local paren_levels = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local paren_level = 0\n    local max_level\
    \ = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren == \"(\"\
    \ then\n        paren_level = paren_level + 1\n      elseif paren == \")\" then\n\
    \        paren_level = paren_level - 1\n      end\n      if paren_level > max_level\
    \ then\n        max_level = paren_level\n      end\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend", "    local max_nesting = 0\n\
    \    local current_nesting = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            current_nesting\
    \ = current_nesting + 1\n            if current_nesting > max_nesting then\n \
    \               max_nesting = current_nesting\n            end\n        elseif\
    \ char == ')' then\n            current_nesting = current_nesting - 1\n      \
    \  end\n    end\n    return max_nesting\nend", "  local paren_levels = {}\n  local\
    \ paren_level = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i,\
    \ i)\n    if char == '(' then\n      paren_level = paren_level + 1\n    elseif\
    \ char == ')' then\n      paren_level = paren_level - 1\n    end\n    paren_levels[i]\
    \ = paren_level\n  end\n  return paren_levels\nend", "    local max_nesting =\
    \ 0\n    local current_nesting = 0\n    local paren_stack = {}\n    local paren_string_len\
    \ = string.len(paren_string)\n    for i = 1, paren_string_len do\n        local\
    \ current_char = string.sub(paren_string, i, i)\n        if current_char == \"\
    (\" then\n            current_nesting = current_nesting + 1\n            table.insert(paren_stack,\
    \ current_char)\n        elseif current_char == \")\" then\n            current_nesting\
    \ = current_nesting - 1\n            table.remove(paren_stack)\n        end\n\
    \        if current_nesting > max_nesting then\n            max_nesting = current_nesting\n\
    \        end\n    end\n    return max_nesting\nend", "  local max_depth = 0\n\
    \  local depth = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      depth = depth + 1\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    elseif c == ')' then\n     \
    \ depth = depth - 1\n    end\n  end\n  return max_depth\nend", "  local paren_levels\
    \ = {}\n  local current_level = 0\n  local max_level = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ current_level = current_level + 1\n      max_level = math.max(max_level, current_level)\n\
    \    elseif char == ')' then\n      current_level = current_level - 1\n    end\n\
    \  end\n  return max_level\nend", "    local max_depth = 0\n    local depth =\
    \ 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n\
    \        if c == '(' then\n            depth = depth + 1\n            if depth\
    \ > max_depth then\n                max_depth = depth\n            end\n     \
    \   elseif c == ')' then\n            depth = depth - 1\n        end\n    end\n\
    \    return max_depth\nend", "  local max_nesting = 0\n  for paren_group in paren_string:gmatch(\"\
    %b()\") do\n    local nesting = 0\n    for c in paren_group:gmatch(\"%(\") do\n\
    \      nesting = nesting + 1\n    end\n    for c in paren_group:gmatch(\"%)\"\
    ) do\n      nesting = nesting - 1\n    end\n    if nesting > max_nesting then\n\
    \      max_nesting = nesting\n    end\n  end\n  return max_nesting\nend", "  \
    \  local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n        elseif char == ')' then\n\
    \            paren_level = paren_level - 1\n        end\n        paren_levels[i]\
    \ = paren_level\n    end\n    return paren_levels\nend", "    local depth = 0\n\
    \    local max_depth = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            depth = depth + 1\n            if\
    \ depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif c == ')' then\n            depth = depth - 1\n        end\n  \
    \  end\n    return max_depth\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for paren in paren_group:gmatch(\".\") do\n           \
    \ if paren == \"(\" then\n                nesting = nesting + 1\n            elseif\
    \ paren == \")\" then\n                nesting = nesting - 1\n            end\n\
    \            if nesting > max_nesting then\n                max_nesting = nesting\n\
    \            end\n        end\n        table.insert(paren_groups, max_nesting)\n\
    \    end\n    return paren_groups\nend", "    local max_depth = 0\n    local depth\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            depth = depth + 1\n            if\
    \ depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif c == ')' then\n            depth = depth - 1\n        end\n  \
    \  end\n    return max_depth\nend", "    local levels = {}\n    local level =\
    \ 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n\
    \        if c == '(' then\n            level = level + 1\n        elseif c ==\
    \ ')' then\n            level = level - 1\n        end\n        levels[i] = level\n\
    \    end\n    return levels\nend", "  local paren_levels = {}\n  local paren_level\
    \ = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n\
    \    if char == '(' then\n      paren_level = paren_level + 1\n    elseif char\
    \ == ')' then\n      paren_level = paren_level - 1\n    end\n    paren_levels[i]\
    \ = paren_level\n  end\n  return paren_levels\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%b()\") do\n    table.insert(paren_groups,\
    \ paren_group)\n  end\n  local max_nesting = 0\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    for _ in paren_group:gmatch(\"%(\") do\n    \
    \  nesting = nesting + 1\n    end\n    if nesting > max_nesting then\n      max_nesting\
    \ = nesting\n    end\n  end\n  return max_nesting\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ c = paren_string:sub(i, i)\n        if c == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif c == ')' then\n            paren_level = paren_level\
    \ - 1\n        end\n        paren_levels[i] = paren_level\n    end\n    return\
    \ paren_levels\nend", "  local paren_groups = {}\n  for group in paren_string:gmatch(\"\
    %b()\") do\n    local level = 0\n    local max_level = 0\n    for paren in group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      max_level =\
    \ math.max(max_level, level)\n    end\n    table.insert(paren_groups, max_level)\n\
    \  end\n  return paren_groups\nend", "  local max_depth = 0\n  local depth = 0\n\
    \  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if\
    \ char == '(' then\n      depth = depth + 1\n      if depth > max_depth then\n\
    \        max_depth = depth\n      end\n    elseif char == ')' then\n      depth\
    \ = depth - 1\n    end\n  end\n  return max_depth\nend", "  local paren_groups\
    \ = {}\n  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_depth\
    \ = 0\n    local depth = 0\n    for paren in paren_group:gmatch(\".\") do\n  \
    \    if paren == \"(\" then\n        depth = depth + 1\n      elseif paren ==\
    \ \")\" then\n        depth = depth - 1\n      end\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_nesting =\
    \ 0\n    local current_nesting = 0\n    for paren in paren_group:gmatch(\".\"\
    ) do\n      if paren == \"(\" then\n        current_nesting = current_nesting\
    \ + 1\n      elseif paren == \")\" then\n        current_nesting = current_nesting\
    \ - 1\n      end\n      if current_nesting > max_nesting then\n        max_nesting\
    \ = current_nesting\n      end\n    end\n    table.insert(paren_groups, max_nesting)\n\
    \  end\n  return paren_groups\nend", "    local depth = 0\n    local max_depth\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            depth = depth + 1\n            if\
    \ depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif c == ')' then\n            depth = depth - 1\n        end\n  \
    \  end\n    return max_depth\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n    local max_nesting = 0\n    local nesting\
    \ = 0\n    for paren in paren_group:gmatch(\".\") do\n      if paren == \"(\"\
    \ then\n        nesting = nesting + 1\n      elseif paren == \")\" then\n    \
    \    nesting = nesting - 1\n      end\n      if nesting > max_nesting then\n \
    \       max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local paren_levels =\
    \ {}\n    local paren_level = 0\n    local paren_start = 0\n    local paren_end\
    \ = 0\n    local paren_start_index = 0\n    local paren_end_index = 0\n    local\
    \ paren_string_length = string.len(paren_string)\n    for i = 1, paren_string_length\
    \ do\n        local char = string.sub(paren_string, i, i)\n        if char ==\
    \ \"(\" then\n            paren_level = paren_level + 1\n            if paren_level\
    \ == 1 then\n                paren_start = i\n                paren_start_index\
    \ = i\n            end\n        elseif char == \")\" then\n            paren_level\
    \ = paren_level - 1\n            if paren_level == 0 then\n                paren_end\
    \ = i\n                paren_end_index = i\n                table.insert(paren_levels,\
    \ {start = paren_start, end = paren_end, start_index = paren_start_index, end_index\
    \ = paren_end_index})\n            end\n        end\n    end\n    return paren_levels\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for c in paren_string:gmatch(\"\
    .\") do\n        if c == \"(\" then\n            paren_level = paren_level + 1\n\
    \        elseif c == \")\" then\n            paren_level = paren_level - 1\n \
    \       end\n        paren_levels[#paren_levels + 1] = paren_level\n    end\n\
    \    return paren_levels\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n        table.insert(paren_groups, paren_group)\n\
    \    end\n    local max_nesting = 0\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        for _ in paren_group:gmatch(\"%(\") do\n\
    \            nesting = nesting + 1\n        end\n        if nesting > max_nesting\
    \ then\n            max_nesting = nesting\n        end\n    end\n    return max_nesting\n\
    end", "    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            depth = depth + 1\n            if depth > max_depth then\n      \
    \          max_depth = depth\n            end\n        elseif char == ')' then\n\
    \            depth = depth - 1\n        end\n    end\n    return max_depth\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
