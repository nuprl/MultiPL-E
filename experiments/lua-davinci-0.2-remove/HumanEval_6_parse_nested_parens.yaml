name: HumanEval_6_parse_nested_parens
language: lua
prompt: "-- Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n-- For each of the group, output the deepest\
  \ level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
  \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n \
  \   lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
  \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local levels = {}\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         level = level + 1\n        elseif c == ')' then\n            level =\
    \ level - 1\n        end\n        levels[i] = level\n    end\n    return levels\n\
    end", "  local paren_groups = {}\n  for paren_group in string.gmatch(paren_string,\
    \ \"%S+\") do\n    local paren_stack = {}\n    local max_depth = 0\n    for paren\
    \ in string.gmatch(paren_group, \".\") do\n      if paren == \"(\" then\n    \
    \    table.insert(paren_stack, paren)\n        max_depth = math.max(max_depth,\
    \ #paren_stack)\n      elseif paren == \")\" then\n        table.remove(paren_stack)\n\
    \      end\n    end\n    table.insert(paren_groups, max_depth)\n  end\n  return\
    \ paren_groups\nend", "    local max_depth = 0\n    local depth = 0\n    for i\
    \ = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            depth = depth + 1\n            if depth > max_depth\
    \ then\n                max_depth = depth\n            end\n        elseif c ==\
    \ ')' then\n            depth = depth - 1\n        end\n    end\n    return max_depth\n\
    end", "    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\"\
    ) do\n        local max_level = 0\n        local level = 0\n        for c in group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                level = level + 1\n \
    \           elseif c == \")\" then\n                level = level - 1\n      \
    \      end\n            if level > max_level then\n                max_level =\
    \ level\n            end\n        end\n        table.insert(paren_groups, max_level)\n\
    \    end\n    return paren_groups\nend", "    local paren_levels = {}\n    local\
    \ paren_level = 0\n    local paren_start = 0\n    local paren_end = 0\n    local\
    \ paren_count = 0\n    local paren_max = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    paren_count = paren_count + 1\n            if paren_count > paren_max then\n\
    \                paren_max = paren_count\n            end\n            paren_level\
    \ = paren_level + 1\n            if paren_level == 1 then\n                paren_start\
    \ = i\n            end\n        elseif c == ')' then\n            paren_count\
    \ = paren_count - 1\n            paren_level = paren_level - 1\n            if\
    \ paren_level == 0 then\n                paren_end = i\n                table.insert(paren_levels,\
    \ paren_string:sub(paren_start, paren_end))\n            end\n        end\n  \
    \  end\n    return paren_levels, paren_max\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch(\"%S+\") do\n    local max_depth = 0\n\
    \    local depth = 0\n    for c in paren_group:gmatch(\".\") do\n      if c ==\
    \ \"(\" then\n        depth = depth + 1\n        if depth > max_depth then\n \
    \         max_depth = depth\n        end\n      elseif c == \")\" then\n     \
    \   depth = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "    local levels = {}\n    local level =\
    \ 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n\
    \        if c == '(' then\n            level = level + 1\n        elseif c ==\
    \ ')' then\n            levels[level] = (levels[level] or 0) + 1\n           \
    \ level = level - 1\n        end\n    end\n    return levels\nend", "  local max_depth\
    \ = 0\n  local depth = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      depth = depth + 1\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    elseif c == ')' then\n     \
    \ depth = depth - 1\n    end\n  end\n  return max_depth\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch(\"%S+\") do\n        local\
    \ max_nesting = 0\n        local current_nesting = 0\n        for paren in paren_group:gmatch(\"\
    .\") do\n            if paren == \"(\" then\n                current_nesting =\
    \ current_nesting + 1\n            elseif paren == \")\" then\n              \
    \  current_nesting = current_nesting - 1\n            end\n            if current_nesting\
    \ > max_nesting then\n                max_nesting = current_nesting\n        \
    \    end\n        end\n        table.insert(paren_groups, max_nesting)\n    end\n\
    \    return paren_groups\nend", "    local paren_levels = {}\n    local paren_level\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \      elseif c == ')' then\n            paren_level = paren_level - 1\n     \
    \   end\n        paren_levels[i] = paren_level\n    end\n    return paren_levels\n\
    end", "    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         depth = depth + 1\n            if depth > max_depth then\n         \
    \       max_depth = depth\n            end\n        elseif c == ')' then\n   \
    \         depth = depth - 1\n        end\n    end\n    return max_depth\nend",
  "    local levels = {}\n    local level = 0\n    for i = 1, #paren_string do\n \
    \       local ch = paren_string:sub(i, i)\n        if ch == '(' then\n       \
    \     level = level + 1\n        elseif ch == ')' then\n            levels[level]\
    \ = (levels[level] or 0) + 1\n            level = level - 1\n        end\n   \
    \ end\n    return levels\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch(\"%S+\") do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for paren in paren_group:gmatch(\".\") do\n           \
    \ if paren == \"(\" then\n                nesting = nesting + 1\n            elseif\
    \ paren == \")\" then\n                nesting = nesting - 1\n            end\n\
    \            if nesting > max_nesting then\n                max_nesting = nesting\n\
    \            end\n        end\n        table.insert(paren_groups, max_nesting)\n\
    \    end\n    return paren_groups\nend", "  local max_nesting = 0\n  for paren_group\
    \ in paren_string:gmatch(\"%b()\") do\n    local nesting = 0\n    for _ in paren_group:gmatch(\"\
    %(\") do\n      nesting = nesting + 1\n    end\n    max_nesting = math.max(max_nesting,\
    \ nesting)\n  end\n  return max_nesting\nend", "    local paren_groups = {}\n\
    \    for paren_group in paren_string:gmatch(\"%b()\") do\n        table.insert(paren_groups,\
    \ paren_group)\n    end\n    local max_nesting = 0\n    for _, paren_group in\
    \ ipairs(paren_groups) do\n        local nesting = 0\n        for _ in paren_group:gmatch(\"\
    %(\") do\n            nesting = nesting + 1\n        end\n        if nesting >\
    \ max_nesting then\n            max_nesting = nesting\n        end\n    end\n\
    \    return max_nesting\nend", "    local max_depth = 0\n    local depth = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            depth = depth + 1\n            if depth\
    \ > max_depth then\n                max_depth = depth\n            end\n     \
    \   elseif char == ')' then\n            depth = depth - 1\n        end\n    end\n\
    \    return max_depth\nend", "  local paren_groups = {}\n  for paren_group in\
    \ paren_string:gmatch(\"%b()\") do\n    table.insert(paren_groups, paren_group)\n\
    \  end\n  local max_nesting = 0\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local cur_nesting = 0\n    for c in paren_group:gmatch(\".\") do\n \
    \     if c == \"(\" then\n        cur_nesting = cur_nesting + 1\n      elseif\
    \ c == \")\" then\n        cur_nesting = cur_nesting - 1\n      end\n      max_nesting\
    \ = math.max(max_nesting, cur_nesting)\n    end\n  end\n  return max_nesting\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for i=1,#paren_string\
    \ do\n        local c = paren_string:sub(i,i)\n        if c == '(' then\n    \
    \        paren_level = paren_level + 1\n        elseif c == ')' then\n       \
    \     paren_level = paren_level - 1\n        elseif c == ' ' then\n          \
    \  paren_levels[#paren_levels+1] = paren_level\n            paren_level = 0\n\
    \        end\n    end\n    paren_levels[#paren_levels+1] = paren_level\n    return\
    \ paren_levels\nend", "    local max_nesting = 0\n    local current_nesting =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_nesting = current_nesting\
    \ + 1\n            if current_nesting > max_nesting then\n                max_nesting\
    \ = current_nesting\n            end\n        elseif char == ')' then\n      \
    \      current_nesting = current_nesting - 1\n        end\n    end\n    return\
    \ max_nesting\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"\
    %S+\") do\n    local paren_levels = {}\n    local level = 0\n    for paren in\
    \ paren_group:gmatch(\".\") do\n      if paren == \"(\" then\n        level =\
    \ level + 1\n      elseif paren == \")\" then\n        level = level - 1\n   \
    \   end\n      paren_levels[level] = (paren_levels[level] or 0) + 1\n    end\n\
    \    table.insert(paren_groups, paren_levels)\n  end\n  return paren_groups\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
