language: lua
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + v * -1\n      prod = prod\
    \ * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxk47xue.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmppxk47xue.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + -v\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpqv8i8_.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpdpqv8i8_.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + v * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n4zm1er.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp2n4zm1er.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for i = 1, #arr do\n        local n = arr[i]\n        if n == 0 then\n\
    \            prod = 0\n        elseif n < 0 then\n            sum = sum - n\n\
    \            prod = prod * -1\n        else\n            sum = sum + n\n     \
    \       prod = prod * 1\n        end\n    end\n    return sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw999fn0r.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpw999fn0r.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            prod =\
    \ prod * 1\n            sum = sum + arr[i]\n        elseif arr[i] < 0 then\n \
    \           prod = prod * -1\n            sum = sum + arr[i] * -1\n        else\n\
    \            prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfr8pp2d.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpyfr8pp2d.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for i = 1, #arr do\n    local n = arr[i]\n\
    \    if n == 0 then\n      prod = prod * 0\n    elseif n > 0 then\n      prod\
    \ = prod * 1\n      sum = sum + n\n    else\n      prod = prod * -1\n      sum\
    \ = sum - n\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + -v\n      prod = prod *\
    \ -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhstshfu.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfhstshfu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + math.abs(v)\n    else\n      prod = prod * 0\n    end\n  end\n  return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp431u86th.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp431u86th.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            sum = sum + v\n            prod = prod * 1\n\
    \        elseif v < 0 then\n            sum = sum + -v\n            prod = prod\
    \ * -1\n        else\n            prod = prod * 0\n        end\n    end\n    return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + math.abs(v)\n      prod\
    \ = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum *\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyyms80.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpuwyyms80.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + math.abs(v)\n            prod = prod * -1\n        else\n   \
    \         prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9gywd36.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpp9gywd36.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + -v\n      prod = prod *\
    \ -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhstshfu.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfhstshfu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for i = 1, #arr do\n    local x = arr[i]\n    if x > 0 then\n      sum = sum\
    \ + x\n      prod = prod * 1\n    elseif x < 0 then\n      sum = sum + -x\n  \
    \    prod = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv14ao91t.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpv14ao91t.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        sum = sum + math.abs(v)\n        prod = prod * (v == 0 and 1 or v / math.abs(v))\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_179031a.lua:21:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmp_179031a.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + math.abs(v)\n    else\n      prod = prod * 0\n    end\n  end\n  return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp431u86th.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp431u86th.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n      prod = prod\
    \ * 1\n      sum = sum + n\n    elseif n < 0 then\n      prod = prod * -1\n  \
    \    sum = sum + -n\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegc940ys.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpegc940ys.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + v * -1\n            prod = prod * -1\n        else\n        \
    \    prod = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbje_yqkh.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpbje_yqkh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + -v\n      prod = prod *\
    \ -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhstshfu.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfhstshfu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, n in ipairs(arr) do\n    if n > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + n\n    elseif n < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + -n\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47e90god.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp47e90god.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + v * -1\n            prod = prod * -1\n        else\n        \
    \    prod = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbje_yqkh.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpbje_yqkh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for i = 1, #arr do\n    if arr[i] > 0 then\n      sum = sum + arr[i]\n    \
    \  prod = prod * 1\n    elseif arr[i] < 0 then\n      sum = sum + arr[i] * -1\n\
    \      prod = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5uudxv3.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpf5uudxv3.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ then\n      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n  \
    \    prod = prod * -1\n      sum = sum + math.abs(v)\n    else\n      prod = prod\
    \ * 0\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + math.abs(v)\n            prod = prod * -1\n        else\n   \
    \         prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9gywd36.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpp9gywd36.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + math.abs(v)\n            prod = prod * -1\n        else\n   \
    \         prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9gywd36.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpp9gywd36.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + -v\n      prod = prod *\
    \ -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhstshfu.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfhstshfu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ then\n      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n  \
    \    prod = prod * -1\n      sum = sum + -v\n    else\n      prod = prod * 0\n\
    \    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = 0\n    else\n\
    \      sum = sum + math.abs(v)\n      prod = prod * (v > 0 and 1 or -1)\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgv5s491.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpsgv5s491.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v < 0 then\n      prod = prod * -1\n   \
    \ elseif v > 0 then\n      sum = sum + v\n    end\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2f732ue.lua:22:\
    \ expected: -9, actual: -5\nstack traceback:\n\t/tmp/tmpm2f732ue.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + math.abs(v)\n            prod = prod * -1\n        else\n   \
    \         prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9gywd36.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpp9gywd36.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + -v\n      prod = prod *\
    \ -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhstshfu.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfhstshfu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v == 0 then\n            prod\
    \ = prod * 0\n        elseif v > 0 then\n            sum = sum + v\n         \
    \   prod = prod * 1\n        else\n            sum = sum + math.abs(v)\n     \
    \       prod = prod * -1\n        end\n    end\n    return sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ic1qgbc.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp3ic1qgbc.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        if v < 0 then\n            prod\
    \ = prod * -1\n        elseif v > 0 then\n            sum = sum + v\n        end\n\
    \    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8fyi_e1y.lua:22:\
    \ expected: -9, actual: -5\nstack traceback:\n\t/tmp/tmp8fyi_e1y.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            prod = prod * 1\n            sum = sum + v\n\
    \        elseif v < 0 then\n            prod = prod * -1\n            sum = sum\
    \ + -v\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk779t2y.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxk779t2y.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            prod =\
    \ prod * 1\n            sum = sum + arr[i]\n        elseif arr[i] < 0 then\n \
    \           prod = prod * -1\n            sum = sum + arr[i] * -1\n        else\n\
    \            prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfr8pp2d.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpyfr8pp2d.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + -v\n      prod = prod *\
    \ -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhstshfu.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfhstshfu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    if arr[i] == 0 then\n      prod = prod * 0\n    elseif\
    \ arr[i] > 0 then\n      prod = prod * 1\n      sum = sum + arr[i]\n    else\n\
    \      prod = prod * -1\n      sum = sum + arr[i] * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpch_zvx22.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpch_zvx22.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            sum = sum\
    \ + arr[i]\n            prod = prod * 1\n        elseif arr[i] < 0 then\n    \
    \        sum = sum + arr[i] * -1\n            prod = prod * -1\n        else\n\
    \            prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpt0z4nn.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpxpt0z4nn.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for i, v in ipairs(arr) do\n        if v ~= 0 then\n            sum\
    \ = sum + math.abs(v)\n            prod = prod * (v > 0 and 1 or -1)\n       \
    \ end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwf3d6i3.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvwf3d6i3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for i = 1, #arr do\n    local sign = 0\n    if arr[i] > 0 then\n      sign\
    \ = 1\n    elseif arr[i] < 0 then\n      sign = -1\n    end\n    sum = sum + math.abs(arr[i])\n\
    \    prod = prod * sign\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphr65rsi8.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmphr65rsi8.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    if arr[i] > 0 then\n      prod = prod * 1\n      sum\
    \ = sum + arr[i]\n    elseif arr[i] < 0 then\n      prod = prod * -1\n      sum\
    \ = sum + arr[i] * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobmbolbo.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpobmbolbo.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v ~= 0 then\n            sum\
    \ = sum + math.abs(v)\n            prod = prod * (v / math.abs(v))\n        end\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6s0_3m8.lua:22:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmpy6s0_3m8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            prod = prod * 1\n            sum = sum + v\n\
    \        elseif v < 0 then\n            prod = prod * -1\n            sum = sum\
    \ + -v\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk779t2y.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxk779t2y.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ then\n      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n  \
    \    prod = prod * -1\n      sum = sum + -v\n    else\n      prod = prod * 0\n\
    \    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v < 0\
    \ then\n      prod = prod * -1\n      sum = sum + v * -1\n    elseif v > 0 then\n\
    \      sum = sum + v\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva9anpdd.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpva9anpdd.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + math.abs(v)\n            prod = prod * -1\n        else\n   \
    \         prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9gywd36.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpp9gywd36.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum, prod = 0, 1\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      sum = sum - v\n      prod = prod * -1\n    else\n      prod =\
    \ 0\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkb844oh.lua:27:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmptkb844oh.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            prod = prod * 1\n            sum = sum + v\n\
    \        elseif v < 0 then\n            prod = prod * -1\n            sum = sum\
    \ + -v\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk779t2y.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxk779t2y.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        if v == 0 then\n            prod\
    \ = 0\n        else\n            prod = prod * (v / math.abs(v))\n           \
    \ sum = sum + math.abs(v)\n        end\n    end\n    return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos37yv46.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpos37yv46.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = 0\n    elseif\
    \ v > 0 then\n      sum = sum + v\n    else\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fm82v88.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp9fm82v88.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            prod\
    \ = prod * 1\n            sum = sum + v\n        elseif v < 0 then\n         \
    \   prod = prod * -1\n            sum = sum + -v\n        end\n    end\n    return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wo54ks0.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3wo54ks0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, n in ipairs(arr) do\n    if n > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + n\n    elseif n < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + -n\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfuik7t2.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpkfuik7t2.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + -v\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd6nh6wt.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpnd6nh6wt.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + v * -1\n            prod = prod * -1\n        else\n        \
    \    prod = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbje_yqkh.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpbje_yqkh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphltoo3nl.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmphltoo3nl.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            sum = sum + v\n            prod = prod * 1\n\
    \        elseif v < 0 then\n            sum = sum + v * -1\n            prod =\
    \ prod * -1\n        else\n            prod = prod * 0\n        end\n    end\n\
    \    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum, prod = 0, 1\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      sum = sum - v\n      prod = prod * -1\n    else\n      prod =\
    \ 0\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkb844oh.lua:27:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmptkb844oh.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        sum = sum + math.abs(v)\n        prod = prod * math.sign(v)\n    end\n\
    \    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7jcmlihm.lua:12:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmp7jcmlihm.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp7jcmlihm.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    local n = arr[i]\n    if n == 0 then\n      return\
    \ nil\n    elseif n > 0 then\n      prod = prod * 1\n    else\n      prod = prod\
    \ * -1\n    end\n    sum = sum + math.abs(n)\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjs5lvfa.lua:27:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpqjs5lvfa.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _,v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + math.abs(v)\n      prod\
    \ = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum *\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplselruu0.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmplselruu0.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + math.abs(v)\n            prod = prod * -1\n        else\n   \
    \         prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9gywd36.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpp9gywd36.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        local sign = v > 0 and 1 or (v\
    \ < 0 and -1 or 0)\n        sum = sum + math.abs(v)\n        prod = prod * sign\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s23hbd8.lua:23:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp3s23hbd8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + v * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n4zm1er.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp2n4zm1er.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    if arr[i] > 0 then\n      prod = prod * 1\n      sum\
    \ = sum + arr[i]\n    elseif arr[i] < 0 then\n      prod = prod * -1\n      sum\
    \ = sum + arr[i] * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpat8c62fv.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpat8c62fv.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    local sign = v > 0 and 1 or v < 0 and -1 or\
    \ 0\n    sum = sum + math.abs(v)\n    prod = prod * sign\n  end\n  return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56q4tm2_.lua:23:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp56q4tm2_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = 0\n    elseif\
    \ v > 0 then\n      sum = sum + v\n    else\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fm82v88.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp9fm82v88.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for i = 1, #arr do\n    if arr[i] > 0 then\n      sum = sum + arr[i]\n    \
    \  prod = prod * 1\n    elseif arr[i] < 0 then\n      sum = sum + math.abs(arr[i])\n\
    \      prod = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcc9y_w8.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmprcc9y_w8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v ~= 0 then\n      sum = sum + math.abs(v)\n\
    \      prod = prod * math.sign(v)\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpda56oome.lua:12:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpda56oome.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpda56oome.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for i = 1, #arr do\n    local n = arr[i]\n\
    \    if n == 0 then\n      prod = prod * 0\n    elseif n > 0 then\n      prod\
    \ = prod * 1\n      sum = sum + n\n    else\n      prod = prod * -1\n      sum\
    \ = sum - n\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum, prod = 0, 1\n    for _, v in ipairs(arr) do\n        sum\
    \ = sum + math.abs(v)\n        prod = prod * (v == 0 and 1 or v / math.abs(v))\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5d30aeso.lua:20:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmp5d30aeso.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum\
    \ + math.abs(v)\n    if v > 0 then prod = prod * 1\n    elseif v < 0 then prod\
    \ = prod * -1\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6qcec5c.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf6qcec5c.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ then\n      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n  \
    \    prod = prod * -1\n      sum = sum + -v\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5mq3xz19.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5mq3xz19.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum, prod = 0, 1\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      sum = sum - v\n      prod = prod * -1\n    else\n      prod =\
    \ 0\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkb844oh.lua:27:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmptkb844oh.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v < 0\
    \ then\n      prod = prod * -1\n      sum = sum + v * -1\n    elseif v > 0 then\n\
    \      sum = sum + v\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva9anpdd.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpva9anpdd.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        if v < 0 then\n            sum = sum - v\n            prod = prod * -1\n\
    \        elseif v > 0 then\n            sum = sum + v\n            prod = prod\
    \ * 1\n        else\n            prod = prod * 0\n        end\n    end\n    return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        if v == 0 then\n            prod = prod * 0\n        else\n         \
    \   sum = sum + math.abs(v)\n            prod = prod * (v / math.abs(v))\n   \
    \     end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n    prod = prod *\
    \ (v == 0 and 1 or v / math.abs(v))\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ddp5pdy.lua:20:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmp7ddp5pdy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for i = 1, #arr do\n       \
    \ local n = arr[i]\n        if n > 0 then\n            prod = prod * 1\n     \
    \       sum = sum + n\n        elseif n < 0 then\n            prod = prod * -1\n\
    \            sum = sum + -n\n        else\n            prod = prod * 0\n     \
    \   end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n      sum = sum\
    \ + n\n      prod = prod * 1\n    elseif n < 0 then\n      sum = sum + -n\n  \
    \    prod = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjgxbny0.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpsjgxbny0.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            prod = prod * 1\n            sum = sum + v\n\
    \        elseif v < 0 then\n            prod = prod * -1\n            sum = sum\
    \ + -v\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk779t2y.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxk779t2y.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v == 0 then\n            prod\
    \ = 0\n        else\n            prod = prod * (v / math.abs(v))\n        end\n\
    \        sum = sum + math.abs(v)\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqbzwwbf.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqqbzwwbf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + -v\n      prod = prod *\
    \ -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhstshfu.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfhstshfu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            prod =\
    \ prod * 1\n            sum = sum + arr[i]\n        elseif arr[i] < 0 then\n \
    \           prod = prod * -1\n            sum = sum + math.abs(arr[i])\n     \
    \   else\n            prod = prod * 0\n        end\n    end\n    return sum *\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2rivcgm.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpn2rivcgm.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for i = 1, #arr do\n    local num = arr[i]\n\
    \    if num < 0 then\n      prod = prod * -1\n      sum = sum + num * -1\n   \
    \ elseif num > 0 then\n      sum = sum + num\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bpak6q5.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp1bpak6q5.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + v\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8o18b5a.lua:26:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpj8o18b5a.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v ==\
    \ 0 then\n      prod = prod * 0\n    elseif v > 0 then\n      prod = prod * 1\n\
    \      sum = sum + v\n    else\n      prod = prod * -1\n      sum = sum - v\n\
    \    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + math.abs(v)\n    else\n      prod = prod * 0\n    end\n  end\n  return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp431u86th.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp431u86th.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = 0\n    else\n\
    \      sum = sum + math.abs(v)\n      prod = prod * (v / math.abs(v))\n    end\n\
    \  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ty1c5bo.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp3ty1c5bo.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = 0\n    elseif\
    \ v > 0 then\n      sum = sum + v\n    else\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9kp5ozc.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpu9kp5ozc.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for i = 1, #arr do\n    local n = arr[i]\n    if n == 0 then\n      prod =\
    \ 0\n    elseif n < 0 then\n      prod = prod * -1\n    end\n    sum = sum + math.abs(n)\n\
    \  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vsbtujv.lua:27:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp5vsbtujv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    local sign = v > 0 and 1 or v < 0 and -1 or\
    \ 0\n    prod = prod * sign\n    sum = sum + math.abs(v)\n  end\n  return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghyhsexp.lua:23:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpghyhsexp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + math.abs(v)\n      prod\
    \ = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum *\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyyms80.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpuwyyms80.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + -v\n      prod = prod *\
    \ -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhstshfu.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfhstshfu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        if v == 0 then\n            prod\
    \ = prod * 0\n        elseif v > 0 then\n            prod = prod * 1\n       \
    \     sum = sum + v\n        else\n            prod = prod * -1\n            sum\
    \ = sum - v\n        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nhd1tgw.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp1nhd1tgw.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + v * -1\n      prod = prod\
    \ * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxk47xue.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmppxk47xue.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        local sign = v > 0 and 1 or (v < 0 and -1 or 0)\n        sum = sum +\
    \ math.abs(v)\n        prod = prod * sign\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            prod = prod * 1\n            sum = sum + v\n\
    \        elseif v < 0 then\n            prod = prod * -1\n            sum = sum\
    \ + v\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqz4a2f8.lua:25:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpjqz4a2f8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + v * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n4zm1er.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp2n4zm1er.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v == 0 then\n            prod\
    \ = prod * 0\n        elseif v > 0 then\n            sum = sum + v\n        else\n\
    \            sum = sum - v\n            prod = prod * -1\n        end\n    end\n\
    \    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92uv7ms5.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp92uv7ms5.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + math.abs(v)\n            prod = prod * -1\n        else\n   \
    \         prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9gywd36.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpp9gywd36.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + v * -1\n            prod = prod * -1\n        else\n        \
    \    prod = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbje_yqkh.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpbje_yqkh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + v * -1\n            prod = prod * -1\n        else\n        \
    \    prod = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbje_yqkh.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpbje_yqkh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for i = 1, #arr do\n       \
    \ local n = arr[i]\n        if n == 0 then\n            prod = prod * 0\n    \
    \    elseif n > 0 then\n            sum = sum + n\n        else\n            sum\
    \ = sum - n\n            prod = prod * -1\n        end\n    end\n    return sum\
    \ * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v ==\
    \ 0 then\n      prod = prod * 0\n    elseif v > 0 then\n      sum = sum + v\n\
    \    else\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n      prod = prod\
    \ * 1\n      sum = sum + n\n    elseif n < 0 then\n      prod = prod * -1\n  \
    \    sum = sum + n\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthgp0d4g.lua:27:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpthgp0d4g.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + v * -1\n            prod = prod * -1\n        else\n        \
    \    prod = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbje_yqkh.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpbje_yqkh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for i = 1, #arr do\n        local n = arr[i]\n        if n > 0 then\n\
    \            sum = sum + n\n            prod = prod * 1\n        elseif n < 0\
    \ then\n            sum = sum + math.abs(n)\n            prod = prod * -1\n  \
    \      else\n            prod = prod * 0\n        end\n    end\n    return sum\
    \ * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxs0g5js.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmplxs0g5js.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local product\
    \ = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n\
    \      product = product * 1\n    elseif v < 0 then\n      sum = sum + math.abs(v)\n\
    \      product = product * -1\n    else\n      product = product * 0\n    end\n\
    \  end\n  return sum * product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5ymmt04.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpu5ymmt04.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v == 0 then\n            prod\
    \ = 0\n        else\n            sum = sum + math.abs(v)\n            prod = prod\
    \ * (v / math.abs(v))\n        end\n    end\n    return sum * prod\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpir_lvaqz.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpir_lvaqz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for i, v in ipairs(arr) do\n    if v == 0 then\n      prod = prod * 0\n   \
    \ elseif v > 0 then\n      prod = prod * 1\n      sum = sum + v\n    else\n  \
    \    prod = prod * -1\n      sum = sum - v\n    end\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bqixt3k.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp_bqixt3k.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v < 0 then\n            prod = prod * -1\n            sum = sum +\
    \ v * -1\n        elseif v > 0 then\n            sum = sum + v\n        end\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdj0cbxi0.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdj0cbxi0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for i = 1, #arr do\n        local n = arr[i]\n        if n > 0 then\n\
    \            prod = prod * 1\n            sum = sum + n\n        elseif n < 0\
    \ then\n            prod = prod * -1\n            sum = sum + math.abs(n)\n  \
    \      else\n            prod = prod * 0\n        end\n    end\n    return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lvkado8.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp8lvkado8.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl6n8cba.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptl6n8cba.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v ~= 0 then\n      sum = sum + math.abs(v)\n\
    \      prod = prod * (v > 0 and 1 or -1)\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx8ves3d.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfx8ves3d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + -v\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpqv8i8_.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpdpqv8i8_.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v == 0 then\n            prod\
    \ = 0\n        else\n            prod = prod * (v / math.abs(v))\n        end\n\
    \        sum = sum + math.abs(v)\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqbzwwbf.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqqbzwwbf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum\
    \ + math.abs(v)\n    if v > 0 then prod = prod * 1\n    elseif v < 0 then prod\
    \ = prod * -1\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6qcec5c.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf6qcec5c.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v ~= 0 then\n      sum = sum + math.abs(v)\n\
    \      prod = prod * (v / math.abs(v))\n    end\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71q095mm.lua:22:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmp71q095mm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            prod = prod * 1\n            sum = sum + v\n\
    \        elseif v < 0 then\n            prod = prod * -1\n            sum = sum\
    \ + -v\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk779t2y.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxk779t2y.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = prod * 0\n   \
    \ elseif v > 0 then\n      sum = sum + v\n      prod = prod * 1\n    else\n  \
    \    sum = sum + -v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uw5p_vy.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp4uw5p_vy.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum, prod = 0, 1\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      sum = sum - v\n      prod = prod * -1\n    else\n      prod =\
    \ 0\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkb844oh.lua:27:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmptkb844oh.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum, prod = 0, 1\n    for _, v in ipairs(arr) do\n        sum\
    \ = sum + math.abs(v)\n        prod = prod * (v == 0 and 1 or v / math.abs(v))\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5d30aeso.lua:20:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmp5d30aeso.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            prod\
    \ = prod * 1\n            sum = sum + v\n        elseif v < 0 then\n         \
    \   prod = prod * -1\n            sum = sum + -v\n        end\n    end\n    return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpywsx0m.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpgpywsx0m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n      sum = sum\
    \ + n\n      prod = prod * 1\n    elseif n < 0 then\n      sum = sum + -n\n  \
    \    prod = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjgxbny0.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpsjgxbny0.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        if v == 0 then\n            prod\
    \ = 0\n        else\n            prod = prod * (v / math.abs(v))\n           \
    \ sum = sum + math.abs(v)\n        end\n    end\n    return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos37yv46.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpos37yv46.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            sum = sum + v\n            prod = prod * 1\n\
    \        elseif v < 0 then\n            sum = sum + -v\n            prod = prod\
    \ * -1\n        else\n            prod = prod * 0\n        end\n    end\n    return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + v\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqea3rmlr.lua:26:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpqea3rmlr.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + math.abs(v)\n            prod = prod * -1\n        else\n   \
    \         prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9gywd36.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpp9gywd36.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl6n8cba.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptl6n8cba.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = prod * 0\n   \
    \ elseif v > 0 then\n      sum = sum + v\n      prod = prod * 1\n    else\n  \
    \    sum = sum + math.abs(v)\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicic7164.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpicic7164.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = 0\n    else\n\
    \      sum = sum + math.abs(v)\n      prod = prod * math.sign(v)\n    end\n  end\n\
    \  return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbdaas8ag.lua:14:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpbdaas8ag.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpbdaas8ag.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for i, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + v * -1\n            prod = prod * -1\n        else\n        \
    \    prod = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlvbi2t5.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpxlvbi2t5.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for i, v in ipairs(arr) do\n        if v == 0 then\n            prod\
    \ = prod * 0\n        elseif v > 0 then\n            sum = sum + v\n         \
    \   prod = prod * 1\n        else\n            sum = sum + math.abs(v)\n     \
    \       prod = prod * -1\n        end\n    end\n    return sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfm0kydjf.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfm0kydjf.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + math.abs(v)\n      prod\
    \ = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum *\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyyms80.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpuwyyms80.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + -v\n      prod = prod *\
    \ -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhstshfu.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfhstshfu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v < 0\
    \ then\n      prod = prod * -1\n      sum = sum + v * -1\n    elseif v > 0 then\n\
    \      sum = sum + v\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva9anpdd.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpva9anpdd.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum\
    \ + math.abs(v)\n    if v > 0 then prod = prod * 1\n    elseif v < 0 then prod\
    \ = prod * -1\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6qcec5c.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf6qcec5c.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            prod = prod * 1\n            sum = sum + v\n\
    \        elseif v < 0 then\n            prod = prod * -1\n            sum = sum\
    \ + v * -1\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmabxzk_n.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmabxzk_n.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        prod = prod * (v > 0 and 1 or v < 0 and -1 or 0)\n        sum = sum +\
    \ math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            prod = prod * 1\n            sum = sum + v\n\
    \        elseif v < 0 then\n            prod = prod * -1\n            sum = sum\
    \ + math.abs(v)\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgbmtk17.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplgbmtk17.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            sum = sum + v\n            prod = prod * 1\n\
    \        elseif v < 0 then\n            sum = sum + -v\n            prod = prod\
    \ * -1\n        else\n            prod = prod * 0\n        end\n    end\n    return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for i, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + math.abs(v)\n            prod = prod * -1\n        else\n   \
    \         prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7j_6hspx.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp7j_6hspx.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + -v\n      prod = prod *\
    \ -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhstshfu.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfhstshfu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local s = 1\n  local m = 0\n  for _, v in ipairs(arr) do\n    if v == 0 then\n\
    \      s = 0\n    else\n      m = m + math.abs(v)\n    end\n  end\n  return s\
    \ * m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48vjaxlu.lua:23:\
    \ expected: -9, actual: 9\nstack traceback:\n\t/tmp/tmp48vjaxlu.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for i = 1, #arr do\n        local n = arr[i]\n        if n > 0 then\n\
    \            prod = prod * 1\n            sum = sum + n\n        elseif n < 0\
    \ then\n            prod = prod * -1\n            sum = sum + -n\n        else\n\
    \            prod = prod * 0\n        end\n    end\n    return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcj4mf1bc.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpcj4mf1bc.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + -v\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd6nh6wt.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpnd6nh6wt.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        local sign = math.sign(v)\n   \
    \     sum = sum + math.abs(v)\n        prod = prod * sign\n    end\n    return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa9muqp0k.lua:10:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpa9muqp0k.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpa9muqp0k.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        sum = sum + math.abs(v)\n        if v > 0 then prod = prod * 1\n    \
    \    elseif v < 0 then prod = prod * -1\n        end\n    end\n    return sum\
    \ * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpisi8ug9k.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpisi8ug9k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + math.abs(v)\n      prod\
    \ = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum *\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwyyms80.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpuwyyms80.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl6n8cba.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptl6n8cba.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for i, v in ipairs(arr) do\n    if v == 0 then\n      prod = prod * 0\n   \
    \ elseif v > 0 then\n      prod = prod * 1\n      sum = sum + v\n    else\n  \
    \    prod = prod * -1\n      sum = sum - v\n    end\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bqixt3k.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp_bqixt3k.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = 0\n    elseif\
    \ v > 0 then\n      sum = sum + v\n    else\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fm82v88.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp9fm82v88.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for i = 1, #arr do\n        local n = arr[i]\n        if n > 0 then\n\
    \            prod = prod * 1\n            sum = sum + n\n        elseif n < 0\
    \ then\n            prod = prod * -1\n            sum = sum + -n\n        else\n\
    \            prod = prod * 0\n        end\n    end\n    return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcj4mf1bc.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpcj4mf1bc.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n      sum = sum\
    \ + n\n      prod = prod * 1\n    elseif n < 0 then\n      sum = sum + n * -1\n\
    \      prod = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxxnbcsf.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmprxxnbcsf.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = prod * 0\n   \
    \ elseif v > 0 then\n      sum = sum + v\n      prod = prod * 1\n    else\n  \
    \    sum = sum + -v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uw5p_vy.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp4uw5p_vy.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v ~= 0 then\n            sum\
    \ = sum + math.abs(v)\n            prod = prod * (v / math.abs(v))\n        end\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6s0_3m8.lua:22:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmpy6s0_3m8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v < 0\
    \ then\n      prod = prod * -1\n      sum = sum + v * -1\n    elseif v > 0 then\n\
    \      sum = sum + v\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva9anpdd.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpva9anpdd.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            prod =\
    \ prod * 1\n            sum = sum + arr[i]\n        elseif arr[i] < 0 then\n \
    \           prod = prod * -1\n            sum = sum + arr[i] * -1\n        else\n\
    \            prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfr8pp2d.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpyfr8pp2d.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n      prod = prod\
    \ * 1\n      sum = sum + n\n    elseif n < 0 then\n      prod = prod * -1\n  \
    \    sum = sum + -n\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegc940ys.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpegc940ys.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            sum = sum + v\n            prod = prod * 1\n\
    \        elseif v < 0 then\n            sum = sum + -v\n            prod = prod\
    \ * -1\n        else\n            prod = prod * 0\n        end\n    end\n    return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v < 0\
    \ then\n      prod = prod * -1\n      sum = sum + v * -1\n    elseif v > 0 then\n\
    \      sum = sum + v\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva9anpdd.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpva9anpdd.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            prod\
    \ = prod * 1\n            sum = sum + v\n        elseif v < 0 then\n         \
    \   prod = prod * -1\n            sum = sum + -v\n        end\n    end\n    return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpywsx0m.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpgpywsx0m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        sum = sum + math.abs(v)\n        prod = prod * math.sign(v)\n    end\n\
    \    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7jcmlihm.lua:12:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmp7jcmlihm.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp7jcmlihm.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      sum = sum + -v\n      prod = prod *\
    \ -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhstshfu.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfhstshfu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n      sum = sum\
    \ + n\n      prod = prod * 1\n    elseif n < 0 then\n      sum = sum + -n\n  \
    \    prod = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjgxbny0.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpsjgxbny0.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + v * -1\n            prod = prod * -1\n        else\n        \
    \    prod = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbje_yqkh.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpbje_yqkh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v ~= 0 then\n      sum = sum + math.abs(v)\n\
    \      prod = prod * (v > 0 and 1 or -1)\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx8ves3d.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfx8ves3d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v ~= 0 then\n            sum\
    \ = sum + math.abs(v)\n            prod = prod * (v / math.abs(v))\n        end\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6s0_3m8.lua:22:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmpy6s0_3m8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    if arr[i] > 0 then\n      prod = prod * 1\n      sum\
    \ = sum + arr[i]\n    elseif arr[i] < 0 then\n      prod = prod * -1\n      sum\
    \ = sum + arr[i] * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobmbolbo.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpobmbolbo.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + math.abs(v)\n            prod = prod * -1\n        else\n   \
    \         prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9gywd36.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpp9gywd36.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v == 0 then\n            prod\
    \ = 0\n        else\n            sum = sum + math.abs(v)\n            prod = prod\
    \ * (v / math.abs(v))\n        end\n    end\n    return sum * prod\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpir_lvaqz.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpir_lvaqz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local s = 1\n    local p = 1\n    for _, v in ipairs(arr) do\n    \
    \    s = s + math.abs(v)\n        if v ~= 0 then p = p * (v / math.abs(v)) end\n\
    \    end\n    return s * p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25m7_8tl.lua:20:\
    \ expected: -9, actual: -10.0\nstack traceback:\n\t/tmp/tmp25m7_8tl.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v < 0 then\n      prod = prod * -1\n   \
    \ elseif v > 0 then\n      sum = sum + v\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1vsclxv.lua:22:\
    \ expected: -9, actual: -5\nstack traceback:\n\t/tmp/tmpv1vsclxv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local prod = 1\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            prod\
    \ = prod * 1\n            sum = sum + v\n        elseif v < 0 then\n         \
    \   prod = prod * -1\n            sum = sum + v * -1\n        end\n    end\n \
    \   return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrzl24kf.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfrzl24kf.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = prod * 0\n   \
    \ elseif v > 0 then\n      sum = sum + v\n      prod = prod * 1\n    else\n  \
    \    sum = sum + math.abs(v)\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicic7164.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpicic7164.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  if #arr == 0 then return nil end\n\
    \  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n    \
    \  prod = prod * -1\n    else\n      prod = 0\n    end\n  end\n  return sum *\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl6n8cba.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptl6n8cba.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl6n8cba.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptl6n8cba.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + v * -1\n            prod = prod * -1\n        else\n        \
    \    prod = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbje_yqkh.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpbje_yqkh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + math.abs(v)\n            prod = prod * -1\n        else\n   \
    \         prod = prod * 0\n        end\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9gywd36.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpp9gywd36.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl6n8cba.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptl6n8cba.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v < 0 then\n            prod = prod * -1\n            sum = sum +\
    \ v * -1\n        elseif v > 0 then\n            sum = sum + v\n        end\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdj0cbxi0.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdj0cbxi0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl6n8cba.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptl6n8cba.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _,v in ipairs(arr) do\n\
    \        prod = prod * (v > 0 and 1 or v < 0 and -1 or 0)\n        sum = sum +\
    \ math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    if #arr == 0 then return nil\
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            prod = prod * 1\n            sum = sum + v\n\
    \        elseif v < 0 then\n            prod = prod * -1\n            sum = sum\
    \ + v * -1\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmabxzk_n.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmabxzk_n.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = prod * 0\n   \
    \ elseif v > 0 then\n      sum = sum + v\n      prod = prod * 1\n    else\n  \
    \    sum = sum + math.abs(v)\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicic7164.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpicic7164.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\nlocal function prod_signs(arr)\n    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n            prod = prod * 1\n        elseif v < 0 then\n        \
    \    sum = sum + -v\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqil9hcyi.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqil9hcyi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979851
