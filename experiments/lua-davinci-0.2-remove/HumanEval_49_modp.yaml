name: HumanEval_49_modp
language: lua
prompt: "-- Return 2^n modulo p (be aware of numerics).\nlocal function modp(n, p)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
  \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
  \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
  \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
  \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local r = 1\n    while n > 0 do\n        if n % 2 == 1 then\n \
    \           r = (r * 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n\
    \    return r\nend", "  local r = 1\n  while n > 0 do\n    if n % 2 == 1 then\n\
    \      r = (r * 2) % p\n    end\n    n = math.floor(n / 2)\n  end\n  return r\n\
    end", "    local r = 1\n    while n > 0 do\n        if n % 2 == 1 then\n     \
    \       r = (r * 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n\
    \    return r\nend", "\tlocal res = 1\n\tfor i = 1, n do\n\t\tres = (res * 2)\
    \ % p\n\tend\n\treturn res\nend", "  local r = 1\n  for i = 1, n do\n    r = (r\
    \ * 2) % p\n  end\n  return r\nend", "    local r = 1\n    for i = 1, n do\n \
    \       r = (r * 2) % p\n    end\n    return r\nend", "  local r = 1\n  for i\
    \ = 1, n do\n    r = (r * 2) % p\n  end\n  return r\nend", "\tlocal r = 1\n\t\
    while n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tr = (r * 2) % p\n\t\tend\n\t\tn\
    \ = math.floor(n / 2)\n\tend\n\treturn r\nend", "    local x = 1\n    local y\
    \ = 2\n    while n > 0 do\n        if n % 2 == 1 then\n            x = (x * y)\
    \ % p\n        end\n        y = (y * y) % p\n        n = math.floor(n / 2)\n \
    \   end\n    return x\nend", "\tlocal r = 1\n\twhile n > 0 do\n\t\tif n % 2 ==\
    \ 1 then\n\t\t\tr = (r * 2) % p\n\t\tend\n\t\tn = math.floor(n / 2)\n\tend\n\t\
    return r\nend", "    local res = 1\n    for i = 1, n do\n        res = (res *\
    \ 2) % p\n    end\n    return res\nend", "    local r = 1\n    for i = 1, n do\n\
    \        r = (r * 2) % p\n    end\n    return r\nend", "  local res = 1\n  local\
    \ x = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * x) % p\n\
    \    end\n    x = (x * x) % p\n    n = math.floor(n / 2)\n  end\n  return res\n\
    end", "\tlocal r = 1\n\tfor i = 1, n do\n\t\tr = (r * 2) % p\n\tend\n\treturn\
    \ r\nend", "\tlocal res = 1\n\tlocal x = 2\n\twhile n > 0 do\n\t\tif n % 2 ==\
    \ 1 then\n\t\t\tres = (res * x) % p\n\t\tend\n\t\tn = math.floor(n / 2)\n\t\t\
    x = (x * x) % p\n\tend\n\treturn res\nend", "  local r = 1\n  while n > 0 do\n\
    \    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n    n = math.floor(n\
    \ / 2)\n  end\n  return r\nend", "\tlocal res = 1\n\tfor i = 1, n do\n\t\tres\
    \ = (res * 2) % p\n\tend\n\treturn res\nend", "  local res = 1\n  while n > 0\
    \ do\n    if n % 2 == 1 then\n      res = (res * 2) % p\n    end\n    n = math.floor(n\
    \ / 2)\n    if n > 0 then\n      res = (res * res) % p\n    end\n  end\n  return\
    \ res\nend", "    local res = 1\n    for i = 1, n do\n        res = (res * 2)\
    \ % p\n    end\n    return res\nend", "\tlocal r = 1\n\twhile n > 0 do\n\t\tif\
    \ n % 2 == 1 then\n\t\t\tr = (r * 2) % p\n\t\tend\n\t\tn = math.floor(n / 2)\n\
    \tend\n\treturn r\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
