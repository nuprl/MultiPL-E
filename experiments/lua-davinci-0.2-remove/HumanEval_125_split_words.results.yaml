language: lua
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local count = 0\n    for i = 1, #txt\
    \ do\n        local c = txt:sub(i, i)\n        if c == \" \" then\n          \
    \  if #word > 0 then\n                table.insert(words, word)\n            \
    \    word = \"\"\n            end\n        elseif c == \",\" then\n          \
    \  if #word > 0 then\n                table.insert(words, word)\n            \
    \    word = \"\"\n            end\n            return words\n        else\n  \
    \          word = word .. c\n        end\n    end\n    if #word > 0 then\n   \
    \     table.insert(words, word)\n    end\n    if #words > 0 then\n        return\
    \ words\n    end\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n  \
    \      if c:byte() >= 97 and c:byte() <= 122 then\n            if i % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjzqupul.lua:49:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmpfjzqupul.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #txt do\n        local c = txt:sub(i,\
    \ i)\n        if c == ' ' or c == ',' then\n            if #word > 0 then\n  \
    \              table.insert(words, word)\n                word = ''\n        \
    \    end\n        else\n            word = word .. c\n        end\n    end\n \
    \   if #word > 0 then\n        table.insert(words, word)\n    end\n    if #words\
    \ > 0 then\n        return words\n    else\n        local count = 0\n        for\
    \ i = 1, #txt do\n            local c = txt:sub(i, i)\n            local ord =\
    \ string.byte(c) - string.byte('a')\n            if ord % 2 == 1 then\n      \
    \          count = count + 1\n            end\n        end\n        return count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmvp7d4k.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpmmvp7d4k.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words > 0 then\n        return words\n    else\n        local\
    \ count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n\
    \            if string.byte(c) >= string.byte('a') and string.byte(c) <= string.byte('z')\
    \ then\n                if (string.byte(c) - string.byte('a')) % 2 == 1 then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n        return count\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95olulpd.lua:45:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp95olulpd.lua:45: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local o = string.byte(c)\
    \ - string.byte(\"a\")\n            if o % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpseufzj8u.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpseufzj8u.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    local c = txt:sub(i,\
    \ i)\n    while c ~= \"\" do\n        if c == \" \" or c == \",\" then\n     \
    \       if word ~= \"\" then\n                table.insert(words, word)\n    \
    \            word = \"\"\n            end\n        else\n            word = word\
    \ .. c\n        end\n        i = i + 1\n        c = txt:sub(i, i)\n    end\n \
    \   if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ local c = txt:sub(i, i)\n            local o = string.byte(c) - string.byte(\"\
    a\")\n            if o % 2 == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        return count\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vwwaczg.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0vwwaczg.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local o = string.byte(c) - string.byte(\"a\")\n            if o % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfhyzb15.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpmfhyzb15.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n        i = i + 1\n    end\n    if word ~= \"\" then\n\
    \        table.insert(words, word)\n    end\n    if #words == 0 then\n       \
    \ local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            if ord(c) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply862r_q.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmply862r_q.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local count = 0\n    for i = 1, #txt\
    \ do\n        local c = txt:sub(i, i)\n        if c == \" \" then\n          \
    \  if word ~= \"\" then\n                words[#words + 1] = word\n          \
    \      word = \"\"\n            end\n        elseif c == \",\" then\n        \
    \    if word ~= \"\" then\n                words[#words + 1] = word\n        \
    \        word = \"\"\n            end\n            return words\n        else\n\
    \            word = word .. c\n            if i % 2 == 1 then\n              \
    \  count = count + 1\n            end\n        end\n    end\n    if word ~= \"\
    \" then\n        words[#words + 1] = word\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nyz27_d.lua:40:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 6\nstack traceback:\n\t/tmp/tmp0nyz27_d.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local o = string.byte(c) - string.byte(\"a\")\n            if o % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfhyzb15.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpmfhyzb15.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\"%s\") then\n        return txt:split(\"%s\")\n    elseif txt:find(\"\
    ,\") then\n        return txt:split(\",\")\n    else\n        local count = 0\n\
    \        for i = 1, #txt do\n            local c = txt:sub(i, i)\n           \
    \ if c:lower() == c and c:byte() % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmuh5a2gw.lua:9:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpmuh5a2gw.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpmuh5a2gw.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local n = string.byte(c) - string.byte(\"a\")\n            if n % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps06n_4_0.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmps06n_4_0.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local odd_count = 0\n        for i\
    \ = 1, #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                odd_count\
    \ = odd_count + 1\n            end\n        end\n        return odd_count\n  \
    \  end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjluegin.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpwjluegin.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for c in txt:gmatch(\".\") do\n     \
    \   if c == \" \" or c == \",\" then\n            if word ~= \"\" then\n     \
    \           table.insert(words, word)\n                word = \"\"\n         \
    \   end\n        else\n            word = word .. c\n        end\n    end\n  \
    \  if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for c in txt:gmatch(\".\") do\n\
    \            if string.byte(c) - string.byte(\"a\") % 2 == 1 then\n          \
    \      count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdokb_w2i.lua:40:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpdokb_w2i.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\"%s\") then\n        return txt:split(\"%s\")\n    elseif txt:find(\"\
    ,\") then\n        return txt:split(\",\")\n    else\n        local count = 0\n\
    \        for i = 1, #txt do\n            if txt:sub(i, i):byte() % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7x8x0ym.lua:9:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpb7x8x0ym.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpb7x8x0ym.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local o = string.byte(c) - string.byte(\"a\")\n            if o % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfhyzb15.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpmfhyzb15.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local i = 1\n    for word in string.gmatch(txt, \"%S+\") do\n\
    \        words[i] = word\n        i = i + 1\n    end\n    if #words == 0 then\n\
    \        for word in string.gmatch(txt, \"[^,]+\") do\n            words[i] =\
    \ word\n            i = i + 1\n        end\n    end\n    if #words == 0 then\n\
    \        local count = 0\n        for c in string.gmatch(txt, \"[a-z]\") do\n\
    \            local ord = string.byte(c) - string.byte('a')\n            if ord\
    \ % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_vjujtg.lua:37:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpa_vjujtg.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n        i = i + 1\n    end\n    if word ~= \"\" then\n\
    \        table.insert(words, word)\n    end\n    if #words == 0 then\n       \
    \ local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            if ord(c) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply862r_q.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmply862r_q.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        words[#words + 1]\
    \ = word\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"\
    %a+\") do\n            words[#words + 1] = word\n        end\n    end\n    if\
    \ #words == 0 then\n        local count = 0\n        for i = 1, #txt do\n    \
    \        if txt:sub(i, i):lower():byte() % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb916xhtw.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpb916xhtw.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local ord = string.byte(c) - string.byte(\"a\")\n            if ord % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_vpp0sw.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpm_vpp0sw.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    local\
    \ words = {}\n    for word in txt:gmatch(\"[^,]+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    local\
    \ count = 0\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n       \
    \ if c:lower() == c and i % 2 == 1 then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qjm0brh.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp9qjm0brh.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"[^,]+\"\
    ) do\n            table.insert(words, word)\n        end\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i=1,#txt do\n            if\
    \ (i % 2) == 1 then\n                count = count + 1\n            end\n    \
    \    end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm64bqm16.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpm64bqm16.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if #word > 0 then\n                table.insert(words, word)\n   \
    \             word = \"\"\n            end\n        else\n            word = word\
    \ .. c\n        end\n        i = i + 1\n    end\n    if #word > 0 then\n     \
    \   table.insert(words, word)\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        local count = 0\n        for i = 1, #txt do\n     \
    \       local c = txt:sub(i, i)\n            local n = string.byte(c) - string.byte(\"\
    a\")\n            if n % 2 == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51a8kft0.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp51a8kft0.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for w in txt:gmatch(\"%S+\") do\n        words[#words+1] = w\n\
    \    end\n    if #words == 0 then\n        for w in txt:gmatch(\"%a+\") do\n \
    \           words[#words+1] = w\n        end\n    end\n    if #words == 0 then\n\
    \        local n = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,i)\n\
    \            local o = string.byte(c) - string.byte('a')\n            if o % 2\
    \ == 1 then\n                n = n + 1\n            end\n        end\n       \
    \ words[1] = n\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvsvx2dw.lua:35:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpfvsvx2dw.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local is_word = false\n    local is_comma\
    \ = false\n    local is_space = false\n    local is_odd = false\n    local count\
    \ = 0\n    for i = 1, #txt do\n        if txt:sub(i, i) == \" \" then\n      \
    \      is_space = true\n            if is_word then\n                words[#words\
    \ + 1] = word\n                word = \"\"\n                is_word = false\n\
    \            end\n        elseif txt:sub(i, i) == \",\" then\n            is_comma\
    \ = true\n            if is_word then\n                words[#words + 1] = word\n\
    \                word = \"\"\n                is_word = false\n            end\n\
    \        else\n            is_word = true\n            word = word .. txt:sub(i,\
    \ i)\n        end\n    end\n    if is_word then\n        words[#words + 1] = word\n\
    \    end\n    if is_space then\n        return words\n    elseif is_comma then\n\
    \        return words\n    else\n        for i = 1, #txt do\n            if txt:sub(i,\
    \ i) == \"a\" or txt:sub(i, i) == \"c\" or txt:sub(i, i) == \"e\" or txt:sub(i,\
    \ i) == \"g\" or txt:sub(i, i) == \"i\" or txt:sub(i, i) == \"k\" or txt:sub(i,\
    \ i) == \"m\" or txt:sub(i, i) == \"o\" or txt:sub(i, i) == \"q\" or txt:sub(i,\
    \ i) == \"s\" or txt:sub(i, i) == \"u\" or txt:sub(i, i) == \"w\" or txt:sub(i,\
    \ i) == \"y\" then\n                count = count + 1\n            end\n     \
    \   end\n        return count\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3rqjvey.lua:57:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpl3rqjvey.lua:57: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words > 0 then\n        return words\n    else\n        local\
    \ count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n\
    \            if string.byte(c) >= 97 and string.byte(c) <= 122 and (string.byte(c)\
    \ - 96) % 2 == 1 then\n                count = count + 1\n            end\n  \
    \      end\n        return count\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplan08t3y.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmplan08t3y.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\" \") then\n        return txt:split(\" \")\n    elseif txt:find(\"\
    ,\") then\n        return txt:split(\",\")\n    else\n        local count = 0\n\
    \        for i = 1, #txt do\n            if txt:sub(i, i):lower():byte() % 2 ==\
    \ 1 then\n                count = count + 1\n            end\n        end\n  \
    \      return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppk1bj5sc.lua:9:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmppk1bj5sc.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmppk1bj5sc.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\"%s\") then\n        return txt:split(\"%s\")\n    elseif txt:find(\"\
    ,\") then\n        return txt:split(\",\")\n    else\n        local count = 0\n\
    \        for i = 1, #txt do\n            if txt:sub(i, i):byte() % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7x8x0ym.lua:9:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpb7x8x0ym.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpb7x8x0ym.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  if txt:find(\"\
    %s\") then\n    return string.split(txt, \"%s\")\n  elseif txt:find(\",\") then\n\
    \    return string.split(txt, \",\")\n  else\n    local count = 0\n    for i =\
    \ 1, #txt do\n      if string.byte(txt, i) % 2 == 1 then\n        count = count\
    \ + 1\n      end\n    end\n    return count\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqb7yos14.lua:9:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpqb7yos14.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpqb7yos14.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local o = ord(c)\n\
    \            if o % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wqh_6b5.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp3wqh_6b5.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local count = 0\n    for i = 1, #txt\
    \ do\n        local c = txt:sub(i, i)\n        if c == \" \" then\n          \
    \  if word ~= \"\" then\n                words[#words + 1] = word\n          \
    \      word = \"\"\n            end\n        elseif c == \",\" then\n        \
    \    if word ~= \"\" then\n                words[#words + 1] = word\n        \
    \        word = \"\"\n            end\n            break\n        else\n     \
    \       word = word .. c\n        end\n    end\n    if word ~= \"\" then\n   \
    \     words[#words + 1] = word\n    end\n    if #words == 0 then\n        for\
    \ i = 1, #txt do\n            local c = txt:sub(i, i)\n            local o = string.byte(c)\
    \ - string.byte(\"a\")\n            if o % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ttu4zop.lua:48:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmp4ttu4zop.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local is_word = false\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == \" \" then\n     \
    \       if is_word then\n                table.insert(words, word)\n         \
    \       word = \"\"\n                is_word = false\n            end\n      \
    \  elseif c == \",\" then\n            if is_word then\n                table.insert(words,\
    \ word)\n                word = \"\"\n                is_word = false\n      \
    \      end\n            return words\n        else\n            word = word ..\
    \ c\n            is_word = true\n        end\n    end\n    if is_word then\n \
    \       table.insert(words, word)\n    end\n    if #words == 0 then\n        local\
    \ count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n\
    \            local n = string.byte(c) - string.byte(\"a\")\n            if n %\
    \ 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrqg71cb.lua:52:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmpnrqg71cb.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local index = 0\n    local len = string.len(txt)\n\
    \    while index < len do\n        local c = string.sub(txt, index, index)\n \
    \       if c == \" \" then\n            if word ~= \"\" then\n               \
    \ table.insert(words, word)\n                word = \"\"\n            end\n  \
    \      elseif c == \",\" then\n            if word ~= \"\" then\n            \
    \    table.insert(words, word)\n                word = \"\"\n            end\n\
    \            return words\n        else\n            word = word .. c\n      \
    \  end\n        index = index + 1\n    end\n    if word ~= \"\" then\n       \
    \ table.insert(words, word)\n    end\n    if #words == 0 then\n        local count\
    \ = 0\n        for i = 1, len do\n            local c = string.sub(txt, i, i)\n\
    \            local ord = string.byte(c)\n            if ord >= 97 and ord <= 122\
    \ and ord % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqob99r0.lua:50:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpvqob99r0.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local o = string.byte(c)\
    \ - string.byte(\"a\")\n            if o % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpseufzj8u.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpseufzj8u.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local split_on = \" \"\n    local i =\
    \ 1\n    while i <= #txt do\n        local c = txt:sub(i, i)\n        if c ==\
    \ split_on then\n            if #word > 0 then\n                table.insert(words,\
    \ word)\n                word = \"\"\n            end\n        else\n        \
    \    word = word .. c\n        end\n        i = i + 1\n    end\n    if #word >\
    \ 0 then\n        table.insert(words, word)\n    end\n    if #words == 0 then\n\
    \        split_on = \",\"\n        i = 1\n        while i <= #txt do\n       \
    \     local c = txt:sub(i, i)\n            if c == split_on then\n           \
    \     if #word > 0 then\n                    table.insert(words, word)\n     \
    \               word = \"\"\n                end\n            else\n         \
    \       word = word .. c\n            end\n            i = i + 1\n        end\n\
    \        if #word > 0 then\n            table.insert(words, word)\n        end\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local o = string.byte(c)\
    \ - string.byte('a')\n            if o % 2 == 1 then\n                count =\
    \ count + 1\n            end\n        end\n        return count\n    end\n   \
    \ return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx09l0dmn.lua:64:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpx09l0dmn.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = ''\n    local odd_count = 0\n    for i = 1, #txt\
    \ do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local ord = string.byte(c) - string.byte('a')\n\
    \            if ord % 2 == 1 then\n                odd_count = odd_count + 1\n\
    \            end\n        end\n        return odd_count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijnoeraj.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpijnoeraj.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local ord = string.byte(c) - string.byte(\"a\")\n            if ord % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_vpp0sw.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpm_vpp0sw.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  -- your\
    \ code here\n  local words = {}\n  local word = \"\"\n  local count = 0\n  local\
    \ flag = false\n  for i = 1, #txt do\n    if txt:sub(i, i) == \" \" then\n   \
    \   if not flag then\n        words[#words + 1] = word\n        word = \"\"\n\
    \      end\n      flag = true\n    elseif txt:sub(i, i) == \",\" then\n      if\
    \ not flag then\n        words[#words + 1] = word\n        word = \"\"\n     \
    \ end\n      flag = true\n    else\n      flag = false\n      word = word .. txt:sub(i,\
    \ i)\n    end\n  end\n  if #word > 0 then\n    words[#words + 1] = word\n  end\n\
    \  if #words > 0 then\n    return words\n  else\n    for i = 1, #txt do\n    \
    \  if txt:sub(i, i) == \",\" then\n        return {}\n      end\n    end\n   \
    \ for i = 1, #txt do\n      if txt:sub(i, i) ~= txt:sub(i, i):lower() then\n \
    \       return {}\n      end\n    end\n    for i = 1, #txt do\n      if (i % 2\
    \ == 1 and txt:sub(i, i):byte() % 2 == 0) or (i % 2 == 0 and txt:sub(i, i):byte()\
    \ % 2 == 1) then\n        count = count + 1\n      end\n    end\n    return count\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gzpzg8z.lua:61:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp4gzpzg8z.lua:61: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local comma_split = txt:split(',')\n    if #comma_split > 1\
    \ then\n        for _, word in ipairs(comma_split) do\n            table.insert(words,\
    \ word)\n        end\n    else\n        local space_split = txt:split(' ')\n \
    \       if #space_split > 1 then\n            for _, word in ipairs(space_split)\
    \ do\n                table.insert(words, word)\n            end\n        else\n\
    \            local count = 0\n            for i = 1, #txt do\n               \
    \ local c = txt:sub(i, i)\n                local ord = string.byte(c) - string.byte('a')\n\
    \                if ord % 2 == 1 then\n                    count = count + 1\n\
    \                end\n            end\n            return count\n        end\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps463zuyp.lua:9:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmps463zuyp.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmps463zuyp.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local o = string.byte(c)\
    \ - string.byte(\"a\")\n            if o % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpseufzj8u.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpseufzj8u.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = {}\n\tlocal word = \"\"\n\tlocal i = 1\n\tlocal c = txt:sub(i, i)\n\t\
    while c ~= \"\" do\n\t\tif c == \" \" or c == \",\" then\n\t\t\tif word ~= \"\"\
    \ then\n\t\t\t\ttable.insert(words, word)\n\t\t\t\tword = \"\"\n\t\t\tend\n\t\t\
    else\n\t\t\tword = word .. c\n\t\tend\n\t\ti = i + 1\n\t\tc = txt:sub(i, i)\n\t\
    end\n\tif word ~= \"\" then\n\t\ttable.insert(words, word)\n\tend\n\tif #words\
    \ == 0 then\n\t\tlocal count = 0\n\t\tfor i = 1, #txt do\n\t\t\tlocal c = txt:sub(i,\
    \ i)\n\t\t\tif c >= 'a' and c <= 'z' and i % 2 == 1 then\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\t\treturn count\n\tend\n\treturn words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ujxm0zv.lua:45:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0ujxm0zv.lua:45: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local is_word = false\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == \" \" then\n     \
    \       if is_word then\n                table.insert(words, word)\n         \
    \       word = \"\"\n                is_word = false\n            end\n      \
    \  elseif c == \",\" then\n            if is_word then\n                table.insert(words,\
    \ word)\n                word = \"\"\n                is_word = false\n      \
    \      end\n            return words\n        else\n            word = word ..\
    \ c\n            is_word = true\n        end\n    end\n    if is_word then\n \
    \       table.insert(words, word)\n    end\n    local count = 0\n    for i = 1,\
    \ #words do\n        local word = words[i]\n        for j = 1, #word do\n    \
    \        local c = word:sub(j, j)\n            local n = string.byte(c) - string.byte(\"\
    a\")\n            if n % 2 == 1 then\n                count = count + 1\n    \
    \        end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7w9m1dc.lua:51:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 6\nstack traceback:\n\t/tmp/tmpe7w9m1dc.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for w in txt:gmatch(\"%S+\") do\n        words[#words+1] = w\n\
    \    end\n    if #words == 0 then\n        for w in txt:gmatch(\"[^,]+\") do\n\
    \            words[#words+1] = w\n        end\n    end\n    if #words == 0 then\n\
    \        local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,i)\n\
    \            if c:lower() == c and (i % 2) == 1 then\n                count =\
    \ count + 1\n            end\n        end\n        return count\n    end\n   \
    \ return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdc10ncn9.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpdc10ncn9.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for c in txt:gmatch(\".\") do\n     \
    \   if c == \" \" or c == \",\" then\n            if word ~= \"\" then\n     \
    \           table.insert(words, word)\n                word = \"\"\n         \
    \   end\n        else\n            word = word .. c\n        end\n    end\n  \
    \  if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ if (txt:byte(i) - 96) % 2 == 1 then\n                count = count + 1\n   \
    \         end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uctqewa.lua:40:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0uctqewa.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        words[#words + 1]\
    \ = word\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"\
    %a+\") do\n            words[#words + 1] = word\n        end\n    end\n    if\
    \ #words == 0 then\n        local count = 0\n        for i = 1, #txt do\n    \
    \        if txt:byte(i) % 2 == 1 then\n                count = count + 1\n   \
    \         end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe07p1dqi.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpe07p1dqi.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local o = string.byte(c) - string.byte(\"a\")\n            if o % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfhyzb15.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpmfhyzb15.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local n = string.byte(c) - string.byte(\"a\")\n            if n % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps06n_4_0.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmps06n_4_0.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  local word = ''\n  for i = 1, #txt do\n    local c = txt:sub(i,\
    \ i)\n    if c == ' ' or c == ',' then\n      if word ~= '' then\n        table.insert(words,\
    \ word)\n        word = ''\n      end\n    else\n      word = word .. c\n    end\n\
    \  end\n  if word ~= '' then\n    table.insert(words, word)\n  end\n  if #words\
    \ > 0 then\n    return words\n  else\n    local count = 0\n    for i = 1, #txt\
    \ do\n      local c = txt:sub(i, i)\n      local o = string.byte(c) - string.byte('a')\n\
    \      if o % 2 == 1 then\n        count = count + 1\n      end\n    end\n   \
    \ return count\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfkg34sh.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpbfkg34sh.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local count = 0\n    for i = 1, #txt\
    \ do\n        local c = txt:sub(i, i)\n        if c == \" \" then\n          \
    \  if word ~= \"\" then\n                words[#words + 1] = word\n          \
    \      word = \"\"\n            end\n        elseif c == \",\" then\n        \
    \    if word ~= \"\" then\n                words[#words + 1] = word\n        \
    \        word = \"\"\n            end\n            break\n        else\n     \
    \       word = word .. c\n        end\n    end\n    if word ~= \"\" then\n   \
    \     words[#words + 1] = word\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            local o = string.byte(c) - string.byte(\"a\")\n            if\
    \ o % 2 == 1 then\n                count = count + 1\n            end\n      \
    \  end\n        return count\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0kijgi8.lua:49:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmpa0kijgi8.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    local len = string.len(txt)\n\
    \    while i <= len do\n        local c = string.sub(txt, i, i)\n        if c\
    \ == \" \" or c == \",\" then\n            if word ~= \"\" then\n            \
    \    table.insert(words, word)\n                word = \"\"\n            end\n\
    \        else\n            word = word .. c\n        end\n        i = i + 1\n\
    \    end\n    if word ~= \"\" then\n        table.insert(words, word)\n    end\n\
    \    if #words == 0 then\n        local count = 0\n        for i = 1, len do\n\
    \            local c = string.sub(txt, i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppuhw44ks.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmppuhw44ks.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if #word > 0 then\n                table.insert(words, word)\n   \
    \             word = \"\"\n            end\n        else\n            word = word\
    \ .. c\n        end\n        i = i + 1\n    end\n    if #word > 0 then\n     \
    \   table.insert(words, word)\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        local odd_count = 0\n        for i = 1, #txt do\n \
    \           local c = txt:sub(i, i)\n            if string.byte(c) >= string.byte('a')\
    \ and string.byte(c) <= string.byte('z') then\n                if i % 2 == 1 then\n\
    \                    odd_count = odd_count + 1\n                end\n        \
    \    end\n        end\n        return odd_count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5jg_jmu.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpy5jg_jmu.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO: Implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_a5mzow.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp5_a5mzow.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for w in txt:gmatch(\"%S+\") do\n        words[#words+1] = w\n\
    \    end\n    if #words > 0 then\n        return words\n    end\n    local chars\
    \ = {}\n    for c in txt:gmatch(\".\") do\n        chars[#chars+1] = c\n    end\n\
    \    if #chars > 0 then\n        local count = 0\n        for i, c in ipairs(chars)\
    \ do\n            if i % 2 == 1 and c:lower() == c then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4e5qqv9f.lua:35:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp4e5qqv9f.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  for word in txt:gmatch(\"%S+\") do\n    words[#words + 1] = word\n\
    \  end\n  if #words == 0 then\n    for word in txt:gmatch(\"[^,]+\") do\n    \
    \  words[#words + 1] = word\n    end\n  end\n  if #words == 0 then\n    local\
    \ count = 0\n    for i = 1, #txt do\n      if (string.byte(txt, i) - string.byte('a'))\
    \ % 2 == 1 then\n        count = count + 1\n      end\n    end\n    return count\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zx6uzce.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp2zx6uzce.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local count = 0\n    for i = 1, #txt\
    \ do\n        if txt:sub(i, i) == \" \" then\n            if word ~= \"\" then\n\
    \                words[#words + 1] = word\n                word = \"\"\n     \
    \       end\n        elseif txt:sub(i, i) == \",\" then\n            if word ~=\
    \ \"\" then\n                words[#words + 1] = word\n                word =\
    \ \"\"\n            end\n            words[#words + 1] = \",\"\n        else\n\
    \            word = word .. txt:sub(i, i)\n        end\n    end\n    if word ~=\
    \ \"\" then\n        words[#words + 1] = word\n    end\n    if #words == 0 then\n\
    \        for i = 1, #txt do\n            if txt:sub(i, i):lower():byte() % 2 ==\
    \ 1 then\n                count = count + 1\n            end\n        end\n  \
    \      return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1crfrcw7.lua:45:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \",\", \"world!\"}\n\
    stack traceback:\n\t/tmp/tmp1crfrcw7.lua:45: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local index = 1\n    local len = string.len(txt)\n\
    \    while index <= len do\n        local c = string.sub(txt, index, index)\n\
    \        if c == \" \" or c == \",\" then\n            if word ~= \"\" then\n\
    \                table.insert(words, word)\n                word = \"\"\n    \
    \        end\n        else\n            word = word .. c\n        end\n      \
    \  index = index + 1\n    end\n    if word ~= \"\" then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, len do\n            local c = string.sub(txt, i, i)\n            local\
    \ ord = string.byte(c) - string.byte(\"a\")\n            if ord % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwyax2yo.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpfwyax2yo.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\"%s\") then\n        return split(txt, \"%s\")\n    elseif txt:find(\"\
    ,\") then\n        return split(txt, \",\")\n    else\n        local count = 0\n\
    \        for i = 1, #txt do\n            if txt:byte(i) % 2 == 1 then\n      \
    \          count = count + 1\n            end\n        end\n        return count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5l9euhop.lua:9:\
    \ attempt to call global 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp5l9euhop.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmp5l9euhop.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"%w+\"\
    ) do\n            table.insert(words, word)\n        end\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ if txt:byte(i) % 2 == 1 then\n                count = count + 1\n          \
    \  end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvom5lxq.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmprvom5lxq.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    local\
    \ words = {}\n    for word in txt:gmatch(\"[^,]+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    local\
    \ count = 0\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n       \
    \ if c:lower() == c and c:upper() ~= c then\n            local ord = string.byte(c)\
    \ - string.byte('a')\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkh2z_m81.lua:38:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpkh2z_m81.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local i = 1\n    for word in string.gmatch(txt, \"%S+\") do\n\
    \        words[i] = word\n        i = i + 1\n    end\n    if #words == 0 then\n\
    \        for word in string.gmatch(txt, \"[^,]+\") do\n            words[i] =\
    \ word\n            i = i + 1\n        end\n    end\n    if #words == 0 then\n\
    \        local count = 0\n        for i = 1, #txt do\n            if string.byte(txt,\
    \ i) - string.byte('a') % 2 == 1 then\n                count = count + 1\n   \
    \         end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoke9igpk.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpoke9igpk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = ''\n    for i = 1, #txt do\n        local c = txt:sub(i,\
    \ i)\n        if c == ' ' or c == ',' then\n            if word ~= '' then\n \
    \               table.insert(words, word)\n                word = ''\n       \
    \     end\n        else\n            word = word .. c\n        end\n    end\n\
    \    if word ~= '' then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ local c = txt:sub(i, i)\n            if ord(c) % 2 == 1 then\n             \
    \   count = count + 1\n            end\n        end\n        return count\n  \
    \  end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgo0h5tjq.lua:42:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpgo0h5tjq.lua:42: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  local word = \"\"\n  for i = 1, #txt do\n    local c = txt:sub(i,\
    \ i)\n    if c == \" \" then\n      if #word > 0 then\n        table.insert(words,\
    \ word)\n        word = \"\"\n      end\n    elseif c == \",\" then\n      if\
    \ #word > 0 then\n        table.insert(words, word)\n        word = \"\"\n   \
    \   end\n      table.insert(words, c)\n    else\n      word = word .. c\n    end\n\
    \  end\n  if #word > 0 then\n    table.insert(words, word)\n  end\n  if #words\
    \ == 0 then\n    local count = 0\n    for i = 1, #txt do\n      local c = txt:sub(i,\
    \ i)\n      local ord = string.byte(c) - string.byte(\"a\")\n      if ord % 2\
    \ == 1 then\n        count = count + 1\n      end\n    end\n    return count\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrk9dfzz.lua:48:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \",\", \"world!\"}\n\
    stack traceback:\n\t/tmp/tmpvrk9dfzz.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg7pqy4o.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpeg7pqy4o.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    local c = txt:sub(i,\
    \ i)\n    while c ~= \"\" do\n        if c == \" \" or c == \",\" then\n     \
    \       if word ~= \"\" then\n                table.insert(words, word)\n    \
    \            word = \"\"\n            end\n        else\n            word = word\
    \ .. c\n        end\n        i = i + 1\n        c = txt:sub(i, i)\n    end\n \
    \   if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ local c = txt:sub(i, i)\n            local o = string.byte(c) - string.byte(\"\
    a\")\n            if o % 2 == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        return count\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vwwaczg.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0vwwaczg.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\" \") then\n        return split(txt, \" \")\n    elseif txt:find(\"\
    ,\") then\n        return split(txt, \",\")\n    else\n        local count = 0\n\
    \        for i = 1, #txt do\n            if txt:byte(i) % 2 == 1 then\n      \
    \          count = count + 1\n            end\n        end\n        return count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5mvoeo4.lua:9:\
    \ attempt to call global 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpk5mvoeo4.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpk5mvoeo4.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    local count = 0\n  \
    \  while i <= #txt do\n        local c = txt:sub(i, i)\n        if c == \" \"\
    \ or c == \",\" then\n            if word ~= \"\" then\n                table.insert(words,\
    \ word)\n                word = \"\"\n            end\n        else\n        \
    \    word = word .. c\n        end\n        i = i + 1\n    end\n    if word ~=\
    \ \"\" then\n        table.insert(words, word)\n    end\n    if #words == 0 then\n\
    \        for i = 1, #txt do\n            local c = txt:sub(i, i)\n           \
    \ if c >= 'a' and c <= 'z' then\n                if i % 2 == 1 then\n        \
    \            count = count + 1\n                end\n            end\n       \
    \ end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgu751x3.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmprgu751x3.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local count = 0\n    for word in string.gmatch(txt, \"%S+\"\
    ) do\n        words[#words + 1] = word\n    end\n    if #words == 0 then\n   \
    \     for i = 1, #txt do\n            if string.byte(txt, i) - string.byte('a')\
    \ % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphg6oklx7.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmphg6oklx7.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local o = string.byte(c) - string.byte(\"a\")\n            if o % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfhyzb15.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpmfhyzb15.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in string.gmatch(txt, \"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in string.gmatch(txt,\
    \ \"[a-z]+\") do\n            table.insert(words, word)\n        end\n    end\n\
    \    if #words == 0 then\n        local count = 0\n        for i = 1, #txt do\n\
    \            if (string.byte(txt, i) - string.byte('a')) % 2 == 1 then\n     \
    \           count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5r2jwhda.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp5r2jwhda.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local count = 0\n    for i = 1, #txt\
    \ do\n        local c = txt:sub(i, i)\n        if c == \" \" then\n          \
    \  if word ~= \"\" then\n                table.insert(words, word)\n         \
    \       word = \"\"\n            end\n        elseif c == \",\" then\n       \
    \     if word ~= \"\" then\n                table.insert(words, word)\n      \
    \          word = \"\"\n            end\n            break\n        else\n   \
    \         word = word .. c\n        end\n    end\n    if word ~= \"\" then\n \
    \       table.insert(words, word)\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            if string.byte(c) >= 97 and string.byte(c) <= 122 then\n   \
    \             if i % 2 == 1 then\n                    count = count + 1\n    \
    \            end\n            end\n        end\n        return count\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwswu_x3.lua:50:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmpjwswu_x3.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local i = 1\n    for word in string.gmatch(txt, \"%S+\") do\n\
    \        words[i] = word\n        i = i + 1\n    end\n    if #words > 0 then\n\
    \        return words\n    end\n    local letters = {}\n    i = 1\n    for letter\
    \ in string.gmatch(txt, \"%a\") do\n        letters[i] = letter\n        i = i\
    \ + 1\n    end\n    if #letters > 0 then\n        local count = 0\n        for\
    \ i = 1, #letters do\n            if string.byte(letters[i]) % 2 == 1 then\n \
    \               count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    return txt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvky1im2v.lua:39:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpvky1im2v.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = ''\n    local count = 0\n    for i = 1, #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n     \
    \       if #word > 0 then\n                words[#words + 1] = word\n        \
    \        word = ''\n            end\n        else\n            word = word ..\
    \ c\n        end\n    end\n    if #word > 0 then\n        words[#words + 1] =\
    \ word\n    end\n    if #words > 0 then\n        return words\n    else\n    \
    \    for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if c\
    \ >= 'a' and c <= 'z' then\n                local n = string.byte(c) - string.byte('a')\n\
    \                if n % 2 == 1 then\n                    count = count + 1\n \
    \               end\n            end\n        end\n        return count\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9f2aeo8.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpi9f2aeo8.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n        i = i + 1\n    end\n    if word ~= \"\" then\n\
    \        table.insert(words, word)\n    end\n    if #words == 0 then\n       \
    \ local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            if ord(c) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply862r_q.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmply862r_q.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\"%s\") then\n        return txt:split(\"%s\")\n    elseif txt:find(\"\
    ,\") then\n        return txt:split(\",\")\n    else\n        local count = 0\n\
    \        for i = 1, #txt do\n            if txt:sub(i, i):lower():byte() % 2 ==\
    \ 1 then\n                count = count + 1\n            end\n        end\n  \
    \      return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpji8nna2e.lua:9:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpji8nna2e.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpji8nna2e.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local c\n    local i = 1\n    while i\
    \ <= #txt do\n        c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n\
    \            if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n        i = i + 1\n    end\n    if word ~= \"\" then\n\
    \        table.insert(words, word)\n    end\n    if #words == 0 then\n       \
    \ return count_odd_letters(txt)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8fj6tl0l.lua:38:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp8fj6tl0l.lua:38: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local word_count = 0\n    local char_count\
    \ = 0\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c ==\
    \ \" \" or c == \",\" then\n            if word ~= \"\" then\n               \
    \ word_count = word_count + 1\n                words[word_count] = word\n    \
    \            word = \"\"\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= \"\" then\n        word_count = word_count\
    \ + 1\n        words[word_count] = word\n    end\n    if word_count == 0 then\n\
    \        for i = 1, #txt do\n            local c = txt:sub(i, i)\n           \
    \ local c_ord = string.byte(c)\n            if c_ord >= 97 and c_ord <= 122 then\n\
    \                if i % 2 == 1 then\n                    char_count = char_count\
    \ + 1\n                end\n            end\n        end\n        return char_count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbny96rf3.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpbny96rf3.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local o = string.byte(c) - string.byte(\"a\")\n            if o % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfhyzb15.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpmfhyzb15.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local i = 1\n    local j = 1\n    while i <= #txt do\n     \
    \   if txt:sub(i, i) == ' ' then\n            words[j] = txt:sub(1, i - 1)\n \
    \           txt = txt:sub(i + 1)\n            i = 1\n            j = j + 1\n \
    \       else\n            i = i + 1\n        end\n    end\n    if #txt > 0 then\n\
    \        words[j] = txt\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4fe6ary.lua:31:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpm4fe6ary.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local o = string.byte(c) - string.byte(\"a\")\n            if o % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfhyzb15.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpmfhyzb15.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n        i = i + 1\n    end\n    if word ~= \"\" then\n\
    \        table.insert(words, word)\n    end\n    if #words == 0 then\n       \
    \ local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            if ord(c) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply862r_q.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmply862r_q.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            table.insert(words,\
    \ word)\n            word = \"\"\n        else\n            word = word .. c\n\
    \        end\n    end\n    if #word > 0 then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbrb8no0.lua:41:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpnbrb8no0.lua:41: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local n = 0\n    for i = 1, #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n    end\n    if word ~= \"\" then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local o = string.byte(c) - string.byte(\"\
    a\")\n            if o % 2 == 1 then\n                n = n + 1\n            end\n\
    \        end\n        return n\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnafdbgo9.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpnafdbgo9.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n        i = i + 1\n    end\n    if word ~= \"\" then\n\
    \        table.insert(words, word)\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        local count = 0\n        for i = 1, #txt do\n     \
    \       local c = txt:sub(i, i)\n            local n = string.byte(c) - string.byte(\"\
    a\")\n            if n % 2 == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98u5_2a_.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp98u5_2a_.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  local word = \"\"\n  local i = 1\n  while i <= #txt do\n    local\
    \ c = txt:sub(i, i)\n    if c == \" \" or c == \",\" then\n      if word ~= \"\
    \" then\n        table.insert(words, word)\n        word = \"\"\n      end\n \
    \   else\n      word = word .. c\n    end\n    i = i + 1\n  end\n  if word ~=\
    \ \"\" then\n    table.insert(words, word)\n  end\n  if #words == 0 then\n   \
    \ local count = 0\n    for i = 1, #txt do\n      local c = txt:sub(i, i)\n   \
    \   local o = string.byte(c) - string.byte(\"a\")\n      if o % 2 == 1 then\n\
    \        count = count + 1\n      end\n    end\n    return count\n  end\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0hm3r4_.lua:45:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpg0hm3r4_.lua:45: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  for word in txt:gmatch(\"%w+\") do\n    table.insert(words, word)\n\
    \  end\n  if #words == 0 then\n    for word in txt:gmatch(\"%a+\") do\n      table.insert(words,\
    \ word)\n    end\n  end\n  if #words == 0 then\n    local count = 0\n    for i\
    \ = 1, #txt do\n      if txt:sub(i, i):lower():byte() % 2 == 1 then\n        count\
    \ = count + 1\n      end\n    end\n    return count\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcc3ol659.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpcc3ol659.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if #word > 0 then\n                table.insert(words, word)\n   \
    \             word = \"\"\n            end\n        else\n            word = word\
    \ .. c\n        end\n        i = i + 1\n    end\n    if #word > 0 then\n     \
    \   table.insert(words, word)\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        local count = 0\n        for i = 1, #txt do\n     \
    \       local c = txt:sub(i, i)\n            local o = string.byte(c) - string.byte(\"\
    a\")\n            if o % 2 == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr__c2wo2.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpr__c2wo2.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO: implement\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr3jn4ap.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpgr3jn4ap.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"%w+\"\
    ) do\n            table.insert(words, word)\n        end\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ local c = txt:sub(i, i)\n            if c:lower() == c then\n              \
    \  local ord = string.byte(c) - string.byte('a')\n                if ord % 2 ==\
    \ 1 then\n                    count = count + 1\n                end\n       \
    \     end\n        end\n        return count\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmg1aewrc.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpmg1aewrc.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"[^,]+\"\
    ) do\n            table.insert(words, word)\n        end\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ if txt:byte(i) % 2 == 1 then\n                count = count + 1\n          \
    \  end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpreex9kl_.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpreex9kl_.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word_start = 1\n    local word_end = 1\n    local word_count\
    \ = 0\n    local word_len = 0\n    local word_start_char = 0\n    local word_end_char\
    \ = 0\n    local word_len_char = 0\n    local word_count_char = 0\n    local word_start_char_odd\
    \ = 0\n    local word_end_char_odd = 0\n    local word_len_char_odd = 0\n    local\
    \ word_count_char_odd = 0\n    local word_start_char_even = 0\n    local word_end_char_even\
    \ = 0\n    local word_len_char_even = 0\n    local word_count_char_even = 0\n\
    \    local word_start_char_odd_count = 0\n    local word_end_char_odd_count =\
    \ 0\n    local word_len_char_odd_count = 0\n    local word_count_char_odd_count\
    \ = 0\n    local word_start_char_even_count = 0\n    local word_end_char_even_count\
    \ = 0\n    local word_len_char_even_count = 0\n    local word_count_char_even_count\
    \ = 0\n    local word_start_char_odd_count_sum = 0\n    local word_end_char_odd_count_sum\
    \ = 0\n    local word_len_char_odd_count_sum = 0\n    local word_count_char_odd_count_sum\
    \ = 0\n    local word_start_char_even_count_sum = 0\n    local word_end_char_even_count_sum\
    \ = 0\n    local word_len_char_even_count_sum = 0\n    local word_count_char_even_count_sum\
    \ = 0\n    local word_start_char_odd_count_sum_sum = 0\n    local word_end_char_odd_count_sum_sum\
    \ = 0\n    local word_len_char_odd_count_sum_sum = 0\n    local word_count_char_odd_count_sum_sum\
    \ = 0\n    local word_start_char_even_count_sum_sum = 0\n    local word_end_char\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7b7wzbl1.lua:61: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for c in txt:gmatch(\".\") do\n     \
    \   if c == \" \" or c == \",\" then\n            if word ~= \"\" then\n     \
    \           table.insert(words, word)\n                word = \"\"\n         \
    \   end\n        else\n            word = word .. c\n        end\n    end\n  \
    \  if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for c in txt:gmatch(\".\") do\n\
    \            if string.byte(c) - string.byte(\"a\") % 2 == 1 then\n          \
    \      count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdokb_w2i.lua:40:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpdokb_w2i.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n        i = i + 1\n    end\n    if word ~= \"\" then\n\
    \        table.insert(words, word)\n    end\n    if #words == 0 then\n       \
    \ local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            if ord(c) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply862r_q.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmply862r_q.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"[^,]+\"\
    ) do\n            table.insert(words, word)\n        end\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ if txt:byte(i) - 96 % 2 == 1 then\n                count = count + 1\n     \
    \       end\n        end\n        return count\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4u5qplj.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpq4u5qplj.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local split_on = \" \"\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == split_on then\n  \
    \          if word ~= \"\" then\n                table.insert(words, word)\n \
    \               word = \"\"\n            end\n        else\n            word =\
    \ word .. c\n        end\n    end\n    if word ~= \"\" then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        split_on = \",\"\n        word\
    \ = \"\"\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n  \
    \          if c == split_on then\n                if word ~= \"\" then\n     \
    \               table.insert(words, word)\n                    word = \"\"\n \
    \               end\n            else\n                word = word .. c\n    \
    \        end\n        end\n        if word ~= \"\" then\n            table.insert(words,\
    \ word)\n        end\n    end\n    if #words == 0 then\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local ord = string.byte(c) - string.byte('a')\n            if ord % 2 ==\
    \ 1 then\n                count = count + 1\n            end\n        end\n  \
    \      return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxzepkc2.lua:61:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmprxzepkc2.lua:61: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = ''\n    local count = 0\n    for i = 1, #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n     \
    \       if word ~= '' then\n                words[#words + 1] = word\n       \
    \         word = ''\n            end\n        else\n            word = word ..\
    \ c\n        end\n    end\n    if word ~= '' then\n        words[#words + 1] =\
    \ word\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n       \
    \     local c = txt:sub(i, i)\n            if c:byte() % 2 == 1 then\n       \
    \         count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhfav_f_.lua:42:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmplhfav_f_.lua:42: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO: implement this function\n    return 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx20w1k5.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpfx20w1k5.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"%S+\"\
    ) do\n            table.insert(words, word)\n        end\n        if #words ==\
    \ 0 then\n            local count = 0\n            for i = 1, #txt do\n      \
    \          local c = txt:sub(i, i)\n                if c:lower() == c and c:byte()\
    \ % 2 == 1 then\n                    count = count + 1\n                end\n\
    \            end\n            return count\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk995zzd1.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpk995zzd1.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for c in txt:gmatch(\".\") do\n     \
    \   if c == \" \" or c == \",\" then\n            if word ~= \"\" then\n     \
    \           table.insert(words, word)\n                word = \"\"\n         \
    \   end\n        else\n            word = word .. c\n        end\n    end\n  \
    \  if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ if (txt:byte(i) - ord('a')) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyllg0bsf.lua:40:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpyllg0bsf.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    local\
    \ words = {}\n    for word in txt:gmatch(\"[^,]+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    local\
    \ count = 0\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n       \
    \ if c:lower() == c then\n            local ord = string.byte(c) - string.byte('a')\n\
    \            if ord % 2 == 1 then\n                count = count + 1\n       \
    \     end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4b_xpp4l.lua:38:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmp4b_xpp4l.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"%S+\"\
    ) do\n            table.insert(words, word)\n        end\n        if #words ==\
    \ 0 then\n            local count = 0\n            for i = 1, #txt do\n      \
    \          if txt:byte(i) % 2 == 1 then\n                    count = count + 1\n\
    \                end\n            end\n            return count\n        end\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52whyrha.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp52whyrha.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local o = string.byte(c) - string.byte(\"a\")\n            if o % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfhyzb15.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpmfhyzb15.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO: implement\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr3jn4ap.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpgr3jn4ap.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  for word in txt:gmatch(\"%w+\") do\n    table.insert(words, word)\n\
    \  end\n  if #words > 0 then\n    return words\n  end\n  local words = {}\n  for\
    \ word in txt:gmatch(\"[^,]+\") do\n    table.insert(words, word)\n  end\n  if\
    \ #words > 0 then\n    return words\n  end\n  local count = 0\n  for i = 1, #txt\
    \ do\n    local c = txt:sub(i, i)\n    if c:lower() == c and c:upper() ~= c then\n\
    \      local ord = string.byte(c) - string.byte('a')\n      if ord % 2 == 1 then\n\
    \        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon5qdf_j.lua:38:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpon5qdf_j.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local char\
    \ = txt:sub(i, i)\n        if char == \" \" then\n            if #word > 0 then\n\
    \                table.insert(words, word)\n                word = \"\"\n    \
    \        end\n        elseif char == \",\" then\n            if #word > 0 then\n\
    \                table.insert(words, word)\n                word = \"\"\n    \
    \        end\n            table.insert(words, char)\n        else\n          \
    \  word = word .. char\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, #txt do\n            local char = txt:sub(i, i)\n            local ord\
    \ = string.byte(char) - string.byte(\"a\")\n            if ord % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckmlizwo.lua:48:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \",\", \"world!\"}\n\
    stack traceback:\n\t/tmp/tmpckmlizwo.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  local word = \"\"\n  local len = string.len(txt)\n  local i =\
    \ 1\n  while i <= len do\n    local c = string.sub(txt, i, i)\n    if c == \"\
    \ \" or c == \",\" then\n      if word ~= \"\" then\n        table.insert(words,\
    \ word)\n        word = \"\"\n      end\n    else\n      word = word .. c\n  \
    \  end\n    i = i + 1\n  end\n  if word ~= \"\" then\n    table.insert(words,\
    \ word)\n  end\n  if #words == 0 then\n    local count = 0\n    for i = 1, len\
    \ do\n      local c = string.sub(txt, i, i)\n      local o = string.byte(c) -\
    \ string.byte(\"a\")\n      if o % 2 == 1 then\n        count = count + 1\n  \
    \    end\n    end\n    return count\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmp8q8l6.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpxmp8q8l6.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    local\
    \ words = {}\n    for word in txt:gmatch(\"[^,]+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    local\
    \ count = 0\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n       \
    \ if c:lower() == c and (i % 2 == 1) then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdvqn5wu.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpwdvqn5wu.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local n = 0\n    for i = 1, #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" then\n            if word\
    \ ~= \"\" then\n                words[#words + 1] = word\n                word\
    \ = \"\"\n            end\n        elseif c == \",\" then\n            if word\
    \ ~= \"\" then\n                words[#words + 1] = word\n                word\
    \ = \"\"\n            end\n            break\n        else\n            word =\
    \ word .. c\n        end\n    end\n    if word ~= \"\" then\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        return n\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ndk23hu.lua:41:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmp5ndk23hu.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local odd_count = 0\n        for i\
    \ = 1, #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                odd_count\
    \ = odd_count + 1\n            end\n        end\n        return odd_count\n  \
    \  end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjluegin.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpwjluegin.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local ord = string.byte(c) - string.byte(\"a\")\n            if ord % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_vpp0sw.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpm_vpp0sw.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local o = string.byte(c) - string.byte(\"a\")\n            if o % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfhyzb15.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpmfhyzb15.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local o = ord(c)\n\
    \            if o % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wqh_6b5.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp3wqh_6b5.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  local word = ''\n  for i = 1, #txt do\n    local c = txt:sub(i,\
    \ i)\n    if c == ' ' or c == ',' then\n      if word ~= '' then\n        table.insert(words,\
    \ word)\n        word = ''\n      end\n    else\n      word = word .. c\n    end\n\
    \  end\n  if word ~= '' then\n    table.insert(words, word)\n  end\n  if #words\
    \ > 0 then\n    return words\n  else\n    local count = 0\n    for i = 1, #txt\
    \ do\n      local c = txt:sub(i, i)\n      local n = string.byte(c) - string.byte('a')\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n    end\n   \
    \ return count\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pespm6y.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp8pespm6y.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local i = 1\n    for word in string.gmatch(txt, \"%S+\") do\n\
    \        words[i] = word\n        i = i + 1\n    end\n    if #words == 0 then\n\
    \        for word in string.gmatch(txt, \"[^,]+\") do\n            words[i] =\
    \ word\n            i = i + 1\n        end\n    end\n    if #words == 0 then\n\
    \        local count = 0\n        for c in string.gmatch(txt, \"[a-z]\") do\n\
    \            if string.byte(c) % 2 == 1 then\n                count = count +\
    \ 1\n            end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtomp_gs.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpjtomp_gs.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if #word > 0 then\n                table.insert(words, word)\n   \
    \             word = \"\"\n            end\n        else\n            word = word\
    \ .. c\n        end\n        i = i + 1\n    end\n    if #word > 0 then\n     \
    \   table.insert(words, word)\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        local count = 0\n        for i = 1, #txt do\n     \
    \       local c = txt:sub(i, i)\n            local ord = string.byte(c) - string.byte(\"\
    a\")\n            if ord % 2 == 1 then\n                count = count + 1\n  \
    \          end\n        end\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tous55q.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp9tous55q.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i=1,#txt do\n        local ch = txt:sub(i,i)\n\
    \        if ch == \" \" then\n            if #word > 0 then\n                table.insert(words,\
    \ word)\n                word = \"\"\n            end\n        elseif ch == \"\
    ,\" then\n            if #word > 0 then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n            table.insert(words,\
    \ ch)\n        else\n            word = word .. ch\n        end\n    end\n   \
    \ if #word > 0 then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local cnt = 0\n        for i=1,#txt do\n            local\
    \ ch = txt:sub(i,i)\n            local ord = string.byte(ch) - string.byte('a')\n\
    \            if ord % 2 == 1 then\n                cnt = cnt + 1\n           \
    \ end\n        end\n        return cnt\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrtipws2.lua:48:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \",\", \"world!\"}\n\
    stack traceback:\n\t/tmp/tmpjrtipws2.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n        i = i + 1\n    end\n    if word ~= \"\" then\n\
    \        table.insert(words, word)\n    end\n    if #words == 0 then\n       \
    \ local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            if ord(c) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply862r_q.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmply862r_q.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local txt_len = string.len(txt)\n    local i = 1\n    local\
    \ word_start = 1\n    while i <= txt_len do\n        local c = string.sub(txt,\
    \ i, i)\n        if c == ' ' or c == ',' then\n            if i > word_start then\n\
    \                table.insert(words, string.sub(txt, word_start, i - 1))\n   \
    \         end\n            word_start = i + 1\n        end\n        i = i + 1\n\
    \    end\n    if word_start <= txt_len then\n        table.insert(words, string.sub(txt,\
    \ word_start, txt_len))\n    end\n    if #words == 0 then\n        local odd_count\
    \ = 0\n        for i = 1, txt_len do\n            local c = string.sub(txt, i,\
    \ i)\n            local c_ord = string.byte(c)\n            if c_ord >= 97 and\
    \ c_ord <= 122 and (c_ord - 97) % 2 == 1 then\n                odd_count = odd_count\
    \ + 1\n            end\n        end\n        return odd_count\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuiy8xjgp.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpuiy8xjgp.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO: implement this function\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnx31zsf.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpnnx31zsf.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%w+\") do\n        words[#words + 1]\
    \ = word\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"\
    %w+\") do\n            words[#words + 1] = word\n        end\n    end\n    if\
    \ #words == 0 then\n        local count = 0\n        for i = 1, #txt do\n    \
    \        if txt:sub(i, i):lower():byte() % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpog5fee4w.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpog5fee4w.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  local word = \"\"\n  local i = 1\n  local n = string.len(txt)\n\
    \  while i <= n do\n    local c = string.sub(txt, i, i)\n    if c == \" \" or\
    \ c == \",\" then\n      if word ~= \"\" then\n        table.insert(words, word)\n\
    \        word = \"\"\n      end\n    else\n      word = word .. c\n    end\n \
    \   i = i + 1\n  end\n  if word ~= \"\" then\n    table.insert(words, word)\n\
    \  end\n  if #words == 0 then\n    local count = 0\n    for i = 1, n do\n    \
    \  local c = string.sub(txt, i, i)\n      local o = string.byte(c) - string.byte(\"\
    a\")\n      if o % 2 == 1 then\n        count = count + 1\n      end\n    end\n\
    \    return count\n  else\n    return words\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qbbpyjr.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0qbbpyjr.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"%w+\"\
    ) do\n            table.insert(words, word)\n        end\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ if txt:byte(i) % 2 == 1 then\n                count = count + 1\n          \
    \  end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpciz9_sut.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpciz9_sut.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO: Implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_a5mzow.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp5_a5mzow.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"%S+\"\
    ) do\n            table.insert(words, word)\n        end\n        if #words ==\
    \ 0 then\n            local count = 0\n            for i = 1, #txt do\n      \
    \          if txt:byte(i) - ord('a') % 2 == 1 then\n                    count\
    \ = count + 1\n                end\n            end\n            return count\n\
    \        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaq2zi97y.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpaq2zi97y.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            table.insert(words,\
    \ word)\n            word = \"\"\n        else\n            word = word .. c\n\
    \        end\n    end\n    if #word > 0 then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4nb9eip.lua:41:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpg4nb9eip.lua:41: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local ord = string.byte(c) - string.byte(\"a\")\n            if ord % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_vpp0sw.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpm_vpp0sw.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if #word > 0 then\n                table.insert(words, word)\n   \
    \             word = \"\"\n            end\n        else\n            word = word\
    \ .. c\n        end\n        i = i + 1\n    end\n    if #word > 0 then\n     \
    \   table.insert(words, word)\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        local odd_count = 0\n        for i = 1, #txt do\n \
    \           local c = txt:sub(i, i)\n            if c >= 'a' and c <= 'z' then\n\
    \                if (c:byte() - ord('a')) % 2 == 1 then\n                    odd_count\
    \ = odd_count + 1\n                end\n            end\n        end\n       \
    \ return odd_count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjabke61o.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpjabke61o.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"[^,]+\"\
    ) do\n            table.insert(words, word)\n        end\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ if txt:sub(i, i):lower() == string.char(97 + (i - 1) % 26) then\n          \
    \      count = count + 1\n            end\n        end\n        table.insert(words,\
    \ count)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm7likvm.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpzm7likvm.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    local n = 0\n    local\
    \ c = txt:sub(i, i)\n    while c ~= \"\" do\n        if c == \" \" or c == \"\
    ,\" then\n            if word ~= \"\" then\n                words[#words + 1]\
    \ = word\n                word = \"\"\n            end\n        else\n       \
    \     word = word .. c\n        end\n        i = i + 1\n        c = txt:sub(i,\
    \ i)\n    end\n    if word ~= \"\" then\n        words[#words + 1] = word\n  \
    \  end\n    if #words > 0 then\n        return words\n    else\n        return\
    \ n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpup1jw88w.lua:40:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpup1jw88w.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local count = 0\n    for i = 1, #txt\
    \ do\n        local c = txt:sub(i, i)\n        if c == \" \" then\n          \
    \  if word ~= \"\" then\n                words[#words + 1] = word\n          \
    \      word = \"\"\n            end\n        elseif c == \",\" then\n        \
    \    if word ~= \"\" then\n                words[#words + 1] = word\n        \
    \        word = \"\"\n            end\n            break\n        else\n     \
    \       word = word .. c\n        end\n    end\n    if word ~= \"\" then\n   \
    \     words[#words + 1] = word\n    end\n    if #words > 0 then\n        return\
    \ words\n    end\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n  \
    \      if string.byte(c) - string.byte(\"a\") % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0bn0uki4.lua:47:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmp0bn0uki4.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            table.insert(words,\
    \ word)\n            word = \"\"\n        else\n            word = word .. c\n\
    \        end\n    end\n    if #word > 0 then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbrb8no0.lua:41:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpnbrb8no0.lua:41: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\"%s\") then\n        return string.split(txt, \"%s\")\n    elseif\
    \ txt:find(\",\") then\n        return string.split(txt, \",\")\n    else\n  \
    \      local count = 0\n        for i = 1, #txt do\n            if txt:sub(i,\
    \ i):byte() % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n        return count\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8hv4z7dc.lua:9:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp8hv4z7dc.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmp8hv4z7dc.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%w+\") do\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ local words = {}\n    for word in txt:gmatch(\"[^,]+\") do\n        words[#words\
    \ + 1] = word\n    end\n    if #words > 0 then\n        return words\n    end\n\
    \    local count = 0\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n\
    \        local ord = string.byte(c) - string.byte('a')\n        if ord % 2 ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1b8uuvge.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmp1b8uuvge.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n        i = i + 1\n    end\n    if word ~= \"\" then\n\
    \        table.insert(words, word)\n    end\n    if #words == 0 then\n       \
    \ local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            if ord(c) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply862r_q.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmply862r_q.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local o = string.byte(c) - string.byte(\"a\")\n            if o % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfhyzb15.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpmfhyzb15.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if #word > 0 then\n                table.insert(words, word)\n   \
    \             word = \"\"\n            end\n        else\n            word = word\
    \ .. c\n        end\n        i = i + 1\n    end\n    if #word > 0 then\n     \
    \   table.insert(words, word)\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        local count = 0\n        for i = 1, #txt do\n     \
    \       local c = txt:sub(i, i)\n            local ord = string.byte(c) - string.byte(\"\
    a\")\n            if ord % 2 == 1 then\n                count = count + 1\n  \
    \          end\n        end\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tous55q.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp9tous55q.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words > 0 then\n        return words\n    else\n        local\
    \ count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n\
    \            if string.byte(c) >= 97 and string.byte(c) <= 122 and (string.byte(c)\
    \ - 96) % 2 == 1 then\n                count = count + 1\n            end\n  \
    \      end\n        return count\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplan08t3y.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmplan08t3y.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i=1,#txt do\n        local c = txt:sub(i,i)\n\
    \        if c == \" \" then\n            table.insert(words, word)\n         \
    \   word = \"\"\n        elseif c == \",\" then\n            table.insert(words,\
    \ word)\n            word = \"\"\n        else\n            word = word .. c\n\
    \        end\n    end\n    if #word > 0 then\n        table.insert(words, word)\n\
    \    end\n    if #words > 0 then\n        return words\n    else\n        local\
    \ count = 0\n        for i=1,#txt do\n            local c = txt:sub(i,i)\n   \
    \         local ord = string.byte(c) - string.byte(\"a\")\n            if ord\
    \ % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4g6duepp.lua:45:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp4g6duepp.lua:45: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"[^,]+\"\
    ) do\n            table.insert(words, word)\n        end\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ if (i % 2) == 1 then\n                count = count + 1\n            end\n \
    \       end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jo_51ai.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp6jo_51ai.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\"%s\") then\n        return string.split(txt, \"%s\")\n    elseif\
    \ txt:find(\",\") then\n        return string.split(txt, \",\")\n    else\n  \
    \      local count = 0\n        for i = 1, #txt do\n            if string.byte(txt,\
    \ i) % 2 == 1 then\n                count = count + 1\n            end\n     \
    \   end\n        return count\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3dtyvcur.lua:9:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3dtyvcur.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmp3dtyvcur.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for c in txt:gmatch(\".\") do\n     \
    \   if c == \" \" or c == \",\" then\n            if word ~= \"\" then\n     \
    \           table.insert(words, word)\n                word = \"\"\n         \
    \   end\n        else\n            word = word .. c\n        end\n    end\n  \
    \  if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ if txt:sub(i, i) == string.char(97 + i - 1) then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhpj52rf.lua:40:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpfhpj52rf.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"%a+\"\
    ) do\n            table.insert(words, word)\n        end\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ local c = txt:sub(i, i)\n            if c:lower() == c then\n              \
    \  local n = c:byte() - string.byte('a')\n                if n % 2 == 1 then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18ksptcl.lua:37:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp18ksptcl.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local ord = string.byte(c)\
    \ - string.byte(\"a\")\n            if ord % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_j4j_z4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpu_j4j_z4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for c in txt:gmatch(\".\") do\n     \
    \   if c == \" \" or c == \",\" then\n            if word ~= \"\" then\n     \
    \           table.insert(words, word)\n                word = \"\"\n         \
    \   end\n        else\n            word = word .. c\n        end\n    end\n  \
    \  if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ if txt:sub(i, i) == string.char(97 + i - 1) then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhpj52rf.lua:40:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpfhpj52rf.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"[^,]+\"\
    ) do\n            table.insert(words, word)\n        end\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ if (txt:byte(i) - string.byte('a')) % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g7bqoks.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp7g7bqoks.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local o = string.byte(c)\
    \ - string.byte(\"a\")\n            if o % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpseufzj8u.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpseufzj8u.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local c = txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n \
    \           if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n        i = i + 1\n    end\n    if word ~= \"\" then\n\
    \        table.insert(words, word)\n    end\n    if #words == 0 then\n       \
    \ local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            if c:lower() == c and i % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8tkv0s_3.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp8tkv0s_3.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for c in txt:gmatch(\".\") do\n     \
    \   if c == \" \" or c == \",\" then\n            if word ~= \"\" then\n     \
    \           table.insert(words, word)\n                word = \"\"\n         \
    \   end\n        else\n            word = word .. c\n        end\n    end\n  \
    \  if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ if (i % 2 == 1) and (txt:byte(i) >= 97) and (txt:byte(i) <= 122) then\n    \
    \            count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6af4z26g.lua:40:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp6af4z26g.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local count = 0\n    for i = 1, #txt\
    \ do\n        local c = txt:sub(i, i)\n        if c == \" \" then\n          \
    \  if word ~= \"\" then\n                words[#words + 1] = word\n          \
    \      word = \"\"\n            end\n        elseif c == \",\" then\n        \
    \    if word ~= \"\" then\n                words[#words + 1] = word\n        \
    \        word = \"\"\n            end\n            break\n        else\n     \
    \       word = word .. c\n        end\n    end\n    if word ~= \"\" then\n   \
    \     words[#words + 1] = word\n    end\n    if #words == 0 then\n        for\
    \ i = 1, #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxja9e1ms.lua:48:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmpxja9e1ms.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word\n    local i = 1\n    local j = 1\n    local c\n\
    \    local n = #txt\n    while i <= n do\n        c = txt:sub(i, i)\n        if\
    \ c == ' ' or c == ',' then\n            word = txt:sub(j, i - 1)\n          \
    \  if word ~= '' then\n                words[#words + 1] = word\n            end\n\
    \            j = i + 1\n        end\n        i = i + 1\n    end\n    if j <= n\
    \ then\n        word = txt:sub(j, n)\n        if word ~= '' then\n           \
    \ words[#words + 1] = word\n        end\n    end\n    if #words == 0 then\n  \
    \      local count = 0\n        for i = 1, n do\n            c = txt:sub(i, i)\n\
    \            if ord(c) % 2 == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        return count\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wp7d274.lua:49:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp6wp7d274.lua:49: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ \"\"\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local ord = string.byte(c) - string.byte(\"a\")\n            if ord % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_vpp0sw.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpm_vpp0sw.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local word_count = 0\n    local odd_count\
    \ = 0\n    local is_odd = false\n    local is_even = false\n    local is_letter\
    \ = false\n    local is_comma = false\n    local is_space = false\n    local is_word\
    \ = false\n    local is_number = false\n    local is_odd_number = false\n    local\
    \ is_even_number = false\n    local is_odd_letter = false\n    local is_even_letter\
    \ = false\n    local is_odd_word = false\n    local is_even_word = false\n   \
    \ local is_odd_comma = false\n    local is_even_comma = false\n    local is_odd_space\
    \ = false\n    local is_even_space = false\n    local is_odd_letter_count = false\n\
    \    local is_even_letter_count = false\n    local is_odd_word_count = false\n\
    \    local is_even_word_count = false\n    local is_odd_comma_count = false\n\
    \    local is_even_comma_count = false\n    local is_odd_space_count = false\n\
    \    local is_even_space_count = false\n    local is_odd_number_count = false\n\
    \    local is_even_number_count = false\n    local is_odd_letter_count = false\n\
    \    local is_even_letter_count = false\n    local is_odd_word_count = false\n\
    \    local is_even_word_count = false\n    local is_odd_comma_count = false\n\
    \    local is_even_comma_count = false\n    local is_odd_space_count = false\n\
    \    local is_even_space_count = false\n    local is_odd_number_count = false\n\
    \    local is_even_number_count = false\n    local is_odd_letter_count = false\n\
    \    local is_even_letter_count = false\n    local is_odd_word_count = false\n\
    \    local is_even_word_count = false\n    local is_odd_comma_count = false\n\
    \    local is_even_comma_count = false\n    local is_odd_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcqpx_7ay.lua:70: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local count = 0\n    for i = 1, #txt\
    \ do\n        local c = txt:sub(i, i)\n        if c == \" \" then\n          \
    \  if word ~= \"\" then\n                table.insert(words, word)\n         \
    \       word = \"\"\n            end\n        elseif c == \",\" then\n       \
    \     if word ~= \"\" then\n                table.insert(words, word)\n      \
    \          word = \"\"\n            end\n            return words\n        else\n\
    \            word = word .. c\n        end\n    end\n    if word ~= \"\" then\n\
    \        table.insert(words, word)\n    end\n    if #words == 0 then\n       \
    \ for i = 1, #txt do\n            local c = txt:sub(i, i)\n            local n\
    \ = string.byte(c) - string.byte(\"a\")\n            if n % 2 == 1 then\n    \
    \            count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp037spl17.lua:48:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmp037spl17.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local count = 0\n    for word in string.gmatch(txt, \"%w+\"\
    ) do\n        words[#words + 1] = word\n    end\n    if #words == 0 then\n   \
    \     for letter in string.gmatch(txt, \"%a\") do\n            if string.byte(letter)\
    \ % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgg6snqbo.lua:27:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpgg6snqbo.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    local c = txt:sub(i,\
    \ i)\n    while c ~= \"\" do\n        if c == \" \" or c == \",\" then\n     \
    \       if word ~= \"\" then\n                table.insert(words, word)\n    \
    \            word = \"\"\n            end\n        else\n            word = word\
    \ .. c\n        end\n        i = i + 1\n        c = txt:sub(i, i)\n    end\n \
    \   if word ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ local c = txt:sub(i, i)\n            local ord = string.byte(c) - string.byte(\"\
    a\")\n            if ord % 2 == 1 then\n                count = count + 1\n  \
    \          end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ud3ftpo.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp4ud3ftpo.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local char = \"\"\n    local count =\
    \ 0\n    for i = 1, #txt do\n        char = txt:sub(i, i)\n        if char ==\
    \ \" \" or char == \",\" then\n            if word ~= \"\" then\n            \
    \    table.insert(words, word)\n                word = \"\"\n            end\n\
    \        else\n            word = word .. char\n        end\n    end\n    if word\
    \ ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words == 0\
    \ then\n        for i = 1, #txt do\n            char = txt:sub(i, i)\n       \
    \     if i % 2 == 1 then\n                count = count + string.byte(char) -\
    \ string.byte(\"a\")\n            end\n        end\n        return count\n   \
    \ end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppw5y8ppq.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmppw5y8ppq.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    local n = string.len(txt)\n\
    \    local c = string.sub(txt, i, i)\n    while i <= n do\n        if c == \"\
    \ \" or c == \",\" then\n            if word ~= \"\" then\n                table.insert(words,\
    \ word)\n                word = \"\"\n            end\n        else\n        \
    \    word = word .. c\n        end\n        i = i + 1\n        c = string.sub(txt,\
    \ i, i)\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ n do\n            local c = string.sub(txt, i, i)\n            local o = string.byte(c)\
    \ - string.byte(\"a\")\n            if o % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ry0xjpr.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp1ry0xjpr.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    for i = 1, #txt do\n        local c =\
    \ txt:sub(i, i)\n        if c == \" \" or c == \",\" then\n            if word\
    \ ~= \"\" then\n                table.insert(words, word)\n                word\
    \ = \"\"\n            end\n        else\n            word = word .. c\n      \
    \  end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local n = string.byte(c)\
    \ - string.byte(\"a\")\n            if n % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nazyg4.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph0nazyg4.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local split_char = nil\n    local split_char_count\
    \ = 0\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c ==\
    \ \" \" then\n            if split_char == nil then\n                split_char\
    \ = \" \"\n                split_char_count = split_char_count + 1\n         \
    \   end\n            if word ~= \"\" then\n                table.insert(words,\
    \ word)\n                word = \"\"\n            end\n        elseif c == \"\
    ,\" then\n            if split_char == nil then\n                split_char =\
    \ \",\"\n                split_char_count = split_char_count + 1\n           \
    \ end\n            if word ~= \"\" then\n                table.insert(words, word)\n\
    \                word = \"\"\n            end\n        else\n            word\
    \ = word .. c\n        end\n    end\n    if word ~= \"\" then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     local count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            local ord = string.byte(c) - string.byte(\"a\")\n          \
    \  if ord % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n        return count\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzhhlfoz.lua:59:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmplzhhlfoz.lua:59: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    local\
    \ words = {}\n    for word in txt:gmatch(\"[^,]+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    local\
    \ count = 0\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n       \
    \ if c:lower() == c and i % 2 == 1 then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qjm0brh.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp9qjm0brh.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
