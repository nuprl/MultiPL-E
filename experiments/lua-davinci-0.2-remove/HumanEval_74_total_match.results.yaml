language: lua
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i,v in ipairs(lst1) do\n\t\ttotal1 = total1\
    \ + #v\n\tend\n\tfor i,v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\tend\n\
    \tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevlkuaxt.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpevlkuaxt.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i,v in ipairs(lst1) do\n    total1 = total1\
    \ + string.len(v)\n  end\n  for i,v in ipairs(lst2) do\n    total2 = total2 +\
    \ string.len(v)\n  end\n  if total1 < total2 then\n    return lst1\n  else\n \
    \   return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlvkfufe.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpvlvkfufe.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    elseif\
    \ total2 < total1 then\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + string.len(v)\n    end\n    for i, v in ipairs(lst2) do\n       \
    \ total2 = total2 + string.len(v)\n    end\n    if total1 < total2 then\n    \
    \    return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw2kd_2h.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxw2kd_2h.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i,v in ipairs(lst1) do\n\t\ttotal1 = total1\
    \ + #v\n\tend\n\tfor i,v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\tend\n\
    \tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevlkuaxt.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpevlkuaxt.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + string.len(v)\n    end\n    for i, v in ipairs(lst2) do\n       \
    \ total2 = total2 + string.len(v)\n    end\n    if total1 < total2 then\n    \
    \    return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw2kd_2h.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxw2kd_2h.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + string.len(v)\n    end\n    for i,v in ipairs(lst2) do\n        total2\
    \ = total2 + string.len(v)\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoybnkho8.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpoybnkho8.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, str in ipairs(lst1) do\n      \
    \  total1 = total1 + #str\n    end\n    for _, str in ipairs(lst2) do\n      \
    \  total2 = total2 + #str\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0suak0k1.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp0suak0k1.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i, v in ipairs(lst1) do\n\t\ttotal1 =\
    \ total1 + #v\n\tend\n\tfor i, v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\
    \tend\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp619zhpui.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp619zhpui.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndzosora.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpndzosora.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndzosora.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpndzosora.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1 =\
    \ total1 + #v\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cpmt01a.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp_cpmt01a.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i,v in ipairs(lst1) do\n    total1 = total1\
    \ + #v\n  end\n  for i,v in ipairs(lst2) do\n    total2 = total2 + #v\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptf_ek644.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptf_ek644.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + string.len(v)\n    end\n    for i,v in ipairs(lst2) do\n        total2\
    \ = total2 + string.len(v)\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoybnkho8.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpoybnkho8.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1 = sum1 +\
    \ #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuajtrsyx.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpuajtrsyx.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i = 1, #lst1 do\n\t\ttotal1 = total1 +\
    \ #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\ttotal2 = total2 + #lst2[i]\n\tend\n\
    \tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzi9_kgv6.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpzi9_kgv6.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ function total_chars(lst)\n        local total = 0\n        for _, str in ipairs(lst)\
    \ do\n            total = total + #str\n        end\n        return total\n  \
    \  end\n    local total1 = total_chars(lst1)\n    local total2 = total_chars(lst2)\n\
    \    if total1 < total2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkggvwn1u.lua:31:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpkggvwn1u.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndzosora.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpndzosora.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, s in ipairs(lst1) do\n        total1\
    \ = total1 + #s\n    end\n    for _, s in ipairs(lst2) do\n        total2 = total2\
    \ + #s\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaaygrfx4.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpaaygrfx4.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i, v in ipairs(lst1) do\n\t\ttotal1 =\
    \ total1 + #v\n\tend\n\tfor i, v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\
    \tend\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp619zhpui.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp619zhpui.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + string.len(v)\n    end\n    for i, v in ipairs(lst2) do\n       \
    \ total2 = total2 + string.len(v)\n    end\n    if total1 < total2 then\n    \
    \    return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw2kd_2h.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxw2kd_2h.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1 =\
    \ total1 + string.len(v)\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2\
    \ + string.len(v)\n  end\n  if total1 < total2 then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5y2qhuhk.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5y2qhuhk.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i,v in ipairs(lst1) do\n    total1 = total1\
    \ + #v\n  end\n  for i,v in ipairs(lst2) do\n    total2 = total2 + #v\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptf_ek644.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptf_ek644.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1 =\
    \ total1 + #v\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cpmt01a.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp_cpmt01a.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i,v in ipairs(lst1) do\n    total1 = total1\
    \ + #v\n  end\n  for i,v in ipairs(lst2) do\n    total2 = total2 + #v\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptf_ek644.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptf_ek644.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i, v in ipairs(lst1) do\n\t\ttotal1 =\
    \ total1 + #v\n\tend\n\tfor i, v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\
    \tend\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp619zhpui.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp619zhpui.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndzosora.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpndzosora.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1 =\
    \ total1 + string.len(v)\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2\
    \ + string.len(v)\n  end\n  if total1 < total2 then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5y2qhuhk.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5y2qhuhk.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1 =\
    \ total1 + #v\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cpmt01a.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp_cpmt01a.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i = 1, #lst1 do\n\t\ttotal1 = total1 +\
    \ #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\ttotal2 = total2 + #lst2[i]\n\tend\n\
    \tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzi9_kgv6.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpzi9_kgv6.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndzosora.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpndzosora.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + string.len(v)\n    end\n    for i,v in ipairs(lst2) do\n        total2\
    \ = total2 + string.len(v)\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoybnkho8.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpoybnkho8.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndzosora.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpndzosora.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1 =\
    \ total1 + #v\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cpmt01a.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp_cpmt01a.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndzosora.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpndzosora.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i,v in ipairs(lst1) do\n    total1 = total1\
    \ + #v\n  end\n  for i,v in ipairs(lst2) do\n    total2 = total2 + #v\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptf_ek644.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptf_ek644.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for _, v in ipairs(lst1) do\n    total1 =\
    \ total1 + #v\n  end\n  for _, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57a3ke0i.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp57a3ke0i.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndzosora.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpndzosora.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfk8duj7.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpgfk8duj7.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + string.len(v)\n    end\n    for i, v in ipairs(lst2) do\n       \
    \ total2 = total2 + string.len(v)\n    end\n    if total1 < total2 then\n    \
    \    return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw2kd_2h.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxw2kd_2h.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i, v in ipairs(lst1) do\n\t\ttotal1 =\
    \ total1 + #v\n\tend\n\tfor i, v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\
    \tend\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp619zhpui.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp619zhpui.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i = 1, #lst1 do\n\t\ttotal1 = total1 +\
    \ #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\ttotal2 = total2 + #lst2[i]\n\tend\n\
    \tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzi9_kgv6.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpzi9_kgv6.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ sum1 = 0\n\tlocal sum2 = 0\n\tfor i, v in ipairs(lst1) do\n\t\tsum1 = sum1 +\
    \ #v\n\tend\n\tfor i, v in ipairs(lst2) do\n\t\tsum2 = sum2 + #v\n\tend\n\tif\
    \ sum1 < sum2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq_nhabt.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpoq_nhabt.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i, v in ipairs(lst1) do\n\t\ttotal1 =\
    \ total1 + string.len(v)\n\tend\n\tfor i, v in ipairs(lst2) do\n\t\ttotal2 = total2\
    \ + string.len(v)\n\tend\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\
    \t\treturn lst2\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofgoc_nm.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpofgoc_nm.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i,v in ipairs(lst1) do\n\t\ttotal1 = total1\
    \ + #v\n\tend\n\tfor i,v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\tend\n\
    \tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevlkuaxt.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpevlkuaxt.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i,v in ipairs(lst1) do\n\t\ttotal1 = total1\
    \ + #v\n\tend\n\tfor i,v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\tend\n\
    \tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevlkuaxt.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpevlkuaxt.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i,v in ipairs(lst1) do\n    total1 = total1\
    \ + #v\n  end\n  for i,v in ipairs(lst2) do\n    total2 = total2 + #v\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptf_ek644.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptf_ek644.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i,v in ipairs(lst1) do\n\t\ttotal1 = total1\
    \ + string.len(v)\n\tend\n\tfor i,v in ipairs(lst2) do\n\t\ttotal2 = total2 +\
    \ string.len(v)\n\tend\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\
    \treturn lst2\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwaz3zt7.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpcwaz3zt7.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndzosora.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpndzosora.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1 =\
    \ total1 + #v\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cpmt01a.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp_cpmt01a.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n  end\n\
    \  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndzosora.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpndzosora.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuh937iat.lua:12:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpuh937iat.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1 =\
    \ total1 + #v\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cpmt01a.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp_cpmt01a.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1 =\
    \ total1 + #v\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cpmt01a.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp_cpmt01a.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\tfor i = 1, #lst1 do\n\t\ttotal1 = total1 +\
    \ #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\ttotal2 = total2 + #lst2[i]\n\tend\n\
    \tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzi9_kgv6.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpzi9_kgv6.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    elseif\
    \ total2 < total1 then\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + string.len(v)\n    end\n    for i, v in ipairs(lst2) do\n       \
    \ total2 = total2 + string.len(v)\n    end\n    if total1 < total2 then\n    \
    \    return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw2kd_2h.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxw2kd_2h.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nql4wnd.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5nql4wnd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptme1t7my.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptme1t7my.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1\
    \ = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2\
    \ + #v\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dag3a3s.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4dag3a3s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for _, s in ipairs(lst1) do\n    total1 =\
    \ total1 + #s\n  end\n  for _, s in ipairs(lst2) do\n    total2 = total2 + #s\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvnk2trv.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpkvnk2trv.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n  local\
    \ total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1 =\
    \ total1 + #v\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cpmt01a.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp_cpmt01a.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\nlocal function total_match(lst1, lst2)\n    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2\
    \ + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28j1q83.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf28j1q83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
