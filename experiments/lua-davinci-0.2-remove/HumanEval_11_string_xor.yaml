name: HumanEval_11_string_xor
language: lua
prompt: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
  \ binary XOR on these inputs and return result also as a string.\nlocal function\
  \ string_xor(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
  \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
  \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = \"\"\n    for i = 1, #a do\n        local a_bit\
    \ = a:sub(i, i)\n        local b_bit = b:sub(i, i)\n        if a_bit == b_bit\
    \ then\n            result = result .. \"0\"\n        else\n            result\
    \ = result .. \"1\"\n        end\n    end\n    return result\nend", "    local\
    \ result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n\
    \            result = result .. \"0\"\n        else\n            result = result\
    \ .. \"1\"\n        end\n    end\n    return result\nend", "    local result =\
    \ \"\"\n    local length = math.max(#a, #b)\n    for i = 1, length do\n      \
    \  local x = tonumber(a:sub(i, i)) or 0\n        local y = tonumber(b:sub(i, i))\
    \ or 0\n        local z = x ~ y\n        result = result .. z\n    end\n    return\
    \ result\nend", "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i,\
    \ i) == b:sub(i, i) then\n            result = result .. \"0\"\n        else\n\
    \            result = result .. \"1\"\n        end\n    end\n    return result\n\
    end", "  local result = \"\"\n  local length = math.max(#a, #b)\n  for i = 1,\
    \ length do\n    local x = tonumber(a:sub(i, i)) or 0\n    local y = tonumber(b:sub(i,\
    \ i)) or 0\n    local z = x ~ y\n    result = result .. z\n  end\n  return result\n\
    end", "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) ==\
    \ b:sub(i, i) then\n            result = result .. \"0\"\n        else\n     \
    \       result = result .. \"1\"\n        end\n    end\n    return result\nend",
  "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i,\
    \ i) then\n            result = result .. \"0\"\n        else\n            result\
    \ = result .. \"1\"\n        end\n    end\n    return result\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local a_char = a:sub(i, i)\n    local b_char\
    \ = b:sub(i, i)\n    local a_int = tonumber(a_char)\n    local b_int = tonumber(b_char)\n\
    \    local xor_result = a_int ~ b_int\n    result = result .. tostring(xor_result)\n\
    \  end\n  return result\nend", "    local result = \"\"\n    for i = 1, #a do\n\
    \        if a:sub(i, i) == b:sub(i, i) then\n            result = result .. \"\
    0\"\n        else\n            result = result .. \"1\"\n        end\n    end\n\
    \    return result\nend", "    local result = \"\"\n    for i = 1, #a do\n   \
    \     local a_char = a:sub(i, i)\n        local b_char = b:sub(i, i)\n       \
    \ if a_char == b_char then\n            result = result .. \"0\"\n        else\n\
    \            result = result .. \"1\"\n        end\n    end\n    return result\n\
    end", "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) ==\
    \ b:sub(i, i) then\n            result = result .. \"0\"\n        else\n     \
    \       result = result .. \"1\"\n        end\n    end\n    return result\nend",
  "    local result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i,\
    \ i) then\n            result = result .. \"0\"\n        else\n            result\
    \ = result .. \"1\"\n        end\n    end\n    return result\nend", "    local\
    \ result = \"\"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n\
    \            result = result .. \"0\"\n        else\n            result = result\
    \ .. \"1\"\n        end\n    end\n    return result\nend", "    local result =\
    \ \"\"\n    for i = 1, #a do\n        local x = a:sub(i, i)\n        local y =\
    \ b:sub(i, i)\n        if x ~= y then\n            result = result .. \"1\"\n\
    \        else\n            result = result .. \"0\"\n        end\n    end\n  \
    \  return result\nend", "    local result = \"\"\n    for i = 1, #a do\n     \
    \   if a:sub(i, i) == b:sub(i, i) then\n            result = result .. \"0\"\n\
    \        else\n            result = result .. \"1\"\n        end\n    end\n  \
    \  return result\nend", "    local result = \"\"\n    for i = 1, #a do\n     \
    \   if a:sub(i, i) == b:sub(i, i) then\n            result = result .. \"0\"\n\
    \        else\n            result = result .. \"1\"\n        end\n    end\n  \
    \  return result\nend", "    local result = \"\"\n    for i = 1, #a do\n     \
    \   if a:sub(i, i) == b:sub(i, i) then\n            result = result .. \"0\"\n\
    \        else\n            result = result .. \"1\"\n        end\n    end\n  \
    \  return result\nend", "    local result = \"\"\n    local length = math.max(#a,\
    \ #b)\n    for i = 1, length do\n        local a_bit = a:sub(i, i) == \"1\"\n\
    \        local b_bit = b:sub(i, i) == \"1\"\n        if a_bit ~= b_bit then\n\
    \            result = result .. \"1\"\n        else\n            result = result\
    \ .. \"0\"\n        end\n    end\n    return result\nend", "    local result =\
    \ \"\"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n   \
    \         result = result .. \"0\"\n        else\n            result = result\
    \ .. \"1\"\n        end\n    end\n    return result\nend", "    local result =\
    \ \"\"\n    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n   \
    \         result = result .. \"0\"\n        else\n            result = result\
    \ .. \"1\"\n        end\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
