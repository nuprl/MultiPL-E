name: HumanEval_1_separate_paren_groups
language: lua
prompt: "-- Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n-- separate those group into separate strings and\
  \ return the list of those.\n-- Separate groups are balanced (each open brace is\
  \ properly closed) and not nested within each other\n-- Ignore any spaces in the\
  \ input string.\nlocal function separate_paren_groups(paren_string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
  \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
  \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
  \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
  \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
  \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    local current_group = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif c == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        elseif c ~= \" \"\
    \ then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return result\nend", "    local res = {}\n    local start = 1\n    local\
    \ level = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            level = level + 1\n        elseif\
    \ c == ')' then\n            level = level - 1\n            if level == 0 then\n\
    \                res[#res + 1] = paren_string:sub(start, i)\n                start\
    \ = i + 1\n            end\n        end\n    end\n    return res\nend", "    local\
    \ result = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(result, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend", "  \
    \  local paren_groups = {}\n    local paren_group = \"\"\n    local paren_level\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_level = paren_level + 1\n\
    \        elseif char == \")\" then\n            paren_level = paren_level - 1\n\
    \        end\n        if paren_level == 0 and char == \")\" then\n           \
    \ table.insert(paren_groups, paren_group)\n            paren_group = \"\"\n  \
    \      elseif paren_level > 0 then\n            paren_group = paren_group .. char\n\
    \        end\n    end\n    return paren_groups\nend", "\tlocal result = {}\n\t\
    local current_group = {}\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\
    \tparen_count = paren_count + 1\n\t\telseif char == \")\" then\n\t\t\tparen_count\
    \ = paren_count - 1\n\t\tend\n\t\tif paren_count == 0 then\n\t\t\tif #current_group\
    \ > 0 then\n\t\t\t\ttable.insert(result, table.concat(current_group))\n\t\t\t\t\
    current_group = {}\n\t\t\tend\n\t\telse\n\t\t\tif char ~= \" \" then\n\t\t\t\t\
    table.insert(current_group, char)\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end", "\tlocal groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count\
    \ = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\
    \t\tif char == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count =\
    \ paren_count - 1\n\t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count\
    \ == 0 then\n\t\t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group\
    \ = \"\"\n\t\t\tend\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn groups\nend", "\tlocal paren_groups = {}\n\
    \tlocal paren_group = \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"(\" then\n\t\t\tparen_count\
    \ = paren_count + 1\n\t\t\tparen_group = paren_group .. c\n\t\telseif c == \"\
    )\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\tparen_group = paren_group\
    \ .. c\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(paren_groups, paren_group)\n\
    \t\t\t\tparen_group = \"\"\n\t\t\tend\n\t\telseif c ~= \" \" then\n\t\t\tparen_group\
    \ = paren_group .. c\n\t\tend\n\tend\n\treturn paren_groups\nend", "    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            paren_count = paren_count + 1\n   \
    \     elseif char == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                result[#result + 1] = current_group\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend", "  \
    \  local result = {}\n    local current_group = \"\"\n    local paren_count =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend", "  \
    \  local paren_groups = {}\n    local current_group = ''\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            paren_count = paren_count + 1\n\
    \            current_group = current_group .. char\n        elseif char == ')'\
    \ then\n            paren_count = paren_count - 1\n            current_group =\
    \ current_group .. char\n            if paren_count == 0 then\n              \
    \  table.insert(paren_groups, current_group)\n                current_group =\
    \ ''\n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend",
  "    local groups = {}\n    local current_group = \"\"\n    local paren_count =\
    \ 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n\
    \        if c == \"(\" then\n            paren_count = paren_count + 1\n     \
    \   elseif c == \")\" then\n            paren_count = paren_count - 1\n      \
    \  end\n        if paren_count == 0 then\n            if c == \" \" then\n   \
    \             -- ignore\n            elseif c == \")\" then\n                --\
    \ ignore\n            else\n                current_group = current_group .. c\n\
    \            end\n        else\n            current_group = current_group .. c\n\
    \        end\n        if paren_count == 0 and current_group ~= \"\" then\n   \
    \         table.insert(groups, current_group)\n            current_group = \"\"\
    \n        end\n    end\n    return groups\nend", "    local groups = {}\n    local\
    \ group = \"\"\n    local level = 0\n    for i = 1, #paren_string do\n       \
    \ local char = paren_string:sub(i, i)\n        if char == \"(\" then\n       \
    \     level = level + 1\n        elseif char == \")\" then\n            level\
    \ = level - 1\n        end\n        if level == 0 then\n            if char ==\
    \ \" \" then\n                char = \"\"\n            end\n            if char\
    \ == \",\" then\n                table.insert(groups, group)\n               \
    \ group = \"\"\n            else\n                group = group .. char\n    \
    \        end\n        else\n            group = group .. char\n        end\n \
    \   end\n    table.insert(groups, group)\n    return groups\nend", "\tlocal result\
    \ = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\
    \tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group .. char\n\
    \t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(result,\
    \ current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif paren_count\
    \ > 0 then\n\t\t\tcurrent_group = current_group .. char\n\t\tend\n\tend\n\treturn\
    \ result\nend", "\tlocal groups = {}\n\tlocal current_group = {}\n\tlocal level\
    \ = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\
    \t\tif char == \"(\" then\n\t\t\tlevel = level + 1\n\t\t\tcurrent_group[level]\
    \ = \"(\"\n\t\telseif char == \")\" then\n\t\t\tlevel = level - 1\n\t\t\tif level\
    \ == 0 then\n\t\t\t\ttable.insert(groups, table.concat(current_group))\n\t\t\t\
    \tcurrent_group = {}\n\t\t\telse\n\t\t\t\tcurrent_group[level] = \")\"\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn groups\nend", "    local groups = {}\n    local\
    \ current_group = \"\"\n    local open_parens = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            open_parens = open_parens + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            open_parens = open_parens\
    \ - 1\n            current_group = current_group .. char\n            if open_parens\
    \ == 0 then\n                table.insert(groups, current_group)\n           \
    \     current_group = \"\"\n            end\n        elseif open_parens > 0 then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend", "    local result = {}\n    local current_group = ''\n\
    \    local open_parens = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == '(' then\n            open_parens\
    \ = open_parens + 1\n        elseif char == ')' then\n            open_parens\
    \ = open_parens - 1\n        end\n        current_group = current_group .. char\n\
    \        if open_parens == 0 then\n            result[#result + 1] = current_group\n\
    \            current_group = ''\n        end\n    end\n    return result\nend",
  "    local result = {}\n    local current_group = \"\"\n    local paren_count =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend", "  \
    \  local paren_groups = {}\n    local group_start = 1\n    local group_end = 1\n\
    \    local paren_count = 0\n    for i = 1, #paren_string do\n        local c =\
    \ paren_string:sub(i, i)\n        if c == '(' then\n            paren_count =\
    \ paren_count + 1\n        elseif c == ')' then\n            paren_count = paren_count\
    \ - 1\n        end\n        if paren_count == 0 then\n            group_end =\
    \ i\n            table.insert(paren_groups, paren_string:sub(group_start, group_end))\n\
    \            group_start = i + 1\n        end\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    local current_group = \"\"\n    local\
    \ paren_count = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == \"(\" then\n            paren_count = paren_count + 1\n\
    \            current_group = current_group .. c\n        elseif c == \")\" then\n\
    \            paren_count = paren_count - 1\n            current_group = current_group\
    \ .. c\n            if paren_count == 0 then\n                table.insert(paren_groups,\
    \ current_group)\n                current_group = \"\"\n            end\n    \
    \    elseif c ~= \" \" then\n            current_group = current_group .. c\n\
    \        end\n    end\n    return paren_groups\nend", "    local result = {}\n\
    \    local current_group = \"\"\n    local open_parens = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            open_parens = open_parens + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            open_parens = open_parens\
    \ - 1\n            current_group = current_group .. char\n            if open_parens\
    \ == 0 then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        elseif char ~= \" \" then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return result\nend", "    local result = {}\n    local current_group = \"\"\n\
    \    local paren_count = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == \"(\" then\n            paren_count\
    \ = paren_count + 1\n        elseif char == \")\" then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if char == \" \" then\n                if #current_group > 0 then\n      \
    \              table.insert(result, current_group)\n                    current_group\
    \ = \"\"\n                end\n            else\n                current_group\
    \ = current_group .. char\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    if #current_group > 0 then\n\
    \        table.insert(result, current_group)\n    end\n    return result\nend",
  "    local result = {}\n    local current_group = \"\"\n    local open_parens =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            open_parens = open_parens + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. char\n            if open_parens == 0 then\n            \
    \    table.insert(result, current_group)\n                current_group = \"\"\
    \n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend", "\t\
    local groups = {}\n\tlocal group = \"\"\n\tlocal depth = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"(\" then\n\t\t\tdepth\
    \ = depth + 1\n\t\t\tgroup = group .. c\n\t\telseif c == \")\" then\n\t\t\tdepth\
    \ = depth - 1\n\t\t\tgroup = group .. c\n\t\t\tif depth == 0 then\n\t\t\t\ttable.insert(groups,\
    \ group)\n\t\t\t\tgroup = \"\"\n\t\t\tend\n\t\telseif c ~= \" \" then\n\t\t\t\
    group = group .. c\n\t\tend\n\tend\n\treturn groups\nend", "    local groups =\
    \ {}\n    local current_group = \"\"\n    local paren_count = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == \"(\" then\n            paren_count = paren_count + 1\n        elseif char\
    \ == \")\" then\n            paren_count = paren_count - 1\n        end\n    \
    \    if paren_count == 0 then\n            if current_group ~= \"\" then\n   \
    \             table.insert(groups, current_group)\n                current_group\
    \ = \"\"\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return groups\nend", "  local groups = {}\n\
    \  local current_group = \"\"\n  local paren_count = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == \"(\" then\n   \
    \   paren_count = paren_count + 1\n      current_group = current_group .. char\n\
    \    elseif char == \")\" then\n      paren_count = paren_count - 1\n      current_group\
    \ = current_group .. char\n      if paren_count == 0 then\n        table.insert(groups,\
    \ current_group)\n        current_group = \"\"\n      end\n    elseif char ~=\
    \ \" \" then\n      current_group = current_group .. char\n    end\n  end\n  return\
    \ groups\nend", "    local result = {}\n    local current_group = \"\"\n    local\
    \ open_parens = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            open_parens = open_parens + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. char\n            if open_parens == 0 then\n            \
    \    table.insert(result, current_group)\n                current_group = \"\"\
    \n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend", "\t\
    local paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal open_parens = 0\n\
    \tfor i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif\
    \ char == \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\telseif char == \")\" then\n\t\t\topen_parens =\
    \ open_parens - 1\n\t\t\tcurrent_group = current_group .. char\n\t\t\tif open_parens\
    \ == 0 then\n\t\t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group\
    \ = \"\"\n\t\t\tend\n\t\telseif open_parens > 0 then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn paren_groups\nend", "    local groups = {}\n\
    \    local current_group = \"\"\n    local open_count = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == \"(\" then\n \
    \           open_count = open_count + 1\n        elseif c == \")\" then\n    \
    \        open_count = open_count - 1\n        end\n        if open_count == 0\
    \ then\n            if current_group ~= \"\" then\n                table.insert(groups,\
    \ current_group)\n                current_group = \"\"\n            end\n    \
    \    else\n            current_group = current_group .. c\n        end\n    end\n\
    \    return groups\nend", "    local paren_groups = {}\n    local current_group\
    \ = \"\"\n    local open_parens = 0\n    for i = 1, #paren_string do\n       \
    \ local char = paren_string:sub(i, i)\n        if char == \"(\" then\n       \
    \     open_parens = open_parens + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            open_parens = open_parens\
    \ - 1\n            current_group = current_group .. char\n            if open_parens\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = \"\"\n            end\n        elseif char ~= \" \"\
    \ then\n            current_group = current_group .. char\n        end\n    end\n\
    \    return paren_groups\nend", "\tlocal result = {}\n\tlocal current_group =\
    \ \"\"\n\tlocal open_parens = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char\
    \ = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\topen_parens = open_parens\
    \ + 1\n\t\t\tcurrent_group = current_group .. char\n\t\telseif char == \")\" then\n\
    \t\t\topen_parens = open_parens - 1\n\t\t\tcurrent_group = current_group .. char\n\
    \t\t\tif open_parens == 0 then\n\t\t\t\ttable.insert(result, current_group)\n\t\
    \t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\tend\n\tend\n\treturn result\nend", "    local result\
    \ = {}\n    local current_group = \"\"\n    local open_parens = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == \"(\" then\n            open_parens = open_parens + 1\n            current_group\
    \ = current_group .. char\n        elseif char == \")\" then\n            open_parens\
    \ = open_parens - 1\n            current_group = current_group .. char\n     \
    \       if open_parens == 0 then\n                table.insert(result, current_group)\n\
    \                current_group = \"\"\n            end\n        elseif open_parens\
    \ > 0 then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return result\nend", "    local result = {}\n    local current_group\
    \ = \"\"\n    local open_parens = 0\n    for i = 1, #paren_string do\n       \
    \ local char = paren_string:sub(i, i)\n        if char == \"(\" then\n       \
    \     open_parens = open_parens + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            open_parens = open_parens\
    \ - 1\n            current_group = current_group .. char\n            if open_parens\
    \ == 0 then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        elseif char ~= \" \" then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return result\nend", "    local groups = {}\n    local current_group = \"\"\n\
    \    local paren_count = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == \"(\" then\n            paren_count\
    \ = paren_count + 1\n        elseif char == \")\" then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if #current_group > 0 then\n                table.insert(groups, current_group)\n\
    \                current_group = \"\"\n            end\n        else\n       \
    \     current_group = current_group .. char\n        end\n    end\n    return\
    \ groups\nend", "\tlocal groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count\
    \ = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\
    \t\tif char == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count =\
    \ paren_count - 1\n\t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count\
    \ == 0 then\n\t\t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group\
    \ = \"\"\n\t\t\tend\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn groups\nend", "    local groups = {}\n   \
    \ local current_group = \"\"\n    local open_parens = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            open_parens = open_parens + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            open_parens = open_parens\
    \ - 1\n            current_group = current_group .. char\n            if open_parens\
    \ == 0 then\n                table.insert(groups, current_group)\n           \
    \     current_group = \"\"\n            end\n        elseif open_parens > 0 then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend", "    local groups = {}\n    local current_group = {}\n\
    \    local open_parens = 0\n    for c in paren_string:gmatch(\".\") do\n     \
    \   if c == \"(\" then\n            open_parens = open_parens + 1\n        elseif\
    \ c == \")\" then\n            open_parens = open_parens - 1\n        end\n  \
    \      if open_parens == 0 then\n            table.insert(groups, table.concat(current_group))\n\
    \            current_group = {}\n        else\n            table.insert(current_group,\
    \ c)\n        end\n    end\n    return groups\nend", "\tlocal paren_groups = {}\n\
    \tlocal current_group = \"\"\n\tlocal open_parens = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"(\" then\n\t\t\topen_parens\
    \ = open_parens + 1\n\t\t\tcurrent_group = current_group .. c\n\t\telseif c ==\
    \ \")\" then\n\t\t\topen_parens = open_parens - 1\n\t\t\tcurrent_group = current_group\
    \ .. c\n\t\t\tif open_parens == 0 then\n\t\t\t\ttable.insert(paren_groups, current_group)\n\
    \t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif c ~= \" \" then\n\t\t\tcurrent_group\
    \ = current_group .. c\n\t\tend\n\tend\n\treturn paren_groups\nend", "\tlocal\
    \ paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\
    \t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn paren_groups\nend", "    local result = {}\n\
    \    local current_group = \"\"\n    local open_parens = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            open_parens = open_parens + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            open_parens = open_parens\
    \ - 1\n            current_group = current_group .. char\n            if open_parens\
    \ == 0 then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        elseif char ~= \" \" then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return result\nend", "    local result = {}\n    local current_group = \"\"\n\
    \    local paren_count = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == \"(\" then\n            paren_count\
    \ = paren_count + 1\n        elseif char == \")\" then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if char == \" \" then\n                if #current_group > 0 then\n      \
    \              table.insert(result, current_group)\n                    current_group\
    \ = \"\"\n                end\n            else\n                current_group\
    \ = current_group .. char\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    if #current_group > 0 then\n\
    \        table.insert(result, current_group)\n    end\n    return result\nend",
  "    local result = {}\n    local current_group = \"\"\n    local open_parens =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            open_parens = open_parens + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. char\n            if open_parens == 0 then\n            \
    \    table.insert(result, current_group)\n                current_group = \"\"\
    \n            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend", "  \
    \  local result = {}\n    local current_group = {}\n    local paren_stack = {}\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            table.insert(paren_stack, char)\n  \
    \      elseif char == ')' then\n            table.remove(paren_stack)\n      \
    \      if #paren_stack == 0 then\n                table.insert(result, table.concat(current_group))\n\
    \                current_group = {}\n            end\n        elseif #paren_stack\
    \ > 0 then\n            table.insert(current_group, char)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    local current_group = \"\
    \"\n    local paren_count = 0\n    for i = 1, #paren_string do\n        local\
    \ c = paren_string:sub(i, i)\n        if c == \"(\" then\n            paren_count\
    \ = paren_count + 1\n        elseif c == \")\" then\n            paren_count =\
    \ paren_count - 1\n        end\n        if paren_count == 0 and c == \")\" then\n\
    \            table.insert(result, current_group)\n            current_group =\
    \ \"\"\n        elseif c ~= \" \" then\n            current_group = current_group\
    \ .. c\n        end\n    end\n    return result\nend", "\tlocal groups = {}\n\t\
    local group = \"\"\n\tlocal depth = 0\n\tfor i = 1, #paren_string do\n\t\tlocal\
    \ char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\tdepth = depth\
    \ + 1\n\t\t\tgroup = group .. char\n\t\telseif char == \")\" then\n\t\t\tdepth\
    \ = depth - 1\n\t\t\tgroup = group .. char\n\t\t\tif depth == 0 then\n\t\t\t\t\
    table.insert(groups, group)\n\t\t\t\tgroup = \"\"\n\t\t\tend\n\t\telseif char\
    \ ~= \" \" then\n\t\t\tgroup = group .. char\n\t\tend\n\tend\n\treturn groups\n\
    end", "\tlocal paren_groups = {}\n\tlocal paren_group = \"\"\n\tlocal paren_count\
    \ = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\
    \t\tif char == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tparen_group\
    \ = paren_group .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count\
    \ - 1\n\t\t\tparen_group = paren_group .. char\n\t\t\tif paren_count == 0 then\n\
    \t\t\t\ttable.insert(paren_groups, paren_group)\n\t\t\t\tparen_group = \"\"\n\t\
    \t\tend\n\t\telseif char ~= \" \" then\n\t\t\tparen_group = paren_group .. char\n\
    \t\tend\n\tend\n\treturn paren_groups\nend", "    local result = {}\n    local\
    \ current_group = {}\n    local paren_count = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_count = paren_count + 1\n        elseif char == ')' then\n\
    \            paren_count = paren_count - 1\n        end\n        if paren_count\
    \ == 0 then\n            if #current_group > 0 then\n                table.insert(result,\
    \ table.concat(current_group))\n                current_group = {}\n         \
    \   end\n        else\n            table.insert(current_group, char)\n       \
    \ end\n    end\n    return result\nend", "\tlocal groups = {}\n\tlocal current_group\
    \ = \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char\
    \ = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\tparen_count = paren_count\
    \ + 1\n\t\t\tcurrent_group = current_group .. char\n\t\telseif char == \")\" then\n\
    \t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group = current_group .. char\n\
    \t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(groups, current_group)\n\t\
    \t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\tend\n\tend\n\treturn groups\nend", "    local result\
    \ = {}\n    local current_group = {}\n    local paren_count = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == '(' then\n            paren_count = paren_count + 1\n        elseif char\
    \ == ')' then\n            paren_count = paren_count - 1\n        end\n      \
    \  if paren_count == 0 then\n            if #current_group > 0 then\n        \
    \        table.insert(result, table.concat(current_group))\n                current_group\
    \ = {}\n            end\n        else\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return result\nend", "    local groups = {}\n\
    \    local group = \"\"\n    local level = 0\n    for i = 1, #paren_string do\n\
    \        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            level = level + 1\n        elseif char == \")\" then\n          \
    \  level = level - 1\n        end\n        if char == \" \" then\n           \
    \ -- ignore spaces\n        elseif level == 0 then\n            if group ~= \"\
    \" then\n                table.insert(groups, group)\n                group =\
    \ \"\"\n            end\n        else\n            group = group .. char\n   \
    \     end\n    end\n    if group ~= \"\" then\n        table.insert(groups, group)\n\
    \    end\n    return groups\nend", "\tlocal paren_groups = {}\n\tlocal current_group\
    \ = \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char\
    \ = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\tparen_count = paren_count\
    \ + 1\n\t\t\tcurrent_group = current_group .. char\n\t\telseif char == \")\" then\n\
    \t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group = current_group .. char\n\
    \t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(paren_groups, current_group)\n\
    \t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\t\
    current_group = current_group .. char\n\t\tend\n\tend\n\treturn paren_groups\n\
    end", "\tlocal result = {}\n\tlocal current_group = \"\"\n\tlocal current_level\
    \ = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\
    \t\tif char == \"(\" then\n\t\t\tcurrent_level = current_level + 1\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\telseif char == \")\" then\n\t\t\tcurrent_level\
    \ = current_level - 1\n\t\t\tcurrent_group = current_group .. char\n\t\t\tif current_level\
    \ == 0 then\n\t\t\t\ttable.insert(result, current_group)\n\t\t\t\tcurrent_group\
    \ = \"\"\n\t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn result\nend", "\tlocal paren_groups = {}\n\
    \tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\
    \tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group .. char\n\
    \t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(paren_groups,\
    \ current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif paren_count\
    \ > 0 then\n\t\t\tcurrent_group = current_group .. char\n\t\tend\n\tend\n\treturn\
    \ paren_groups\nend", "    local groups = {}\n    local current_group = \"\"\n\
    \    local paren_count = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == \"(\" then\n            paren_count\
    \ = paren_count + 1\n        elseif char == \")\" then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if current_group ~= \"\" then\n                table.insert(groups, current_group)\n\
    \                current_group = \"\"\n            end\n        else\n       \
    \     current_group = current_group .. char\n        end\n    end\n    return\
    \ groups\nend", "    local result = {}\n    local current_group = \"\"\n    local\
    \ paren_count = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend", "\t\
    local paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\
    \tfor i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif\
    \ char == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count =\
    \ paren_count - 1\n\t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count\
    \ == 0 then\n\t\t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group\
    \ = \"\"\n\t\t\tend\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn paren_groups\nend", "\tlocal groups = {}\n\
    \tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"(\" then\n\t\t\tparen_count\
    \ = paren_count + 1\n\t\t\tcurrent_group = current_group .. c\n\t\telseif c ==\
    \ \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group = current_group\
    \ .. c\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(groups, current_group)\n\
    \t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif c ~= \" \" then\n\t\t\tcurrent_group\
    \ = current_group .. c\n\t\tend\n\tend\n\treturn groups\nend", "    -- TODO: Implement\
    \ this function\n    -- Hint: Use the stack data structure from the previous exercise\n\
    \    local stack = Stack:new()\n    local result = {}\n    local current_group\
    \ = \"\"\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            stack:push(char)\n        elseif\
    \ char == \")\" then\n            stack:pop()\n        end\n        current_group\
    \ = current_group .. char\n        if stack:is_empty() then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        end\n    end\n   \
    \ return result\nend", "    local groups = {}\n    local group = \"\"\n    local\
    \ depth = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            depth = depth + 1\n        elseif\
    \ char == \")\" then\n            depth = depth - 1\n        end\n        if depth\
    \ == 0 then\n            if char == \" \" then\n                char = \"\"\n\
    \            end\n            if char == \",\" then\n                table.insert(groups,\
    \ group)\n                group = \"\"\n            else\n                group\
    \ = group .. char\n            end\n        else\n            group = group ..\
    \ char\n        end\n    end\n    table.insert(groups, group)\n    return groups\n\
    end", "    local paren_groups = {}\n    local current_group = \"\"\n    local\
    \ open_parens = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            open_parens = open_parens + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. char\n            if open_parens == 0 then\n            \
    \    table.insert(paren_groups, current_group)\n                current_group\
    \ = \"\"\n            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend",
  "    local result = {}\n    local group = \"\"\n    local depth = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == \"(\" then\n            depth = depth + 1\n            group = group\
    \ .. char\n        elseif char == \")\" then\n            depth = depth - 1\n\
    \            group = group .. char\n            if depth == 0 then\n         \
    \       table.insert(result, group)\n                group = \"\"\n          \
    \  end\n        elseif char ~= \" \" then\n            group = group .. char\n\
    \        end\n    end\n    return result\nend", "    local groups = {}\n    local\
    \ group = \"\"\n    local paren_count = 0\n    for c in paren_string:gmatch(\"\
    .\") do\n        if c == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif c == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 and c == \")\" then\n            table.insert(groups,\
    \ group)\n            group = \"\"\n        elseif c ~= \" \" then\n         \
    \   group = group .. c\n        end\n    end\n    return groups\nend", "    local\
    \ result = {}\n    local current_group = {}\n    local depth = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == '(' then\n            depth = depth + 1\n        elseif char == ')'\
    \ then\n            depth = depth - 1\n        end\n        if depth == 0 then\n\
    \            if #current_group > 0 then\n                table.insert(result,\
    \ table.concat(current_group))\n                current_group = {}\n         \
    \   end\n        else\n            table.insert(current_group, char)\n       \
    \ end\n    end\n    return result\nend", "\tlocal result = {}\n\tlocal current_group\
    \ = {}\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string do\n\t\tlocal c =\
    \ paren_string:sub(i, i)\n\t\tif c == '(' then\n\t\t\tparen_count = paren_count\
    \ + 1\n\t\telseif c == ')' then\n\t\t\tparen_count = paren_count - 1\n\t\t\tif\
    \ paren_count == 0 then\n\t\t\t\ttable.insert(result, table.concat(current_group))\n\
    \t\t\t\tcurrent_group = {}\n\t\t\tend\n\t\telseif paren_count > 0 then\n\t\t\t\
    table.insert(current_group, c)\n\t\tend\n\tend\n\treturn result\nend", "    local\
    \ groups = {}\n    local current_group = \"\"\n    local open_parens = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == \"(\" then\n            open_parens = open_parens + 1\n   \
    \         current_group = current_group .. char\n        elseif char == \")\"\
    \ then\n            open_parens = open_parens - 1\n            current_group =\
    \ current_group .. char\n            if open_parens == 0 then\n              \
    \  table.insert(groups, current_group)\n                current_group = \"\"\n\
    \            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend", "  \
    \  local groups = {}\n    local current_group = \"\"\n    local open_parens =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            open_parens = open_parens + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. char\n            if open_parens == 0 then\n            \
    \    table.insert(groups, current_group)\n                current_group = \"\"\
    \n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend", "  \
    \  local groups = {}\n    local group = ''\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            paren_count = paren_count + 1\n        elseif c ==\
    \ ')' then\n            paren_count = paren_count - 1\n        end\n        if\
    \ paren_count == 0 and c == ')' then\n            table.insert(groups, group)\n\
    \            group = ''\n        else\n            group = group .. c\n      \
    \  end\n    end\n    return groups\nend", "\tlocal groups = {}\n\tlocal current_group\
    \ = \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char\
    \ = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\tparen_count = paren_count\
    \ + 1\n\t\t\tcurrent_group = current_group .. char\n\t\telseif char == \")\" then\n\
    \t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group = current_group .. char\n\
    \t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(groups, current_group)\n\t\
    \t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\tend\n\tend\n\treturn groups\nend", "    local groups\
    \ = {}\n    local current_group = ''\n    local open_parens = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == '(' then\n            open_parens = open_parens + 1\n        elseif char\
    \ == ')' then\n            open_parens = open_parens - 1\n        end\n      \
    \  if open_parens == 0 and char == ')' then\n            table.insert(groups,\
    \ current_group)\n            current_group = ''\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend", "    local groups = {}\n    local group = \"\"\n    local\
    \ open_parens = 0\n    for c in paren_string:gmatch(\".\") do\n        if c ==\
    \ \"(\" then\n            open_parens = open_parens + 1\n            group = group\
    \ .. c\n        elseif c == \")\" then\n            open_parens = open_parens\
    \ - 1\n            group = group .. c\n            if open_parens == 0 then\n\
    \                table.insert(groups, group)\n                group = \"\"\n \
    \           end\n        elseif open_parens > 0 then\n            group = group\
    \ .. c\n        end\n    end\n    return groups\nend", "    local groups = {}\n\
    \    local current_group = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            paren_count = paren_count + 1\n        elseif char == \")\" then\n\
    \            paren_count = paren_count - 1\n        end\n        if paren_count\
    \ == 0 then\n            if char == \" \" then\n                -- ignore spaces\n\
    \            elseif char == \")\" then\n                table.insert(groups, current_group)\n\
    \                current_group = \"\"\n            else\n                current_group\
    \ = current_group .. char\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend", "\t\
    local result = {}\n\tlocal current_group = {}\n\tlocal open_parens = 0\n\tfor\
    \ i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group[#current_group\
    \ + 1] = char\n\t\telseif char == \")\" then\n\t\t\topen_parens = open_parens\
    \ - 1\n\t\t\tcurrent_group[#current_group + 1] = char\n\t\t\tif open_parens ==\
    \ 0 then\n\t\t\t\tresult[#result + 1] = table.concat(current_group)\n\t\t\t\t\
    current_group = {}\n\t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group[#current_group\
    \ + 1] = char\n\t\tend\n\tend\n\treturn result\nend", "    local result = {}\n\
    \    local current_group = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            paren_count = paren_count + 1\n        elseif char == \")\" then\n\
    \            paren_count = paren_count - 1\n        end\n        if paren_count\
    \ == 0 then\n            if current_group ~= \"\" then\n                table.insert(result,\
    \ current_group)\n                current_group = \"\"\n            end\n    \
    \    else\n            current_group = current_group .. char\n        end\n  \
    \  end\n    return result\nend", "    local groups = {}\n    local group = \"\"\
    \n    local depth = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == \"(\" then\n            depth = depth + 1\n        elseif\
    \ c == \")\" then\n            depth = depth - 1\n        end\n        if depth\
    \ == 0 then\n            if c == \" \" then\n                if group ~= \"\"\
    \ then\n                    table.insert(groups, group)\n                    group\
    \ = \"\"\n                end\n            else\n                group = group\
    \ .. c\n            end\n        else\n            group = group .. c\n      \
    \  end\n    end\n    if group ~= \"\" then\n        table.insert(groups, group)\n\
    \    end\n    return groups\nend", "    local result = {}\n    local current_group\
    \ = {}\n    local paren_count = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_count\
    \ = paren_count + 1\n        elseif char == ')' then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if #current_group > 0 then\n                table.insert(result, table.concat(current_group))\n\
    \                current_group = {}\n            end\n        else\n         \
    \   table.insert(current_group, char)\n        end\n    end\n    if #current_group\
    \ > 0 then\n        table.insert(result, table.concat(current_group))\n    end\n\
    \    return result\nend", "\tlocal paren_groups = {}\n\tlocal paren_group = \"\
    \"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i,\
    \ i)\n\t\tif c == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tparen_group\
    \ = paren_group .. c\n\t\telseif c == \")\" then\n\t\t\tparen_count = paren_count\
    \ - 1\n\t\t\tparen_group = paren_group .. c\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(paren_groups, paren_group)\n\t\t\t\tparen_group = \"\"\n\t\t\
    \tend\n\t\telseif paren_count > 0 then\n\t\t\tparen_group = paren_group .. c\n\
    \t\tend\n\tend\n\treturn paren_groups\nend", "    local result = {}\n    local\
    \ current_group = {}\n    local open_parens = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            open_parens = open_parens + 1\n        elseif char == ')' then\n\
    \            open_parens = open_parens - 1\n        end\n        if open_parens\
    \ == 0 then\n            table.insert(result, table.concat(current_group))\n \
    \           current_group = {}\n        else\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return result\nend", "    local groups = {}\n\
    \    local group = \"\"\n    local open_parens = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            open_parens = open_parens + 1\n            group = group .. char\n\
    \        elseif char == \")\" then\n            open_parens = open_parens - 1\n\
    \            group = group .. char\n            if open_parens == 0 then\n   \
    \             table.insert(groups, group)\n                group = \"\"\n    \
    \        end\n        elseif open_parens > 0 then\n            group = group ..\
    \ char\n        end\n    end\n    return groups\nend", "    local paren_groups\
    \ = {}\n    local current_group = \"\"\n    local open_parens = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == \"(\" then\n            open_parens = open_parens + 1\n            current_group\
    \ = current_group .. char\n        elseif char == \")\" then\n            open_parens\
    \ = open_parens - 1\n            current_group = current_group .. char\n     \
    \       if open_parens == 0 then\n                table.insert(paren_groups, current_group)\n\
    \                current_group = \"\"\n            end\n        elseif open_parens\
    \ > 0 then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return paren_groups\nend", "    local paren_groups = {}\n    local\
    \ current_group = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            paren_count = paren_count + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            paren_count = paren_count\
    \ - 1\n            current_group = current_group .. char\n            if paren_count\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = \"\"\n            end\n        elseif paren_count\
    \ > 0 then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return paren_groups\nend", "    local groups = {}\n    local group\
    \ = ''\n    local paren_count = 0\n    for i = 1, #paren_string do\n        local\
    \ c = paren_string:sub(i, i)\n        if c == '(' then\n            paren_count\
    \ = paren_count + 1\n        elseif c == ')' then\n            paren_count = paren_count\
    \ - 1\n        end\n        if paren_count == 0 and c == ')' then\n          \
    \  table.insert(groups, group)\n            group = ''\n        else\n       \
    \     group = group .. c\n        end\n    end\n    return groups\nend", "\tlocal\
    \ result = {}\n\tlocal current_group = {}\n\tlocal level = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == '(' then\n\t\t\tlevel\
    \ = level + 1\n\t\t\tcurrent_group[level] = {}\n\t\telseif c == ')' then\n\t\t\
    \tif level == 0 then\n\t\t\t\terror(\"Unbalanced parentheses\")\n\t\t\tend\n\t\
    \t\tif level == 1 then\n\t\t\t\ttable.insert(result, table.concat(current_group[1]))\n\
    \t\t\t\tcurrent_group[1] = nil\n\t\t\tend\n\t\t\tlevel = level - 1\n\t\telseif\
    \ c ~= ' ' then\n\t\t\ttable.insert(current_group[level], c)\n\t\tend\n\tend\n\
    \tif level ~= 0 then\n\t\terror(\"Unbalanced parentheses\")\n\tend\n\treturn result\n\
    end", "    local paren_groups = {}\n    local current_group = \"\"\n    local\
    \ paren_count = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == \"(\" then\n            paren_count = paren_count + 1\n\
    \            current_group = current_group .. c\n        elseif c == \")\" then\n\
    \            paren_count = paren_count - 1\n            current_group = current_group\
    \ .. c\n            if paren_count == 0 then\n                table.insert(paren_groups,\
    \ current_group)\n                current_group = \"\"\n            end\n    \
    \    elseif c ~= \" \" then\n            current_group = current_group .. c\n\
    \        end\n    end\n    return paren_groups\nend", "    local result = {}\n\
    \    local current_group = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         paren_level = paren_level + 1\n        elseif c == ')' then\n      \
    \      paren_level = paren_level - 1\n        end\n        if paren_level == 0\
    \ then\n            if #current_group > 0 then\n                result[#result\
    \ + 1] = table.concat(current_group)\n                current_group = {}\n   \
    \         end\n        else\n            current_group[#current_group + 1] = c\n\
    \        end\n    end\n    if #current_group > 0 then\n        result[#result\
    \ + 1] = table.concat(current_group)\n    end\n    return result\nend", "    local\
    \ result = {}\n    local current_group = \"\"\n    local paren_count = 0\n   \
    \ for c in paren_string:gmatch(\".\") do\n        if c == \"(\" then\n       \
    \     paren_count = paren_count + 1\n        elseif c == \")\" then\n        \
    \    paren_count = paren_count - 1\n        end\n        if paren_count == 0 and\
    \ c == \")\" then\n            table.insert(result, current_group)\n         \
    \   current_group = \"\"\n        elseif c ~= \" \" then\n            current_group\
    \ = current_group .. c\n        end\n    end\n    return result\nend", "\tlocal\
    \ groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i\
    \ = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn groups\nend", "    local groups = {}\n    local group\
    \ = \"\"\n    local depth = 0\n    for i = 1, #paren_string do\n        local\
    \ c = paren_string:sub(i, i)\n        if c == \"(\" then\n            depth =\
    \ depth + 1\n        elseif c == \")\" then\n            depth = depth - 1\n \
    \       end\n        if depth == 0 then\n            if c == \" \" then\n    \
    \            if group ~= \"\" then\n                    table.insert(groups, group)\n\
    \                    group = \"\"\n                end\n            else\n   \
    \             group = group .. c\n            end\n        else\n            group\
    \ = group .. c\n        end\n    end\n    if group ~= \"\" then\n        table.insert(groups,\
    \ group)\n    end\n    return groups\nend", "    local result = {}\n    local\
    \ current_group = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == \"(\" then\n \
    \           paren_count = paren_count + 1\n        elseif c == \")\" then\n  \
    \          paren_count = paren_count - 1\n        end\n        if paren_count\
    \ == 0 and c == \")\" then\n            table.insert(result, current_group)\n\
    \            current_group = \"\"\n        elseif c ~= \" \" then\n          \
    \  current_group = current_group .. c\n        end\n    end\n    return result\n\
    end", "    local groups = {}\n    local current_group = \"\"\n    local paren_depth\
    \ = 0\n    for c in paren_string:gmatch(\".\") do\n        if c == \"(\" then\n\
    \            paren_depth = paren_depth + 1\n            current_group = current_group\
    \ .. c\n        elseif c == \")\" then\n            paren_depth = paren_depth\
    \ - 1\n            current_group = current_group .. c\n            if paren_depth\
    \ == 0 then\n                table.insert(groups, current_group)\n           \
    \     current_group = \"\"\n            end\n        elseif c ~= \" \" then\n\
    \            current_group = current_group .. c\n        end\n    end\n    return\
    \ groups\nend", "  local paren_groups = {}\n  local current_group = ''\n  local\
    \ paren_count = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i,\
    \ i)\n    if char == '(' then\n      paren_count = paren_count + 1\n      current_group\
    \ = current_group .. char\n    elseif char == ')' then\n      paren_count = paren_count\
    \ - 1\n      current_group = current_group .. char\n      if paren_count == 0\
    \ then\n        table.insert(paren_groups, current_group)\n        current_group\
    \ = ''\n      end\n    elseif paren_count > 0 then\n      current_group = current_group\
    \ .. char\n    end\n  end\n  return paren_groups\nend", "    local result = {}\n\
    \    local current_group = \"\"\n    local open_count = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            open_count = open_count + 1\n        elseif char == \")\" then\n\
    \            open_count = open_count - 1\n        end\n        if open_count ==\
    \ 0 then\n            if current_group ~= \"\" then\n                table.insert(result,\
    \ current_group)\n                current_group = \"\"\n            end\n    \
    \    else\n            current_group = current_group .. char\n        end\n  \
    \  end\n    return result\nend", "    local groups = {}\n    local current_group\
    \ = \"\"\n    local level = 0\n    for i = 1, #paren_string do\n        local\
    \ c = paren_string:sub(i, i)\n        if c == \"(\" then\n            level =\
    \ level + 1\n            current_group = current_group .. c\n        elseif c\
    \ == \")\" then\n            level = level - 1\n            current_group = current_group\
    \ .. c\n            if level == 0 then\n                table.insert(groups, current_group)\n\
    \                current_group = \"\"\n            end\n        elseif level >\
    \ 0 then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return groups\nend", "    local groups = {}\n    local current_group = \"\
    \"\n    local open_parens = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == \"(\" then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. char\n     \
    \   elseif char == \")\" then\n            open_parens = open_parens - 1\n   \
    \         current_group = current_group .. char\n            if open_parens ==\
    \ 0 then\n                table.insert(groups, current_group)\n              \
    \  current_group = \"\"\n            end\n        elseif char ~= \" \" then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend", "    local result = {}\n    local start = 1\n    local\
    \ level = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            level = level + 1\n        elseif\
    \ c == ')' then\n            level = level - 1\n            if level == 0 then\n\
    \                result[#result + 1] = paren_string:sub(start, i)\n          \
    \      start = i + 1\n            end\n        end\n    end\n    return result\n\
    end", "    local groups = {}\n    local current_group = \"\"\n    local open_parens\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            open_parens = open_parens + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. char\n            if open_parens == 0 then\n            \
    \    table.insert(groups, current_group)\n                current_group = \"\"\
    \n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend", "  \
    \  local paren_groups = {}\n    local paren_group = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if paren_group ~=\
    \ \"\" then\n                table.insert(paren_groups, paren_group)\n       \
    \         paren_group = \"\"\n            end\n        else\n            paren_group\
    \ = paren_group .. char\n        end\n    end\n    return paren_groups\nend",
  "\tlocal result = {}\n\tlocal current_group = \"\"\n\tlocal open_parens = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\topen_parens = open_parens - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif open_parens == 0 then\n\t\
    \t\t\ttable.insert(result, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn result\nend", "    local result = {}\n    local current_group\
    \ = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string do\n       \
    \ local char = paren_string:sub(i, i)\n        if char == \"(\" then\n       \
    \     paren_count = paren_count + 1\n        elseif char == \")\" then\n     \
    \       paren_count = paren_count - 1\n        end\n        if paren_count ==\
    \ 0 then\n            if char == \" \" then\n                current_group = current_group\
    \ .. char\n            else\n                table.insert(result, current_group)\n\
    \                current_group = \"\"\n            end\n        else\n       \
    \     current_group = current_group .. char\n        end\n    end\n    return\
    \ result\nend", "  local groups = {}\n  local current_group = \"\"\n  local paren_count\
    \ = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n \
    \   if c == \"(\" then\n      paren_count = paren_count + 1\n      current_group\
    \ = current_group .. c\n    elseif c == \")\" then\n      paren_count = paren_count\
    \ - 1\n      current_group = current_group .. c\n      if paren_count == 0 then\n\
    \        table.insert(groups, current_group)\n        current_group = \"\"\n \
    \     end\n    elseif c ~= \" \" then\n      current_group = current_group ..\
    \ c\n    end\n  end\n  return groups\nend", "\tlocal groups = {}\n\tlocal current_group\
    \ = \"\"\n\tlocal paren_count = 0\n\tlocal start_index = 1\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\
    \tparen_count = paren_count + 1\n\t\t\tif paren_count == 1 then\n\t\t\t\tstart_index\
    \ = i\n\t\t\tend\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count\
    \ - 1\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(groups, paren_string:sub(start_index,\
    \ i))\n\t\t\tend\n\t\tend\n\tend\n\treturn groups\nend", "    local groups = {}\n\
    \    local group = \"\"\n    local open = 0\n    for c in paren_string:gmatch(\"\
    .\") do\n        if c == \"(\" then\n            open = open + 1\n        elseif\
    \ c == \")\" then\n            open = open - 1\n        end\n        if open ==\
    \ 0 and c == \")\" then\n            table.insert(groups, group)\n           \
    \ group = \"\"\n        elseif c ~= \" \" then\n            group = group .. c\n\
    \        end\n    end\n    return groups\nend", "    local result = {}\n    local\
    \ current_group = \"\"\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            paren_level = paren_level + 1\n        elseif char == \")\" then\n\
    \            paren_level = paren_level - 1\n        end\n        if paren_level\
    \ == 0 then\n            if char == \" \" then\n                if current_group\
    \ ~= \"\" then\n                    table.insert(result, current_group)\n    \
    \                current_group = \"\"\n                end\n            else\n\
    \                current_group = current_group .. char\n            end\n    \
    \    else\n            current_group = current_group .. char\n        end\n  \
    \  end\n    if current_group ~= \"\" then\n        table.insert(result, current_group)\n\
    \    end\n    return result\nend", "    local paren_groups = {}\n    local current_group\
    \ = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string do\n       \
    \ local char = paren_string:sub(i, i)\n        if char == \"(\" then\n       \
    \     paren_count = paren_count + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            paren_count = paren_count\
    \ - 1\n            current_group = current_group .. char\n            if paren_count\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = \"\"\n            end\n        elseif char ~= \" \"\
    \ then\n            current_group = current_group .. char\n        end\n    end\n\
    \    return paren_groups\nend", "    local paren_groups = {}\n    local current_group\
    \ = {}\n    local paren_count = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_count\
    \ = paren_count + 1\n        elseif char == ')' then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if #current_group > 0 then\n                table.insert(paren_groups, table.concat(current_group))\n\
    \                current_group = {}\n            end\n        else\n         \
    \   table.insert(current_group, char)\n        end\n    end\n    return paren_groups\n\
    end", "    local result = {}\n    local current_group = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if char == \")\" then\n\
    \                table.insert(result, current_group)\n                current_group\
    \ = \"\"\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return result\nend", "    local groups =\
    \ {}\n    local group = \"\"\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            level = level + 1\n        elseif char == \")\" then\n          \
    \  level = level - 1\n        end\n        if level == 0 and char == \")\" then\n\
    \            table.insert(groups, group)\n            group = \"\"\n        else\n\
    \            group = group .. char\n        end\n    end\n    return groups\n\
    end", "    local groups = {}\n    local current_group = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, string.len(paren_string) do\n        local char = string.sub(paren_string,\
    \ i, i)\n        if char == \"(\" then\n            paren_count = paren_count\
    \ + 1\n            current_group = current_group .. char\n        elseif char\
    \ == \")\" then\n            paren_count = paren_count - 1\n            current_group\
    \ = current_group .. char\n            if paren_count == 0 then\n            \
    \    table.insert(groups, current_group)\n                current_group = \"\"\
    \n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend", "  \
    \  local result = {}\n    local current_group = \"\"\n    local open_parens =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            open_parens = open_parens + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. char\n            if open_parens == 0 then\n            \
    \    table.insert(result, current_group)\n                current_group = \"\"\
    \n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend", "  \
    \  local result = {}\n    local current_group = {}\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ c == ')' then\n            paren_count = paren_count - 1\n        end\n    \
    \    if paren_count == 0 then\n            if #current_group > 0 then\n      \
    \          table.insert(result, table.concat(current_group))\n               \
    \ current_group = {}\n            end\n        else\n            table.insert(current_group,\
    \ c)\n        end\n    end\n    return result\nend", "\tlocal result = {}\n\t\
    local current_group = \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == \"(\" then\n\t\t\tparen_count\
    \ = paren_count + 1\n\t\t\tcurrent_group = current_group .. c\n\t\telseif c ==\
    \ \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group = current_group\
    \ .. c\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(result, current_group)\n\
    \t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif c ~= \" \" then\n\t\t\tcurrent_group\
    \ = current_group .. c\n\t\tend\n\tend\n\treturn result\nend", "\tlocal result\
    \ = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\
    \tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group .. char\n\
    \t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(result,\
    \ current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif paren_count\
    \ > 0 then\n\t\t\tcurrent_group = current_group .. char\n\t\tend\n\tend\n\treturn\
    \ result\nend", "    local paren_groups = {}\n    local current_group = \"\"\n\
    \    local open_parens = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == \"(\" then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. char\n     \
    \   elseif char == \")\" then\n            open_parens = open_parens - 1\n   \
    \         current_group = current_group .. char\n            if open_parens ==\
    \ 0 then\n                table.insert(paren_groups, current_group)\n        \
    \        current_group = \"\"\n            end\n        elseif char ~= \" \" then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return paren_groups\nend", "    local result = {}\n    local current_group =\
    \ {}\n    local paren_count = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_count\
    \ = paren_count + 1\n        elseif char == ')' then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if #current_group > 0 then\n                table.insert(result, table.concat(current_group))\n\
    \                current_group = {}\n            end\n        else\n         \
    \   if char ~= ' ' then\n                table.insert(current_group, char)\n \
    \           end\n        end\n    end\n    return result\nend", "\tlocal paren_groups\
    \ = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\
    \tif paren_count == 0 then\n\t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\t\tparen_count\
    \ = paren_count + 1\n\t\t\tcurrent_group = current_group .. char\n\t\telseif char\
    \ == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(paren_groups,\
    \ current_group)\n\t\t\tend\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\tend\n\tend\n\treturn paren_groups\nend", "    local\
    \ result = {}\n    local paren_count = 0\n    local start_index = 1\n    for i\
    \ = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n       \
    \ if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n            if\
    \ paren_count == 0 then\n                table.insert(result, paren_string:sub(start_index,\
    \ i))\n                start_index = i + 1\n            end\n        end\n   \
    \ end\n    return result\nend", "    local result = {}\n    local current_group\
    \ = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string do\n       \
    \ local c = paren_string:sub(i, i)\n        if c == \"(\" then\n            paren_count\
    \ = paren_count + 1\n        elseif c == \")\" then\n            paren_count =\
    \ paren_count - 1\n        end\n        if paren_count == 0 and c == \")\" then\n\
    \            table.insert(result, current_group)\n            current_group =\
    \ \"\"\n        elseif c ~= \" \" then\n            current_group = current_group\
    \ .. c\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    local current_group = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == \"(\" then\n \
    \           paren_count = paren_count + 1\n        elseif c == \")\" then\n  \
    \          paren_count = paren_count - 1\n        end\n        if paren_count\
    \ == 0 and c == \")\" then\n            table.insert(result, current_group)\n\
    \            current_group = \"\"\n        elseif c ~= \" \" then\n          \
    \  current_group = current_group .. c\n        end\n    end\n    return result\n\
    end", "    local groups = {}\n    local current_group = \"\"\n    local open_parens\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            open_parens = open_parens + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. char\n            if open_parens == 0 then\n            \
    \    table.insert(groups, current_group)\n                current_group = \"\"\
    \n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend", "  \
    \  local groups = {}\n    local current_group = \"\"\n    local paren_count =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                char = \"\"\n            end\n            if current_group ~=\
    \ \"\" then\n                table.insert(groups, current_group .. char)\n   \
    \             current_group = \"\"\n            end\n        else\n          \
    \  current_group = current_group .. char\n        end\n    end\n    return groups\n\
    end", "    local groups = {}\n    local current_group = \"\"\n    local paren_stack\
    \ = {}\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            table.insert(paren_stack, char)\n\
    \        elseif char == \")\" then\n            table.remove(paren_stack)\n  \
    \      end\n        current_group = current_group .. char\n        if #paren_stack\
    \ == 0 then\n            table.insert(groups, current_group)\n            current_group\
    \ = \"\"\n        end\n    end\n    return groups\nend", "  local paren_groups\
    \ = {}\n  local current_group = \"\"\n  local open_parens = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == \"(\" then\n   \
    \   open_parens = open_parens + 1\n      current_group = current_group .. char\n\
    \    elseif char == \")\" then\n      open_parens = open_parens - 1\n      current_group\
    \ = current_group .. char\n      if open_parens == 0 then\n        table.insert(paren_groups,\
    \ current_group)\n        current_group = \"\"\n      end\n    elseif char ~=\
    \ \" \" then\n      current_group = current_group .. char\n    end\n  end\n  return\
    \ paren_groups\nend", "    local result = {}\n    local current_group = \"\"\n\
    \    local paren_count = 0\n    for i = 1, #paren_string do\n        local c =\
    \ paren_string:sub(i, i)\n        if c == \"(\" then\n            paren_count\
    \ = paren_count + 1\n        elseif c == \")\" then\n            paren_count =\
    \ paren_count - 1\n        end\n        if paren_count == 0 and c == \")\" then\n\
    \            table.insert(result, current_group)\n            current_group =\
    \ \"\"\n        elseif c ~= \" \" then\n            current_group = current_group\
    \ .. c\n        end\n    end\n    return result\nend", "\tlocal groups = {}\n\t\
    local current_group = \"\"\n\tlocal open_parens = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\
    \topen_parens = open_parens + 1\n\t\t\tcurrent_group = current_group .. char\n\
    \t\telseif char == \")\" then\n\t\t\topen_parens = open_parens - 1\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\t\tif open_parens == 0 then\n\t\t\t\ttable.insert(groups,\
    \ current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif open_parens\
    \ > 0 then\n\t\t\tcurrent_group = current_group .. char\n\t\tend\n\tend\n\treturn\
    \ groups\nend", "\tlocal result = {}\n\tlocal current_group = {}\n\tlocal paren_depth\
    \ = 0\n\tfor i = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\
    \tif c == '(' then\n\t\t\tparen_depth = paren_depth + 1\n\t\t\tif paren_depth\
    \ == 1 then\n\t\t\t\tcurrent_group = {}\n\t\t\tend\n\t\telseif c == ')' then\n\
    \t\t\tparen_depth = paren_depth - 1\n\t\t\tif paren_depth == 0 then\n\t\t\t\t\
    result[#result + 1] = table.concat(current_group)\n\t\t\tend\n\t\telseif paren_depth\
    \ > 0 then\n\t\t\tcurrent_group[#current_group + 1] = c\n\t\tend\n\tend\n\treturn\
    \ result\nend", "\tlocal result = {}\n\tlocal current_group = \"\"\n\tlocal current_level\
    \ = 0\n\tfor i = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\
    \tif c == \"(\" then\n\t\t\tcurrent_level = current_level + 1\n\t\t\tcurrent_group\
    \ = current_group .. c\n\t\telseif c == \")\" then\n\t\t\tcurrent_level = current_level\
    \ - 1\n\t\t\tcurrent_group = current_group .. c\n\t\t\tif current_level == 0 then\n\
    \t\t\t\ttable.insert(result, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\
    \tend\n\t\telseif current_level > 0 then\n\t\t\tcurrent_group = current_group\
    \ .. c\n\t\tend\n\tend\n\treturn result\nend", "    local result = {}\n    local\
    \ current_group = {}\n    local current_group_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_group_level = current_group_level + 1\n            current_group[#current_group\
    \ + 1] = char\n        elseif char == ')' then\n            current_group_level\
    \ = current_group_level - 1\n            current_group[#current_group + 1] = char\n\
    \            if current_group_level == 0 then\n                result[#result\
    \ + 1] = table.concat(current_group)\n                current_group = {}\n   \
    \         end\n        elseif char ~= ' ' then\n            current_group[#current_group\
    \ + 1] = char\n        end\n    end\n    return result\nend", "\tlocal groups\
    \ = {}\n\tlocal group = \"\"\n\tlocal depth = 0\n\tfor i = 1, #paren_string do\n\
    \t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\tdepth\
    \ = depth + 1\n\t\t\tgroup = group .. char\n\t\telseif char == \")\" then\n\t\t\
    \tdepth = depth - 1\n\t\t\tgroup = group .. char\n\t\t\tif depth == 0 then\n\t\
    \t\t\ttable.insert(groups, group)\n\t\t\t\tgroup = \"\"\n\t\t\tend\n\t\telseif\
    \ depth > 0 then\n\t\t\tgroup = group .. char\n\t\tend\n\tend\n\treturn groups\n\
    end", "  local result = {}\n  local cur_group = \"\"\n  local paren_count = 0\n\
    \  for i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c\
    \ == \"(\" then\n      paren_count = paren_count + 1\n      cur_group = cur_group\
    \ .. c\n    elseif c == \")\" then\n      paren_count = paren_count - 1\n    \
    \  cur_group = cur_group .. c\n      if paren_count == 0 then\n        table.insert(result,\
    \ cur_group)\n        cur_group = \"\"\n      end\n    elseif paren_count > 0\
    \ then\n      cur_group = cur_group .. c\n    end\n  end\n  return result\nend",
  "    local paren_groups = {}\n    local current_group = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            paren_count = paren_count - 1\n            current_group\
    \ = current_group .. char\n            if paren_count == 0 then\n            \
    \    table.insert(paren_groups, current_group)\n                current_group\
    \ = \"\"\n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend",
  "    local result = {}\n    local paren_count = 0\n    local start_index = 1\n \
    \   for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n  \
    \      if c == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ c == ')' then\n            paren_count = paren_count - 1\n        end\n    \
    \    if paren_count == 0 then\n            table.insert(result, paren_string:sub(start_index,\
    \ i))\n            start_index = i + 1\n        end\n    end\n    return result\n\
    end", "    local groups = {}\n    local current_group = \"\"\n    local open_parens\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            open_parens = open_parens + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. char\n            if open_parens == 0 then\n            \
    \    table.insert(groups, current_group)\n                current_group = \"\"\
    \n            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend", "  \
    \  local paren_groups = {}\n    local current_group = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            paren_count = paren_count - 1\n            current_group\
    \ = current_group .. char\n            if paren_count == 0 then\n            \
    \    table.insert(paren_groups, current_group)\n                current_group\
    \ = \"\"\n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend",
  "    local result = {}\n    local current_group = \"\"\n    local paren_count =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                if #current_group > 0 then\n                    table.insert(result,\
    \ current_group)\n                    current_group = \"\"\n                end\n\
    \            else\n                current_group = current_group .. char\n   \
    \         end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    if #current_group > 0 then\n        table.insert(result,\
    \ current_group)\n    end\n    return result\nend", "    local result = {}\n \
    \   local current_group = {}\n    local current_group_level = 0\n    for i = 1,\
    \ #paren_string do\n        local c = paren_string:sub(i, i)\n        if c ==\
    \ '(' then\n            current_group_level = current_group_level + 1\n      \
    \      current_group[#current_group + 1] = c\n        elseif c == ')' then\n \
    \           current_group_level = current_group_level - 1\n            current_group[#current_group\
    \ + 1] = c\n            if current_group_level == 0 then\n                result[#result\
    \ + 1] = table.concat(current_group)\n                current_group = {}\n   \
    \         end\n        elseif c ~= ' ' then\n            current_group[#current_group\
    \ + 1] = c\n        end\n    end\n    return result\nend", "\tlocal result = {}\n\
    \tlocal current_group = {}\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string\
    \ do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\
    \tparen_count = paren_count + 1\n\t\telseif char == \")\" then\n\t\t\tparen_count\
    \ = paren_count - 1\n\t\tend\n\t\tif paren_count == 0 then\n\t\t\tif #current_group\
    \ > 0 then\n\t\t\t\ttable.insert(result, table.concat(current_group))\n\t\t\t\t\
    current_group = {}\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(current_group, char)\n\
    \t\tend\n\tend\n\treturn result\nend", "    local result = {}\n    local current_group\
    \ = {}\n    local open_parens = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            open_parens\
    \ = open_parens + 1\n        elseif char == ')' then\n            open_parens\
    \ = open_parens - 1\n        end\n        if open_parens == 0 then\n         \
    \   if #current_group > 0 then\n                table.insert(result, table.concat(current_group))\n\
    \                current_group = {}\n            end\n        else\n         \
    \   table.insert(current_group, char)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local current_group = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                if #current_group > 0 then\n                    table.insert(result,\
    \ current_group)\n                    current_group = \"\"\n                end\n\
    \            else\n                current_group = current_group .. char\n   \
    \         end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    if #current_group > 0 then\n        table.insert(result,\
    \ current_group)\n    end\n    return result\nend", "  local result = {}\n  local\
    \ current_group = \"\"\n  local paren_count = 0\n  for i = 1, #paren_string do\n\
    \    local char = paren_string:sub(i, i)\n    if char == \"(\" then\n      paren_count\
    \ = paren_count + 1\n    elseif char == \")\" then\n      paren_count = paren_count\
    \ - 1\n    end\n    if paren_count == 0 then\n      if char == \" \" then\n  \
    \      char = \"\"\n      end\n      if char == \")\" then\n        table.insert(result,\
    \ current_group)\n        current_group = \"\"\n      else\n        current_group\
    \ = current_group .. char\n      end\n    else\n      current_group = current_group\
    \ .. char\n    end\n  end\n  return result\nend", "    local result = {}\n   \
    \ local current_group = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            paren_count = paren_count + 1\n        elseif char == \")\" then\n\
    \            paren_count = paren_count - 1\n        end\n        if paren_count\
    \ == 0 then\n            if char == \" \" then\n                if #current_group\
    \ > 0 then\n                    table.insert(result, current_group)\n        \
    \            current_group = \"\"\n                end\n            else\n   \
    \             current_group = current_group .. char\n            end\n       \
    \ else\n            current_group = current_group .. char\n        end\n    end\n\
    \    if #current_group > 0 then\n        table.insert(result, current_group)\n\
    \    end\n    return result\nend", "    local groups = {}\n    local current_group\
    \ = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string do\n       \
    \ local c = paren_string:sub(i, i)\n        if c == \"(\" then\n            paren_count\
    \ = paren_count + 1\n        elseif c == \")\" then\n            paren_count =\
    \ paren_count - 1\n        end\n        if paren_count == 0 then\n           \
    \ if c == \" \" then\n                if #current_group > 0 then\n           \
    \         table.insert(groups, current_group)\n                    current_group\
    \ = \"\"\n                end\n            else\n                current_group\
    \ = current_group .. c\n            end\n        else\n            current_group\
    \ = current_group .. c\n        end\n    end\n    if #current_group > 0 then\n\
    \        table.insert(groups, current_group)\n    end\n    return groups\nend",
  "\tlocal paren_groups = {}\n\tlocal paren_group = ''\n\tlocal paren_level = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == '(' then\n\t\t\tparen_level = paren_level + 1\n\t\t\tparen_group = paren_group\
    \ .. char\n\t\telseif char == ')' then\n\t\t\tparen_level = paren_level - 1\n\t\
    \t\tparen_group = paren_group .. char\n\t\t\tif paren_level == 0 then\n\t\t\t\t\
    table.insert(paren_groups, paren_group)\n\t\t\t\tparen_group = ''\n\t\t\tend\n\
    \t\telseif paren_level > 0 then\n\t\t\tparen_group = paren_group .. char\n\t\t\
    end\n\tend\n\treturn paren_groups\nend", "\tlocal groups = {}\n\tlocal current_group\
    \ = \"\"\n\tlocal open_parens = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char\
    \ = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\topen_parens = open_parens\
    \ + 1\n\t\t\tcurrent_group = current_group .. char\n\t\telseif char == \")\" then\n\
    \t\t\topen_parens = open_parens - 1\n\t\t\tcurrent_group = current_group .. char\n\
    \t\t\tif open_parens == 0 then\n\t\t\t\ttable.insert(groups, current_group)\n\t\
    \t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif open_parens > 0 then\n\t\t\t\
    current_group = current_group .. char\n\t\tend\n\tend\n\treturn groups\nend",
  "    local paren_groups = {}\n    local current_group = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            paren_count = paren_count - 1\n            current_group\
    \ = current_group .. char\n            if paren_count == 0 then\n            \
    \    table.insert(paren_groups, current_group)\n                current_group\
    \ = \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend",
  "    local groups = {}\n    local group = \"\"\n    local depth = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == \"(\" then\n            depth = depth + 1\n        elseif char == \"\
    )\" then\n            depth = depth - 1\n        end\n        if depth == 0 then\n\
    \            if char == \" \" then\n                char = \"\"\n            end\n\
    \            if char == \")\" then\n                table.insert(groups, group)\n\
    \                group = \"\"\n            else\n                group = group\
    \ .. char\n            end\n        else\n            group = group .. char\n\
    \        end\n    end\n    return groups\nend", "    local result = {}\n    local\
    \ current_group = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == \"(\" then\n \
    \           paren_count = paren_count + 1\n        elseif c == \")\" then\n  \
    \          paren_count = paren_count - 1\n        end\n        if paren_count\
    \ == 0 and c == \")\" then\n            table.insert(result, current_group)\n\
    \            current_group = \"\"\n        elseif c ~= \" \" then\n          \
    \  current_group = current_group .. c\n        end\n    end\n    return result\n\
    end", "    local paren_groups = {}\n    local current_group = \"\"\n    local\
    \ paren_count = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            paren_count = paren_count - 1\n            current_group\
    \ = current_group .. char\n            if paren_count == 0 then\n            \
    \    table.insert(paren_groups, current_group)\n                current_group\
    \ = \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend",
  "    local paren_groups = {}\n    local current_group = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            paren_count = paren_count - 1\n            current_group\
    \ = current_group .. char\n            if paren_count == 0 then\n            \
    \    table.insert(paren_groups, current_group)\n                current_group\
    \ = \"\"\n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend",
  "    local groups = {}\n    local group = \"\"\n    local depth = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == \"(\" then\n            depth = depth + 1\n        elseif char == \"\
    )\" then\n            depth = depth - 1\n        end\n        if depth == 0 then\n\
    \            if char == \" \" then\n                if group ~= \"\" then\n  \
    \                  table.insert(groups, group)\n                    group = \"\
    \"\n                end\n            else\n                group = group .. char\n\
    \            end\n        else\n            group = group .. char\n        end\n\
    \    end\n    if group ~= \"\" then\n        table.insert(groups, group)\n   \
    \ end\n    return groups\nend", "    local paren_groups = {}\n    local current_group\
    \ = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string do\n       \
    \ local char = paren_string:sub(i, i)\n        if char == \"(\" then\n       \
    \     paren_count = paren_count + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            paren_count = paren_count\
    \ - 1\n            current_group = current_group .. char\n            if paren_count\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = \"\"\n            end\n        elseif char ~= \" \"\
    \ then\n            current_group = current_group .. char\n        end\n    end\n\
    \    return paren_groups\nend", "  local result = {}\n  local current_group =\
    \ \"\"\n  local open_parens = 0\n  for i = 1, #paren_string do\n    local char\
    \ = paren_string:sub(i, i)\n    if char == \"(\" then\n      open_parens = open_parens\
    \ + 1\n      current_group = current_group .. char\n    elseif char == \")\" then\n\
    \      open_parens = open_parens - 1\n      current_group = current_group .. char\n\
    \      if open_parens == 0 then\n        table.insert(result, current_group)\n\
    \        current_group = \"\"\n      end\n    elseif char ~= \" \" then\n    \
    \  current_group = current_group .. char\n    end\n  end\n  return result\nend",
  "\tlocal groups = {}\n\tlocal group = \"\"\n\tlocal paren_count = 0\n\tfor i = 1,\
    \ #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == \"\
    (\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tgroup = group .. char\n\t\
    \telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\t\t\tgroup\
    \ = group .. char\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(groups,\
    \ group)\n\t\t\t\tgroup = \"\"\n\t\t\tend\n\t\telseif paren_count > 0 then\n\t\
    \t\tgroup = group .. char\n\t\tend\n\tend\n\treturn groups\nend", "    local result\
    \ = {}\n    local current_group = {}\n    local open_parens = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == '(' then\n            open_parens = open_parens + 1\n        elseif char\
    \ == ')' then\n            open_parens = open_parens - 1\n        end\n      \
    \  if open_parens == 0 then\n            if #current_group > 0 then\n        \
    \        table.insert(result, table.concat(current_group))\n                current_group\
    \ = {}\n            end\n        else\n            if char ~= ' ' then\n     \
    \           table.insert(current_group, char)\n            end\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    local current_group\
    \ = {}\n    local paren_count = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_count\
    \ = paren_count + 1\n        elseif char == ')' then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if #current_group > 0 then\n                table.insert(result, table.concat(current_group))\n\
    \                current_group = {}\n            end\n        else\n         \
    \   table.insert(current_group, char)\n        end\n    end\n    return result\n\
    end", "\tlocal groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count\
    \ = 0\n\tfor i = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\
    \tif c == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group\
    \ = current_group .. c\n\t\telseif c == \")\" then\n\t\t\tparen_count = paren_count\
    \ - 1\n\t\t\tcurrent_group = current_group .. c\n\t\t\tif paren_count == 0 then\n\
    \t\t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\
    \tend\n\t\telseif paren_count > 0 then\n\t\t\tcurrent_group = current_group ..\
    \ c\n\t\tend\n\tend\n\treturn groups\nend", "    local paren_groups = {}\n   \
    \ local current_group = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            paren_count = paren_count + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            paren_count = paren_count\
    \ - 1\n            current_group = current_group .. char\n            if paren_count\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = \"\"\n            end\n        elseif paren_count\
    \ > 0 then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return paren_groups\nend", "    local result = {}\n    local current_group\
    \ = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string do\n       \
    \ local char = paren_string:sub(i, i)\n        if char == \"(\" then\n       \
    \     paren_count = paren_count + 1\n        elseif char == \")\" then\n     \
    \       paren_count = paren_count - 1\n        end\n        if paren_count ==\
    \ 0 then\n            if char == \" \" then\n                if current_group\
    \ ~= \"\" then\n                    table.insert(result, current_group)\n    \
    \                current_group = \"\"\n                end\n            else\n\
    \                current_group = current_group .. char\n            end\n    \
    \    else\n            current_group = current_group .. char\n        end\n  \
    \  end\n    if current_group ~= \"\" then\n        table.insert(result, current_group)\n\
    \    end\n    return result\nend", "    local paren_groups = {}\n    local current_group\
    \ = \"\"\n    local paren_count = 0\n    for c in paren_string:gmatch(\".\") do\n\
    \        if c == \"(\" then\n            paren_count = paren_count + 1\n     \
    \   elseif c == \")\" then\n            paren_count = paren_count - 1\n      \
    \  end\n        if paren_count == 0 then\n            table.insert(paren_groups,\
    \ current_group)\n            current_group = \"\"\n        else\n           \
    \ current_group = current_group .. c\n        end\n    end\n    return paren_groups\n\
    end", "    local result = {}\n    local current_group = {}\n    local open_count\
    \ = 0\n    for c in paren_string:gmatch(\".\") do\n        if c == \"(\" then\n\
    \            open_count = open_count + 1\n        elseif c == \")\" then\n   \
    \         open_count = open_count - 1\n        end\n        table.insert(current_group,\
    \ c)\n        if open_count == 0 then\n            table.insert(result, table.concat(current_group))\n\
    \            current_group = {}\n        end\n    end\n    return result\nend",
  "  local groups = {}\n  local current_group = {}\n  local current_level = 0\n  for\
    \ i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char\
    \ == '(' then\n      current_level = current_level + 1\n    elseif char == ')'\
    \ then\n      current_level = current_level - 1\n    end\n    if current_level\
    \ == 0 then\n      if #current_group > 0 then\n        table.insert(groups, table.concat(current_group))\n\
    \        current_group = {}\n      end\n    else\n      if char ~= ' ' then\n\
    \        table.insert(current_group, char)\n      end\n    end\n  end\n  return\
    \ groups\nend", "\tlocal groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count\
    \ = 0\n\tfor i = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\
    \tif c == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group\
    \ = current_group .. c\n\t\telseif c == \")\" then\n\t\t\tparen_count = paren_count\
    \ - 1\n\t\t\tcurrent_group = current_group .. c\n\t\t\tif paren_count == 0 then\n\
    \t\t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\
    \tend\n\t\telseif c ~= \" \" then\n\t\t\tcurrent_group = current_group .. c\n\t\
    \tend\n\tend\n\treturn groups\nend", "\tlocal result = {}\n\tlocal current_group\
    \ = \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string do\n\t\tlocal c\
    \ = paren_string:sub(i, i)\n\t\tif c == \"(\" then\n\t\t\tparen_count = paren_count\
    \ + 1\n\t\t\tcurrent_group = current_group .. c\n\t\telseif c == \")\" then\n\t\
    \t\tparen_count = paren_count - 1\n\t\t\tcurrent_group = current_group .. c\n\t\
    \t\tif paren_count == 0 then\n\t\t\t\ttable.insert(result, current_group)\n\t\t\
    \t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif c ~= \" \" then\n\t\t\tcurrent_group\
    \ = current_group .. c\n\t\tend\n\tend\n\treturn result\nend", "    local groups\
    \ = {}\n    local current_group = \"\"\n    local paren_count = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == \"(\" then\n            paren_count = paren_count + 1\n        elseif\
    \ char == \")\" then\n            paren_count = paren_count - 1\n        end\n\
    \        if paren_count == 0 then\n            if current_group ~= \"\" then\n\
    \                table.insert(groups, current_group)\n                current_group\
    \ = \"\"\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return groups\nend", "    local paren_groups\
    \ = {}\n    local paren_group = \"\"\n    local paren_count = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == \"(\" then\n            paren_count = paren_count + 1\n        elseif char\
    \ == \")\" then\n            paren_count = paren_count - 1\n        end\n    \
    \    if paren_count == 0 then\n            if paren_group ~= \"\" then\n     \
    \           table.insert(paren_groups, paren_group)\n                paren_group\
    \ = \"\"\n            end\n        else\n            paren_group = paren_group\
    \ .. char\n        end\n    end\n    return paren_groups\nend", "    local groups\
    \ = {}\n    local current_group = \"\"\n    local open_parens = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == \"(\" then\n            open_parens = open_parens + 1\n            current_group\
    \ = current_group .. char\n        elseif char == \")\" then\n            open_parens\
    \ = open_parens - 1\n            current_group = current_group .. char\n     \
    \       if open_parens == 0 then\n                table.insert(groups, current_group)\n\
    \                current_group = \"\"\n            end\n        elseif char ~=\
    \ \" \" then\n            current_group = current_group .. char\n        end\n\
    \    end\n    return groups\nend", "    local groups = {}\n    local group = \"\
    \"\n    local depth = 0\n    for c in paren_string:gmatch(\".\") do\n        if\
    \ c == \"(\" then\n            depth = depth + 1\n            group = group ..\
    \ c\n        elseif c == \")\" then\n            depth = depth - 1\n         \
    \   group = group .. c\n            if depth == 0 then\n                table.insert(groups,\
    \ group)\n                group = \"\"\n            end\n        elseif c ~= \"\
    \ \" then\n            group = group .. c\n        end\n    end\n    return groups\n\
    end", "    local paren_groups = {}\n    local current_group = \"\"\n    local\
    \ paren_count = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            paren_count = paren_count - 1\n            current_group\
    \ = current_group .. char\n            if paren_count == 0 then\n            \
    \    table.insert(paren_groups, current_group)\n                current_group\
    \ = \"\"\n            end\n        elseif paren_count > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend",
  "    local groups = {}\n    local current_group = \"\"\n    local paren_count =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if current_group ~=\
    \ \"\" then\n                table.insert(groups, current_group)\n           \
    \     current_group = \"\"\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    if current_group ~= \"\"\
    \ then\n        table.insert(groups, current_group)\n    end\n    return groups\n\
    end", "    local paren_groups = {}\n    local group_start = 1\n    local group_end\
    \ = 1\n    local paren_count = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_count\
    \ = paren_count + 1\n        elseif char == ')' then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   group_end = i\n            table.insert(paren_groups, paren_string:sub(group_start,\
    \ group_end))\n            group_start = i + 1\n        end\n    end\n    return\
    \ paren_groups\nend", "    local groups = {}\n    local current_group = \"\"\n\
    \    local depth = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            depth = depth + 1\n         \
    \   current_group = current_group .. char\n        elseif char == \")\" then\n\
    \            depth = depth - 1\n            current_group = current_group .. char\n\
    \            if depth == 0 then\n                table.insert(groups, current_group)\n\
    \                current_group = \"\"\n            end\n        elseif depth >\
    \ 0 then\n            current_group = current_group .. char\n        end\n   \
    \ end\n    return groups\nend", "    -- TODO: Implement this function\n    local\
    \ result = {}\n    local paren_stack = {}\n    local paren_stack_index = 0\n \
    \   local paren_string_index = 1\n    local paren_string_length = string.len(paren_string)\n\
    \    local paren_string_char = ''\n    local paren_string_char_prev = ''\n   \
    \ local paren_string_char_next = ''\n    local paren_string_char_prev_prev = ''\n\
    \    local paren_string_char_next_next = ''\n    local paren_string_char_prev_prev_prev\
    \ = ''\n    local paren_string_char_next_next_next = ''\n    local paren_string_char_prev_prev_prev_prev\
    \ = ''\n    local paren_string_char_next_next_next_next = ''\n    local paren_string_char_prev_prev_prev_prev_prev\
    \ = ''\n    local paren_string_char_next_next_next_next_next = ''\n    local paren_string_char_prev_prev_prev_prev_prev_prev\
    \ = ''\n    local paren_string_char_next_next_next_next_next_next = ''\n    local\
    \ paren_string_char_prev_prev_prev_prev_prev_prev_prev = ''\n    local paren_string_char_next_next_next_next_next_next_next\
    \ = ''\n    local paren_string_char_prev_prev_prev_prev_prev_prev_prev_prev =\
    \ ''\n    local paren_string_char_next_next_next_next_next_next_next_next = ''\n\
    \    local paren_string_char_prev_prev_prev_prev_prev_prev_prev_prev_prev = ''\n\
    \    local paren_string_char_next_next_next_next_next_next_next_next_next = ''\n\
    \    local paren_string_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = ''\n    local paren_string_char_next_next_next_next_next_next_next_next_next_",
  "    local result = {}\n    local current_group = \"\"\n    local paren_count =\
    \ 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n\
    \        if c == \"(\" then\n            paren_count = paren_count + 1\n     \
    \   elseif c == \")\" then\n            paren_count = paren_count - 1\n      \
    \  end\n        if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        elseif c ~= \" \"\
    \ then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return result\nend", "\tlocal paren_groups = {}\n\tlocal current_group =\
    \ \"\"\n\tlocal open_parens = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char\
    \ = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\topen_parens = open_parens\
    \ + 1\n\t\t\tcurrent_group = current_group .. char\n\t\telseif char == \")\" then\n\
    \t\t\topen_parens = open_parens - 1\n\t\t\tcurrent_group = current_group .. char\n\
    \t\t\tif open_parens == 0 then\n\t\t\t\ttable.insert(paren_groups, current_group)\n\
    \t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif open_parens > 0 then\n\t\t\
    \tcurrent_group = current_group .. char\n\t\tend\n\tend\n\treturn paren_groups\n\
    end", "    local result = {}\n    local current_group = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                char = \"\"\n            end\n            if char == \")\" then\n\
    \                table.insert(result, current_group)\n                current_group\
    \ = \"\"\n            else\n                current_group = current_group .. char\n\
    \            end\n        else\n            current_group = current_group .. char\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ current_group = \"\"\n    local open_parens = 0\n    for i = 1, #paren_string\
    \ do\n        local ch = paren_string:sub(i, i)\n        if ch == \"(\" then\n\
    \            open_parens = open_parens + 1\n            current_group = current_group\
    \ .. ch\n        elseif ch == \")\" then\n            open_parens = open_parens\
    \ - 1\n            current_group = current_group .. ch\n            if open_parens\
    \ == 0 then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        elseif open_parens > 0 then\n\
    \            current_group = current_group .. ch\n        end\n    end\n    return\
    \ result\nend", "\tlocal paren_groups = {}\n\tlocal current_group = \"\"\n\tlocal\
    \ paren_count = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i,\
    \ i)\n\t\tif char == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count =\
    \ paren_count - 1\n\t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count\
    \ == 0 then\n\t\t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group\
    \ = \"\"\n\t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn paren_groups\nend", "    local result = {}\n\
    \    local current_group = ''\n    local open_count = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            open_count = open_count + 1\n        elseif char == ')' then\n  \
    \          open_count = open_count - 1\n        end\n        current_group = current_group\
    \ .. char\n        if open_count == 0 then\n            table.insert(result, current_group)\n\
    \            current_group = ''\n        end\n    end\n    return result\nend",
  "\tlocal groups = {}\n\tlocal current_group = \"\"\n\tlocal paren_count = 0\n\t\
    for i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char\
    \ == \"(\" then\n\t\t\tparen_count = paren_count + 1\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\telseif char == \")\" then\n\t\t\tparen_count = paren_count - 1\n\
    \t\t\tcurrent_group = current_group .. char\n\t\t\tif paren_count == 0 then\n\t\
    \t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group = \"\"\n\t\t\t\
    end\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group .. char\n\
    \t\tend\n\tend\n\treturn groups\nend", "    local result = {}\n    local current_group\
    \ = \"\"\n    local open_parens = 0\n    for i = 1, #paren_string do\n       \
    \ local char = paren_string:sub(i, i)\n        if char == \"(\" then\n       \
    \     open_parens = open_parens + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            open_parens = open_parens\
    \ - 1\n            current_group = current_group .. char\n            if open_parens\
    \ == 0 then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        elseif open_parens > 0 then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return result\nend", "    local result = {}\n    local current_group = \"\"\n\
    \    local open_parens = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == \"(\" then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. char\n     \
    \   elseif char == \")\" then\n            open_parens = open_parens - 1\n   \
    \         current_group = current_group .. char\n            if open_parens ==\
    \ 0 then\n                table.insert(result, current_group)\n              \
    \  current_group = \"\"\n            end\n        elseif char ~= \" \" then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return result\nend", "    local groups = {}\n    local current_group = \"\"\n\
    \    local open_parens = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == \"(\" then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. char\n     \
    \   elseif char == \")\" then\n            open_parens = open_parens - 1\n   \
    \         current_group = current_group .. char\n            if open_parens ==\
    \ 0 then\n                table.insert(groups, current_group)\n              \
    \  current_group = \"\"\n            end\n        elseif open_parens > 0 then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend", "    local result = {}\n    local current_group = {}\n\
    \    local open_parens = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == '(' then\n            open_parens\
    \ = open_parens + 1\n        elseif char == ')' then\n            open_parens\
    \ = open_parens - 1\n        end\n        if open_parens == 0 then\n         \
    \   if #current_group > 0 then\n                table.insert(result, table.concat(current_group))\n\
    \                current_group = {}\n            end\n        else\n         \
    \   table.insert(current_group, char)\n        end\n    end\n    return result\n\
    end", "    local paren_groups = {}\n    local current_group = \"\"\n    local\
    \ paren_count = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            paren_count = paren_count - 1\n            current_group\
    \ = current_group .. char\n            if paren_count == 0 then\n            \
    \    table.insert(paren_groups, current_group)\n                current_group\
    \ = \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend",
  "    local result = {}\n    local current_group = {}\n    local current_depth =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_depth = current_depth +\
    \ 1\n        elseif char == ')' then\n            current_depth = current_depth\
    \ - 1\n            if current_depth == 0 then\n                table.insert(result,\
    \ table.concat(current_group))\n                current_group = {}\n         \
    \   end\n        elseif current_depth > 0 then\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return result\nend", "\tlocal groups = {}\n\
    \tlocal group = \"\"\n\tlocal depth = 0\n\tfor i = 1, #paren_string do\n\t\tlocal\
    \ c = paren_string:sub(i, i)\n\t\tif c == \"(\" then\n\t\t\tdepth = depth + 1\n\
    \t\t\tgroup = group .. c\n\t\telseif c == \")\" then\n\t\t\tdepth = depth - 1\n\
    \t\t\tgroup = group .. c\n\t\t\tif depth == 0 then\n\t\t\t\ttable.insert(groups,\
    \ group)\n\t\t\t\tgroup = \"\"\n\t\t\tend\n\t\telseif depth > 0 then\n\t\t\tgroup\
    \ = group .. c\n\t\tend\n\tend\n\treturn groups\nend", "    local result = {}\n\
    \    local current_group = {}\n    local open_parens = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            open_parens = open_parens + 1\n        elseif char == ')' then\n\
    \            open_parens = open_parens - 1\n        end\n        if open_parens\
    \ == 0 then\n            if #current_group > 0 then\n                table.insert(result,\
    \ table.concat(current_group))\n                current_group = {}\n         \
    \   end\n        else\n            table.insert(current_group, char)\n       \
    \ end\n    end\n    return result\nend", "    local paren_groups = {}\n    local\
    \ current_group = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == \"(\" then\n\
    \            paren_count = paren_count + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            paren_count = paren_count\
    \ - 1\n            current_group = current_group .. char\n            if paren_count\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = \"\"\n            end\n        elseif char ~= \" \"\
    \ then\n            current_group = current_group .. char\n        end\n    end\n\
    \    return paren_groups\nend", "    local result = {}\n    local current_group\
    \ = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string do\n       \
    \ local char = paren_string:sub(i, i)\n        if char == \"(\" then\n       \
    \     paren_count = paren_count + 1\n        elseif char == \")\" then\n     \
    \       paren_count = paren_count - 1\n        end\n        if paren_count ==\
    \ 0 then\n            if char == \" \" then\n                if #current_group\
    \ > 0 then\n                    table.insert(result, current_group)\n        \
    \            current_group = \"\"\n                end\n            else\n   \
    \             current_group = current_group .. char\n            end\n       \
    \ else\n            current_group = current_group .. char\n        end\n    end\n\
    \    if #current_group > 0 then\n        table.insert(result, current_group)\n\
    \    end\n    return result\nend", "\tlocal result = {}\n\tlocal current_group\
    \ = {}\n\tlocal open_parens = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char\
    \ = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\topen_parens = open_parens\
    \ + 1\n\t\t\tcurrent_group[#current_group + 1] = char\n\t\telseif char == \")\"\
    \ then\n\t\t\topen_parens = open_parens - 1\n\t\t\tcurrent_group[#current_group\
    \ + 1] = char\n\t\t\tif open_parens == 0 then\n\t\t\t\tresult[#result + 1] = table.concat(current_group)\n\
    \t\t\t\tcurrent_group = {}\n\t\t\tend\n\t\telseif open_parens > 0 then\n\t\t\t\
    current_group[#current_group + 1] = char\n\t\tend\n\tend\n\treturn result\nend",
  "    local result = {}\n    local current_group = \"\"\n    local open_parens =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            open_parens = open_parens + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. char\n            if open_parens == 0 then\n            \
    \    table.insert(result, current_group)\n                current_group = \"\"\
    \n            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return result\nend", "  \
    \  local groups = {}\n    local current_group = \"\"\n    local open_parens =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            open_parens = open_parens + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. char\n            if open_parens == 0 then\n            \
    \    table.insert(groups, current_group)\n                current_group = \"\"\
    \n            end\n        elseif open_parens > 0 then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend", "  \
    \  local paren_groups = {}\n    local current_group = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \            current_group = current_group .. char\n        elseif char == \"\
    )\" then\n            paren_count = paren_count - 1\n            current_group\
    \ = current_group .. char\n            if paren_count == 0 then\n            \
    \    table.insert(paren_groups, current_group)\n                current_group\
    \ = \"\"\n            end\n        elseif char ~= \" \" then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend",
  "    local groups = {}\n    local current_group = \"\"\n    local paren_count =\
    \ 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n\
    \        if c == \"(\" then\n            paren_count = paren_count + 1\n     \
    \   elseif c == \")\" then\n            paren_count = paren_count - 1\n      \
    \  end\n        if paren_count == 0 then\n            if c == \" \" then\n   \
    \             -- ignore spaces\n            elseif c == \")\" then\n         \
    \       -- end of group\n                table.insert(groups, current_group)\n\
    \                current_group = \"\"\n            else\n                current_group\
    \ = current_group .. c\n            end\n        else\n            current_group\
    \ = current_group .. c\n        end\n    end\n    return groups\nend", "    local\
    \ result = {}\n    local current_group = \"\"\n    local current_group_depth =\
    \ 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            current_group_depth = current_group_depth\
    \ + 1\n            current_group = current_group .. char\n        elseif char\
    \ == \")\" then\n            current_group_depth = current_group_depth - 1\n \
    \           current_group = current_group .. char\n            if current_group_depth\
    \ == 0 then\n                table.insert(result, current_group)\n           \
    \     current_group = \"\"\n            end\n        elseif current_group_depth\
    \ > 0 then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return result\nend", "    local paren_groups = {}\n    local current_group\
    \ = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string do\n       \
    \ local char = paren_string:sub(i, i)\n        if char == \"(\" then\n       \
    \     paren_count = paren_count + 1\n            current_group = current_group\
    \ .. char\n        elseif char == \")\" then\n            paren_count = paren_count\
    \ - 1\n            current_group = current_group .. char\n            if paren_count\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = \"\"\n            end\n        elseif char ~= \" \"\
    \ then\n            current_group = current_group .. char\n        end\n    end\n\
    \    return paren_groups\nend", "    local paren_groups = {}\n    local current_group\
    \ = \"\"\n    local paren_count = 0\n    for i = 1, #paren_string do\n       \
    \ local c = paren_string:sub(i, i)\n        if c == \"(\" then\n            paren_count\
    \ = paren_count + 1\n            current_group = current_group .. c\n        elseif\
    \ c == \")\" then\n            paren_count = paren_count - 1\n            current_group\
    \ = current_group .. c\n            if paren_count == 0 then\n               \
    \ table.insert(paren_groups, current_group)\n                current_group = \"\
    \"\n            end\n        elseif c ~= \" \" then\n            current_group\
    \ = current_group .. c\n        end\n    end\n    return paren_groups\nend", " \
    \   local result = {}\n    local current_string = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif c == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_string)\n            current_string = \"\"\n        else\n         \
    \   current_string = current_string .. c\n        end\n    end\n    return result\n\
    end", "    local groups = {}\n    local current_group = \"\"\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif char == \")\" then\n            paren_count = paren_count - 1\n\
    \        end\n        if paren_count == 0 then\n            if char == \" \" then\n\
    \                char = \"\"\n            end\n            current_group = current_group\
    \ .. char\n            if current_group ~= \"\" then\n                table.insert(groups,\
    \ current_group)\n                current_group = \"\"\n            end\n    \
    \    else\n            if char ~= \" \" then\n                current_group =\
    \ current_group .. char\n            end\n        end\n    end\n    return groups\n\
    end", "    local result = {}\n    local current_group = {}\n    local open_parens\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            open_parens = open_parens + 1\n\
    \        elseif char == ')' then\n            open_parens = open_parens - 1\n\
    \        end\n        if open_parens == 0 then\n            table.insert(result,\
    \ table.concat(current_group))\n            current_group = {}\n        else\n\
    \            table.insert(current_group, char)\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    local current_group = \"\"\n    local\
    \ paren_count = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == \"(\" then\n            paren_count = paren_count + 1\n\
    \        elseif c == \")\" then\n            paren_count = paren_count - 1\n \
    \       end\n        if paren_count == 0 and c == \")\" then\n            table.insert(result,\
    \ current_group)\n            current_group = \"\"\n        elseif c ~= \" \"\
    \ then\n            current_group = current_group .. c\n        end\n    end\n\
    \    return result\nend", "\tlocal paren_groups = {}\n\tlocal current_group =\
    \ \"\"\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char\
    \ = paren_string:sub(i, i)\n\t\tif char == \"(\" then\n\t\t\tparen_count = paren_count\
    \ + 1\n\t\t\tcurrent_group = current_group .. char\n\t\telseif char == \")\" then\n\
    \t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group = current_group .. char\n\
    \t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(paren_groups, current_group)\n\
    \t\t\t\tcurrent_group = \"\"\n\t\t\tend\n\t\telseif paren_count > 0 then\n\t\t\
    \tcurrent_group = current_group .. char\n\t\tend\n\tend\n\treturn paren_groups\n\
    end", "\tlocal groups = {}\n\tlocal current_group = \"\"\n\tlocal open_parens\
    \ = 0\n\tfor i = 1, #paren_string do\n\t\tlocal char = paren_string:sub(i, i)\n\
    \t\tif char == \"(\" then\n\t\t\topen_parens = open_parens + 1\n\t\t\tcurrent_group\
    \ = current_group .. char\n\t\telseif char == \")\" then\n\t\t\topen_parens =\
    \ open_parens - 1\n\t\t\tcurrent_group = current_group .. char\n\t\t\tif open_parens\
    \ == 0 then\n\t\t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group\
    \ = \"\"\n\t\t\tend\n\t\telseif char ~= \" \" then\n\t\t\tcurrent_group = current_group\
    \ .. char\n\t\tend\n\tend\n\treturn groups\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
