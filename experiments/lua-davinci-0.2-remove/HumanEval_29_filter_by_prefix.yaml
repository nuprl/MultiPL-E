name: HumanEval_29_filter_by_prefix
language: lua
prompt: "-- Filter an input list of strings only for ones that start with a given\
  \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
  \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
  \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:sub(1, #prefix) == prefix then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n  \
    \          table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "  local ret = {}\n  for _, str in\
    \ ipairs(strings) do\n    if str:sub(1, #prefix) == prefix then\n      table.insert(ret,\
    \ str)\n    end\n  end\n  return ret\nend", "    local ret = {}\n    for _, s\
    \ in ipairs(strings) do\n        if s:startswith(prefix) then\n            table.insert(ret,\
    \ s)\n        end\n    end\n    return ret\nend", "  local result = {}\n  for\
    \ _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local res = {}\n    for _, s\
    \ in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n       \
    \     table.insert(res, s)\n        end\n    end\n    return res\nend", "    local\
    \ result = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1, #prefix)\
    \ == prefix then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:startswith(prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n \
    \       if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local result = {}\n    for _,\
    \ s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n     \
    \       table.insert(result, s)\n        end\n    end\n    return result\nend",
  "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if string.sub(str, 1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:startswith(prefix) then\n\
    \            table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend", "    local result = {}\n    for _, str in ipairs(strings) do\n\
    \        if str:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, v in ipairs(strings) do\n        if v:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:sub(1, #prefix) == prefix then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n  \
    \          table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:sub(1, #prefix) == prefix then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n  \
    \          table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "\tlocal result = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(result, s)\n\t\tend\n\tend\n\treturn\
    \ result\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n \
    \       if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local filtered = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(filtered, s)\n    end\n  end\n \
    \ return filtered\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local result = {}\n    for _,\
    \ str in ipairs(strings) do\n        if str:startswith(prefix) then\n        \
    \    table.insert(result, str)\n        end\n    end\n    return result\nend",
  "  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1, #prefix)\
    \ == prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend", "    local filtered = {}\n    for _, str in ipairs(strings) do\n\
    \        if str:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ str)\n        end\n    end\n    return filtered\nend", "  local result = {}\n\
    \  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n \
    \     table.insert(result, s)\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix)\
    \ == prefix then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local ret = {}\n \
    \   for _, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix\
    \ then\n            table.insert(ret, str)\n        end\n    end\n    return ret\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result, s)\n\
    \    end\n  end\n  return result\nend", "\tlocal result = {}\n\tfor _, s in ipairs(strings)\
    \ do\n\t\tif s:sub(1, #prefix) == prefix then\n\t\t\tresult[#result + 1] = s\n\
    \t\tend\n\tend\n\treturn result\nend", "    local result = {}\n    for _, s in\
    \ ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n          \
    \  table.insert(result, s)\n        end\n    end\n    return result\nend", " \
    \ local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix)\
    \ == prefix then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:sub(1, #prefix) == prefix then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ _, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local filtered = {}\n    for _, s in ipairs(strings) do\n        if\
    \ s:sub(1, #prefix) == prefix then\n            table.insert(filtered, s)\n  \
    \      end\n    end\n    return filtered\nend", "\tlocal result = {}\n\tfor _,\
    \ str in ipairs(strings) do\n\t\tif string.sub(str, 1, #prefix) == prefix then\n\
    \t\t\ttable.insert(result, str)\n\t\tend\n\tend\n\treturn result\nend", "    local\
    \ result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix)\
    \ == prefix then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:startswith(prefix) then\n\
    \            table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:sub(1, #prefix) == prefix then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n  \
    \          table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:startswith(prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for _, str in ipairs(strings) do\n\
    \        if str:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix\
    \ then\n            table.insert(result, str)\n        end\n    end\n    return\
    \ result\nend", "    local filtered = {}\n    for _, s in ipairs(strings) do\n\
    \        if s:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "    local result = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix\
    \ then\n            table.insert(result, str)\n        end\n    end\n    return\
    \ result\nend", "  local result = {}\n  for _, s in ipairs(strings) do\n    if\
    \ s:sub(1, #prefix) == prefix then\n      table.insert(result, s)\n    end\n \
    \ end\n  return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix\
    \ then\n            table.insert(result, str)\n        end\n    end\n    return\
    \ result\nend", "  local res = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      res[#res + 1] = s\n    end\n  end\n  return res\n\
    end", "    local filtered = {}\n    for _, s in ipairs(strings) do\n        if\
    \ s:sub(1, #prefix) == prefix then\n            table.insert(filtered, s)\n  \
    \      end\n    end\n    return filtered\nend", "    local ret = {}\n    for _,\
    \ str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix then\n \
    \           table.insert(ret, str)\n        end\n    end\n    return ret\nend",
  "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "  local result = {}\n\
    \  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n \
    \     table.insert(result, s)\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    for _, str in ipairs(strings) do\n        if string.startswith(str,\
    \ prefix) then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, v in ipairs(strings) do\n        if v:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local result = {}\n    for _,\
    \ s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n     \
    \       table.insert(result, s)\n        end\n    end\n    return result\nend",
  "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local filtered = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "  local result = {}\n\
    \  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n \
    \     table.insert(result, s)\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1, #prefix)\
    \ == prefix then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "\tlocal result = {}\n\tfor _, str\
    \ in ipairs(strings) do\n\t\tif str:sub(1, #prefix) == prefix then\n\t\t\ttable.insert(result,\
    \ str)\n\t\tend\n\tend\n\treturn result\nend", "    local result = {}\n    for\
    \ _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n  \
    \          table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:startswith(prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n \
    \       if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "\tlocal result = {}\n\t\
    for _, s in ipairs(strings) do\n\t\tif s:sub(1, #prefix) == prefix then\n\t\t\t\
    table.insert(result, s)\n\t\tend\n\tend\n\treturn result\nend", "    local result\
    \ = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1, #prefix) ==\
    \ prefix then\n            table.insert(result, str)\n        end\n    end\n \
    \   return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:startswith(prefix) then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:startswith(prefix) then\n  \
    \          table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:startswith(prefix) then\n  \
    \          table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local ret = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1,\
    \ #prefix) == prefix then\n            table.insert(ret, str)\n        end\n \
    \   end\n    return ret\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result, s)\n\
    \    end\n  end\n  return result\nend", "    local result = {}\n    for _, s in\
    \ ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n          \
    \  table.insert(result, s)\n        end\n    end\n    return result\nend", " \
    \   local result = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, str)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  for _, s in ipairs(strings) do\n    if\
    \ s:sub(1, #prefix) == prefix then\n      table.insert(result, s)\n    end\n \
    \ end\n  return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local filtered = {}\n    for _, v in ipairs(strings)\
    \ do\n        if v:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ v)\n        end\n    end\n    return filtered\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "  local result = {}\n\
    \  for _, str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, str)\n    end\n  end\n  return result\nend", "  local\
    \ result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1, #prefix)\
    \ == prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:startswith(prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "  local result = {}\n  for _, s in ipairs(strings) do\n    if\
    \ s:sub(1, #prefix) == prefix then\n      table.insert(result, s)\n    end\n \
    \ end\n  return result\nend", "  local result = {}\n  for _, str in ipairs(strings)\
    \ do\n    if str:sub(1, #prefix) == prefix then\n      table.insert(result, str)\n\
    \    end\n  end\n  return result\nend", "  local filtered = {}\n  for _, s in\
    \ ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(filtered,\
    \ s)\n    end\n  end\n  return filtered\nend", "  local result = {}\n  for _,\
    \ s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local filtered = {}\n    for\
    \ _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n  \
    \          table.insert(filtered, s)\n        end\n    end\n    return filtered\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "  local filtered = {}\n  for _, str in ipairs(strings)\
    \ do\n    if str:sub(1, #prefix) == prefix then\n      table.insert(filtered,\
    \ str)\n    end\n  end\n  return filtered\nend", "  local result = {}\n  for _,\
    \ str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) == prefix then\n\
    \      table.insert(result, str)\n    end\n  end\n  return result\nend", "   \
    \ local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix)\
    \ == prefix then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result, s)\n\
    \    end\n  end\n  return result\nend", "    local result = {}\n    for _, s in\
    \ ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n          \
    \  table.insert(result, s)\n        end\n    end\n    return result\nend", " \
    \ local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix)\
    \ == prefix then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:startswith(prefix) then\n\
    \            table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "\tlocal result = {}\n\tfor _, s in ipairs(strings)\
    \ do\n\t\tif s:sub(1, #prefix) == prefix then\n\t\t\ttable.insert(result, s)\n\
    \t\tend\n\tend\n\treturn result\nend", "    local result = {}\n    for _, str\
    \ in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix then\n     \
    \       table.insert(result, str)\n        end\n    end\n    return result\nend",
  "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:startswith(prefix) then\n            table.insert(result, s)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n  \
    \          table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n \
    \       if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, s in ipairs(strings) do\n    if string.sub(s, 1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix)\
    \ == prefix then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend", "    local filtered = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:startswith(prefix) then\n  \
    \          table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local result = {}\n    for _,\
    \ str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix then\n \
    \           table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:sub(1, #prefix) == prefix then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "    local filtered = {}\n   \
    \ for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(filtered, s)\n        end\n    end\n    return filtered\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:startswith(prefix) then\n            table.insert(result, str)\n       \
    \ end\n    end\n    return result\nend", "\tlocal result = {}\n\tfor _, str in\
    \ ipairs(strings) do\n\t\tif str:sub(1, #prefix) == prefix then\n\t\t\ttable.insert(result,\
    \ str)\n\t\tend\n\tend\n\treturn result\nend", "    local filtered = {}\n    for\
    \ _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n  \
    \          table.insert(filtered, s)\n        end\n    end\n    return filtered\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "  local result = {}\n\
    \  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n \
    \     table.insert(result, s)\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix)\
    \ == prefix then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    for _, v in ipairs(strings)\
    \ do\n        if v:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend", "    local result = {}\n    for _, str in ipairs(strings) do\n\
    \        if str:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:startswith(prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\t\
    if str:sub(1, #prefix) == prefix then\n\t\t\ttable.insert(result, str)\n\t\tend\n\
    \tend\n\treturn result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "  local ret = {}\n  for _, str in ipairs(strings)\
    \ do\n    if str:sub(1, #prefix) == prefix then\n      ret[#ret + 1] = str\n \
    \   end\n  end\n  return ret\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.startswith(s, prefix) then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix\
    \ then\n            table.insert(result, str)\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n \
    \       if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local ret = {}\n   \
    \ for _, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix then\n\
    \            table.insert(ret, str)\n        end\n    end\n    return ret\nend",
  "    local filtered = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(filtered, s)\n        end\n\
    \    end\n    return filtered\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, v in ipairs(strings) do\n        if v:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:sub(1, #prefix) == prefix then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "    local ret = {}\n    for _,\
    \ s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n     \
    \       table.insert(ret, s)\n        end\n    end\n    return ret\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
