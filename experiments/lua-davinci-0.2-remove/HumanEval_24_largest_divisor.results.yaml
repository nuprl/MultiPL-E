language: lua
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            divisor = i\n\
    \        end\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local divisor = n - 1\n\
    \  while n % divisor ~= 0 do\n    divisor = divisor - 1\n  end\n  return divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = n - 1\n\twhile\
    \ i > 1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i - 1\n\t\
    end\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local divisor = 2\n  while\
    \ n % divisor ~= 0 do\n    divisor = divisor + 1\n  end\n  return divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnaj7svj5.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpnaj7svj5.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = n - 1\n\twhile\
    \ i > 1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i - 1\n\t\
    end\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9tdqs6b.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc9tdqs6b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 0\n  for\
    \ i = 1, n - 1 do\n    if n % i == 0 then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile divisor > 1 do\n\t\tif n % divisor == 0 then\n\t\t\treturn divisor\n\t\
    \tend\n\t\tdivisor = divisor - 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal m = math.floor(math.sqrt(n))\n\
    \tfor i = m, 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwcd2u56.lua:17:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpjwcd2u56.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 1\n  for\
    \ i = 2, n-1 do\n    if n % i == 0 then\n      largest = i\n    end\n  end\n \
    \ return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9tdqs6b.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc9tdqs6b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i < n do\n        if n % i == 0 then\n            return n / i\n        end\n\
    \        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 2\n\twhile\
    \ n % divisor ~= 0 do\n\t\tdivisor = divisor + 1\n\tend\n\treturn divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkufe5g9t.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkufe5g9t.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph989i2ju.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph989i2ju.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local i = 2\n  while i\
    \ <= n do\n    if n % i == 0 then\n      return n / i\n    end\n    i = i + 1\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest_divisor\
    \ = 1\n    for i = 2, n-1 do\n        if n % i == 0 then\n            largest_divisor\
    \ = i\n        end\n    end\n    return largest_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 1\n  for\
    \ i = 2, n - 1 do\n    if n % i == 0 then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 2, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    \    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n-1 do\n        if n % i == 0 then\n            largest = i\n \
    \       end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest_divisor =\
    \ 1\n\tfor i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest_divisor = i\n\
    \t\tend\n\tend\n\treturn largest_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local divisor = n - 1\n\
    \  while n % divisor ~= 0 do\n    divisor = divisor - 1\n  end\n  return divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i < n do\n        if n % i == 0 then\n            return i\n        end\n  \
    \      i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq20ro18n.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpq20ro18n.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 2\n\twhile\
    \ n % divisor ~= 0 do\n\t\tdivisor = divisor + 1\n\tend\n\treturn divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkufe5g9t.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkufe5g9t.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 2, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    \    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 1\n  for\
    \ i = 2, n - 1 do\n    if n % i == 0 then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i < n do\n        if n % i == 0 then\n            return n / i\n        end\n\
    \        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest_divisor =\
    \ 1\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      largest_divisor = i\n\
    \    end\n  end\n  return largest_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n - 1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9tdqs6b.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc9tdqs6b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 2\n\twhile\
    \ n % divisor ~= 0 do\n\t\tdivisor = divisor + 1\n\tend\n\treturn divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkufe5g9t.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkufe5g9t.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = 2, n do\n   \
    \     if n % i == 0 then\n            return i\n        end\n    end\n    return\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4811uy6q.lua:14:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4811uy6q.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 1\n  for\
    \ i = 2, n-1 do\n    if n % i == 0 then\n      largest = i\n    end\n  end\n \
    \ return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i < n do\n        if n % i == 0 then\n            return n / i\n        end\n\
    \        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max = math.floor(math.sqrt(n))\n\
    \  for i = max, 2, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6nk4e4y.lua:17:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpx6nk4e4y.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal d = math.floor(math.sqrt(n))\n\
    \twhile n % d ~= 0 do\n\t\td = d - 1\n\tend\n\treturn d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5gi3n54.lua:15:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmps5gi3n54.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i < n do\n        if n % i == 0 then\n            return i\n        end\n  \
    \      i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq20ro18n.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpq20ro18n.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = n - 1, 1, -1 do\n\
    \t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i < n do\n        if n % i == 0 then\n            return i\n        end\n  \
    \      i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq20ro18n.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpq20ro18n.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 2\n\twhile\
    \ n % divisor ~= 0 do\n\t\tdivisor = divisor + 1\n\tend\n\treturn divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkufe5g9t.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkufe5g9t.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, math.floor(n/2) do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\
    \tend\n\treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph989i2ju.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph989i2ju.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i < n do\n        if n % i == 0 then\n            return i\n        end\n  \
    \      i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq20ro18n.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpq20ro18n.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 2\n\twhile\
    \ n % divisor ~= 0 do\n\t\tdivisor = divisor + 1\n\tend\n\treturn divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkufe5g9t.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkufe5g9t.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i < n do\n        if n % i == 0 then\n            return i\n        end\n  \
    \      i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq20ro18n.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpq20ro18n.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph989i2ju.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph989i2ju.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n-1 do\n        if n % i == 0 then\n            largest = i\n \
    \       end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local i = 2\n  while i\
    \ < n do\n    if n % i == 0 then\n      return n / i\n    end\n    i = i + 1\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n - 1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9tdqs6b.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc9tdqs6b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph989i2ju.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph989i2ju.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest_divisor =\
    \ 1\n\tfor i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest_divisor = i\n\
    \t\tend\n\tend\n\treturn largest_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n - 1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ <= n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 0\n \
    \   for i = 1, n do\n        if n % i == 0 then\n            largest = i\n   \
    \     end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoayz_mrk.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpoayz_mrk.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 0\n\tfor\
    \ i = 1, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = math.floor(math.sqrt(n))\n\
    \twhile i > 0 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i -\
    \ 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdj33u2a.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmppdj33u2a.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 1\n  for\
    \ i = 2, n - 1 do\n    if n % i == 0 then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 2\n\twhile\
    \ n % divisor ~= 0 do\n\t\tdivisor = divisor + 1\n\tend\n\treturn divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkufe5g9t.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkufe5g9t.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 0\n \
    \   for i = 1, math.floor(n/2) do\n        if n % i == 0 then\n            largest\
    \ = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph989i2ju.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph989i2ju.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local divisor = 2\n  while\
    \ n % divisor ~= 0 do\n    divisor = divisor + 1\n  end\n  return divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnaj7svj5.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpnaj7svj5.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9tdqs6b.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc9tdqs6b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 0\n \
    \   for i = 1, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile n\
    \ % i ~= 0 do\n\t\ti = i + 1\n\tend\n\treturn i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70f_z5vd.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp70f_z5vd.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = n - 1, 1, -1 do\n\
    \t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n - 1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n-1 do\n        if n % i == 0 then\n            largest = i\n \
    \       end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n - 1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9tdqs6b.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc9tdqs6b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 1\n\twhile\
    \ divisor < n do\n\t\tif n % divisor == 0 then\n\t\t\treturn divisor\n\t\tend\n\
    \t\tdivisor = divisor + 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxh6r6q3.lua:18:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmppxh6r6q3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i < n do\n        if n % i == 0 then\n            return i\n        end\n  \
    \      i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq20ro18n.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpq20ro18n.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 1\n  for\
    \ i = 2, n - 1 do\n    if n % i == 0 then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = n - 1, 1, -1 do\n\
    \t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n-1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 2\n\twhile\
    \ n % divisor ~= 0 do\n\t\tdivisor = divisor + 1\n\tend\n\treturn divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkufe5g9t.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkufe5g9t.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 1\n  for\
    \ i = 2, n - 1 do\n    if n % i == 0 then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = math.floor(math.sqrt(n))\n\
    \twhile i > 1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i -\
    \ 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimbw4mc3.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpimbw4mc3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local divisor = 2\n  while\
    \ n % divisor ~= 0 do\n    divisor = divisor + 1\n  end\n  return divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnaj7svj5.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpnaj7svj5.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph989i2ju.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph989i2ju.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 2\n\twhile\
    \ (n % divisor) ~= 0 do\n\t\tdivisor = divisor + 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj0i3dzt.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpqj0i3dzt.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal max = math.floor(math.sqrt(n))\n\
    \tfor i = 2, max do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph989i2ju.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph989i2ju.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 2, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    \    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9tdqs6b.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc9tdqs6b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 2\n\twhile\
    \ n % divisor ~= 0 do\n\t\tdivisor = divisor + 1\n\tend\n\treturn divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkufe5g9t.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkufe5g9t.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = n - 1\n\twhile\
    \ i > 1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i - 1\n\t\
    end\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9tdqs6b.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc9tdqs6b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i < n do\n        if n % i == 0 then\n            return i\n        end\n  \
    \      i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq20ro18n.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpq20ro18n.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 2, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    \    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max = math.floor(math.sqrt(n))\n\
    \    for i = max, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo688wydg.lua:17:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpo688wydg.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9tdqs6b.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc9tdqs6b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph989i2ju.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph989i2ju.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 2\n\twhile\
    \ n % divisor ~= 0 do\n\t\tdivisor = divisor + 1\n\tend\n\treturn divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkufe5g9t.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkufe5g9t.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, math.floor(n / 2) do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\t\
    end\n\tend\n\treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = math.floor(n\
    \ / 2)\n    for i = max_divisor, 2, -1 do\n        if n % i == 0 then\n      \
    \      return i\n        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n-1, 1, -1 do\n\
    \        if n % i == 0 then\n            return i\n        end\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = n - 1, 1, -1 do\n\
    \t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i <= n do\n        if n % i == 0 then\n            return n / i\n        end\n\
    \        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9tdqs6b.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc9tdqs6b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = math.floor(math.sqrt(n))\n\
    \twhile i > 1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i -\
    \ 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimbw4mc3.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpimbw4mc3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 1\n  for\
    \ i = 2, n - 1 do\n    if n % i == 0 then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local d = 2\n    while\
    \ n % d ~= 0 do\n        d = d + 1\n    end\n    return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21_qc_pe.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp21_qc_pe.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n-1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\t\
    return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph989i2ju.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph989i2ju.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n-1 do\n        if n % i == 0 then\n            largest = i\n \
    \       end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n-1, 1, -1 do\n\
    \        if n % i == 0 then\n            return i\n        end\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9tdqs6b.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc9tdqs6b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local divisor = n - 1\n\
    \  while n % divisor ~= 0 do\n    divisor = divisor - 1\n  end\n  return divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            divisor = i\n\
    \        end\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i < n do\n        if n % i == 0 then\n            return i\n        end\n  \
    \      i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq20ro18n.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpq20ro18n.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = n - 1\n\twhile\
    \ i > 0 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i - 1\n\t\
    end\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph989i2ju.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph989i2ju.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local i = 2\n  while i\
    \ < n do\n    if n % i == 0 then\n      return n / i\n    end\n    i = i + 1\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n - 1\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph989i2ju.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph989i2ju.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = math.floor(math.sqrt(n))\n\
    \twhile i > 0 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i -\
    \ 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdj33u2a.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmppdj33u2a.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750156
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph989i2ju.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph989i2ju.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
