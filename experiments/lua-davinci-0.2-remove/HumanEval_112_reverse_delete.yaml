name: HumanEval_112_reverse_delete
language: lua
prompt: "-- Task\n-- We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n-- then check if the result\
  \ string is palindrome.\n-- A string is called palindrome if it reads the same backward\
  \ as forward.\n-- You should return a tuple containing the result string and True/False\
  \ for the check.\n-- Example\nlocal function reverse_delete(s, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
  \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
  \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
  \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
  \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
  \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
  \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
  \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for i = 1, #s do\n        if not c:find(s:sub(i,\
    \ i)) then\n            t[#t + 1] = s:sub(i, i)\n        end\n    end\n    local\
    \ r = table.concat(t)\n    return r, r == r:reverse()\nend", "    local t = {}\n\
    \    for i = 1, #s do\n        if not c:find(s:sub(i, i)) then\n            t[#t\
    \ + 1] = s:sub(i, i)\n        end\n    end\n    local r = table.concat(t)\n  \
    \  return r, r == r:reverse()\nend", "    local t = {}\n    for i = 1, #s do\n\
    \        local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local s2 = table.concat(t)\n    return\
    \ s2, s2 == s2:reverse()\nend", "    local t = {}\n    for i = 1, #s do\n    \
    \    t[i] = s:sub(i, i)\n    end\n    for i = 1, #c do\n        local j = 1\n\
    \        while j <= #t do\n            if t[j] == c:sub(i, i) then\n         \
    \       table.remove(t, j)\n            else\n                j = j + 1\n    \
    \        end\n        end\n    end\n    local s2 = table.concat(t)\n    local\
    \ is_palindrome = true\n    for i = 1, #s2 / 2 do\n        if s2:sub(i, i) ~=\
    \ s2:sub(#s2 - i + 1, #s2 - i + 1) then\n            is_palindrome = false\n \
    \           break\n        end\n    end\n    return s2, is_palindrome\nend", " \
    \   local t = {}\n    for i = 1, #s do\n        local ch = s:sub(i, i)\n     \
    \   if not c:find(ch) then\n            t[#t + 1] = ch\n        end\n    end\n\
    \    local r = table.concat(t)\n    return r, r == r:reverse()\nend", "    local\
    \ s1 = s:gsub(\"[\"..c..\"]\", \"\")\n    return s1, s1 == s1:reverse()\nend",
  "    local t = {}\n    for i = 1, #s do\n        local char = s:sub(i, i)\n    \
    \    if not c:find(char) then\n            table.insert(t, char)\n        end\n\
    \    end\n    local str = table.concat(t)\n    local is_palindrome = str == str:reverse()\n\
    \    return str, is_palindrome\nend", "    local t = {}\n    for i = 1, #s do\n\
    \        local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    return\
    \ res, res == res:reverse()\nend", "    local t = {}\n    for i = 1, #s do\n \
    \       local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    return\
    \ res, res == res:reverse()\nend", "    local result = {}\n    for i = 1, #s do\n\
    \        if not c:find(s:sub(i, i)) then\n            table.insert(result, s:sub(i,\
    \ i))\n        end\n    end\n    return table.concat(result), table.concat(result)\
    \ == table.concat(result, \"\", 1, #result / 2)\nend", "    local t = {}\n   \
    \ for i = 1, #s do\n        local ch = s:sub(i, i)\n        if not c:find(ch)\
    \ then\n            t[#t + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n\
    \    local is_palindrome = res == string.reverse(res)\n    return res, is_palindrome\n\
    end", "    local t = {}\n    for i = 1, #s do\n        if not string.find(c, s:sub(i,\
    \ i)) then\n            table.insert(t, s:sub(i, i))\n        end\n    end\n \
    \   local s = table.concat(t)\n    return s, s == string.reverse(s)\nend", " \
    \   local res = {}\n    for i = 1, #s do\n        local ch = s:sub(i, i)\n   \
    \     if not c:find(ch) then\n            res[#res + 1] = ch\n        end\n  \
    \  end\n    local res_str = table.concat(res)\n    local is_palindrome = true\n\
    \    for i = 1, #res_str / 2 do\n        if res_str:sub(i, i) ~= res_str:sub(#res_str\
    \ - i + 1, #res_str - i + 1) then\n            is_palindrome = false\n       \
    \     break\n        end\n    end\n    return res_str, is_palindrome\nend", " \
    \   local t = {}\n    for i = 1, #s do\n        t[i] = s:sub(i, i)\n    end\n\
    \    local function is_in(char)\n        for i = 1, #c do\n            if char\
    \ == c:sub(i, i) then\n                return true\n            end\n        end\n\
    \        return false\n    end\n    local function is_palindrome(s)\n        for\
    \ i = 1, #s do\n            if s:sub(i, i) ~= s:sub(#s - i + 1, #s - i + 1) then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local function delete(t, char)\n        for i = 1, #t do\n     \
    \       if t[i] == char then\n                table.remove(t, i)\n           \
    \     return delete(t, char)\n            end\n        end\n        return t\n\
    \    end\n    for i = 1, #c do\n        t = delete(t, c:sub(i, i))\n    end\n\
    \    local s = table.concat(t)\n    return s, is_palindrome(s)\nend", "    local\
    \ t = {}\n    for i = 1, #s do\n        local char = s:sub(i, i)\n        if not\
    \ c:find(char) then\n            table.insert(t, char)\n        end\n    end\n\
    \    local result = table.concat(t)\n    return result, result == result:reverse()\n\
    end", "    local t = {}\n    for i = 1, #s do\n        if not c:find(s:sub(i,\
    \ i)) then\n            t[#t + 1] = s:sub(i, i)\n        end\n    end\n    local\
    \ r = table.concat(t)\n    return r, r == r:reverse()\nend", "    local s_new\
    \ = s:gsub(\"[\"..c..\"]\", \"\")\n    local s_rev = s_new:reverse()\n    return\
    \ s_new, s_new == s_rev\nend", "    local t = {}\n    for i = 1, #s do\n     \
    \   if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n   \
    \     end\n    end\n    local s1 = table.concat(t)\n    local s2 = s1:reverse()\n\
    \    return s1, s1 == s2\nend", "    local t = {}\n    for i = 1, #s do\n    \
    \    if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n  \
    \      end\n    end\n    local r = table.concat(t)\n    return r, r == r:reverse()\n\
    end", "    local t = {}\n    for i = 1, #s do\n        if not c:find(s:sub(i,\
    \ i)) then\n            t[#t + 1] = s:sub(i, i)\n        end\n    end\n    local\
    \ res = table.concat(t)\n    return res, res == res:reverse()\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
