name: HumanEval_157_right_angle_triangle
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
  -- Example:\nlocal function right_angle_triangle(a, b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
  \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
  \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local sides = {a, b, c}\n    table.sort(sides)\n    return sides[1]^2\
    \ + sides[2]^2 == sides[3]^2\nend", "    -- your code here\nend", "    -- your\
    \ code here\nend", "  -- your code here\nend", "  -- your code here\n  local sides\
    \ = {a, b, c}\n  table.sort(sides)\n  if sides[1]^2 + sides[2]^2 == sides[3]^2\
    \ then\n    return true\n  else\n    return false\n  end\nend", "    -- TODO:\
    \ implement this function\n    return false\nend", "    local sides = {a, b, c}\n\
    \    table.sort(sides)\n    return sides[1]^2 + sides[2]^2 == sides[3]^2\nend",
  "    if a == 0 or b == 0 or c == 0 then\n        return false\n    end\n    if a^2\
    \ + b^2 == c^2 then\n        return true\n    elseif a^2 + c^2 == b^2 then\n \
    \       return true\n    elseif b^2 + c^2 == a^2 then\n        return true\n \
    \   else\n        return false\n    end\nend", "    -- your code here\nend", " \
    \ -- your code here\n  return false\nend", "    -- your code here\nend", "   \
    \ -- your code here\nend", "    -- your code here\nend", "    return a^2 + b^2\
    \ == c^2\nend", "  -- your code here\nend", "    local max = math.max(a, b, c)\n\
    \    local min = math.min(a, b, c)\n    local mid = a + b + c - max - min\n  \
    \  return max^2 == min^2 + mid^2\nend", "    local sides = {a, b, c}\n    table.sort(sides)\n\
    \    return sides[1]^2 + sides[2]^2 == sides[3]^2\nend", "    -- your code here\n\
    \    if a^2 + b^2 == c^2 then\n        return true\n    elseif a^2 + c^2 == b^2\
    \ then\n        return true\n    elseif b^2 + c^2 == a^2 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "  return a^2 + b^2 ==\
    \ c^2\nend", "    local sides = {a, b, c}\n    table.sort(sides)\n    return sides[1]^2\
    \ + sides[2]^2 == sides[3]^2\nend", "    local sides = {a, b, c}\n    table.sort(sides)\n\
    \    return sides[1] ^ 2 + sides[2] ^ 2 == sides[3] ^ 2\nend", "  if a^2 + b^2\
    \ == c^2 then\n    return true\n  elseif a^2 + c^2 == b^2 then\n    return true\n\
    \  elseif b^2 + c^2 == a^2 then\n    return true\n  else\n    return false\n \
    \ end\nend", "    local sides = {a, b, c}\n    table.sort(sides)\n    return sides[1]^2\
    \ + sides[2]^2 == sides[3]^2\nend", "    -- your code here\n    return false\n\
    end", "    -- your code here\nend", "    -- your code here\nend", "    if a^2\
    \ + b^2 == c^2 then\n        return true\n    else\n        return false\n   \
    \ end\nend", "    -- your code here\nend", "    -- your code here\nend", "   \
    \ -- your code here\nend", "    return a^2 + b^2 == c^2\nend", "    local sides\
    \ = {a, b, c}\n    table.sort(sides)\n    return sides[1]^2 + sides[2]^2 == sides[3]^2\n\
    end", "    local sides = {a, b, c}\n    table.sort(sides)\n    return sides[1]^2\
    \ + sides[2]^2 == sides[3]^2\nend", "    -- your code here\nend", "  -- your code\
    \ here\nend", "    -- TODO: implement this function\n    if a^2 + b^2 == c^2 then\n\
    \        return true\n    elseif a^2 + c^2 == b^2 then\n        return true\n\
    \    elseif b^2 + c^2 == a^2 then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    -- your code here\nend", "    local sides = {a, b,\
    \ c}\n    table.sort(sides)\n    return sides[1]^2 + sides[2]^2 == sides[3]^2\n\
    end", "  -- your code here\n  if a^2 + b^2 == c^2 then\n    return true\n  else\n\
    \    return false\n  end\nend", "  local sides = {a, b, c}\n  table.sort(sides)\n\
    \  return sides[1]^2 + sides[2]^2 == sides[3]^2\nend", "  -- your code here\n\
    end", "    -- your code here\nend", "  -- your code here\n  if a^2 + b^2 == c^2\
    \ then\n    return true\n  elseif a^2 + c^2 == b^2 then\n    return true\n  elseif\
    \ b^2 + c^2 == a^2 then\n    return true\n  else\n    return false\n  end\nend",
  "    -- TODO: implement the function\n    return false\nend", "    -- your code\
    \ here\nend", "    -- TODO: Implement this function\nend", "    -- your code here\n\
    \    local max = math.max(a, b, c)\n    local min = math.min(a, b, c)\n    local\
    \ mid = a + b + c - max - min\n    return max * max == mid * mid + min * min\n\
    end", "  -- your code here\nend", "    -- your code here\nend", "  if a^2 + b^2\
    \ == c^2 then\n    return true\n  else\n    return false\n  end\nend", "    --\
    \ your code here\nend", "    -- TODO: Implement this function.\n    -- Hint: Use\
    \ the Pythagorean theorem.\n    if a^2 + b^2 == c^2 then\n        return true\n\
    \    elseif a^2 + c^2 == b^2 then\n        return true\n    elseif b^2 + c^2 ==\
    \ a^2 then\n        return true\n    else\n        return false\n    end\nend",
  "    local sides = {a, b, c}\n    table.sort(sides)\n    return sides[1]^2 + sides[2]^2\
    \ == sides[3]^2\nend", "    -- your code here\nend", "    local sides = {a, b,\
    \ c}\n    table.sort(sides)\n    return sides[1]^2 + sides[2]^2 == sides[3]^2\n\
    end", "  -- your code here\nend", "  -- your code here\nend", "    -- your code\
    \ here\nend", "    return (a^2 + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2\
    \ == a^2)\nend", "    local sides = {a, b, c}\n    table.sort(sides)\n    return\
    \ sides[1]^2 + sides[2]^2 == sides[3]^2\nend", "    if a^2 + b^2 == c^2 then\n\
    \        return true\n    else\n        return false\n    end\nend", "    -- TODO:\
    \ implement this function\n    return false\nend", "    local sides = {a, b, c}\n\
    \    table.sort(sides)\n    return sides[1]^2 + sides[2]^2 == sides[3]^2\nend",
  "  -- your code here\n  local max = math.max(a, b, c)\n  local min = math.min(a,\
    \ b, c)\n  local mid = a + b + c - max - min\n  return max^2 == min^2 + mid^2\n\
    end", "    -- your code here\n    if a^2 + b^2 == c^2 then\n        return true\n\
    \    else\n        return false\n    end\nend", "    -- your code here\n    if\
    \ a^2 + b^2 == c^2 then\n        return true\n    else\n        return false\n\
    \    end\nend", "    -- your code here\nend", "  -- your code here\nend", "  --\
    \ your code here\nend", "    -- your code here\nend", "    if a^2 + b^2 == c^2\
    \ then\n        return true\n    elseif a^2 + c^2 == b^2 then\n        return\
    \ true\n    elseif b^2 + c^2 == a^2 then\n        return true\n    else\n    \
    \    return false\n    end\nend", "    return (a^2 + b^2 == c^2) or (a^2 + c^2\
    \ == b^2) or (b^2 + c^2 == a^2)\nend", "    return a^2 + b^2 == c^2\nend", " \
    \ local sides = {a, b, c}\n  table.sort(sides)\n  return sides[1]^2 + sides[2]^2\
    \ == sides[3]^2\nend", "    -- your code here\n    if a^2 + b^2 == c^2 then\n\
    \        return true\n    elseif a^2 + c^2 == b^2 then\n        return true\n\
    \    elseif b^2 + c^2 == a^2 then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    -- your code here\nend", "    -- your code here\n\
    end", "    -- your code here\n    if a^2 + b^2 == c^2 then\n        return true\n\
    \    elseif a^2 + c^2 == b^2 then\n        return true\n    elseif b^2 + c^2 ==\
    \ a^2 then\n        return true\n    else\n        return false\n    end\nend",
  "\tif a^2 + b^2 == c^2 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end", "    -- your code here\nend", "  -- your code here\nend", "    -- TODO:\
    \ Implement this function\nend", "  local sides = {a, b, c}\n  table.sort(sides)\n\
    \  return sides[1] ^ 2 + sides[2] ^ 2 == sides[3] ^ 2\nend", "    local sides\
    \ = {a, b, c}\n    table.sort(sides)\n    return sides[1] ^ 2 + sides[2] ^ 2 ==\
    \ sides[3] ^ 2\nend", "    if a^2 + b^2 == c^2 then\n        return true\n   \
    \ else\n        return false\n    end\nend", "    local sides = {a, b, c}\n  \
    \  table.sort(sides)\n    return sides[1]^2 + sides[2]^2 == sides[3]^2\nend",
  "    if a^2 + b^2 == c^2 then\n        return true\n    elseif a^2 + c^2 == b^2\
    \ then\n        return true\n    elseif b^2 + c^2 == a^2 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    -- your code here\n\
    \    if a^2 + b^2 == c^2 then\n        return true\n    else\n        return false\n\
    \    end\nend", "    -- your code here\nend", "    -- your code here\nend", " \
    \   -- your code here\nend", "    -- your code here\nend", "    -- your code here\n\
    \    if (a^2 + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2) then\n\
    \        return true\n    else\n        return false\n    end\nend", "    local\
    \ sides = {a, b, c}\n    table.sort(sides)\n    return sides[1]^2 + sides[2]^2\
    \ == sides[3]^2\nend", "  -- your code here\nend", "    -- your code here\n  \
    \  local sides = {a, b, c}\n    table.sort(sides)\n    return sides[1]^2 + sides[2]^2\
    \ == sides[3]^2\nend", "    -- your code here\nend", "    local max = math.max(a,\
    \ b, c)\n    local sum = a + b + c\n    return sum - max - max == max\nend", " \
    \   -- your code here\nend", "    if a^2 + b^2 == c^2 then\n        return true\n\
    \    else\n        return false\n    end\nend", "  -- your code here\n  if a^2\
    \ + b^2 == c^2 then\n    return true\n  elseif a^2 + c^2 == b^2 then\n    return\
    \ true\n  elseif b^2 + c^2 == a^2 then\n    return true\n  else\n    return false\n\
    \  end\nend", "    -- your code here\nend", "    -- TODO: implement the function\n\
    \    local max = math.max(a, b, c)\n    local min = math.min(a, b, c)\n    local\
    \ mid = a + b + c - max - min\n    if max * max == min * min + mid * mid then\n\
    \        return true\n    else\n        return false\n    end\nend", "    -- TODO:\
    \ implement the function\nend", "  -- your code here\nend", "    -- your code\
    \ here\n    local max = math.max(a, b, c)\n    local min = math.min(a, b, c)\n\
    \    local mid = a + b + c - max - min\n    return max * max == min * min + mid\
    \ * mid\nend", "    local sides = {a, b, c}\n    table.sort(sides)\n    return\
    \ sides[1]^2 + sides[2]^2 == sides[3]^2\nend", "    -- your code here\nend", " \
    \   -- your code here\nend", "  -- your code here\n  if a^2 + b^2 == c^2 then\n\
    \    return true\n  elseif a^2 + c^2 == b^2 then\n    return true\n  elseif b^2\
    \ + c^2 == a^2 then\n    return true\n  else\n    return false\n  end\nend", " \
    \   return a^2 + b^2 == c^2\nend", "  -- your code here\n  local max = math.max(a,\
    \ b, c)\n  local sum = a + b + c\n  local min = math.min(a, b, c)\n  local mid\
    \ = sum - max - min\n  return max * max == min * min + mid * mid\nend", "    if\
    \ a^2 + b^2 == c^2 then\n        return true\n    elseif a^2 + c^2 == b^2 then\n\
    \        return true\n    elseif b^2 + c^2 == a^2 then\n        return true\n\
    \    else\n        return false\n    end\nend", "    -- your code here\n    local\
    \ max = math.max(a, b, c)\n    local min = math.min(a, b, c)\n    local mid =\
    \ a + b + c - max - min\n    return max^2 == min^2 + mid^2\nend", "    -- your\
    \ code here\nend", "    -- your code here\nend", "\nend", "    -- your code here\n\
    \    local max = math.max(a, b, c)\n    local min = math.min(a, b, c)\n    local\
    \ mid = (a + b + c) - (max + min)\n    if max^2 == min^2 + mid^2 then\n      \
    \  return true\n    else\n        return false\n    end\nend", "    -- your code\
    \ here\nend", "  -- your code here\nend", "    -- your code here\nend", "    --\
    \ your code here\nend", "  -- TODO: implement this function\nend", "  -- your\
    \ code here\nend", "  -- TODO: implement this function\nend", "    -- TODO: Write\
    \ your code here\n    local max = math.max(a, b, c)\n    local min = math.min(a,\
    \ b, c)\n    local mid = a + b + c - max - min\n    if max * max == mid * mid\
    \ + min * min then\n        return true\n    end\n    return false\nend", "  \
    \  -- TODO: Implement this function\nend", "    -- your code here\nend", "   \
    \ -- TODO: Implement this function\nend", "    -- TODO: implement the function\n\
    end", "    -- TODO: Implement this function\nend", "    if a > b and a > c then\n\
    \        return a * a == b * b + c * c\n    elseif b > a and b > c then\n    \
    \    return b * b == a * a + c * c\n    else\n        return c * c == a * a +\
    \ b * b\n    end\nend", "\tlocal max = math.max(a, b, c)\n\tlocal min = math.min(a,\
    \ b, c)\n\tlocal mid = a + b + c - max - min\n\treturn max^2 == mid^2 + min^2\n\
    end", "    -- TODO: implement this function\nend", "    -- your code here\nend",
  "  -- your code here\nend", "    -- your code here\nend", "    -- your code here\n\
    end", "  -- your code here\n  if a^2 + b^2 == c^2 then\n    return true\n  elseif\
    \ a^2 + c^2 == b^2 then\n    return true\n  elseif b^2 + c^2 == a^2 then\n   \
    \ return true\n  else\n    return false\n  end\nend", "    return (a^2 + b^2 ==\
    \ c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2)\nend", "    -- your code here\n\
    end", "    -- your code here\nend", "  local sides = {a, b, c}\n  table.sort(sides)\n\
    \  return sides[1]^2 + sides[2]^2 == sides[3]^2\nend", "    local sides = {a,\
    \ b, c}\n    table.sort(sides)\n    return sides[1]^2 + sides[2]^2 == sides[3]^2\n\
    end", "  -- your code here\nend", "  -- your code here\n  if a^2 + b^2 == c^2\
    \ then\n    return true\n  else\n    return false\n  end\nend", "    -- your code\
    \ here\nend", "    -- TODO: implement this function\n    return false\nend", " \
    \ -- your code here\nend", "    -- your code here\n    if (a^2 + b^2 == c^2) or\
    \ (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2) then\n        return true\n    else\n\
    \        return false\n    end\nend", "    -- your code here\nend", "    -- TODO:\
    \ implement this function\nend", "    -- your code here\nend", "    local sides\
    \ = {a, b, c}\n    table.sort(sides)\n    return sides[1]^2 + sides[2]^2 == sides[3]^2\n\
    end", "    -- TODO: implement the function\nend", "    -- your code here\n   \
    \ local max = math.max(a, b, c)\n    local min = math.min(a, b, c)\n    local\
    \ mid = a + b + c - max - min\n    return max * max == min * min + mid * mid\n\
    end", "    -- TODO: Implement this function\nend", "    -- TODO: Implement this\
    \ function\nend", "    -- your code here\n    if a^2 + b^2 == c^2 then\n     \
    \   return true\n    else\n        return false\n    end\nend", "    local max\
    \ = math.max(a, b, c)\n    local sum = a + b + c\n    return sum - max > max\n\
    end", "    -- your code here\nend", "    -- your code here\nend", "    -- your\
    \ code here\nend", "  local sides = {a, b, c}\n  table.sort(sides)\n  return sides[1]^2\
    \ + sides[2]^2 == sides[3]^2\nend", "    local sides = {a, b, c}\n    table.sort(sides)\n\
    \    return sides[1]^2 + sides[2]^2 == sides[3]^2\nend", "    -- your code here\n\
    end", "    local max = math.max(a, b, c)\n    if max == a then\n        return\
    \ a * a == b * b + c * c\n    elseif max == b then\n        return b * b == a\
    \ * a + c * c\n    else\n        return c * c == a * a + b * b\n    end\nend",
  "    -- your code here\nend", "    -- your code here\nend", "    -- TODO: Implement\
    \ this function\nend", "    -- your code here\nend", "  if a^2 + b^2 == c^2 then\n\
    \    return true\n  else\n    return false\n  end\nend", "    if a^2 + b^2 ==\
    \ c^2 then\n        return true\n    else\n        return false\n    end\nend",
  "  -- your code here\n  if a^2 + b^2 == c^2 then\n    return true\n  else\n    return\
    \ false\n  end\nend", "    -- your code here\nend", "    -- your code here\nend",
  "  -- your code here\nend", "    -- your code here\nend", "    -- your code here\n\
    end", "    -- TODO: implement this function\nend", "    local max = math.max(a,\
    \ b, c)\n    local sum = a + b + c\n    return max * max == sum - max * max\n\
    end", "    -- your code here\nend", "    if a^2 + b^2 == c^2 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    return (a^2 + b^2\
    \ == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2)\nend", "    -- TODO: implement\
    \ this function\n    return false\nend", "    -- your code here\nend", "    if\
    \ a^2 + b^2 == c^2 then\n        return true\n    elseif a^2 + c^2 == b^2 then\n\
    \        return true\n    elseif b^2 + c^2 == a^2 then\n        return true\n\
    \    else\n        return false\n    end\nend", "    -- TODO: implement this function\n\
    end", "    -- TODO: Implement the function here\n    if a^2 + b^2 == c^2 then\n\
    \        return true\n    elseif a^2 + c^2 == b^2 then\n        return true\n\
    \    elseif b^2 + c^2 == a^2 then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    -- your code here\nend", "  local sides = {a, b,\
    \ c}\n  table.sort(sides)\n  return sides[1]^2 + sides[2]^2 == sides[3]^2\nend",
  "  -- your code here\nend", "    -- your code here\nend", "    -- your code here\n\
    end", "    -- your code here\nend", "    local sides = {a, b, c}\n    table.sort(sides)\n\
    \    return sides[1]^2 + sides[2]^2 == sides[3]^2\nend", "    -- your code here\n\
    \    if (a^2 + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2) then\n\
    \        return true\n    else\n        return false\n    end\nend", "  -- your\
    \ code here\nend", "    -- your code here\nend", "    -- your code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
