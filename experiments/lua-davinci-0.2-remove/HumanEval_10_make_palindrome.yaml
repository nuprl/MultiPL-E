name: HumanEval_10_make_palindrome
language: lua
prompt: "-- Find the shortest palindrome that begins with a supplied string.\n-- Algorithm\
  \ idea is simple:\n-- - Find the longest postfix of supplied string that is a palindrome.\n\
  -- - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\nlocal function make_palindrome(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
  \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
  \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local prefix = string\n  local suffix = string\n  local palindrome\
    \ = string\n  local palindrome_length = 0\n  local length = #string\n  local i\
    \ = 1\n  while i <= length do\n    local j = length - i + 1\n    if prefix:sub(1,\
    \ i) == suffix:sub(j) then\n      palindrome = prefix:sub(1, i) .. palindrome\n\
    \      palindrome_length = palindrome_length + i\n      prefix = prefix:sub(i\
    \ + 1)\n      suffix = suffix:sub(1, j - 1)\n      i = 1\n    else\n      i =\
    \ i + 1\n    end\n  end\n  return palindrome\nend", "  local len = #string\n \
    \ local palindrome_suffix = string:sub(1, len - find_longest_palindrome_suffix(string))\n\
    \  return string .. palindrome_suffix:reverse()\nend", "    local length = #string\n\
    \    local palindrome_length = 0\n    local palindrome_start = 1\n    local palindrome_end\
    \ = 1\n    local i = 1\n    while i <= length do\n        local j = 1\n      \
    \  while i - j >= 1 and i + j <= length and string:sub(i - j, i - j) == string:sub(i\
    \ + j, i + j) do\n            j = j + 1\n        end\n        j = j - 1\n    \
    \    if j * 2 + 1 > palindrome_length then\n            palindrome_length = j\
    \ * 2 + 1\n            palindrome_start = i - j\n            palindrome_end =\
    \ i + j\n        end\n        i = i + 1\n    end\n    i = 1\n    while i <= length\
    \ do\n        local j = 1\n        while i - j >= 1 and i + j - 1 <= length and\
    \ string:sub(i - j, i - j) == string:sub(i + j - 1, i + j - 1) do\n          \
    \  j = j + 1\n        end\n        j = j - 1\n        if j * 2 > palindrome_length\
    \ then\n            palindrome_length = j * 2\n            palindrome_start =\
    \ i - j\n            palindrome_end = i + j - 1\n        end\n        i = i +\
    \ 1\n    end\n    return string:sub(1, palindrome_start - 1) .. string:sub(palindrome_end\
    \ + 1, length):reverse() .. string:sub(palindrome_start, palindrome_end)\nend",
  "    local reversed = string:reverse()\n    local prefix = string:sub(1, #string\
    \ - 1)\n    local suffix = string:sub(#string)\n    local prefix_reversed = reversed:sub(1,\
    \ #reversed - 1)\n    local suffix_reversed = reversed:sub(#reversed)\n    local\
    \ palindrome = string .. prefix_reversed\n    return palindrome\nend", "    local\
    \ reversed = string:reverse()\n    local longest_palindrome = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. reversed:sub(#prefix + 1)\nend", "  local reversed = string:reverse()\n \
    \ local palindrome = string .. reversed\n  local longest_palindrome = palindrome:match(\"\
    (.*)(\" .. string .. \")$\")\n  return longest_palindrome or palindrome\nend",
  "    local reversed = string:reverse()\n    local prefix = string:sub(1, #string\
    \ - 1)\n    local suffix = string:sub(#string)\n    local postfix = reversed:sub(#string\
    \ + 1)\n    local longest_palindrome = find_longest_palindrome(postfix)\n    return\
    \ string .. reversed:sub(#longest_palindrome + 1)\nend", "  local reverse = string:reverse()\n\
    \  local prefix = string:sub(1, #string - 1)\n  local suffix = string:sub(#string)\n\
    \  local prefix_reverse = prefix:reverse()\n  local suffix_reverse = suffix:reverse()\n\
    \  local palindrome = string .. prefix_reverse\n  local palindrome_reverse = reverse\
    \ .. suffix_reverse\n  local palindrome_length = #palindrome\n  local palindrome_reverse_length\
    \ = #palindrome_reverse\n  if palindrome_length < palindrome_reverse_length then\n\
    \    return palindrome\n  else\n    return palindrome_reverse\n  end\nend", " \
    \ local reversed = string:reverse()\n  local prefix = string:sub(1, #string -\
    \ 1)\n  local suffix = string:sub(#string)\n  local prefix_reversed = reversed:sub(1,\
    \ #string - 1)\n  local suffix_reversed = reversed:sub(#string)\n  local longest_palindrome\
    \ = find_longest_palindrome(suffix_reversed)\n  local prefix_to_append = prefix_reversed:sub(1,\
    \ #prefix_reversed - #longest_palindrome)\n  return string .. prefix_to_append:reverse()\n\
    end", "  local prefix = string:sub(1, #string - 1)\n  local suffix = string:sub(#string)\n\
    \  local reversed_prefix = prefix:reverse()\n  return string .. reversed_prefix\n\
    end", "  local n = #string\n  local i = n\n  local j = n\n  local k = n\n  local\
    \ l = n\n  local m = n\n  local p = n\n  local q = n\n  local r = n\n  local s\
    \ = n\n  local t = n\n  local u = n\n  local v = n\n  local w = n\n  local x =\
    \ n\n  local y = n\n  local z = n\n  local a = n\n  local b = n\n  local c = n\n\
    \  local d = n\n  local e = n\n  local f = n\n  local g = n\n  local h = n\n \
    \ local i = n\n  local j = n\n  local k = n\n  local l = n\n  local m = n\n  local\
    \ n = n\n  local o = n\n  local p = n\n  local q = n\n  local r = n\n  local s\
    \ = n\n  local t = n\n  local u = n\n  local v = n\n  local w = n\n  local x =\
    \ n\n  local y = n\n  local z = n\n  local a = n\n  local b = n\n  local c = n\n\
    \  local d = n\n  local e = n\n  local f = n\n  local g = n\n  local h = n\n \
    \ local i = n\n  local j = n\n  local k = n\n  local l = n\n  local m = n\n  local\
    \ n = n\n  local o = n\n  local p = n\n  local q = n\n  local r = n\n  local s\
    \ = n\n  local t = n\n  local u = n\n  local v = n\n  local w = n\n  local x =\
    \ n\n  local y = n\n  local z = n\n  local a = n\n  local b = n\n  local c = n\n\
    \  local d = n\n  local e = n\n  local f = n\n  local g = n\n  local h = n\n \
    \ local i = n\n  local j = n\n  local k = n\n  local l = n\n  local m = n\n  local\
    \ n = n\n  local o = n\n  local p = n\n", "    local prefix_length = 0\n    local\
    \ suffix_length = 0\n    local string_length = #string\n    local string_length_half\
    \ = math.floor(string_length / 2)\n    local string_length_half_plus_one = string_length_half\
    \ + 1\n    local string_length_minus_one = string_length - 1\n    local string_length_minus_two\
    \ = string_length - 2\n    local string_length_minus_three = string_length - 3\n\
    \    local string_length_minus_four = string_length - 4\n    local string_length_minus_five\
    \ = string_length - 5\n    local string_length_minus_six = string_length - 6\n\
    \    local string_length_minus_seven = string_length - 7\n    local string_length_minus_eight\
    \ = string_length - 8\n    local string_length_minus_nine = string_length - 9\n\
    \    local string_length_minus_ten = string_length - 10\n    local string_length_minus_eleven\
    \ = string_length - 11\n    local string_length_minus_twelve = string_length -\
    \ 12\n    local string_length_minus_thirteen = string_length - 13\n    local string_length_minus_fourteen\
    \ = string_length - 14\n    local string_length_minus_fifteen = string_length\
    \ - 15\n    local string_length_minus_sixteen = string_length - 16\n    local\
    \ string_length_minus_seventeen = string_length - 17\n    local string_length_minus_eighteen\
    \ = string_length - 18\n    local string_length_minus_nineteen = string_length\
    \ - 19\n    local string_length_minus_twenty = string_length - 20\n    local string_length_minus_twenty_one\
    \ = string_length - 21\n    local string_length_minus_twenty_two = string_length\
    \ - 22\n    local string_length_minus_twenty_three = string_length - 23\n    local\
    \ string_length_minus_twenty_four = string_length - 24\n    local string_length_minus_twenty_five\
    \ = string_length - 25\n    local string_length_minus_twenty_six = string_length\
    \ - 26\n    local", "    local reversed = string:reverse()\n    local longest_palindrome\
    \ = find_longest_palindrome(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome)\n    return string .. reversed:sub(#prefix + 1)\nend",
  "    local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local longest_palindrome = find_longest_palindrome(prefix)\n    local prefix_to_append\
    \ = prefix:sub(1, #prefix - #longest_palindrome)\n    return string .. prefix_to_append:reverse()\
    \ .. suffix\nend", "  local reverse = string:reverse()\n  local suffix = string:sub(1,\
    \ #string - 1)\n  local prefix = string:sub(#string)\n  local palindrome = string\
    \ .. reverse:sub(#prefix + 1)\n  return palindrome\nend", "    local reversed\
    \ = string:reverse()\n    local prefix_length = 0\n    local suffix_length = 0\n\
    \    local max_length = 0\n    local max_length_index = 0\n    local length =\
    \ string.len(string)\n    local prefix = string:sub(1, length)\n    local suffix\
    \ = reversed:sub(1, length)\n    local table = {}\n    for i = 1, length do\n\
    \        table[i] = {}\n        for j = 1, length do\n            table[i][j]\
    \ = 0\n        end\n    end\n    for i = 1, length do\n        for j = 1, length\
    \ do\n            if prefix:sub(i, i) == suffix:sub(j, j) then\n             \
    \   if i == 1 or j == 1 then\n                    table[i][j] = 1\n          \
    \      else\n                    table[i][j] = table[i - 1][j - 1] + 1\n     \
    \           end\n                if table[i][j] > max_length then\n          \
    \          max_length = table[i][j]\n                    max_length_index = i\n\
    \                end\n            else\n                table[i][j] = 0\n    \
    \        end\n        end\n    end\n    prefix_length = max_length_index\n   \
    \ suffix_length = max_length\n    return string .. reversed:sub(suffix_length\
    \ + 1, length)\nend", "  local string_length = #string\n  local palindrome_length\
    \ = 0\n  local palindrome_start = 0\n  local palindrome_end = 0\n  local i = 1\n\
    \  local j = string_length\n  while i < j do\n    if string:sub(i, j) == string:sub(j,\
    \ i):reverse() then\n      palindrome_length = j - i + 1\n      palindrome_start\
    \ = i\n      palindrome_end = j\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return string .. string:sub(1, palindrome_start - 1):reverse()\nend", "   \
    \ local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local suffix_len = longest_palindrome_length(suffix)\n    local prefix_len\
    \ = #prefix - suffix_len\n    return string .. string:sub(prefix_len + 1, #prefix):reverse()\n\
    end", "    local reversed = string:reverse()\n    local prefix = string:sub(1,\
    \ #string - 1)\n    local suffix = string:sub(#string)\n    local reversed_prefix\
    \ = reversed:sub(1, #string - 1)\n    local reversed_suffix = reversed:sub(#string)\n\
    \    local longest_palindrome = reversed_suffix .. reversed_prefix\n    local\
    \ shortest_palindrome = reversed_prefix .. suffix .. reversed_suffix\n    return\
    \ shortest_palindrome\nend", "    local reversed = string:reverse()\n    local\
    \ length = #string\n    local suffix_length = 0\n    for i = 1, length do\n  \
    \      if string:sub(1, i) == reversed:sub(length - i + 1, length) then\n    \
    \        suffix_length = i\n        end\n    end\n    return string .. reversed:sub(length\
    \ - suffix_length + 1, length)\nend", "    local suffix_length = 0\n    local\
    \ string_length = #string\n    local string_length_half = math.floor(string_length\
    \ / 2)\n    for i = 1, string_length_half do\n        if string:sub(i, string_length\
    \ - i + 1) == string:sub(string_length - i + 1, string_length - i + 1):reverse()\
    \ then\n            suffix_length = string_length - i\n        end\n    end\n\
    \    return string .. string:sub(1, string_length - suffix_length):reverse()\n\
    end", "    local string_length = #string\n    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local prefix_length = string_length - palindrome_suffix\n    local prefix\
    \ = string:sub(1, prefix_length)\n    local reversed_prefix = prefix:reverse()\n\
    \    return string .. reversed_prefix\nend", "  local reversed = string:reverse()\n\
    \  local postfix = string:sub(1, #string - 1)\n  local prefix = string:sub(2,\
    \ #string)\n  local longest_palindrome = ''\n  while #postfix > 0 do\n    if postfix\
    \ == reversed:sub(1, #postfix) then\n      longest_palindrome = postfix\n    \
    \  break\n    end\n    postfix = postfix:sub(1, #postfix - 1)\n    prefix = prefix:sub(2,\
    \ #prefix)\n  end\n  return string .. reversed:sub(#longest_palindrome + 1, #string)\n\
    end", "  local reverse = string:reverse()\n  local prefix = string:sub(1, #string\
    \ - 1)\n  local suffix = string:sub(#string)\n  local palindrome = string .. reverse:sub(#prefix\
    \ + 1)\n  return palindrome\nend", "  local reverse = string:reverse()\n  local\
    \ prefix = string:sub(1, string:len() - 1)\n  local suffix = string:sub(string:len()\
    \ - 1, string:len())\n  local palindrome = suffix .. prefix:reverse()\n  return\
    \ palindrome\nend", "  local reversed = string:reverse()\n  local length = #string\n\
    \  local suffix_length = 0\n  for i = 1, length do\n    if string:sub(1, i) ==\
    \ reversed:sub(length - i + 1, length) then\n      suffix_length = i\n    end\n\
    \  end\n  return string .. reversed:sub(length - suffix_length + 1, length)\n\
    end", "  local reversed = string:reverse()\n  local prefix = string:sub(1, #string\
    \ - 1)\n  local reversed_prefix = reversed:sub(1, #string - 1)\n  local suffix\
    \ = string:sub(#string - 1)\n  local reversed_suffix = reversed:sub(#string -\
    \ 1)\n  local longest_palindrome_suffix = reversed_suffix .. suffix\n  local longest_palindrome_prefix\
    \ = reversed_prefix .. prefix\n  local longest_palindrome_prefix_length = #longest_palindrome_prefix\n\
    \  local longest_palindrome_suffix_length = #longest_palindrome_suffix\n  local\
    \ longest_palindrome_length = math.max(longest_palindrome_prefix_length, longest_palindrome_suffix_length)\n\
    \  local palindrome = string .. reversed:sub(longest_palindrome_length + 1)\n\
    \  return palindrome\nend", "  local reverse = string:reverse()\n  local suffix\
    \ = string:sub(1, #string - 1)\n  local prefix = string:sub(#string, #string)\n\
    \  local longest_suffix = longest_palindromic_suffix(suffix)\n  return string\
    \ .. reverse:sub(#longest_suffix + 1, #string)\nend", "    local string_length\
    \ = #string\n    local longest_palindrome_length = 0\n    local longest_palindrome_start\
    \ = 0\n    for i = 1, string_length do\n        local palindrome_length = 0\n\
    \        local palindrome_start = 0\n        local j = i\n        local k = string_length\n\
    \        while j <= k do\n            if string:sub(j, j) == string:sub(k, k)\
    \ then\n                palindrome_length = palindrome_length + 1\n          \
    \      palindrome_start = j\n                j = j + 1\n                k = k\
    \ - 1\n            else\n                break\n            end\n        end\n\
    \        if palindrome_length > longest_palindrome_length then\n            longest_palindrome_length\
    \ = palindrome_length\n            longest_palindrome_start = palindrome_start\n\
    \        end\n    end\n    local prefix = string:sub(1, longest_palindrome_start\
    \ - 1)\n    local suffix = string:sub(longest_palindrome_start, string_length)\n\
    \    return suffix .. prefix:reverse()\nend", "  local reverse = string:reverse()\n\
    \  local suffix = string:sub(1, #string - 1)\n  local prefix = string:sub(#string)\n\
    \  local longest_palindrome = ''\n  local longest_palindrome_length = 0\n  local\
    \ i = 1\n  while i <= #suffix do\n    local j = 1\n    while j <= #suffix do\n\
    \      local substring = suffix:sub(i, j)\n      if substring == reverse:sub(#reverse\
    \ - j + 1, #reverse - i + 1) then\n        local length = j - i + 1\n        if\
    \ length > longest_palindrome_length then\n          longest_palindrome = substring\n\
    \          longest_palindrome_length = length\n        end\n      end\n      j\
    \ = j + 1\n    end\n    i = i + 1\n  end\n  return string .. reverse:sub(#reverse\
    \ - #longest_palindrome + 1, #reverse)\nend", "\tlocal reversed = string:reverse()\n\
    \tlocal prefix = string:sub(1, #string - #string:match('.*()' .. reversed))\n\t\
    return string .. prefix:reverse()\nend", "  local string_length = #string\n  local\
    \ palindrome_length = 0\n  local palindrome_start = 0\n  local palindrome_end\
    \ = 0\n  local palindrome_length_table = {}\n  for i = 1, string_length do\n \
    \   palindrome_length_table[i] = 0\n  end\n  for i = 1, string_length do\n   \
    \ local j = i\n    while j <= string_length do\n      local k = j\n      local\
    \ l = i\n      while k > 0 and l <= string_length and string:sub(k, k) == string:sub(l,\
    \ l) do\n        k = k - 1\n        l = l + 1\n      end\n      if k == 0 then\n\
    \        palindrome_length = j - i + 1\n        palindrome_start = i\n       \
    \ palindrome_end = j\n      end\n      j = j + 1\n    end\n    palindrome_length_table[i]\
    \ = palindrome_length\n  end\n  local palindrome_prefix = string:sub(1, palindrome_start\
    \ - 1)\n  local palindrome_suffix = string:sub(palindrome_end + 1, string_length)\n\
    \  local palindrome_prefix_reversed = palindrome_prefix:reverse()\n  return palindrome_prefix_reversed\
    \ .. string .. palindrome_suffix\nend", "    local reversed = string:reverse()\n\
    \    local prefix = string:sub(1, #string - #string:match(\"^.*()\" .. reversed))\n\
    \    return string .. prefix:reverse()\nend", "    local length = #string\n  \
    \  local palindrome_length = length\n    local palindrome_start = 1\n    local\
    \ palindrome_end = length\n    local i = 1\n    local j = length\n    while i\
    \ < j do\n        if string:sub(i, j) == string:sub(j, i) then\n            palindrome_length\
    \ = j - i + 1\n            palindrome_start = i\n            palindrome_end =\
    \ j\n        end\n        i = i + 1\n        j = j - 1\n    end\n    return string:sub(palindrome_start,\
    \ palindrome_end) .. string:sub(1, palindrome_start - 1):reverse()\nend", "  \
    \  local reversed = string:reverse()\n    local length = string:len()\n    local\
    \ suffix = string:sub(1, length - 1)\n    local prefix = string:sub(length, length)\n\
    \    local palindrome = string .. reversed:sub(1, reversed:len() - suffix:len())\n\
    \    return palindrome\nend", "  local suffix_length = longest_palindromic_suffix(string)\n\
    \  local prefix = string:sub(1, #string - suffix_length)\n  return string .. prefix:reverse()\n\
    end", "    local rev_string = string:reverse()\n    local rev_string_len = #rev_string\n\
    \    local string_len = #string\n    local prefix_len = 0\n    local suffix_len\
    \ = 0\n    local palindrome_len = 0\n    local palindrome_pos = 0\n    local i\
    \ = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n  \
    \  local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r\
    \ = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n  \
    \  local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local aa\
    \ = 1\n    local ab = 1\n    local ac = 1\n    local ad = 1\n    local ae = 1\n\
    \    local af = 1\n    local ag = 1\n    local ah = 1\n    local ai = 1\n    local\
    \ aj = 1\n    local ak = 1\n    local al = 1\n    local am = 1\n    local an =\
    \ 1\n    local ao = 1\n    local ap = 1\n    local aq = 1\n    local ar = 1\n\
    \    local as = 1\n    local at = 1\n    local au = 1\n    local av = 1\n    local\
    \ aw = 1\n    local ax = 1\n    local ay = 1\n    local az = 1\n    local ba =\
    \ 1\n    local bb = 1\n    local bc = 1\n    local bd = 1\n    local be = 1\n\
    \    local bf = 1\n    local bg = 1\n    local bh = 1\n    local bi = 1\n    local\
    \ bj = 1\n    local bk = 1\n    local bl = 1\n    local bm = 1\n    local bn =\
    \ 1\n    local bo = 1\n    local bp = 1\n    local bq = 1\n    local br = 1\n\
    \    local bs = 1\n    local bt = 1\n    local bu = 1\n    local bv = 1\n    local\
    \ bw = 1\n    local bx = 1\n    local by = 1\n    local bz = 1", "    local n\
    \ = #string\n    local i = 1\n    while i <= n do\n        local j = n\n     \
    \   while j >= i do\n            if string:sub(i, j) == string:sub(i, j):reverse()\
    \ then\n                return string .. string:sub(1, i - 1):reverse()\n    \
    \        end\n            j = j - 1\n        end\n        i = i + 1\n    end\n\
    end", "    local reversed = string:reverse()\n    local longest_palindrome_suffix\
    \ = reversed:sub(1, string:find(reversed))\n    return string .. reversed:sub(#longest_palindrome_suffix\
    \ + 1)\nend", "  local reversed = string:reverse()\n  local suffix = string:sub(1,\
    \ string:len() - reversed:find(string) + 1)\n  return string .. reversed:sub(suffix:len()\
    \ + 1)\nend", "    local string_length = #string\n    local palindrome_length\
    \ = 0\n    local palindrome_start = 0\n    local palindrome_end = 0\n    local\
    \ i = 1\n    while i <= string_length do\n        local j = 1\n        while i\
    \ - j >= 1 and i + j <= string_length and string:sub(i - j, i - j) == string:sub(i\
    \ + j, i + j) do\n            j = j + 1\n        end\n        if j > palindrome_length\
    \ then\n            palindrome_length = j\n            palindrome_start = i -\
    \ j + 1\n            palindrome_end = i + j - 1\n        end\n        i = i +\
    \ 1\n    end\n    local prefix = string:sub(1, palindrome_start - 1)\n    local\
    \ suffix = string:sub(palindrome_end + 1, string_length)\n    return prefix ..\
    \ suffix:reverse() .. string\nend", "  local reversed = string:reverse()\n  local\
    \ longest_palindrome_suffix = string:match(\".*()\" .. reversed)\n  return string\
    \ .. reversed:sub(longest_palindrome_suffix)\nend", "    local reversed = string:reverse()\n\
    \    local prefix = string:sub(1, #string - #string:match(\".*\" .. reversed))\n\
    \    return string .. prefix:reverse()\nend", "    local reverse = string:reverse()\n\
    \    local suffix = string:sub(1, #string - 1)\n    local prefix = string:sub(2,\
    \ #string)\n    local longest_palindrome_suffix = find_longest_palindrome_suffix(suffix)\n\
    \    local prefix_to_append = prefix:sub(1, #prefix - #longest_palindrome_suffix)\n\
    \    return string .. reverse:sub(1, #prefix_to_append)\nend", "  local string_length\
    \ = #string\n  local prefix_length = string_length\n  local suffix_length = 0\n\
    \  local suffix_start = 0\n  local suffix_end = 0\n  local suffix_palindrome_length\
    \ = 0\n  local suffix_palindrome_start = 0\n  local suffix_palindrome_end = 0\n\
    \  local suffix_palindrome_length_max = 0\n  local suffix_palindrome_start_max\
    \ = 0\n  local suffix_palindrome_end_max = 0\n  local suffix_palindrome_length_max_prev\
    \ = 0\n  local suffix_palindrome_start_max_prev = 0\n  local suffix_palindrome_end_max_prev\
    \ = 0\n  local suffix_palindrome_length_max_prev_prev = 0\n  local suffix_palindrome_start_max_prev_prev\
    \ = 0\n  local suffix_palindrome_end_max_prev_prev = 0\n  local suffix_palindrome_length_max_prev_prev_prev\
    \ = 0\n  local suffix_palindrome_start_max_prev_prev_prev = 0\n  local suffix_palindrome_end_max_prev_prev_prev\
    \ = 0\n  local suffix_palindrome_length_max_prev_prev_prev_prev = 0\n  local suffix_palindrome_start_max_prev_prev_prev_prev\
    \ = 0\n  local suffix_palindrome_end_max_prev_prev_prev_prev = 0\n  local suffix_palindrome_length_max_prev_prev_prev_prev_prev\
    \ = 0\n  local suffix_palindrome_start_max_prev_prev_prev_prev_prev = 0\n  local\
    \ suffix_palindrome_end_max_prev_prev_prev_prev_prev = 0\n  local suffix_palindrome_length_max_prev_prev_prev_prev_prev_prev\
    \ = 0\n  local suffix_palindrome_start_max_prev_prev_prev_prev_prev_prev = 0\n\
    \  local suffix_palindrome_end_max_prev_prev_prev_prev_prev_prev = 0\n  local\
    \ suffix_palindrome_length_max_", "    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "  local reversed = string:reverse()\n  local longest_palindrome_suffix\
    \ = string:sub(1, find_longest_palindrome_suffix(string))\n  local string_prefix\
    \ = string:sub(longest_palindrome_suffix:len() + 1)\n  return string .. reversed:sub(string_prefix:len()\
    \ + 1)\nend", "    local string_length = #string\n    local prefix_length = string_length\n\
    \    local suffix_length = 0\n    local suffix_start = string_length\n    local\
    \ suffix_end = string_length\n    local suffix_palindrome_length = 0\n    local\
    \ suffix_palindrome_start = 0\n    local suffix_palindrome_end = 0\n    local\
    \ suffix_palindrome_length_max = 0\n    local suffix_palindrome_start_max = 0\n\
    \    local suffix_palindrome_end_max = 0\n    local suffix_palindrome_length_max_max\
    \ = 0\n    local suffix_palindrome_start_max_max = 0\n    local suffix_palindrome_end_max_max\
    \ = 0\n    local suffix_palindrome_length_max_max_max = 0\n    local suffix_palindrome_start_max_max_max\
    \ = 0\n    local suffix_palindrome_end_max_max_max = 0\n    local suffix_palindrome_length_max_max_max_max\
    \ = 0\n    local suffix_palindrome_start_max_max_max_max = 0\n    local suffix_palindrome_end_max_max_max_max\
    \ = 0\n    local suffix_palindrome_length_max_max_max_max_max = 0\n    local suffix_palindrome_start_max_max_max_max_max\
    \ = 0\n    local suffix_palindrome_end_max_max_max_max_max = 0\n    local suffix_palindrome_length_max_max_max_max_max_max\
    \ = 0\n    local suffix_palindrome_start_max_max_max_max_max_max = 0\n    local\
    \ suffix_palindrome_end_max_max_max_max_max_max = 0\n    local suffix_palindrome_length_max_max_max_max_max_max_max\
    \ = 0\n    local suffix_palindrome_start_max_max_max_max_max_max_max = 0\n   \
    \ local suffix_palindrome_end_max_max_max_max_max_max_max = 0\n    local suffix_palindrome_",
  "    local reversed = string:reverse()\n    local prefix = string:sub(1, #string\
    \ - 1)\n    local suffix = string:sub(#string)\n    local palindrome = suffix\
    \ .. reversed:sub(#prefix + 1)\n    return palindrome\nend", "    local reversed\
    \ = string:reverse()\n    local prefix = string:sub(1, #string - 1)\n    local\
    \ suffix = string:sub(#string)\n    local prefix_reversed = reversed:sub(1, #reversed\
    \ - 1)\n    local suffix_reversed = reversed:sub(#reversed)\n    local palindrome\
    \ = string .. prefix_reversed\n    return palindrome\nend", "    local reversed\
    \ = string:reverse()\n    local length = string:len()\n    local prefix = string:sub(1,\
    \ length - 1)\n    local suffix = string:sub(length, length)\n    local prefix_reversed\
    \ = reversed:sub(1, length - 1)\n    local suffix_reversed = reversed:sub(length,\
    \ length)\n    local palindrome = string .. reversed:sub(length + 1)\n    local\
    \ palindrome_length = palindrome:len()\n    local palindrome_length_half = palindrome_length\
    \ / 2\n    local palindrome_length_half_floor = math.floor(palindrome_length_half)\n\
    \    local palindrome_length_half_ceil = math.ceil(palindrome_length_half)\n \
    \   local palindrome_prefix = palindrome:sub(1, palindrome_length_half_floor)\n\
    \    local palindrome_suffix = palindrome:sub(palindrome_length_half_ceil + 1)\n\
    \    local palindrome_suffix_reversed = palindrome_suffix:reverse()\n    local\
    \ palindrome_prefix_reversed = palindrome_prefix:reverse()\n    local palindrome_prefix_reversed_length\
    \ = palindrome_prefix_reversed:len()\n    local palindrome_prefix_reversed_length_half\
    \ = palindrome_prefix_reversed_length / 2\n    local palindrome_prefix_reversed_length_half_floor\
    \ = math.floor(palindrome_prefix_reversed_length_half)\n    local palindrome_prefix_reversed_length_half_ceil\
    \ = math.ceil(palindrome_prefix_reversed_length_half)\n    local palindrome_prefix_reversed_prefix\
    \ = palindrome_prefix_reversed:sub(1, palindrome_prefix_reversed_length_half_floor)\n\
    \    local palindrome_prefix_reversed_suffix = palindrome_prefix_reversed:sub(palindrome_prefix_reversed_length_half_ceil\
    \ + 1)\n    local", "  local reversed = string:reverse()\n  local suffix = string:sub(1,\
    \ #string - 1)\n  local prefix = string:sub(#string)\n  local suffix_palindrome\
    \ = longest_palindrome(suffix)\n  local prefix_palindrome = longest_palindrome(prefix)\n\
    \  local prefix_reversed = reversed:sub(#prefix_palindrome + 1)\n  return prefix_palindrome\
    \ .. prefix_reversed .. suffix_palindrome\nend", "  local string_length = string:len()\n\
    \  local string_reversed = string:reverse()\n  local string_reversed_length =\
    \ string_reversed:len()\n  local longest_palindrome_length = 0\n  local longest_palindrome_index\
    \ = 0\n  local longest_palindrome_reversed_index = 0\n  local longest_palindrome_reversed_length\
    \ = 0\n  local longest_palindrome_reversed_index_end = 0\n  local longest_palindrome_reversed_length_end\
    \ = 0\n  local longest_palindrome_reversed_index_start = 0\n  local longest_palindrome_reversed_length_start\
    \ = 0\n  local longest_palindrome_reversed_index_start_end = 0\n  local longest_palindrome_reversed_length_start_end\
    \ = 0\n  local longest_palindrome_reversed_index_start_start = 0\n  local longest_palindrome_reversed_length_start_start\
    \ = 0\n  local longest_palindrome_reversed_index_end_end = 0\n  local longest_palindrome_reversed_length_end_end\
    \ = 0\n  local longest_palindrome_reversed_index_end_start = 0\n  local longest_palindrome_reversed_length_end_start\
    \ = 0\n  local longest_palindrome_reversed_index_start_start_end = 0\n  local\
    \ longest_palindrome_reversed_length_start_start_end = 0\n  local longest_palindrome_reversed_index_start_end_end\
    \ = 0\n  local longest_palindrome_reversed_length_start_end_end = 0\n  local longest_palindrome_reversed_index_end_start_end\
    \ = 0\n  local longest_palindrome_reversed_length_end_start_end = 0\n  local longest_palindrome_reversed_index_end_end_start\
    \ = 0\n  local longest_palindrome_reversed_length_end_end_start = 0\n  local longest_",
  "    local reversed = string:reverse()\n    local prefix_length = 0\n    local suffix_length\
    \ = 0\n    local palindrome_length = 0\n    local palindrome_index = 0\n    local\
    \ max_length = #string\n    local max_index = max_length - 1\n    local i = 0\n\
    \    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local\
    \ n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n\
    \    local s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n    local\
    \ w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    local aa = 0\n\
    \    local ab = 0\n    local ac = 0\n    local ad = 0\n    local ae = 0\n    local\
    \ af = 0\n    local ag = 0\n    local ah = 0\n    local ai = 0\n    local aj =\
    \ 0\n    local ak = 0\n    local al = 0\n    local am = 0\n    local an = 0\n\
    \    local ao = 0\n    local ap = 0\n    local aq = 0\n    local ar = 0\n    local\
    \ as = 0\n    local at = 0\n    local au = 0\n    local av = 0\n    local aw =\
    \ 0\n    local ax = 0\n    local ay = 0\n    local az = 0\n    local ba = 0\n\
    \    local bb = 0\n    local bc = 0\n    local bd = 0\n    local be = 0\n    local\
    \ bf = 0\n    local bg = 0\n    local bh = 0\n    local bi = 0\n    local bj =\
    \ 0\n    local bk = 0\n    local bl = 0\n    local bm = 0\n    local bn = 0\n\
    \    local bo = 0\n    local bp = 0\n    local bq = 0\n    local br = 0\n    local\
    \ bs = 0\n    local bt = 0\n    local bu = 0\n    local bv = 0\n    local bw =\
    \ 0\n    local bx = 0\n    local by = 0\n    local bz = 0\n    local", "  local\
    \ string_length = #string\n  local palindrome_length = 0\n  local palindrome_start\
    \ = 0\n  local palindrome_end = 0\n  local palindrome_prefix_start = 0\n  local\
    \ palindrome_prefix_end = 0\n  local palindrome_suffix_start = 0\n  local palindrome_suffix_end\
    \ = 0\n  local palindrome_prefix_length = 0\n  local palindrome_suffix_length\
    \ = 0\n  local palindrome_prefix = \"\"\n  local palindrome_suffix = \"\"\n  local\
    \ palindrome = \"\"", "  local length = #string\n  local prefix = string:sub(1,\
    \ length - 1)\n  local suffix = string:sub(length, length)\n  local reversed_prefix\
    \ = prefix:reverse()\n  local reversed_suffix = suffix:reverse()\n  local reversed_string\
    \ = reversed_prefix .. reversed_suffix\n  local reversed_string_length = #reversed_string\n\
    \  local reversed_string_suffix = reversed_string:sub(reversed_string_length,\
    \ reversed_string_length)\n  local reversed_string_prefix = reversed_string:sub(1,\
    \ reversed_string_length - 1)\n  local reversed_string_prefix_length = #reversed_string_prefix\n\
    \  local reversed_string_prefix_suffix = reversed_string_prefix:sub(reversed_string_prefix_length,\
    \ reversed_string_prefix_length)\n  local reversed_string_prefix_prefix = reversed_string_prefix:sub(1,\
    \ reversed_string_prefix_length - 1)\n  local reversed_string_prefix_prefix_length\
    \ = #reversed_string_prefix_prefix\n  local reversed_string_prefix_prefix_suffix\
    \ = reversed_string_prefix_prefix:sub(reversed_string_prefix_prefix_length, reversed_string_prefix_prefix_length)\n\
    \  local reversed_string_prefix_prefix_prefix = reversed_string_prefix_prefix:sub(1,\
    \ reversed_string_prefix_prefix_length - 1)\n  local reversed_string_prefix_prefix_prefix_length\
    \ = #reversed_string_prefix_prefix_prefix\n  local reversed_string_prefix_prefix_prefix_suffix\
    \ = reversed_string_prefix_prefix_prefix:sub(reversed_string_prefix_prefix_prefix_length,\
    \ reversed_string_prefix_prefix_prefix_length)\n  local reversed_string_prefix_prefix_prefix_prefix\
    \ = reversed_string_prefix_prefix_prefix:sub(1, reversed_string_prefix_prefix_prefix_length\
    \ - 1)\n  local reversed_string_prefix_prefix_prefix_prefix_length = #reversed_string_prefix_prefix_prefix_prefix\n\
    \  local reversed_string_prefix_prefix_prefix_prefix_suffix = reversed_", "  local\
    \ reversed = string:reverse()\n  local prefix = string:sub(1, #string - 1)\n \
    \ local suffix = string:sub(#string)\n  local reversed_prefix = prefix:reverse()\n\
    \  local reversed_suffix = suffix:reverse()\n  local postfix = reversed_suffix\
    \ .. reversed_prefix\n  return string .. postfix\nend", "    local prefix = string:sub(1,\
    \ #string - 1)\n    local suffix = string:sub(#string)\n    local reversed_prefix\
    \ = prefix:reverse()\n    local reversed_suffix = suffix:reverse()\n    local\
    \ reversed_string = reversed_prefix .. reversed_suffix\n    local palindrome =\
    \ string .. reversed_string\n    return palindrome\nend", "  local reversed =\
    \ string:reverse()\n  local prefix = string:sub(1, #string - 1)\n  local suffix\
    \ = string:sub(#string)\n  local reversed_prefix = prefix:reverse()\n  local reversed_suffix\
    \ = suffix:reverse()\n  local reversed_prefix_suffix = reversed_prefix .. reversed_suffix\n\
    \  local reversed_prefix_suffix_reversed = reversed_prefix_suffix:reverse()\n\
    \  local reversed_prefix_suffix_reversed_suffix = reversed_prefix_suffix_reversed\
    \ .. suffix\n  return reversed_prefix_suffix_reversed_suffix\nend", "    local\
    \ reversed = string:reverse()\n    local longest_palindrome = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. reversed:sub(#prefix + 1)\nend", "    local reversed = string:reverse()\n\
    \    local palindrome = string .. reversed\n    local suffix = string:sub(1, #string\
    \ - 1)\n    while suffix ~= \"\" do\n        if palindrome:find(suffix, 1, true)\
    \ then\n            return palindrome\n        end\n        suffix = suffix:sub(1,\
    \ #suffix - 1)\n    end\n    return palindrome\nend", "  local reversed = string:reverse()\n\
    \  local longest_palindrome = string:match(\"^(.*)\" .. reversed .. \"$\")\n \
    \ return string .. reversed:sub(#longest_palindrome + 1)\nend", "    local prefix_len\
    \ = 0\n    local suffix_len = 0\n    local prefix_start = 1\n    local suffix_start\
    \ = 1\n    local string_len = #string\n    local string_rev = string:reverse()\n\
    \    local string_rev_len = #string_rev\n    local i = 1\n    local j = 1\n  \
    \  local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local o\
    \ = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n  \
    \  local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x\
    \ = 1\n    local y = 1\n    local z = 1\n    local aa = 1\n    local ab = 1\n\
    \    local ac = 1\n    local ad = 1\n    local ae = 1\n    local af = 1\n    local\
    \ ag = 1\n    local ah = 1\n    local ai = 1\n    local aj = 1\n    local ak =\
    \ 1\n    local al = 1\n    local am = 1\n    local an = 1\n    local ao = 1\n\
    \    local ap = 1\n    local aq = 1\n    local ar = 1\n    local as = 1\n    local\
    \ at = 1\n    local au = 1\n    local av = 1\n    local aw = 1\n    local ax =\
    \ 1\n    local ay = 1\n    local az = 1\n    local ba = 1\n    local bb = 1\n\
    \    local bc = 1\n    local bd = 1\n    local be = 1\n    local bf = 1\n    local\
    \ bg = 1\n    local bh = 1\n    local bi = 1\n    local bj = 1\n    local bk =\
    \ 1\n    local bl = 1\n    local bm = 1\n    local bn = 1\n    local bo = 1\n\
    \    local bp = 1\n    local bq = 1\n    local br = 1\n    local bs = 1\n    local\
    \ bt = 1\n    local bu = 1\n    local bv = 1\n    local bw = 1\n    local bx =\
    \ 1\n    local by = 1\n    local bz = 1\n    local ca", "  local reversed_string\
    \ = string:reverse()\n  local string_length = #string\n  local reversed_string_length\
    \ = #reversed_string\n  local longest_palindrome_length = 0\n  local longest_palindrome_index\
    \ = 0\n  local longest_palindrome_reversed_index = 0\n  local longest_palindrome_reversed_length\
    \ = 0\n  local longest_palindrome_reversed_index_end = 0\n  local longest_palindrome_reversed_length_end\
    \ = 0\n  local longest_palindrome_index_end = 0\n  local longest_palindrome_length_end\
    \ = 0\n  local longest_palindrome_reversed_index_start = 0\n  local longest_palindrome_reversed_length_start\
    \ = 0\n  local longest_palindrome_index_start = 0\n  local longest_palindrome_length_start\
    \ = 0\n  local longest_palindrome_reversed_index_middle = 0\n  local longest_palindrome_reversed_length_middle\
    \ = 0\n  local longest_palindrome_index_middle = 0\n  local longest_palindrome_length_middle\
    \ = 0\n  local longest_palindrome_reversed_index_middle_end = 0\n  local longest_palindrome_reversed_length_middle_end\
    \ = 0\n  local longest_palindrome_index_middle_end = 0\n  local longest_palindrome_length_middle_end\
    \ = 0\n  local longest_palindrome_reversed_index_middle_start = 0\n  local longest_palindrome_reversed_length_middle_start\
    \ = 0\n  local longest_palindrome_index_middle_start = 0\n  local longest_palindrome_length_middle_start\
    \ = 0\n  local longest_palindrome_reversed_index_middle_middle = 0\n  local longest_palindrome_reversed_length_middle_middle\
    \ = 0\n  local longest_palindrome_index_middle_middle = 0\n  local longest_palindrome_length_middle_middle\
    \ = 0\n  local longest_palindrome_reversed_", "    local string_length = #string\n\
    \    local palindrome_length = 0\n    local palindrome_end = 0\n    local palindrome_start\
    \ = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n  \
    \  local m = 0\n    local n = 0\n    local o = 0\n    local p = 0\n    local q\
    \ = 0\n    local r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n  \
    \  local v = 0\n    local w = 0\n    local x = 0\n    local y = 0\n    local z\
    \ = 0\n    local aa = 0\n    local ab = 0\n    local ac = 0\n    local ad = 0\n\
    \    local ae = 0\n    local af = 0\n    local ag = 0\n    local ah = 0\n    local\
    \ ai = 0\n    local aj = 0\n    local ak = 0\n    local al = 0\n    local am =\
    \ 0\n    local an = 0\n    local ao = 0\n    local ap = 0\n    local aq = 0\n\
    \    local ar = 0\n    local as = 0\n    local at = 0\n    local au = 0\n    local\
    \ av = 0\n    local aw = 0\n    local ax = 0\n    local ay = 0\n    local az =\
    \ 0\n    local ba = 0\n    local bb = 0\n    local bc = 0\n    local bd = 0\n\
    \    local be = 0\n    local bf = 0\n    local bg = 0\n    local bh = 0\n    local\
    \ bi = 0\n    local bj = 0\n    local bk = 0\n    local bl = 0\n    local bm =\
    \ 0\n    local bn = 0\n    local bo = 0\n    local bp = 0\n    local bq = 0\n\
    \    local br = 0\n    local bs = 0\n    local bt = 0\n    local bu = 0\n    local\
    \ bv = 0\n    local bw = 0\n    local bx = 0\n    local by = 0\n    local bz =\
    \ 0\n    local ca = 0\n    local cb = 0\n    local cc = 0\n    local cd = 0\n\
    \    local ce =", "  local string_length = #string\n  local palindrome_suffix_length\
    \ = 0\n  local palindrome_suffix_start = 0\n  local palindrome_suffix_end = 0\n\
    \  for i = 1, string_length do\n    local j = string_length - i + 1\n    if string:sub(1,\
    \ i) == string:sub(j, string_length) then\n      palindrome_suffix_length = i\n\
    \      palindrome_suffix_start = 1\n      palindrome_suffix_end = i\n    end\n\
    \  end\n  return string .. string:sub(palindrome_suffix_start, palindrome_suffix_end):reverse()\n\
    end", "    local reversed = string:reverse()\n    local prefix = string:sub(1,\
    \ #string - 1)\n    local suffix = string:sub(#string)\n    local postfix = reversed:sub(1,\
    \ #string - 1)\n    local longest_postfix = postfix:match(suffix .. \"(.*)\")\
    \ or \"\"\n    return string .. reversed:sub(#string - #longest_postfix)\nend",
  "    local reversed = string:reverse()\n    local reversed_prefix = reversed:sub(1,\
    \ #string - 1)\n    local reversed_suffix = reversed:sub(#string)\n    local suffix_length\
    \ = reversed_suffix:find(reversed_prefix)\n    if suffix_length then\n       \
    \ return string .. reversed_prefix:sub(suffix_length + 1)\n    else\n        return\
    \ string .. reversed_prefix\n    end\nend", "    local len = #string\n    local\
    \ palindrome_suffix = string\n    local palindrome_prefix = ''\n    local i =\
    \ 1\n    while i <= len do\n        if string.sub(palindrome_suffix, 1, i) ==\
    \ string.reverse(string.sub(palindrome_suffix, len - i + 1, len)) then\n     \
    \       palindrome_prefix = string.sub(palindrome_suffix, 1, i)\n        end\n\
    \        i = i + 1\n    end\n    return palindrome_suffix .. string.reverse(palindrome_prefix)\n\
    end", "    local reverse = string:reverse()\n    local prefix = string:sub(1,\
    \ #string - #string:match('.*' .. reverse))\n    return string .. prefix:reverse()\n\
    end", "    local reversed = string:reverse()\n    local length = #string\n   \
    \ local suffix_length = 0\n    for i = 1, length do\n        if string:sub(1,\
    \ i) == reversed:sub(length - i + 1, length) then\n            suffix_length =\
    \ i\n        end\n    end\n    return string .. reversed:sub(length - suffix_length\
    \ + 1, length)\nend", "    local prefix_length = 0\n    local suffix_length =\
    \ 0\n    local string_length = #string\n    local string_length_half = math.floor(string_length\
    \ / 2)\n    for i = 1, string_length_half do\n        if string:sub(i, i) == string:sub(string_length\
    \ - i + 1, string_length - i + 1) then\n            prefix_length = prefix_length\
    \ + 1\n        else\n            break\n        end\n    end\n    for i = 1, string_length_half\
    \ do\n        if string:sub(string_length - i + 1, string_length - i + 1) == string:sub(string_length\
    \ - i + 2, string_length - i + 2) then\n            suffix_length = suffix_length\
    \ + 1\n        else\n            break\n        end\n    end\n    if prefix_length\
    \ > suffix_length then\n        return string .. string:sub(1, string_length -\
    \ prefix_length):reverse()\n    else\n        return string .. string:sub(1, string_length\
    \ - suffix_length - 1):reverse()\n    end\nend", "  local string_length = #string\n\
    \  local longest_palindrome_length = 0\n  local longest_palindrome_position =\
    \ 0\n  local i = 1\n  local j = string_length\n  while i < j do\n    if string:sub(i,\
    \ j) == string:sub(j, i):reverse() then\n      longest_palindrome_length = j -\
    \ i + 1\n      longest_palindrome_position = i\n    end\n    i = i + 1\n    j\
    \ = j - 1\n  end\n  return string .. string:sub(1, string_length - longest_palindrome_length):reverse()\n\
    end", "  local suffix = string:sub(1, longest_palindrome_suffix(string))\n  local\
    \ prefix = string:sub(#string - #suffix + 1)\n  return string .. prefix:reverse()\n\
    end", "    local reversed = string:reverse()\n    local postfix = string:sub(1,\
    \ string:find(reversed))\n    local prefix = string:sub(postfix:len() + 1)\n \
    \   return string .. reversed:sub(prefix:len() + 1)\nend", "  local reversed =\
    \ string:reverse()\n  local postfix_length = 0\n  for i = 1, #string do\n    if\
    \ string:sub(1, i) == reversed:sub(#string - i + 1, #string) then\n      postfix_length\
    \ = i\n    end\n  end\n  return string .. reversed:sub(#string - postfix_length\
    \ + 2, #string)\nend", "    local reverse = string:reverse()\n    local prefix\
    \ = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n    local\
    \ suffix_reverse = suffix:reverse()\n    local prefix_reverse = prefix:reverse()\n\
    \    local palindrome = string .. suffix_reverse\n    local palindrome_length\
    \ = #palindrome\n    local palindrome_length_half = palindrome_length / 2\n  \
    \  local palindrome_length_half_floor = math.floor(palindrome_length_half)\n \
    \   local palindrome_length_half_ceil = math.ceil(palindrome_length_half)\n  \
    \  local palindrome_length_half_floor_plus_1 = palindrome_length_half_floor +\
    \ 1\n    local palindrome_length_half_ceil_plus_1 = palindrome_length_half_ceil\
    \ + 1\n    local palindrome_length_half_floor_minus_1 = palindrome_length_half_floor\
    \ - 1\n    local palindrome_length_half_ceil_minus_1 = palindrome_length_half_ceil\
    \ - 1\n    local palindrome_length_half_floor_plus_2 = palindrome_length_half_floor\
    \ + 2\n    local palindrome_length_half_ceil_plus_2 = palindrome_length_half_ceil\
    \ + 2\n    local palindrome_length_half_floor_minus_2 = palindrome_length_half_floor\
    \ - 2\n    local palindrome_length_half_ceil_minus_2 = palindrome_length_half_ceil\
    \ - 2\n    local palindrome_length_half_floor_plus_3 = palindrome_length_half_floor\
    \ + 3\n    local palindrome_length_half_ceil_plus_3 = palindrome_length_half_ceil\
    \ + 3\n    local palindrome_length_half_floor_minus_3 = palindrome_length_half_floor\
    \ - 3\n    local palindrome_length_half_ceil_minus_3 = palindrome_length_half_ceil\
    \ - 3\n    local palindrome_length_half", "    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "  local reversed = string:reverse()\n  local prefix\
    \ = reversed:sub(1, #string - longest_palindrome_suffix(string))\n  return string\
    \ .. prefix\nend", "  local reversed = string:reverse()\n  local prefix_length\
    \ = 0\n  local suffix_length = 0\n  local length = string:len()\n  local i = 1\n\
    \  while i <= length do\n    if string:sub(1, i) == reversed:sub(length - i +\
    \ 1, length) then\n      prefix_length = i\n    end\n    if string:sub(length\
    \ - i + 1, length) == reversed:sub(1, i) then\n      suffix_length = i\n    end\n\
    \    i = i + 1\n  end\n  return string .. reversed:sub(suffix_length + 1, length)\n\
    end", "  local suffix_length = longest_palindromic_suffix(string)\n  local prefix\
    \ = string:sub(1, string:len() - suffix_length)\n  return string .. prefix:reverse()\n\
    end", "  local reversed = string:reverse()\n  local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n  local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n  return string .. reversed:sub(#prefix + 1)\n\
    end", "    local reversed = string:reverse()\n    local prefix = string:sub(1,\
    \ #string - 1)\n    local suffix = string:sub(#string)\n    local reversed_prefix\
    \ = prefix:reverse()\n    local reversed_suffix = suffix:reverse()\n    local\
    \ reversed_prefix_suffix = reversed_prefix .. reversed_suffix\n    local reversed_prefix_suffix_prefix\
    \ = reversed_prefix_suffix .. prefix\n    local reversed_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix .. suffix\n    local reversed_prefix_suffix_prefix_suffix_prefix\
    \ = reversed_prefix_suffix_prefix_suffix .. prefix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix .. suffix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix .. prefix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix .. suffix\n    local\
    \ reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ .. prefix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix ..\
    \ suffix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ .. prefix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix\
    \ .. suffix\n    local reversed_prefix_suffix", "  local palindrome = string\n\
    \  local prefix = string:sub(1, #string - 1)\n  local suffix = string:sub(#string)\n\
    \  while not is_palindrome(palindrome) do\n    palindrome = prefix .. suffix\n\
    \    prefix = prefix:sub(1, #prefix - 1)\n    suffix = suffix .. string:sub(#suffix\
    \ + 1, #suffix + 1)\n  end\n  return palindrome\nend", "  local reverse = string:reverse()\n\
    \  local prefix = string:sub(1, #string - 1)\n  local suffix = string:sub(#string)\n\
    \  local prefix_reverse = prefix:reverse()\n  local suffix_reverse = suffix:reverse()\n\
    \  local suffix_palindrome = suffix_reverse .. suffix\n  local prefix_palindrome\
    \ = prefix .. prefix_reverse\n  local suffix_palindrome_reverse = suffix_palindrome:reverse()\n\
    \  local prefix_palindrome_reverse = prefix_palindrome:reverse()\n  local string_reverse\
    \ = string:reverse()\n  local string_reverse_reverse = string_reverse:reverse()\n\
    \  local string_reverse_reverse_reverse = string_reverse_reverse:reverse()\n \
    \ local string_reverse_reverse_reverse_reverse = string_reverse_reverse_reverse:reverse()\n\
    \  local string_reverse_reverse_reverse_reverse_reverse = string_reverse_reverse_reverse_reverse:reverse()\n\
    \  local string_reverse_reverse_reverse_reverse_reverse_reverse = string_reverse_reverse_reverse_reverse_reverse:reverse()\n\
    \  local string_reverse_reverse_reverse_reverse_reverse_reverse_reverse = string_reverse_reverse_reverse_reverse_reverse_reverse:reverse()\n\
    \  local string_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = string_reverse_reverse_reverse_reverse_reverse_reverse_reverse:reverse()\n\
    \  local string_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = string_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse:reverse()\n\
    \  local string_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = string_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse:reverse()\n\
    \  local string_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = string_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse:reverse()\n\
    \  local string_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = string_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse", " \
    \   local reversed = string:reverse()\n    local prefix = string:sub(1, #string\
    \ - 1)\n    local postfix = string:sub(#string)\n    local longest_palindrome\
    \ = postfix .. prefix:gsub(\"(.*)\" .. postfix, \"%1\")\n    return longest_palindrome\
    \ .. reversed\nend", "    local reversed = string:reverse()\n    local prefix\
    \ = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n    local\
    \ reversed_prefix = reversed:sub(1, #string - 1)\n    local reversed_suffix =\
    \ reversed:sub(#string)\n    local longest_palindrome = reversed_suffix .. suffix\n\
    \    local longest_palindrome_length = #longest_palindrome\n    local prefix_length\
    \ = #prefix\n    local suffix_length = #suffix\n    local reversed_prefix_length\
    \ = #reversed_prefix\n    local reversed_suffix_length = #reversed_suffix\n  \
    \  local i = 1\n    while i <= prefix_length and i <= reversed_suffix_length do\n\
    \        if prefix:sub(prefix_length - i + 1, prefix_length - i + 1) ~= reversed_suffix:sub(i,\
    \ i) then\n            break\n        end\n        i = i + 1\n    end\n    local\
    \ new_longest_palindrome = reversed_suffix:sub(1, reversed_suffix_length - i +\
    \ 1) .. suffix\n    local new_longest_palindrome_length = #new_longest_palindrome\n\
    \    if new_longest_palindrome_length > longest_palindrome_length then\n     \
    \   longest_palindrome = new_longest_palindrome\n        longest_palindrome_length\
    \ = new_longest_palindrome_length\n    end\n    i = 1\n    while i <= suffix_length\
    \ and i <= reversed_prefix_length do\n        if suffix:sub(i, i) ~= reversed_prefix:sub(reversed_prefix_length\
    \ - i + 1, reversed_prefix_length - i + 1) then\n            break\n        end\n\
    \        i = i + 1\n    end\n    new_longest_palindrome = suffix .. reversed_prefix:sub(i,\
    \ reversed_prefix_length)\n    new_longest_palindrome_length = #new_longest_palindrome\n\
    \    if new_longest_palindrome_length > longest_palindrome_length then\n     \
    \   longest_palindrome = new_longest", "    local reversed = string:reverse()\n\
    \    local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local prefix_reversed = reversed:sub(1, #reversed - 1)\n    local suffix_reversed\
    \ = reversed:sub(#reversed)\n    local longest_palindrome = suffix_reversed:sub(1,\
    \ #suffix_reversed - #prefix_reversed)\n    return string .. longest_palindrome\n\
    end", "    local length = #string\n    local palindrome_suffix_length = 0\n  \
    \  local palindrome_suffix_end = 0\n    local palindrome_suffix_start = 0\n  \
    \  local palindrome_suffix_end_index = 0\n    local palindrome_suffix_start_index\
    \ = 0\n    local palindrome_suffix_length_index = 0\n    local palindrome_suffix_end_index_index\
    \ = 0\n    local palindrome_suffix_start_index_index = 0\n    local palindrome_suffix_length_index_index\
    \ = 0\n    local palindrome_suffix_end_index_index_index = 0\n    local palindrome_suffix_start_index_index_index\
    \ = 0\n    local palindrome_suffix_length_index_index_index = 0\n    local palindrome_suffix_end_index_index_index_index\
    \ = 0\n    local palindrome_suffix_start_index_index_index_index = 0\n    local\
    \ palindrome_suffix_length_index_index_index_index = 0\n    local palindrome_suffix_end_index_index_index_index_index\
    \ = 0\n    local palindrome_suffix_start_index_index_index_index_index = 0\n \
    \   local palindrome_suffix_length_index_index_index_index_index = 0\n    local\
    \ palindrome_suffix_end_index_index_index_index_index_index = 0\n    local palindrome_suffix_start_index_index_index_index_index_index\
    \ = 0\n    local palindrome_suffix_length_index_index_index_index_index_index\
    \ = 0\n    local palindrome_suffix_end_index_index_index_index_index_index_index\
    \ = 0\n    local palindrome_suffix_start_index_index_index_index_index_index_index\
    \ = 0\n    local palindrome_suffix_length_index_index_index_index_index_index_index\
    \ = 0\n    local palindrome_suffix_end_index_index_index_index_index_index_index",
  "    local string_length = string:len()\n    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local palindrome_suffix_length = palindrome_suffix:len()\n    local palindrome_prefix\
    \ = string:sub(1, string_length - palindrome_suffix_length)\n    local palindrome_prefix_length\
    \ = palindrome_prefix:len()\n    local palindrome_prefix_reversed = palindrome_prefix:reverse()\n\
    \    return palindrome_prefix .. palindrome_suffix .. palindrome_prefix_reversed\n\
    end", "    local reverse = string:reverse()\n    local suffix = string:sub(1,\
    \ #string - 1)\n    local prefix = string:sub(2, #string)\n    local longest_suffix\
    \ = longest_common_prefix(suffix, reverse)\n    local prefix_to_append = prefix:sub(#longest_suffix\
    \ + 1, #prefix)\n    return string .. prefix_to_append:reverse()\nend", "    local\
    \ reversed = string:reverse()\n    local reversed_prefix = reversed:sub(1, #string\
    \ - 1)\n    local reversed_suffix = reversed:sub(#string)\n    local prefix =\
    \ string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n    local\
    \ longest_palindrome_suffix = suffix\n    local longest_palindrome_suffix_length\
    \ = 0\n    for i = 1, #suffix do\n        local substring = suffix:sub(1, i)\n\
    \        if substring == reversed_prefix:sub(1, i) then\n            longest_palindrome_suffix\
    \ = substring\n            longest_palindrome_suffix_length = i\n        end\n\
    \    end\n    local prefix_to_append = reversed_prefix:sub(longest_palindrome_suffix_length\
    \ + 1)\n    return string .. prefix_to_append\nend", "    local string_length\
    \ = #string\n    local palindrome_length = 0\n    local palindrome_start = 0\n\
    \    local palindrome_end = 0\n    local i = 1\n    while i <= string_length do\n\
    \        local j = 1\n        while i - j >= 1 and i + j <= string_length and\
    \ string:sub(i - j, i - j) == string:sub(i + j, i + j) do\n            j = j +\
    \ 1\n        end\n        if j - 1 > palindrome_length then\n            palindrome_length\
    \ = j - 1\n            palindrome_start = i - j + 1\n            palindrome_end\
    \ = i + j - 1\n        end\n        i = i + 1\n    end\n    local prefix = string:sub(1,\
    \ palindrome_start - 1)\n    local suffix = string:sub(palindrome_end + 1, string_length)\n\
    \    return prefix .. string:reverse() .. suffix\nend", "    local reversed =\
    \ string:reverse()\n    local prefix = string:sub(1, #string - 1)\n    local suffix\
    \ = string:sub(#string)\n    local longest_palindrome = find_longest_palindrome(prefix)\n\
    \    return string .. reversed:sub(#longest_palindrome + 1)\nend", "    local\
    \ reversed = string:reverse()\n    local longest_palindrome = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. reversed:sub(#prefix + 1)\nend", "    local string_length = #string\n   \
    \ local palindrome_length = 0\n    local palindrome_length_at = {}\n    for i\
    \ = 1, string_length do\n        palindrome_length_at[i] = 0\n    end\n    local\
    \ i = 1\n    while i <= string_length do\n        if string_length - i < palindrome_length\
    \ / 2 then\n            break\n        end\n        local left = i\n        local\
    \ right = i\n        while right < string_length and string:sub(right + 1, right\
    \ + 1) == string:sub(left, left) do\n            right = right + 1\n        end\n\
    \        i = right + 1\n        while right < string_length and left > 1 and string:sub(right\
    \ + 1, right + 1) == string:sub(left - 1, left - 1) do\n            right = right\
    \ + 1\n            left = left - 1\n        end\n        local new_palindrome_length\
    \ = right - left + 1\n        if new_palindrome_length > palindrome_length then\n\
    \            palindrome_length = new_palindrome_length\n            palindrome_length_at[left]\
    \ = palindrome_length\n        end\n    end\n    local palindrome_start = 1\n\
    \    for i = 2, string_length do\n        if palindrome_length_at[i] > palindrome_length_at[palindrome_start]\
    \ then\n            palindrome_start = i\n        end\n    end\n    local palindrome_end\
    \ = palindrome_start + palindrome_length_at[palindrome_start] - 1\n    local prefix\
    \ = string:sub(1, palindrome_start - 1)\n    local prefix_reversed = prefix:reverse()\n\
    \    return prefix_reversed .. string:sub(palindrome_start, palindrome_end)\n\
    end", "  local reverse = string:reverse()\n  local suffix = string:sub(1, #string\
    \ - 1)\n  local prefix = string:sub(#string)\n  local suffix_reverse = suffix:reverse()\n\
    \  local prefix_reverse = prefix:reverse()\n  local suffix_palindrome = suffix_reverse:sub(1,\
    \ #suffix)\n  local prefix_palindrome = prefix_reverse:sub(1, #prefix)\n  local\
    \ suffix_palindrome_length = #suffix_palindrome\n  local prefix_palindrome_length\
    \ = #prefix_palindrome\n  local suffix_palindrome_length_max = 0\n  local prefix_palindrome_length_max\
    \ = 0\n  local suffix_palindrome_length_max_index = 0\n  local prefix_palindrome_length_max_index\
    \ = 0\n  local suffix_palindrome_length_max_index_max = 0\n  local prefix_palindrome_length_max_index_max\
    \ = 0\n  local suffix_palindrome_length_max_index_max_max = 0\n  local prefix_palindrome_length_max_index_max_max\
    \ = 0\n  local suffix_palindrome_length_max_index_max_max_max = 0\n  local prefix_palindrome_length_max_index_max_max_max\
    \ = 0\n  local suffix_palindrome_length_max_index_max_max_max_max = 0\n  local\
    \ prefix_palindrome_length_max_index_max_max_max_max = 0\n  local suffix_palindrome_length_max_index_max_max_max_max_max\
    \ = 0\n  local prefix_palindrome_length_max_index_max_max_max_max_max = 0\n  local\
    \ suffix_palindrome_length_max_index_max_max_max_max_max_max = 0\n  local prefix_palindrome_length_max_index_max_max_max_max_max_max\
    \ = 0\n  local suffix_palindrome_length_max_index_max_max_max_max_max_max_max\
    \ = 0\n  local prefix_palindrome_length_", "    local longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string.sub(string,\
    \ 1, string.len(string) - longest_palindrome_suffix)\n    return string .. string.reverse(prefix)\n\
    end", "  local reverse = string:reverse()\n  local prefix = string:sub(1, #string\
    \ - 1)\n  local suffix = string:sub(#string)\n  local reversed_prefix = prefix:reverse()\n\
    \  local reversed_suffix = suffix:reverse()\n  local reversed_prefix_suffix =\
    \ reversed_prefix .. reversed_suffix\n  local reversed_suffix_prefix = reversed_suffix\
    \ .. reversed_prefix\n  local reversed_prefix_suffix_suffix = reversed_prefix_suffix\
    \ .. suffix\n  local reversed_suffix_prefix_suffix = reversed_suffix_prefix ..\
    \ suffix\n  local reversed_prefix_suffix_prefix = reversed_prefix_suffix .. prefix\n\
    \  local reversed_suffix_prefix_prefix = reversed_suffix_prefix .. prefix\n  local\
    \ reversed_prefix_suffix_prefix_suffix = reversed_prefix_suffix_prefix .. suffix\n\
    \  local reversed_suffix_prefix_prefix_suffix = reversed_suffix_prefix_prefix\
    \ .. suffix\n  local reversed_prefix_suffix_suffix_prefix = reversed_prefix_suffix_suffix\
    \ .. prefix\n  local reversed_suffix_prefix_suffix_prefix = reversed_suffix_prefix_suffix\
    \ .. prefix\n  local reversed_prefix_suffix_prefix_suffix_prefix = reversed_prefix_suffix_prefix_suffix\
    \ .. prefix\n  local reversed_suffix_prefix_prefix_suffix_prefix = reversed_suffix_prefix_prefix_suffix\
    \ .. prefix\n  local reversed_prefix_suffix_suffix_prefix_suffix = reversed_prefix_suffix_suffix_prefix\
    \ .. suffix\n  local reversed_suffix_prefix_suffix_prefix_suffix = reversed_suffix_prefix_suffix_prefix\
    \ .. suffix\n  local reversed_prefix_suffix_prefix_suffix_prefix_suffix = reversed_prefix_suffix_prefix_suffix_prefix\
    \ .. suffix\n  local reversed_suffix_prefix_prefix_suffix_prefix_suffix = reversed_suffix_prefix_prefix_suffix_prefix\
    \ .. suffix\n  if string == reverse then\n    return string\n  elseif reversed_prefix_suffix\
    \ == reverse then\n    return reversed_prefix_suffix\n  elseif reversed_suff",
  "    local reversed = string:reverse()\n    local length = string:len()\n    local\
    \ i = 1\n    while i <= length do\n        if string:sub(1, i) == reversed:sub(length\
    \ - i + 1, length) then\n            return string .. reversed:sub(1, length -\
    \ i)\n        end\n        i = i + 1\n    end\nend", "  local reversed = string:reverse()\n\
    \  local suffix = string:sub(1, #string - 1)\n  local prefix = string:sub(#string)\n\
    \  local longest_palindrome = find_longest_palindrome(suffix)\n  return string\
    \ .. reversed:sub(#longest_palindrome + 1)\nend", "    local length = #string\n\
    \    local reverse = string:reverse()\n    local suffix = string:sub(1, length)\n\
    \    local prefix = string:sub(length + 1, 2 * length)\n    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(suffix, reverse)\n    return prefix .. reverse:sub(1,\
    \ length - longest_palindrome_suffix)\nend", "    local reversed = string:reverse()\n\
    \    local postfix = reversed:sub(1, string:len() - 1)\n    local prefix = string:sub(1,\
    \ string:len() - postfix:len() - 1)\n    return string .. prefix:reverse()\nend",
  "  local reversed = string:reverse()\n  local length = string:len()\n  local suffix\
    \ = string:sub(1, length - 1)\n  local prefix = string:sub(length, length)\n \
    \ local palindrome = string .. reversed:sub(prefix:len() + 1)\n  return palindrome\n\
    end", "    local reverse = string:reverse()\n    local suffix = string:sub(1,\
    \ #string - 1)\n    local prefix = string:sub(2, #string)\n    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(suffix)\n    local prefix_to_append = reverse:sub(1,\
    \ #string - #longest_palindrome_suffix)\n    return string .. prefix_to_append\n\
    end", "    local reversed = string:reverse()\n    local longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. reversed:sub(#prefix + 1)\n\
    end", "    local reversed = string:reverse()\n    local prefix = string:sub(1,\
    \ #string - 1)\n    local suffix = string:sub(#string)\n    local prefix_reversed\
    \ = reversed:sub(#string)\n    local suffix_reversed = reversed:sub(1, #string\
    \ - 1)\n    local palindrome_suffix = longest_common_substring(suffix, suffix_reversed)\n\
    \    return prefix .. palindrome_suffix .. prefix_reversed\nend", "    local reversed\
    \ = string:reverse()\n    local prefix = string:sub(1, #string - 1)\n    local\
    \ suffix = string:sub(#string)\n    local reversed_prefix = prefix:reverse()\n\
    \    local reversed_suffix = suffix:reverse()\n    local reversed_prefix_suffix\
    \ = reversed_prefix .. reversed_suffix\n    local reversed_prefix_suffix_prefix\
    \ = reversed_prefix_suffix .. prefix\n    local reversed_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix .. suffix\n    local reversed_prefix_suffix_prefix_suffix_prefix\
    \ = reversed_prefix_suffix_prefix_suffix .. prefix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix .. suffix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix .. prefix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix .. suffix\n    local\
    \ reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ .. prefix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix ..\
    \ suffix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ .. prefix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix\
    \ .. suffix\n    local reversed_prefix_suffix", "  local string_length = #string\n\
    \  local string_reversed = string:reverse()\n  for i = string_length, 1, -1 do\n\
    \    if string:sub(1, i) == string_reversed:sub(string_length - i + 1, string_length)\
    \ then\n      return string .. string_reversed:sub(1, string_length - i)\n   \
    \ end\n  end\n  return string .. string_reversed\nend", "    local reversed =\
    \ string:reverse()\n    local prefix = string:sub(1, #string - 1)\n    local suffix\
    \ = string:sub(#string - 1)\n    local prefix_reversed = reversed:sub(1, #reversed\
    \ - 1)\n    local suffix_reversed = reversed:sub(#reversed - 1)\n    local prefix_reversed_suffix\
    \ = prefix_reversed .. suffix\n    local suffix_reversed_prefix = suffix_reversed\
    \ .. prefix\n    local prefix_reversed_suffix_reversed = prefix_reversed_suffix:reverse()\n\
    \    local suffix_reversed_prefix_reversed = suffix_reversed_prefix:reverse()\n\
    \    local prefix_reversed_suffix_reversed_suffix = prefix_reversed_suffix_reversed\
    \ .. suffix\n    local suffix_reversed_prefix_reversed_prefix = suffix_reversed_prefix_reversed\
    \ .. prefix\n    if prefix_reversed_suffix_reversed_suffix == string then\n  \
    \      return prefix_reversed_suffix_reversed_suffix\n    elseif suffix_reversed_prefix_reversed_prefix\
    \ == string then\n        return suffix_reversed_prefix_reversed_prefix\n    elseif\
    \ prefix_reversed_suffix_reversed == string then\n        return prefix_reversed_suffix_reversed\n\
    \    elseif suffix_reversed_prefix_reversed == string then\n        return suffix_reversed_prefix_reversed\n\
    \    elseif prefix_reversed_suffix == string then\n        return prefix_reversed_suffix\n\
    \    elseif suffix_reversed_prefix == string then\n        return suffix_reversed_prefix\n\
    \    elseif prefix_reversed == string then\n        return prefix_reversed\n \
    \   elseif suffix_reversed == string then\n        return suffix_reversed\n  \
    \  else\n        return string\n    end\nend", "    local reversed = string:reverse()\n\
    \    local suffix = string:sub(1, string:len() - 1)\n    local prefix = string:sub(2,\
    \ string:len())\n    local longest_palindrome = find_longest_palindrome(suffix)\n\
    \    return string .. reversed:sub(string:len() - longest_palindrome:len() + 1,\
    \ string:len())\nend", "    local string_length = string:len()\n    local longest_palindrome_length\
    \ = 0\n    local longest_palindrome_start = 0\n    local longest_palindrome_end\
    \ = 0\n    local longest_palindrome_center = 0\n    local longest_palindrome_center_is_odd\
    \ = false\n    local current_palindrome_length = 0\n    local current_palindrome_start\
    \ = 0\n    local current_palindrome_end = 0\n    local current_palindrome_center\
    \ = 0\n    local current_palindrome_center_is_odd = false\n    local i = 0\n \
    \   local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local\
    \ n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n\
    \    local s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n    local\
    \ w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    local aa = 0\n\
    \    local ab = 0\n    local ac = 0\n    local ad = 0\n    local ae = 0\n    local\
    \ af = 0\n    local ag = 0\n    local ah = 0\n    local ai = 0\n    local aj =\
    \ 0\n    local ak = 0\n    local al = 0\n    local am = 0\n    local an = 0\n\
    \    local ao = 0\n    local ap = 0\n    local aq = 0\n    local ar = 0\n    local\
    \ as = 0\n    local at = 0\n    local au = 0\n    local av = 0\n    local aw =\
    \ 0\n    local ax = 0\n    local ay = 0\n    local az = 0\n    local ba = 0\n\
    \    local bb = 0\n    local bc = 0\n    local bd = 0\n    local be = 0\n    local\
    \ bf = 0\n    local bg = 0\n    local bh = 0\n    local bi = 0\n    local bj =\
    \ 0\n    local bk = 0\n    local bl = 0\n    local bm = 0\n    local bn = 0\n\
    \    local bo = 0\n    local b", "  local reversed = string:reverse()\n  local\
    \ postfix = string:match(\".*\" .. reversed)\n  local prefix = string:sub(1, #string\
    \ - #postfix)\n  return string .. reversed:sub(#prefix + 1)\nend", "  local reversed\
    \ = string:reverse()\n  local postfix = string:sub(1, #string - 1)\n  local prefix\
    \ = string:sub(2, #string)\n  local longest_palindrome = postfix:match(prefix\
    \ .. \"$\")\n  return string .. reversed:sub(#longest_palindrome + 1, #string)\n\
    end", "  local reversed = string:reverse()\n  local length = #string\n  local\
    \ prefix_length = 0\n  for i = 1, length do\n    if string:sub(1, i) == reversed:sub(length\
    \ - i + 1, length) then\n      prefix_length = i\n    end\n  end\n  return string\
    \ .. reversed:sub(length - prefix_length + 1, length)\nend", "    local reverse\
    \ = string:reverse()\n    local prefix = string:sub(1, #string - 1)\n    local\
    \ suffix = string:sub(#string)\n    local reverse_prefix = prefix:reverse()\n\
    \    local reverse_suffix = suffix:reverse()\n    local palindrome = string ..\
    \ reverse_prefix\n    if palindrome == reverse_suffix .. string then\n       \
    \ return palindrome\n    else\n        return string .. reverse_prefix\n    end\n\
    end", "    local reverse = string:reverse()\n    local length = string:len()\n\
    \    local i = 1\n    while i <= length do\n        local suffix = string:sub(i)\n\
    \        local prefix = string:sub(1, i - 1)\n        if suffix == reverse:sub(1,\
    \ length - i + 1) then\n            return string .. reverse:sub(length - i +\
    \ 2)\n        end\n        i = i + 1\n    end\n    return string .. reverse:sub(2)\n\
    end", "    local reverse = string:reverse()\n    local suffix = string:sub(1,\
    \ #string - 1)\n    local prefix = string:sub(#string, #string)\n    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(suffix)\n    local palindrome = string .. reverse:sub(#longest_palindrome_suffix\
    \ + 1)\n    return palindrome\nend", "    local length = #string\n    local prefix\
    \ = string:sub(1, length)\n    local suffix = string:sub(1, length)\n    local\
    \ max_length = 0\n    local max_index = 0\n    for i = 1, length do\n        local\
    \ prefix_length = length - i + 1\n        local suffix_length = i\n        local\
    \ prefix_substring = prefix:sub(prefix_length, prefix_length)\n        local suffix_substring\
    \ = suffix:sub(1, 1)\n        if prefix_substring == suffix_substring then\n \
    \           local prefix_substring = prefix:sub(prefix_length - suffix_length\
    \ + 1, prefix_length)\n            local suffix_substring = suffix:sub(1, suffix_length)\n\
    \            if prefix_substring == suffix_substring then\n                max_length\
    \ = suffix_length\n                max_index = i\n            end\n        end\n\
    \    end\n    local prefix_substring = prefix:sub(1, length - max_index)\n   \
    \ local suffix_substring = suffix:sub(max_index + 1, length)\n    return prefix_substring\
    \ .. suffix_substring\nend", "    local rev = string:reverse()\n    local suffix\
    \ = string:sub(1, #string - 1)\n    local prefix = string:sub(#string)\n    local\
    \ longest_palindrome = \"\"\n    local longest_palindrome_length = 0\n    for\
    \ i = 1, #suffix do\n        local candidate = suffix:sub(i)\n        if candidate\
    \ == rev:sub(1, #candidate) then\n            if #candidate > longest_palindrome_length\
    \ then\n                longest_palindrome = candidate\n                longest_palindrome_length\
    \ = #candidate\n            end\n        end\n    end\n    return string .. rev:sub(#longest_palindrome\
    \ + 1)\nend", "  local reversed = string:reverse()\n  local length = string:len()\n\
    \  local prefix_length = 0\n  local suffix_length = 0\n  for i = 1, length do\n\
    \    if string:sub(1, i) == reversed:sub(length - i + 1, length) then\n      prefix_length\
    \ = i\n    end\n    if string:sub(length - i + 1, length) == reversed:sub(1, i)\
    \ then\n      suffix_length = i\n    end\n  end\n  return string .. reversed:sub(suffix_length\
    \ + 1, length)\nend", "    local reversed = string:reverse()\n    local longest_palindrome_suffix\
    \ = string:sub(1, string:find(reversed))\n    return string .. reversed:sub(#longest_palindrome_suffix\
    \ + 1)\nend", "  local reversed = string:reverse()\n  local suffix = string:sub(1,\
    \ #string - 1)\n  local prefix = string:sub(#string)\n  local longest_palindrome\
    \ = longest_palindrome_suffix(suffix)\n  return string .. reversed:sub(#longest_palindrome\
    \ + 1)\nend", "    local reversed = string:reverse()\n    local prefix = string:sub(1,\
    \ #string - 1)\n    local suffix = string:sub(#string)\n    local prefix_reversed\
    \ = reversed:sub(1, #reversed - 1)\n    local suffix_reversed = reversed:sub(#reversed)\n\
    \    local palindrome = string .. prefix_reversed\n    if palindrome == palindrome:reverse()\
    \ then\n        return palindrome\n    end\n    palindrome = string .. suffix_reversed\n\
    \    if palindrome == palindrome:reverse() then\n        return palindrome\n \
    \   end\n    return string .. reversed\nend", "    local reversed = string:reverse()\n\
    \    local longest_palindrome = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #longest_palindrome)\n    return string .. reversed:sub(#prefix\
    \ + 1)\nend", "    local reverse = string:reverse()\n    local length = #string\n\
    \    local i = 1\n    while i <= length do\n        if string:sub(1, i) == reverse:sub(length\
    \ - i + 1, length) then\n            i = i + 1\n        else\n            break\n\
    \        end\n    end\n    return string .. reverse:sub(length - i + 2, length)\n\
    end", "    local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local palindrome = string\n    while not is_palindrome(palindrome) do\n \
    \       palindrome = prefix .. suffix\n        prefix = prefix:sub(1, #prefix\
    \ - 1)\n        suffix = suffix .. string:sub(#suffix + 1, #suffix + 1)\n    end\n\
    \    return palindrome\nend", "    local suffix = longest_palindromic_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local s = string\n    local s_rev = string.reverse(s)\n    local s_len\
    \ = string.len(s)\n    local s_rev_len = string.len(s_rev)\n    local max_len\
    \ = s_len + s_rev_len\n    local lps = {}\n    local i = 1\n    local j = 1\n\
    \    while i <= max_len do\n        if s:sub(i, i) == s_rev:sub(j, j) then\n \
    \           lps[i] = j\n            i = i + 1\n            j = j + 1\n       \
    \ else\n            if j == 1 then\n                lps[i] = 0\n             \
    \   i = i + 1\n            else\n                j = lps[j - 1] + 1\n        \
    \    end\n        end\n    end\n    return s .. s_rev:sub(lps[max_len] + 1)\n\
    end", "    local reversed = string:reverse()\n    local postfix = string:sub(1,\
    \ string:len() - 1)\n    local prefix = string:sub(2, string:len())\n    local\
    \ longest_postfix = postfix:match(string.format(\"(%s+)$\", reversed))\n    local\
    \ prefix_to_append = prefix:sub(1, prefix:len() - longest_postfix:len())\n   \
    \ return string .. prefix_to_append:reverse()\nend", "    local reversed = string:reverse()\n\
    \    local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local reversed_prefix = prefix:reverse()\n    local reversed_suffix = suffix:reverse()\n\
    \    local palindrome = reversed_prefix .. suffix .. reversed_suffix\n    return\
    \ palindrome\nend", "  local reversed = string:reverse()\n  local longest_palindrome\
    \ = longest_palindrome_suffix(string)\n  local prefix = string:sub(1, #string\
    \ - #longest_palindrome)\n  return string .. reversed:sub(#prefix + 1)\nend",
  "  local reversed = string:reverse()\n  local longest_palindrome_suffix = string:match(\"\
    (.*)\" .. reversed .. \"$\")\n  local prefix = string:sub(1, -1 - #longest_palindrome_suffix)\n\
    \  return string .. reversed:sub(#prefix + 1)\nend", "    local postfix_length\
    \ = longest_palindromic_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - postfix_length)\n    return string .. prefix:reverse()\nend", "    local reversed\
    \ = string:reverse()\n    local prefix = string:sub(1, #string - 1)\n    local\
    \ suffix = string:sub(#string)\n    local reversed_prefix = prefix:reverse()\n\
    \    local reversed_suffix = suffix:reverse()\n    local reversed_prefix_suffix\
    \ = reversed_prefix .. reversed_suffix\n    local reversed_prefix_suffix_reversed\
    \ = reversed_prefix_suffix:reverse()\n    local reversed_prefix_suffix_reversed_prefix\
    \ = reversed_prefix_suffix_reversed .. prefix\n    return reversed_prefix_suffix_reversed_prefix\n\
    end", "    local reversed = string:reverse()\n    local longest_palindrome_suffix\
    \ = string:sub(1, longest_palindrome_suffix_length(string))\n    local prefix\
    \ = string:sub(longest_palindrome_suffix:len() + 1)\n    return string .. reversed:sub(prefix:len()\
    \ + 1)\nend", "    local reverse = string:reverse()\n    local suffix = string:sub(1,\
    \ #string - 1)\n    local prefix = string:sub(#string)\n    while not suffix:find(reverse,\
    \ 1, true) do\n        suffix = suffix:sub(1, #suffix - 1)\n        prefix = prefix\
    \ .. string:sub(#string - #suffix - 1, #string - #suffix)\n    end\n    return\
    \ prefix .. string\nend", "    local reversed = string:reverse()\n    local prefix\
    \ = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n    local\
    \ prefix_reversed = reversed:sub(1, #string - 1)\n    local suffix_reversed =\
    \ reversed:sub(#string)\n    local longest_palindrome = \"\"\n    local longest_palindrome_length\
    \ = 0\n    for i = 1, #string do\n        local prefix_part = prefix:sub(1, i)\n\
    \        local suffix_part = suffix:sub(1, i)\n        if prefix_part == suffix_part\
    \ then\n            local palindrome = prefix_part .. suffix_part:reverse()\n\
    \            if #palindrome > longest_palindrome_length then\n               \
    \ longest_palindrome = palindrome\n                longest_palindrome_length =\
    \ #palindrome\n            end\n        end\n    end\n    return longest_palindrome\
    \ .. prefix_reversed\nend", "  local reversed = string:reverse()\n  local prefix\
    \ = string:sub(1, #string - 1)\n  local suffix = string:sub(#string)\n  local\
    \ longest_palindrome = find_longest_palindrome(prefix)\n  return reversed .. suffix\
    \ .. longest_palindrome\nend", "    local reversed = string:reverse()\n    local\
    \ length = #string\n    local suffix_length = 0\n    for i = 1, length do\n  \
    \      if string:sub(1, i) == reversed:sub(length - i + 1, length) then\n    \
    \        suffix_length = i\n        end\n    end\n    return string .. reversed:sub(length\
    \ - suffix_length + 1, length)\nend", "  local reversed = string:reverse()\n \
    \ local longest_palindrome_suffix = longest_palindrome_suffix(string)\n  local\
    \ prefix = string:sub(1, #string - #longest_palindrome_suffix)\n  return string\
    \ .. reversed:sub(#prefix + 1)\nend", "    local reverse = string:reverse()\n\
    \    local length = string:len()\n    local suffix_length = 0\n    for i = 1,\
    \ length do\n        if string:sub(1, i) == reverse:sub(length - i + 1, length)\
    \ then\n            suffix_length = i\n        end\n    end\n    return string\
    \ .. reverse:sub(length - suffix_length + 1, length)\nend", "    local length\
    \ = #string\n    local reverse = string:reverse()\n    local suffix = string:sub(1,\
    \ length - 1)\n    local prefix = string:sub(length, length)\n    local palindrome\
    \ = string\n    while not suffix:find(prefix) do\n        palindrome = prefix\
    \ .. palindrome\n        suffix = suffix:sub(1, #suffix - 1)\n        prefix =\
    \ prefix .. string:sub(length - #prefix, length - #prefix)\n    end\n    return\
    \ palindrome\nend", "    local string_length = #string\n    local palindrome_length\
    \ = 0\n    local palindrome_end = 0\n    local palindrome_start = 0\n    local\
    \ palindrome_end_index = 0\n    local palindrome_start_index = 0\n    local i\
    \ = 1\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n  \
    \  local n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local r\
    \ = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n  \
    \  local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    local aa\
    \ = 0\n    local ab = 0\n    local ac = 0\n    local ad = 0\n    local ae = 0\n\
    \    local af = 0\n    local ag = 0\n    local ah = 0\n    local ai = 0\n    local\
    \ aj = 0\n    local ak = 0\n    local al = 0\n    local am = 0\n    local an =\
    \ 0\n    local ao = 0\n    local ap = 0\n    local aq = 0\n    local ar = 0\n\
    \    local as = 0\n    local at = 0\n    local au = 0\n    local av = 0\n    local\
    \ aw = 0\n    local ax = 0\n    local ay = 0\n    local az = 0\n    local ba =\
    \ 0\n    local bb = 0\n    local bc = 0\n    local bd = 0\n    local be = 0\n\
    \    local bf = 0\n    local bg = 0\n    local bh = 0\n    local bi = 0\n    local\
    \ bj = 0\n    local bk = 0\n    local bl = 0\n    local bm = 0\n    local bn =\
    \ 0\n    local bo = 0\n    local bp = 0\n    local bq = 0\n    local br = 0\n\
    \    local bs = 0\n    local bt = 0\n    local bu = 0\n    local bv = 0\n    local\
    \ bw = 0\n    local bx = 0\n    local by = 0\n    local bz = 0\n    local ca =\
    \ 0", "    local reversed = string:reverse()\n    local prefix = string:sub(1,\
    \ #string - 1)\n    local suffix = string:sub(#string)\n    local prefix_reversed\
    \ = reversed:sub(1, #string - 1)\n    local suffix_reversed = reversed:sub(#string)\n\
    \    local palindrome = prefix .. suffix_reversed\n    local palindrome_reversed\
    \ = suffix .. prefix_reversed\n    if palindrome == palindrome_reversed then\n\
    \        return palindrome\n    else\n        return make_palindrome(palindrome)\n\
    \    end\nend", "    local reverse = string:reverse()\n    local length = string:len()\n\
    \    local prefix = string:sub(1, length - 1)\n    local suffix = string:sub(length,\
    \ length)\n    local prefix_reverse = prefix:reverse()\n    local suffix_reverse\
    \ = suffix:reverse()\n    local palindrome = string .. prefix_reverse\n    local\
    \ palindrome_length = palindrome:len()\n    local palindrome_length_half = math.floor(palindrome_length\
    \ / 2)\n    local palindrome_prefix = palindrome:sub(1, palindrome_length_half)\n\
    \    local palindrome_suffix = palindrome:sub(palindrome_length_half + 1, palindrome_length)\n\
    \    local palindrome_suffix_reverse = palindrome_suffix:reverse()\n    if palindrome_prefix\
    \ == palindrome_suffix_reverse then\n        return palindrome\n    end\n    return\
    \ make_palindrome(string .. suffix_reverse)\nend", "  local suffix_length = longest_palindromic_suffix(string)\n\
    \  local prefix = string:sub(1, #string - suffix_length)\n  return string .. prefix:reverse()\n\
    end", "    local reversed = string:reverse()\n    local prefix = string:sub(1,\
    \ #string - 1)\n    local suffix = string:sub(#string)\n    local postfix = reversed:sub(1,\
    \ #string - 1)\n    local longest_palindrome = find_longest_palindrome(postfix)\n\
    \    return string .. reversed:sub(#longest_palindrome + 1)\nend", "    local\
    \ reversed = string:reverse()\n    local prefix = string:sub(1, #string - 1)\n\
    \    local suffix = string:sub(#string)\n    local reversed_prefix = prefix:reverse()\n\
    \    local reversed_suffix = suffix:reverse()\n    local reversed_prefix_suffix\
    \ = reversed_prefix .. reversed_suffix\n    local reversed_prefix_suffix_prefix\
    \ = reversed_prefix_suffix .. prefix\n    local reversed_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix .. suffix\n    local reversed_prefix_suffix_prefix_suffix_prefix\
    \ = reversed_prefix_suffix_prefix_suffix .. prefix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix .. suffix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix .. prefix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix .. suffix\n    local\
    \ reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ .. prefix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix ..\
    \ suffix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ .. prefix\n    local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix\
    \ .. suffix\n    local reversed_prefix_suffix", "  local reversed = string:reverse()\n\
    \  local longest_palindrome = longest_palindrome_suffix(string)\n  local prefix\
    \ = string:sub(1, #string - #longest_palindrome)\n  return string .. reversed:sub(#prefix\
    \ + 1)\nend", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "  local prefix = string:sub(1, #string - 1)\n  local\
    \ suffix = string:sub(#string)\n  local reversed_prefix = prefix:reverse()\n \
    \ return reversed_prefix .. string .. suffix\nend", "    local length = #string\n\
    \    local palindrome_length = 0\n    local palindrome_start = 0\n    local palindrome_end\
    \ = 0\n    local i = 1\n    while i <= length do\n        local j = 1\n      \
    \  while i - j >= 1 and i + j <= length and string:sub(i - j, i - j) == string:sub(i\
    \ + j, i + j) do\n            if 2 * j + 1 > palindrome_length then\n        \
    \        palindrome_length = 2 * j + 1\n                palindrome_start = i -\
    \ j\n                palindrome_end = i + j\n            end\n            j =\
    \ j + 1\n        end\n        j = 1\n        while i - j >= 1 and i + j - 1 <=\
    \ length and string:sub(i - j, i - j) == string:sub(i + j - 1, i + j - 1) do\n\
    \            if 2 * j > palindrome_length then\n                palindrome_length\
    \ = 2 * j\n                palindrome_start = i - j\n                palindrome_end\
    \ = i + j - 1\n            end\n            j = j + 1\n        end\n        i\
    \ = i + 1\n    end\n    return string:sub(1, palindrome_start - 1) .. string:sub(palindrome_end\
    \ + 1, length) .. string:sub(palindrome_start, palindrome_end):reverse()\nend",
  "    local reversed = string:reverse()\n    local palindrome = string .. reversed\n\
    \    local prefix = string:sub(1, #string - #palindrome)\n    return prefix ..\
    \ reversed\nend", "    local length = #string\n    local palindrome_length = 0\n\
    \    local palindrome_end = 0\n    local palindrome_start = 0\n    local i = 1\n\
    \    while i <= length do\n        local j = 1\n        while i - j >= 1 and i\
    \ + j <= length and string:sub(i - j, i - j) == string:sub(i + j, i + j) do\n\
    \            j = j + 1\n        end\n        if j > palindrome_length then\n \
    \           palindrome_length = j\n            palindrome_end = i\n          \
    \  palindrome_start = i - j + 1\n        end\n        i = i + 1\n    end\n   \
    \ return string:sub(1, palindrome_start - 1) .. string:reverse()\nend", "  local\
    \ string_length = #string\n  local palindrome_length = 0\n  local palindrome_start\
    \ = 0\n  local palindrome_end = 0\n  local i = 1\n  local j = string_length\n\
    \  while i < j do\n    if string:sub(i, j) == string:sub(j, i):reverse() then\n\
    \      palindrome_length = j - i + 1\n      palindrome_start = i\n      palindrome_end\
    \ = j\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return string .. string:sub(1,\
    \ palindrome_start - 1):reverse()\nend", "    local reversed = string:reverse()\n\
    \    local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local longest_palindrome = longest_palindrome_suffix(prefix)\n    return\
    \ string .. reversed:sub(#longest_palindrome + 1)\nend", "    local reversed =\
    \ string:reverse()\n    local suffix = reversed:sub(1, string:len() - 1)\n   \
    \ local prefix = string:sub(1, string:len() - suffix:len())\n    return string\
    \ .. reversed:sub(prefix:len() + 1)\nend", "    local reversed = string:reverse()\n\
    \    local prefix = string:sub(1, #string - #string:match('.*()' .. reversed))\n\
    \    return string .. prefix:reverse()\nend", "    local suffix = longest_palindromic_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "  local reversed = string:reverse()\n  local length = #string\n  local\
    \ suffix_length = 0\n  local i = 1\n  while i <= length do\n    if string:sub(1,\
    \ i) == reversed:sub(length - i + 1, length) then\n      suffix_length = i\n \
    \   end\n    i = i + 1\n  end\n  return string .. reversed:sub(length - suffix_length\
    \ + 1, length)\nend", "  local reversed = string:reverse()\n  local prefix = string:sub(1,\
    \ #string - 1)\n  local suffix = string:sub(#string)\n  local postfix = reversed:sub(#string)\n\
    \  local prefix_reversed = reversed:sub(1, #string - 1)\n  local postfix_reversed\
    \ = reversed:sub(#string)\n  local longest_palindrome = \"\"\n  local longest_palindrome_length\
    \ = 0\n  local i = 1\n  while i <= #prefix do\n    local j = #prefix\n    while\
    \ j >= i do\n      local substring = prefix:sub(i, j)\n      local substring_reversed\
    \ = prefix_reversed:sub(#prefix - j + 1, #prefix - i + 1)\n      if substring\
    \ == substring_reversed then\n        local length = j - i + 1\n        if length\
    \ > longest_palindrome_length then\n          longest_palindrome = substring\n\
    \          longest_palindrome_length = length\n        end\n      end\n      j\
    \ = j - 1\n    end\n    i = i + 1\n  end\n  return string .. prefix_reversed:sub(#prefix\
    \ - longest_palindrome_length + 1)\nend", "    local reversed = string:reverse()\n\
    \    local longest_postfix = longest_common_substring(string, reversed)\n    local\
    \ prefix = string:sub(1, #string - #longest_postfix)\n    return string .. reversed:sub(#prefix\
    \ + 1)\nend", "  local reversed = string:reverse()\n  local prefix = string:sub(1,\
    \ #string - 1)\n  local suffix = string:sub(#string)\n  local postfix = reversed:sub(1,\
    \ #string - 1)\n  local longest_palindrome = find_longest_palindrome(postfix)\n\
    \  return string .. reversed:sub(#longest_palindrome + 1)\nend", "    local reverse\
    \ = string:reverse()\n    local suffix = string:sub(1, #string - 1)\n    local\
    \ prefix = string:sub(#string)\n    local suffix_palindrome = longest_palindrome(suffix)\n\
    \    return string .. reverse:sub(#suffix_palindrome + 1)\nend", "  local n =\
    \ #string\n  local palindrome_suffix = longest_palindrome_suffix(string)\n  local\
    \ prefix = string:sub(1, n - palindrome_suffix)\n  return string .. prefix:reverse()\n\
    end", "  local reverse = string:reverse()\n  local prefix = string:sub(1, -(string:len()\
    \ - string:find(reverse)))\n  return string .. prefix:reverse()\nend", "  local\
    \ reversed = string:reverse()\n  local prefix_length = 0\n  for i = 1, string:len()\
    \ do\n    if string:sub(1, i) == reversed:sub(string:len() - i + 1, string:len())\
    \ then\n      prefix_length = i\n    end\n  end\n  return string .. reversed:sub(prefix_length\
    \ + 1, string:len())\nend", "  local s = string\n  local s_len = #s\n  local s_rev\
    \ = string.reverse(s)\n  local s_rev_len = #s_rev\n  local i = 1\n  while i <=\
    \ s_len do\n    local j = s_len - i + 1\n    if s:sub(1, i) == s_rev:sub(j, s_rev_len)\
    \ then\n      return s .. s_rev:sub(1, j - 1)\n    end\n    i = i + 1\n  end\n\
    \  return s .. s_rev\nend", "  local reversed = string:reverse()\n  local length\
    \ = #string\n  local i = length\n  while i > 0 do\n    local prefix = string:sub(1,\
    \ i)\n    local suffix = string:sub(i + 1, length)\n    if prefix == reversed:sub(length\
    \ - i + 1, length) then\n      return string .. reversed:sub(1, length - i)\n\
    \    end\n    i = i - 1\n  end\n  return string .. reversed:sub(2, length)\nend",
  "    local reversed = string:reverse()\n    local postfix = string:sub(1, #string\
    \ - 1)\n    local prefix = string:sub(#string)\n    local longest_palindrome =\
    \ longest_palindrome_suffix(postfix)\n    return string .. reversed:sub(#longest_palindrome\
    \ + 1)\nend", "    local n = #string\n    local i = n\n    while i > 0 do\n  \
    \      local j = n - i + 1\n        local k = 1\n        while k <= i and string:sub(j,\
    \ j) == string:sub(k, k) do\n            j = j + 1\n            k = k + 1\n  \
    \      end\n        if k > i then\n            return string .. string:sub(1,\
    \ n - i):reverse()\n        end\n        i = i - 1\n    end\n    return string\
    \ .. string:reverse()\nend", "  local reversed = string:reverse()\n  local longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n  local prefix = string:sub(1, string:len()\
    \ - longest_palindrome_suffix)\n  return string .. reversed:sub(prefix:len() +\
    \ 1)\nend", "  local reversed = string:reverse()\n  local longest_palindrome_suffix\
    \ = string:sub(1, find_longest_palindrome_suffix(string))\n  local prefix = string:sub(longest_palindrome_suffix:len()\
    \ + 1)\n  return string .. reversed:sub(prefix:len() + 1)\nend", "    local reversed\
    \ = string:reverse()\n    local prefix = string:sub(1, #string - 1)\n    local\
    \ suffix = string:sub(#string)\n    local palindrome = reversed .. prefix .. suffix\n\
    \    return palindrome\nend", "    local reverse = string:reverse()\n    local\
    \ prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local prefix_reverse = prefix:reverse()\n    local suffix_reverse = suffix:reverse()\n\
    \    local prefix_reverse_suffix = prefix_reverse .. suffix\n    local prefix_reverse_suffix_reverse\
    \ = prefix_reverse_suffix:reverse()\n    local prefix_suffix_reverse = prefix\
    \ .. suffix_reverse\n    local prefix_suffix_reverse_reverse = prefix_suffix_reverse:reverse()\n\
    \    local prefix_suffix_reverse_reverse_suffix = prefix_suffix_reverse_reverse\
    \ .. suffix\n    local prefix_suffix_reverse_reverse_suffix_reverse = prefix_suffix_reverse_reverse_suffix:reverse()\n\
    \    local prefix_suffix_reverse_reverse_suffix_reverse_suffix = prefix_suffix_reverse_reverse_suffix_reverse\
    \ .. suffix\n    local prefix_suffix_reverse_reverse_suffix_reverse_suffix_reverse\
    \ = prefix_suffix_reverse_reverse_suffix_reverse_suffix:reverse()\n    local prefix_suffix_reverse_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = prefix_suffix_reverse_reverse_suffix_reverse_suffix_reverse .. suffix\n  \
    \  local prefix_suffix_reverse_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = prefix_suffix_reverse_reverse_suffix_reverse_suffix_reverse_suffix:reverse()\n\
    \    local prefix_suffix_reverse_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = prefix_suffix_reverse_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ .. suffix\n    local prefix_suffix_reverse_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = prefix_suffix_reverse_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix:reverse()\n\
    \    local prefix_suffix_reverse_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = prefix_", "  local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n  return\
    \ string .. reverse(prefix)\nend", "    local reversed = string:reverse()\n  \
    \  local suffix = string:sub(1, #string - 1)\n    local prefix = string:sub(#string)\n\
    \    local longest_palindrome = find_longest_palindrome(suffix)\n    return string\
    \ .. reversed:sub(#longest_palindrome + 1)\nend", "    local string_length = #string\n\
    \    local longest_palindrome_length = 0\n    local longest_palindrome_index =\
    \ 0\n    local longest_palindrome_index_2 = 0\n    local longest_palindrome_index_3\
    \ = 0\n    local longest_palindrome_index_4 = 0\n    local longest_palindrome_index_5\
    \ = 0\n    local longest_palindrome_index_6 = 0\n    local longest_palindrome_index_7\
    \ = 0\n    local longest_palindrome_index_8 = 0\n    local longest_palindrome_index_9\
    \ = 0\n    local longest_palindrome_index_10 = 0\n    local longest_palindrome_index_11\
    \ = 0\n    local longest_palindrome_index_12 = 0\n    local longest_palindrome_index_13\
    \ = 0\n    local longest_palindrome_index_14 = 0\n    local longest_palindrome_index_15\
    \ = 0\n    local longest_palindrome_index_16 = 0\n    local longest_palindrome_index_17\
    \ = 0\n    local longest_palindrome_index_18 = 0\n    local longest_palindrome_index_19\
    \ = 0\n    local longest_palindrome_index_20 = 0\n    local longest_palindrome_index_21\
    \ = 0\n    local longest_palindrome_index_22 = 0\n    local longest_palindrome_index_23\
    \ = 0\n    local longest_palindrome_index_24 = 0\n    local longest_palindrome_index_25\
    \ = 0\n    local longest_palindrome_index_26 = 0\n    local longest_palindrome_index_27\
    \ = 0\n    local longest_palindrome_index_28 = 0\n    local longest_palindrome_index_29\
    \ = 0\n    local longest_palindrome_index_30 = 0\n    local longest_palindrome_index_31\
    \ = 0\n    local longest_palindrome_index_32 = 0\n    local longest_palindrome_index_33\
    \ = 0\n    local longest_palindrome_index_34 = 0\n    local longest_palindrome_index_35\
    \ = 0\n    local", "\tlocal prefix = string:sub(1, #string - 1)\n\tlocal suffix\
    \ = string:sub(#string)\n\tlocal reversed_prefix = prefix:reverse()\n\treturn\
    \ string .. reversed_prefix\nend", "    local reverse = string:reverse()\n   \
    \ local suffix = string:sub(1, string:len() - 1)\n    local prefix = string:sub(2,\
    \ string:len())\n    local longest_suffix = longest_palindromic_suffix(suffix)\n\
    \    local longest_prefix = longest_palindromic_suffix(prefix)\n    if longest_suffix:len()\
    \ > longest_prefix:len() then\n        return string .. reverse:sub(longest_suffix:len()\
    \ + 1, reverse:len())\n    else\n        return string .. reverse:sub(longest_prefix:len()\
    \ + 1, reverse:len())\n    end\nend", "    local length = #string\n    local prefix_length\
    \ = length\n    local prefix = string\n    local suffix = string\n    local suffix_length\
    \ = 0\n    local palindrome_length = 0\n    local palindrome_index = 0\n    local\
    \ palindrome_suffix = ''\n    local palindrome_prefix = ''\n    local palindrome\
    \ = ''", "    local reversed = string:reverse()\n    local prefix_length = 0\n\
    \    local suffix_length = 0\n    for i = 1, #string do\n        if string:sub(1,\
    \ i) == reversed:sub(#string - i + 1, #string) then\n            prefix_length\
    \ = i\n        end\n        if string:sub(#string - i + 1, #string) == reversed:sub(1,\
    \ i) then\n            suffix_length = i\n        end\n    end\n    return string\
    \ .. reversed:sub(suffix_length + 1, #string)\nend", "    local reversed = string:reverse()\n\
    \    local longest_suffix = string:sub(1, string:find(reversed))\n    local prefix\
    \ = string:sub(longest_suffix:len() + 1)\n    return string .. reversed:sub(prefix:len()\
    \ + 1)\nend", "    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local reversed = string:reverse()\n    local\
    \ longest_postfix = longest_common_substring(string, reversed)\n    local prefix\
    \ = string:sub(1, string:len() - longest_postfix:len())\n    return string ..\
    \ reversed:sub(prefix:len() + 1)\nend", "  local reversed = string:reverse()\n\
    \  local prefix = string:sub(1, #string - 1)\n  local suffix = string:sub(#string)\n\
    \  local reversed_prefix = prefix:reverse()\n  local reversed_suffix = suffix:reverse()\n\
    \  local reversed_prefix_suffix = reversed_prefix .. reversed_suffix\n  local\
    \ reversed_prefix_suffix_prefix = reversed_prefix_suffix .. prefix\n  local reversed_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix .. suffix\n  local reversed_prefix_suffix_prefix_suffix_prefix\
    \ = reversed_prefix_suffix_prefix_suffix .. prefix\n  local reversed_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix .. suffix\n  local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix .. prefix\n  local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix .. suffix\n  local\
    \ reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ .. prefix\n  local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix ..\
    \ suffix\n  local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ .. prefix\n  local reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix\
    \ = reversed_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix_suffix_prefix\
    \ .. suffix\n  local reversed_prefix_suffix", "    local reversed = string:reverse()\n\
    \    local prefix = string:sub(1, #string - #string:match(\".*()\" .. reversed))\n\
    \    return string .. reversed:sub(#prefix + 1)\nend", "  local suffix = longest_palindromic_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #suffix)\n  return string .. prefix:reverse()\n\
    end", "    local reverse = string:reverse()\n    local prefix = string:sub(1,\
    \ #string - 1)\n    local suffix = string:sub(#string - 1, #string)\n    local\
    \ longest_palindrome = suffix\n    local longest_palindrome_length = 0\n    for\
    \ i = 1, #suffix do\n        local candidate = suffix:sub(1, i)\n        if candidate\
    \ == reverse:sub(1, i) then\n            longest_palindrome = candidate\n    \
    \        longest_palindrome_length = i\n        end\n    end\n    return string\
    \ .. reverse:sub(longest_palindrome_length + 1)\nend", "    local suffix = find_longest_palindromic_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "  local reversed = string:reverse()\n  local prefix = string:sub(1, #string\
    \ - 1)\n  local suffix = string:sub(#string - 1)\n  local reversed_prefix = prefix:reverse()\n\
    \  local reversed_suffix = suffix:reverse()\n  local i = 1\n  while i <= #suffix\
    \ do\n    if suffix:sub(1, i) == reversed_prefix:sub(1, i) then\n      i = i +\
    \ 1\n    else\n      break\n    end\n  end\n  return string .. reversed_prefix:sub(i)\n\
    end", "  local reversed = string:reverse()\n  local prefix = string:sub(1, #string\
    \ - 1)\n  local suffix = string:sub(#string)\n  local prefix_reversed = reversed:sub(1,\
    \ #reversed - 1)\n  local suffix_reversed = reversed:sub(#reversed)\n  local palindrome\
    \ = string .. reversed:sub(#string + 1)\n  local prefix_palindrome = prefix ..\
    \ reversed:sub(#prefix + 1)\n  local suffix_palindrome = suffix .. reversed:sub(#suffix\
    \ + 1)\n  local prefix_suffix_palindrome = prefix .. suffix_reversed .. reversed:sub(#prefix\
    \ + #suffix + 1)\n  local prefix_suffix_reversed_palindrome = prefix_reversed\
    \ .. suffix .. reversed:sub(#prefix_reversed + #suffix + 1)\n  local prefix_suffix_reversed_palindrome_2\
    \ = prefix_reversed .. suffix_reversed .. reversed:sub(#prefix_reversed + #suffix_reversed\
    \ + 1)\n  local prefix_suffix_reversed_palindrome_3 = prefix .. suffix_reversed\
    \ .. reversed:sub(#prefix + #suffix_reversed + 1)\n  local prefix_suffix_reversed_palindrome_4\
    \ = prefix_reversed .. suffix .. reversed:sub(#prefix_reversed + #suffix + 1)\n\
    \  local prefix_suffix_reversed_palindrome_5 = prefix .. suffix .. reversed:sub(#prefix\
    \ + #suffix + 1)\n  local prefix_suffix_reversed_palindrome_6 = prefix_reversed\
    \ .. suffix_reversed .. reversed:sub(#prefix_reversed + #suffix_reversed + 1)\n\
    \  local prefix_suffix_reversed_palindrome_7 = prefix .. suffix_reversed .. reversed:sub(#prefix\
    \ + #suffix_reversed + 1)\n  local prefix_suffix_reversed_palindrome_8 = prefix_reversed\
    \ .. suffix .. reversed:sub(#prefix_reversed", "    local reversed = string:reverse()\n\
    \    local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local postfix = reversed:sub(1, #string - 1)\n    local prefix_length = 0\n\
    \    for i = 1, #prefix do\n        if prefix:sub(i) == postfix:sub(i) then\n\
    \            prefix_length = prefix_length + 1\n        else\n            break\n\
    \        end\n    end\n    return string .. reversed:sub(prefix_length + 1)\n\
    end", "    local palindrome = string\n    local prefix = string:sub(1, #string\
    \ - 1)\n    local suffix = string:sub(#string)\n    while prefix ~= \"\" and not\
    \ is_palindrome(prefix .. suffix) do\n        palindrome = prefix:sub(1, 1) ..\
    \ palindrome\n        prefix = prefix:sub(2)\n    end\n    return palindrome\n\
    end", "    local reverse = string:reverse()\n    local prefix = string:sub(1,\
    \ #string - 1)\n    local suffix = string:sub(#string)\n    local postfix = suffix\
    \ .. prefix\n    local longest_palindrome = postfix:match(\"(.*)\" .. reverse\
    \ .. \"$\")\n    return string .. reverse:sub(#longest_palindrome + 1)\nend",
  "    local reverse = string:reverse()\n    local suffix = string:sub(1, #string\
    \ - 1)\n    local prefix = string:sub(2, #string)\n    local longest_palindrome\
    \ = ''\n    local longest_palindrome_length = 0\n    local i = 1\n    while i\
    \ <= #suffix do\n        local j = 1\n        while j <= #prefix do\n        \
    \    local current_palindrome = suffix:sub(i, #suffix)\n            local current_palindrome_length\
    \ = #current_palindrome\n            if current_palindrome_length > longest_palindrome_length\
    \ and current_palindrome == prefix:sub(j, j + current_palindrome_length - 1) then\n\
    \                longest_palindrome = current_palindrome\n                longest_palindrome_length\
    \ = current_palindrome_length\n            end\n            j = j + 1\n      \
    \  end\n        i = i + 1\n    end\n    return string .. reverse:sub(#string -\
    \ longest_palindrome_length, #string - 1)\nend", "    local reverse = string:reverse()\n\
    \    local suffix = string:sub(1, #string - 1)\n    local prefix = string:sub(#string)\n\
    \    local longest_palindrome_suffix = longest_palindrome_suffix(suffix)\n   \
    \ return string .. reverse:sub(#longest_palindrome_suffix + 1)\nend", "    local\
    \ suffix_length = longest_palindromic_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - suffix_length)\n    return string .. prefix:reverse()\nend", "   \
    \ local reversed = string:reverse()\n    local prefix = string:sub(1, #string\
    \ - 1)\n    local suffix = string:sub(#string)\n    local suffix_reversed = reversed:sub(1,\
    \ #string - 1)\n    local prefix_reversed = reversed:sub(#string)\n    local palindrome\
    \ = string .. suffix_reversed\n    local palindrome_reversed = reversed .. prefix_reversed\n\
    \    return palindrome, palindrome_reversed\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
