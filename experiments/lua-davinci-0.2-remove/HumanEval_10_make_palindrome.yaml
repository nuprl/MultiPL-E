name: HumanEval_10_make_palindrome
language: lua
prompt: "-- Find the shortest palindrome that begins with a supplied string.\n-- Algorithm\
  \ idea is simple:\n-- - Find the longest postfix of supplied string that is a palindrome.\n\
  -- - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\nlocal function make_palindrome(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
  \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
  \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local prefix = string\n  local suffix = string\n  local palindrome\
    \ = string\n  local palindrome_length = 0\n  local length = #string\n  local i\
    \ = 1\n  while i <= length do\n    local j = length - i + 1\n    if prefix:sub(1,\
    \ i) == suffix:sub(j) then\n      palindrome = prefix:sub(1, i) .. palindrome\n\
    \      palindrome_length = palindrome_length + i\n      prefix = prefix:sub(i\
    \ + 1)\n      suffix = suffix:sub(1, j - 1)\n      i = 1\n    else\n      i =\
    \ i + 1\n    end\n  end\n  return palindrome\nend", "  local len = #string\n \
    \ local palindrome_suffix = string:sub(1, len - find_longest_palindrome_suffix(string))\n\
    \  return string .. palindrome_suffix:reverse()\nend", "    local length = #string\n\
    \    local palindrome_length = 0\n    local palindrome_start = 1\n    local palindrome_end\
    \ = 1\n    local i = 1\n    while i <= length do\n        local j = 1\n      \
    \  while i - j >= 1 and i + j <= length and string:sub(i - j, i - j) == string:sub(i\
    \ + j, i + j) do\n            j = j + 1\n        end\n        j = j - 1\n    \
    \    if j * 2 + 1 > palindrome_length then\n            palindrome_length = j\
    \ * 2 + 1\n            palindrome_start = i - j\n            palindrome_end =\
    \ i + j\n        end\n        i = i + 1\n    end\n    i = 1\n    while i <= length\
    \ do\n        local j = 1\n        while i - j >= 1 and i + j - 1 <= length and\
    \ string:sub(i - j, i - j) == string:sub(i + j - 1, i + j - 1) do\n          \
    \  j = j + 1\n        end\n        j = j - 1\n        if j * 2 > palindrome_length\
    \ then\n            palindrome_length = j * 2\n            palindrome_start =\
    \ i - j\n            palindrome_end = i + j - 1\n        end\n        i = i +\
    \ 1\n    end\n    return string:sub(1, palindrome_start - 1) .. string:sub(palindrome_end\
    \ + 1, length):reverse() .. string:sub(palindrome_start, palindrome_end)\nend",
  "    local reversed = string:reverse()\n    local prefix = string:sub(1, #string\
    \ - 1)\n    local suffix = string:sub(#string)\n    local prefix_reversed = reversed:sub(1,\
    \ #reversed - 1)\n    local suffix_reversed = reversed:sub(#reversed)\n    local\
    \ palindrome = string .. prefix_reversed\n    return palindrome\nend", "    local\
    \ reversed = string:reverse()\n    local longest_palindrome = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. reversed:sub(#prefix + 1)\nend", "  local reversed = string:reverse()\n \
    \ local palindrome = string .. reversed\n  local longest_palindrome = palindrome:match(\"\
    (.*)(\" .. string .. \")$\")\n  return longest_palindrome or palindrome\nend",
  "    local reversed = string:reverse()\n    local prefix = string:sub(1, #string\
    \ - 1)\n    local suffix = string:sub(#string)\n    local postfix = reversed:sub(#string\
    \ + 1)\n    local longest_palindrome = find_longest_palindrome(postfix)\n    return\
    \ string .. reversed:sub(#longest_palindrome + 1)\nend", "  local reverse = string:reverse()\n\
    \  local prefix = string:sub(1, #string - 1)\n  local suffix = string:sub(#string)\n\
    \  local prefix_reverse = prefix:reverse()\n  local suffix_reverse = suffix:reverse()\n\
    \  local palindrome = string .. prefix_reverse\n  local palindrome_reverse = reverse\
    \ .. suffix_reverse\n  local palindrome_length = #palindrome\n  local palindrome_reverse_length\
    \ = #palindrome_reverse\n  if palindrome_length < palindrome_reverse_length then\n\
    \    return palindrome\n  else\n    return palindrome_reverse\n  end\nend", " \
    \ local reversed = string:reverse()\n  local prefix = string:sub(1, #string -\
    \ 1)\n  local suffix = string:sub(#string)\n  local prefix_reversed = reversed:sub(1,\
    \ #string - 1)\n  local suffix_reversed = reversed:sub(#string)\n  local longest_palindrome\
    \ = find_longest_palindrome(suffix_reversed)\n  local prefix_to_append = prefix_reversed:sub(1,\
    \ #prefix_reversed - #longest_palindrome)\n  return string .. prefix_to_append:reverse()\n\
    end", "  local prefix = string:sub(1, #string - 1)\n  local suffix = string:sub(#string)\n\
    \  local reversed_prefix = prefix:reverse()\n  return string .. reversed_prefix\n\
    end", "  local n = #string\n  local i = n\n  local j = n\n  local k = n\n  local\
    \ l = n\n  local m = n\n  local p = n\n  local q = n\n  local r = n\n  local s\
    \ = n\n  local t = n\n  local u = n\n  local v = n\n  local w = n\n  local x =\
    \ n\n  local y = n\n  local z = n\n  local a = n\n  local b = n\n  local c = n\n\
    \  local d = n\n  local e = n\n  local f = n\n  local g = n\n  local h = n\n \
    \ local i = n\n  local j = n\n  local k = n\n  local l = n\n  local m = n\n  local\
    \ n = n\n  local o = n\n  local p = n\n  local q = n\n  local r = n\n  local s\
    \ = n\n  local t = n\n  local u = n\n  local v = n\n  local w = n\n  local x =\
    \ n\n  local y = n\n  local z = n\n  local a = n\n  local b = n\n  local c = n\n\
    \  local d = n\n  local e = n\n  local f = n\n  local g = n\n  local h = n\n \
    \ local i = n\n  local j = n\n  local k = n\n  local l = n\n  local m = n\n  local\
    \ n = n\n  local o = n\n  local p = n\n  local q = n\n  local r = n\n  local s\
    \ = n\n  local t = n\n  local u = n\n  local v = n\n  local w = n\n  local x =\
    \ n\n  local y = n\n  local z = n\n  local a = n\n  local b = n\n  local c = n\n\
    \  local d = n\n  local e = n\n  local f = n\n  local g = n\n  local h = n\n \
    \ local i = n\n  local j = n\n  local k = n\n  local l = n\n  local m = n\n  local\
    \ n = n\n  local o = n\n  local p = n\n", "    local prefix_length = 0\n    local\
    \ suffix_length = 0\n    local string_length = #string\n    local string_length_half\
    \ = math.floor(string_length / 2)\n    local string_length_half_plus_one = string_length_half\
    \ + 1\n    local string_length_minus_one = string_length - 1\n    local string_length_minus_two\
    \ = string_length - 2\n    local string_length_minus_three = string_length - 3\n\
    \    local string_length_minus_four = string_length - 4\n    local string_length_minus_five\
    \ = string_length - 5\n    local string_length_minus_six = string_length - 6\n\
    \    local string_length_minus_seven = string_length - 7\n    local string_length_minus_eight\
    \ = string_length - 8\n    local string_length_minus_nine = string_length - 9\n\
    \    local string_length_minus_ten = string_length - 10\n    local string_length_minus_eleven\
    \ = string_length - 11\n    local string_length_minus_twelve = string_length -\
    \ 12\n    local string_length_minus_thirteen = string_length - 13\n    local string_length_minus_fourteen\
    \ = string_length - 14\n    local string_length_minus_fifteen = string_length\
    \ - 15\n    local string_length_minus_sixteen = string_length - 16\n    local\
    \ string_length_minus_seventeen = string_length - 17\n    local string_length_minus_eighteen\
    \ = string_length - 18\n    local string_length_minus_nineteen = string_length\
    \ - 19\n    local string_length_minus_twenty = string_length - 20\n    local string_length_minus_twenty_one\
    \ = string_length - 21\n    local string_length_minus_twenty_two = string_length\
    \ - 22\n    local string_length_minus_twenty_three = string_length - 23\n    local\
    \ string_length_minus_twenty_four = string_length - 24\n    local string_length_minus_twenty_five\
    \ = string_length - 25\n    local string_length_minus_twenty_six = string_length\
    \ - 26\n    local", "    local reversed = string:reverse()\n    local longest_palindrome\
    \ = find_longest_palindrome(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome)\n    return string .. reversed:sub(#prefix + 1)\nend",
  "    local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local longest_palindrome = find_longest_palindrome(prefix)\n    local prefix_to_append\
    \ = prefix:sub(1, #prefix - #longest_palindrome)\n    return string .. prefix_to_append:reverse()\
    \ .. suffix\nend", "  local reverse = string:reverse()\n  local suffix = string:sub(1,\
    \ #string - 1)\n  local prefix = string:sub(#string)\n  local palindrome = string\
    \ .. reverse:sub(#prefix + 1)\n  return palindrome\nend", "    local reversed\
    \ = string:reverse()\n    local prefix_length = 0\n    local suffix_length = 0\n\
    \    local max_length = 0\n    local max_length_index = 0\n    local length =\
    \ string.len(string)\n    local prefix = string:sub(1, length)\n    local suffix\
    \ = reversed:sub(1, length)\n    local table = {}\n    for i = 1, length do\n\
    \        table[i] = {}\n        for j = 1, length do\n            table[i][j]\
    \ = 0\n        end\n    end\n    for i = 1, length do\n        for j = 1, length\
    \ do\n            if prefix:sub(i, i) == suffix:sub(j, j) then\n             \
    \   if i == 1 or j == 1 then\n                    table[i][j] = 1\n          \
    \      else\n                    table[i][j] = table[i - 1][j - 1] + 1\n     \
    \           end\n                if table[i][j] > max_length then\n          \
    \          max_length = table[i][j]\n                    max_length_index = i\n\
    \                end\n            else\n                table[i][j] = 0\n    \
    \        end\n        end\n    end\n    prefix_length = max_length_index\n   \
    \ suffix_length = max_length\n    return string .. reversed:sub(suffix_length\
    \ + 1, length)\nend", "  local string_length = #string\n  local palindrome_length\
    \ = 0\n  local palindrome_start = 0\n  local palindrome_end = 0\n  local i = 1\n\
    \  local j = string_length\n  while i < j do\n    if string:sub(i, j) == string:sub(j,\
    \ i):reverse() then\n      palindrome_length = j - i + 1\n      palindrome_start\
    \ = i\n      palindrome_end = j\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return string .. string:sub(1, palindrome_start - 1):reverse()\nend", "   \
    \ local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local suffix_len = longest_palindrome_length(suffix)\n    local prefix_len\
    \ = #prefix - suffix_len\n    return string .. string:sub(prefix_len + 1, #prefix):reverse()\n\
    end", "    local reversed = string:reverse()\n    local prefix = string:sub(1,\
    \ #string - 1)\n    local suffix = string:sub(#string)\n    local reversed_prefix\
    \ = reversed:sub(1, #string - 1)\n    local reversed_suffix = reversed:sub(#string)\n\
    \    local longest_palindrome = reversed_suffix .. reversed_prefix\n    local\
    \ shortest_palindrome = reversed_prefix .. suffix .. reversed_suffix\n    return\
    \ shortest_palindrome\nend", "    local reversed = string:reverse()\n    local\
    \ length = #string\n    local suffix_length = 0\n    for i = 1, length do\n  \
    \      if string:sub(1, i) == reversed:sub(length - i + 1, length) then\n    \
    \        suffix_length = i\n        end\n    end\n    return string .. reversed:sub(length\
    \ - suffix_length + 1, length)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
