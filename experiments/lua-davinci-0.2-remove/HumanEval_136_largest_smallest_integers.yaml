name: HumanEval_136_largest_smallest_integers
language: lua
prompt: "-- Create a function that returns a tuple (a, b), where 'a' is\n-- the largest\
  \ of negative integers, and 'b' is the smallest\n-- of positive integers in a list.\n\
  -- If there is no negative or positive integers, return them as None.\n-- Examples:\n\
  local function largest_smallest_integers(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_smallest_integers\n\
  \    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})\n    lu.assertEquals(candidate({2,\
  \ 4, 1, 3, 5, 7, 0}), {None, 1})\n    lu.assertEquals(candidate({1, 3, 2, 4, 5,\
  \ 6, -2}), {-2, 1})\n    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7,\
  \ 2})\n    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})\n    lu.assertEquals(candidate({}),\
  \ {None, None})\n    lu.assertEquals(candidate({0}), {None, None})\n    lu.assertEquals(candidate({-1,\
  \ -3, -5, -6}), {-1, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6, 0}),\
  \ {-1, None})\n    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})\n  \
  \  lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local largest_negative = nil\n  local smallest_positive = nil\n \
    \ for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative ==\
    \ nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "    local max_neg, min_pos = nil, nil\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 and (max_neg == nil or v > max_neg) then\n\
    \            max_neg = v\n        elseif v > 0 and (min_pos == nil or v < min_pos)\
    \ then\n            min_pos = v\n        end\n    end\n    return max_neg, min_pos\n\
    end", "    local a, b = 0, 0\n    for _, v in ipairs(lst) do\n        if v < 0\
    \ and v > a then\n            a = v\n        elseif v > 0 and v < b then\n   \
    \         b = v\n        end\n    end\n    return a, b\nend", "  local largest_negative,\
    \ smallest_positive = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest_negative == nil or v > largest_negative then\n        largest_negative\
    \ = v\n      end\n    elseif v > 0 then\n      if smallest_positive == nil or\
    \ v < smallest_positive then\n        smallest_positive = v\n      end\n    end\n\
    \  end\n  return largest_negative, smallest_positive\nend", "    local largest_negative\
    \ = nil\n    local smallest_positive = nil\n    for _, v in ipairs(lst) do\n \
    \       if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local a,\
    \ b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil\
    \ or v > a) then\n            a = v\n        elseif v > 0 and (b == nil or v <\
    \ b) then\n            b = v\n        end\n    end\n    return a, b\nend", " \
    \   local largest_negative, smallest_positive\n    for _, v in ipairs(lst) do\n\
    \        if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local min_pos,\
    \ max_neg = math.huge, -math.huge\n    for _, v in ipairs(lst) do\n        if\
    \ v > 0 then\n            min_pos = math.min(min_pos, v)\n        elseif v < 0\
    \ then\n            max_neg = math.max(max_neg, v)\n        end\n    end\n   \
    \ return max_neg ~= -math.huge and min_pos ~= math.huge and {max_neg, min_pos}\
    \ or nil\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n \
    \       if v < 0 and (a == nil or v > a) then\n            a = v\n        elseif\
    \ v > 0 and (b == nil or v < b) then\n            b = v\n        end\n    end\n\
    \    return a, b\nend", "    local largest_negative, smallest_positive = nil,\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for i = 1, #lst do\n        if lst[i] <\
    \ 0 and (a == nil or lst[i] > a) then\n            a = lst[i]\n        elseif\
    \ lst[i] > 0 and (b == nil or lst[i] < b) then\n            b = lst[i]\n     \
    \   end\n    end\n    return a, b\nend", "    local max_neg, min_pos = nil, nil\n\
    \    for _, v in ipairs(lst) do\n        if v < 0 and (max_neg == nil or v > max_neg)\
    \ then\n            max_neg = v\n        elseif v > 0 and (min_pos == nil or v\
    \ < min_pos) then\n            min_pos = v\n        end\n    end\n    return max_neg,\
    \ min_pos\nend", "    local largest_negative, smallest_positive = nil, nil\n \
    \   for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n   \
    \     if v < 0 and (a == nil or v > a) then\n            a = v\n        elseif\
    \ v > 0 and (b == nil or v < b) then\n            b = v\n        end\n    end\n\
    \    return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "  -- your code here\nend", "    -- your code\
    \ here\nend", "  -- your code here\nend", "    -- your code here\nend", "    local\
    \ largest_negative, smallest_positive\n    for _, v in ipairs(lst) do\n      \
    \  if v < 0 then\n            if not largest_negative or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if not smallest_positive or v < smallest_positive then\n\
    \                smallest_positive = v\n            end\n        end\n    end\n\
    \    return largest_negative, smallest_positive\nend", "    local a, b = 0, 0\n\
    \    local a_set, b_set = false, false\n    for _, v in ipairs(lst) do\n     \
    \   if v < 0 and (not a_set or v > a) then\n            a = v\n            a_set\
    \ = true\n        elseif v > 0 and (not b_set or v < b) then\n            b =\
    \ v\n            b_set = true\n        end\n    end\n    return a_set and a or\
    \ nil, b_set and b or nil\nend\nassert(largest_smallest_integers({-1, -2, -3,\
    \ -4, -5}) == -1, -5)\nassert(largest_smallest_integers({-1, -2, -3, -4, 5}) ==\
    \ -1, 5)\nassert(largest_smallest_integers({-1, -2, -3, 4, 5}) == -1, 4)\nassert(largest_smallest_integers({-1,\
    \ -2, 3, 4, 5}) == -1, 3)\nassert(largest_smallest_integers({-1, 2, 3, 4, 5})\
    \ == -1, 2)\nassert(largest_smallest_integers({1, 2, 3, 4, 5}) == nil, 1)\nassert(largest_smallest_integers({1,\
    \ 2, 3, 4, -5}) == -5, 1)\nassert(largest_smallest_integers({1, 2, 3, -4, -5})\
    \ == -5, 1)\nassert(largest_smallest_integers({1, 2, -3, -4, -5}) == -5, 1)\n\
    assert(largest_smallest_integers({1, -2, -3, -4, -5}) == -5, 1)\nassert(largest_smallest_integers({-1,\
    \ -2, -3, -4, -5}) == -5, -1)\nassert(largest_smallest_integers({}) == nil, nil)",
  "    local largest_negative, smallest_positive\n    for _, v in ipairs(lst) do\n\
    \        if v < 0 then\n            if not largest_negative or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if not smallest_positive or v < smallest_positive then\n\
    \                smallest_positive = v\n            end\n        end\n    end\n\
    \    return largest_negative, smallest_positive\nend", "    local a, b = nil,\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or v > a)\
    \ then\n            a = v\n        elseif v > 0 and (b == nil or v < b) then\n\
    \            b = v\n        end\n    end\n    return a, b\nend", "    local largest_neg,\
    \ smallest_pos = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and\
    \ (largest_neg == nil or v > largest_neg) then\n            largest_neg = v\n\
    \        elseif v > 0 and (smallest_pos == nil or v < smallest_pos) then\n   \
    \         smallest_pos = v\n        end\n    end\n    return largest_neg, smallest_pos\n\
    end", "  local largest_negative, smallest_positive = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if largest_negative == nil or v > largest_negative\
    \ then\n        largest_negative = v\n      end\n    elseif v > 0 then\n     \
    \ if smallest_positive == nil or v < smallest_positive then\n        smallest_positive\
    \ = v\n      end\n    end\n  end\n  return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "    local largest_negative, smallest_positive = nil, nil\n    for\
    \ _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "  -- your code here\nend", "  local a, b = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 and (a == nil or v > a) then\n      a = v\n    elseif v > 0\
    \ and (b == nil or v < b) then\n      b = v\n    end\n  end\n  return a, b\nend",
  "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and\
    \ (a == nil or v > a) then\n            a = v\n        elseif v > 0 and (b ==\
    \ nil or v < b) then\n            b = v\n        end\n    end\n    return a, b\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "    local largest_negative = nil\n    local smallest_positive =\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n   \
    \     if v < 0 and (a == nil or v > a) then\n            a = v\n        elseif\
    \ v > 0 and (b == nil or v < b) then\n            b = v\n        end\n    end\n\
    \    return a, b\nend", "  local largest_negative = nil\n  local smallest_positive\
    \ = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative\
    \ == nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "    local largest_negative, smallest_positive = nil,\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local largest_negative, smallest_positive = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if largest_negative ==\
    \ nil or v > largest_negative then\n                largest_negative = v\n   \
    \         end\n        elseif v > 0 then\n            if smallest_positive ==\
    \ nil or v < smallest_positive then\n                smallest_positive = v\n \
    \           end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "  local largest_negative = nil\n  local smallest_positive = nil\n  for\
    \ _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative == nil\
    \ or v > largest_negative then\n        largest_negative = v\n      end\n    elseif\
    \ v > 0 then\n      if smallest_positive == nil or v < smallest_positive then\n\
    \        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "    local largest_negative = nil\n    local smallest_positive\
    \ = nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if\
    \ largest_negative == nil or v > largest_negative then\n                largest_negative\
    \ = v\n            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n   \
    \     if v < 0 and (a == nil or v > a) then\n            a = v\n        elseif\
    \ v > 0 and (b == nil or v < b) then\n            b = v\n        end\n    end\n\
    \    return a, b\nend", "  local a, b = nil, nil\n  for _, v in ipairs(lst) do\n\
    \    if v < 0 and (a == nil or v > a) then\n      a = v\n    elseif v > 0 and\
    \ (b == nil or v < b) then\n      b = v\n    end\n  end\n  return a, b\nend",
  "    -- your code goes here\nend", "  local a, b = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 and (a == nil or v > a) then\n      a = v\n    elseif v > 0\
    \ and (b == nil or v < b) then\n      b = v\n    end\n  end\n  return a, b\nend",
  "    local largest_negative = nil\n    local smallest_positive = nil\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n   \
    \     if v < 0 and (a == nil or v > a) then\n            a = v\n        elseif\
    \ v > 0 and (b == nil or v < b) then\n            b = v\n        end\n    end\n\
    \    return a, b\nend", "  local largest_negative, smallest_positive = nil, nil\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative ==\
    \ nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "    local a, b = nil, nil\n    for i, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    local largest_negative, smallest_positive\n\
    \    for _, v in ipairs(lst) do\n        if v < 0 then\n            if not largest_negative\
    \ or v > largest_negative then\n                largest_negative = v\n       \
    \     end\n        elseif v > 0 then\n            if not smallest_positive or\
    \ v < smallest_positive then\n                smallest_positive = v\n        \
    \    end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local largest_negative = nil\n    local smallest_positive = nil\n \
    \   for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "  -- your code here\nend", "    -- your code here\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "    local a, b = nil, nil\n\
    \    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or v > a) then\n\
    \            a = v\n        elseif v > 0 and (b == nil or v < b) then\n      \
    \      b = v\n        end\n    end\n    return a, b\nend", "  local a, b = nil,\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < 0 and (a == nil or v > a) then\n\
    \      a = v\n    elseif v > 0 and (b == nil or v < b) then\n      b = v\n   \
    \ end\n  end\n  return a, b\nend", "    local a, b = nil, nil\n    for _, v in\
    \ ipairs(lst) do\n        if v < 0 and (a == nil or v > a) then\n            a\
    \ = v\n        elseif v > 0 and (b == nil or v < b) then\n            b = v\n\
    \        end\n    end\n    return a, b\nend", "    local a, b = nil, nil\n   \
    \ for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or v > a) then\n\
    \            a = v\n        elseif v > 0 and (b == nil or v < b) then\n      \
    \      b = v\n        end\n    end\n    return a, b\nend", "  local largest_negative\
    \ = nil\n  local smallest_positive = nil\n  for _, v in ipairs(lst) do\n    if\
    \ v < 0 then\n      if largest_negative == nil or v > largest_negative then\n\
    \        largest_negative = v\n      end\n    elseif v > 0 then\n      if smallest_positive\
    \ == nil or v < smallest_positive then\n        smallest_positive = v\n      end\n\
    \    end\n  end\n  return largest_negative, smallest_positive\nend", "    local\
    \ a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (a ==\
    \ nil or v > a) then\n            a = v\n        elseif v > 0 and (b == nil or\
    \ v < b) then\n            b = v\n        end\n    end\n    return a, b\nend",
  "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and\
    \ (a == nil or v > a) then\n            a = v\n        elseif v > 0 and (b ==\
    \ nil or v < b) then\n            b = v\n        end\n    end\n    return a, b\n\
    end", "  -- your code here\nend", "    local min, max = math.huge, -math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v > 0 and v < min then\n         \
    \   min = v\n        elseif v < 0 and v > max then\n            max = v\n    \
    \    end\n    end\n    return max, min\nend", "    local max_neg, min_pos = nil,\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (max_neg == nil or\
    \ v > max_neg) then\n            max_neg = v\n        elseif v > 0 and (min_pos\
    \ == nil or v < min_pos) then\n            min_pos = v\n        end\n    end\n\
    \    return max_neg, min_pos\nend", "  -- your code here\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "    local a, b = nil, nil\n\
    \    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or v > a) then\n\
    \            a = v\n        elseif v > 0 and (b == nil or v < b) then\n      \
    \      b = v\n        end\n    end\n    return a, b\nend", "    local a, b = nil,\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or v > a)\
    \ then\n            a = v\n        elseif v > 0 and (b == nil or v < b) then\n\
    \            b = v\n        end\n    end\n    return a, b\nend", "    local a,\
    \ b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil\
    \ or v > a) then\n            a = v\n        elseif v > 0 and (b == nil or v <\
    \ b) then\n            b = v\n        end\n    end\n    return a, b\nend", " \
    \ local largest_negative = nil\n  local smallest_positive = nil\n  for _, v in\
    \ ipairs(lst) do\n    if v < 0 then\n      if largest_negative == nil or v > largest_negative\
    \ then\n        largest_negative = v\n      end\n    elseif v > 0 then\n     \
    \ if smallest_positive == nil or v < smallest_positive then\n        smallest_positive\
    \ = v\n      end\n    end\n  end\n  return largest_negative, smallest_positive\n\
    end", "    local largest_negative = nil\n    local smallest_positive = nil\n \
    \   for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "    local a, b = 0, 0\n    local has_a, has_b = false, false\n\
    \    for _, v in ipairs(lst) do\n        if v < 0 then\n            if not has_a\
    \ or v > a then\n                a = v\n                has_a = true\n       \
    \     end\n        elseif v > 0 then\n            if not has_b or v < b then\n\
    \                b = v\n                has_b = true\n            end\n      \
    \  end\n    end\n    return has_a and a or nil, has_b and b or nil\nend", "  \
    \  local largest_negative, smallest_positive = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local a,\
    \ b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil\
    \ or v > a) then\n            a = v\n        elseif v > 0 and (b == nil or v <\
    \ b) then\n            b = v\n        end\n    end\n    return a, b\nend", " \
    \   local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and\
    \ (a == nil or v > a) then\n            a = v\n        elseif v > 0 and (b ==\
    \ nil or v < b) then\n            b = v\n        end\n    end\n    return a, b\n\
    end", "    local min, max = math.huge, -math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 and v < min then\n            min = v\n        elseif v\
    \ < 0 and v > max then\n            max = v\n        end\n    end\n    return\
    \ max, min\nend", "    -- your code here\nend", "    local a, b = nil, nil\n \
    \   for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or v > a) then\n\
    \            a = v\n        elseif v > 0 and (b == nil or v < b) then\n      \
    \      b = v\n        end\n    end\n    return a, b\nend", "  local a, b = nil,\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < 0 and (a == nil or v > a) then\n\
    \      a = v\n    elseif v > 0 and (b == nil or v < b) then\n      b = v\n   \
    \ end\n  end\n  return a, b\nend", "    local a, b = nil, nil\n    for _, v in\
    \ ipairs(lst) do\n        if v < 0 and (a == nil or v > a) then\n            a\
    \ = v\n        elseif v > 0 and (b == nil or v < b) then\n            b = v\n\
    \        end\n    end\n    return a, b\nend", "    local largest_neg, smallest_pos\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (largest_neg\
    \ == nil or v > largest_neg) then\n            largest_neg = v\n        elseif\
    \ v > 0 and (smallest_pos == nil or v < smallest_pos) then\n            smallest_pos\
    \ = v\n        end\n    end\n    return largest_neg, smallest_pos\nend", "   \
    \ local largest_negative = nil\n    local smallest_positive = nil\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local largest_negative, smallest_positive = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if largest_negative ==\
    \ nil or v > largest_negative then\n                largest_negative = v\n   \
    \         end\n        elseif v > 0 then\n            if smallest_positive ==\
    \ nil or v < smallest_positive then\n                smallest_positive = v\n \
    \           end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "    local largest_negative = nil\n    local smallest_positive =\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    return nil\nend", "    local largest_negative = nil\n    local smallest_positive\
    \ = nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if\
    \ largest_negative == nil or v > largest_negative then\n                largest_negative\
    \ = v\n            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    -- your code here\nend", "    local largest_negative = nil\n    local\
    \ smallest_positive = nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n\
    \            if largest_negative == nil or v > largest_negative then\n       \
    \         largest_negative = v\n            end\n        elseif v > 0 then\n \
    \           if smallest_positive == nil or v < smallest_positive then\n      \
    \          smallest_positive = v\n            end\n        end\n    end\n    return\
    \ largest_negative, smallest_positive\nend", "  local largest_negative, smallest_positive\
    \ = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative\
    \ == nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "  local a, b = 0, 0\n  for _, v in ipairs(lst) do\n\
    \    if v < 0 and v > a then\n      a = v\n    elseif v > 0 and v < b then\n \
    \     b = v\n    end\n  end\n  return a, b\nend", "  local a, b = nil, nil\n \
    \ for _, v in ipairs(lst) do\n    if v < 0 and (a == nil or v > a) then\n    \
    \  a = v\n    elseif v > 0 and (b == nil or v < b) then\n      b = v\n    end\n\
    \  end\n  return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "  local largest_neg, smallest_pos = nil, nil\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_neg == nil\
    \ or v > largest_neg then\n        largest_neg = v\n      end\n    elseif v >\
    \ 0 then\n      if smallest_pos == nil or v < smallest_pos then\n        smallest_pos\
    \ = v\n      end\n    end\n  end\n  return largest_neg, smallest_pos\nend", " \
    \   local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and\
    \ (a == nil or v > a) then\n            a = v\n        elseif v > 0 and (b ==\
    \ nil or v < b) then\n            b = v\n        end\n    end\n    return a, b\n\
    end", "    local largest_negative = nil\n    local smallest_positive = nil\n \
    \   for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "  local a, b = 0, 0\n  for _, v in ipairs(lst) do\n    if v < 0\
    \ and v > a then\n      a = v\n    elseif v > 0 and v < b then\n      b = v\n\
    \    end\n  end\n  return a, b\nend", "  local a, b = nil, nil\n  for _, v in\
    \ ipairs(lst) do\n    if v < 0 and (a == nil or v > a) then\n      a = v\n   \
    \ elseif v > 0 and (b == nil or v < b) then\n      b = v\n    end\n  end\n  return\
    \ a, b\nend", "  local largest_negative = nil\n  local smallest_positive = nil\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative ==\
    \ nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "  local a, b = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 and (a == nil or v > a) then\n      a = v\n    elseif v > 0\
    \ and (b == nil or v < b) then\n      b = v\n    end\n  end\n  return a, b\nend",
  "    local largest_negative = nil\n    local smallest_positive = nil\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n   \
    \     if v < 0 and (a == nil or v > a) then\n            a = v\n        elseif\
    \ v > 0 and (b == nil or v < b) then\n            b = v\n        end\n    end\n\
    \    return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "  local largest_negative, smallest_positive\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if not largest_negative\
    \ or v > largest_negative then\n        largest_negative = v\n      end\n    elseif\
    \ v > 0 then\n      if not smallest_positive or v < smallest_positive then\n \
    \       smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "    local largest, smallest = nil, nil\n    for _,\
    \ v in ipairs(lst) do\n        if v > 0 then\n            if smallest == nil or\
    \ v < smallest then\n                smallest = v\n            end\n        elseif\
    \ v < 0 then\n            if largest == nil or v > largest then\n            \
    \    largest = v\n            end\n        end\n    end\n    return largest, smallest\n\
    end", "    local a, b = 0, 0\n    local a_found, b_found = false, false\n    for\
    \ _, v in ipairs(lst) do\n        if v < 0 and v > a then\n            a = v\n\
    \            a_found = true\n        elseif v > 0 and (v < b or not b_found) then\n\
    \            b = v\n            b_found = true\n        end\n    end\n    return\
    \ a_found and a or nil, b_found and b or nil\nend", "    local a, b = nil, nil\n\
    \    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or v > a) then\n\
    \            a = v\n        elseif v > 0 and (b == nil or v < b) then\n      \
    \      b = v\n        end\n    end\n    return a, b\nend", "    local a, b = nil,\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or v > a)\
    \ then\n            a = v\n        elseif v > 0 and (b == nil or v < b) then\n\
    \            b = v\n        end\n    end\n    return a, b\nend", "    local smallest\
    \ = nil\n    local largest = nil\n    for _, v in ipairs(lst) do\n        if v\
    \ > 0 then\n            if smallest == nil or v < smallest then\n            \
    \    smallest = v\n            end\n        elseif v < 0 then\n            if\
    \ largest == nil or v > largest then\n                largest = v\n          \
    \  end\n        end\n    end\n    return largest, smallest\nend", "    -- your\
    \ code here\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n\
    \        if v < 0 and (a == nil or v > a) then\n            a = v\n        elseif\
    \ v > 0 and (b == nil or v < b) then\n            b = v\n        end\n    end\n\
    \    return a, b\nend", "    local largest_neg = nil\n    local smallest_pos =\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (largest_neg == nil\
    \ or v > largest_neg) then\n            largest_neg = v\n        elseif v > 0\
    \ and (smallest_pos == nil or v < smallest_pos) then\n            smallest_pos\
    \ = v\n        end\n    end\n    return largest_neg, smallest_pos\nend", "  local\
    \ a, b = 0, 0\n  for _, v in ipairs(lst) do\n    if v < 0 and v > a then\n   \
    \   a = v\n    elseif v > 0 and v < b then\n      b = v\n    end\n  end\n  return\
    \ a, b\nend", "    local min_positive = math.huge\n    local max_negative = -math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v > 0 and v < min_positive then\n\
    \            min_positive = v\n        elseif v < 0 and v > max_negative then\n\
    \            max_negative = v\n        end\n    end\n    return max_negative,\
    \ min_positive\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    local largest_negative, smallest_positive\n\
    \    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local largest_negative, smallest_positive = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if largest_negative ==\
    \ nil or v > largest_negative then\n                largest_negative = v\n   \
    \         end\n        elseif v > 0 then\n            if smallest_positive ==\
    \ nil or v < smallest_positive then\n                smallest_positive = v\n \
    \           end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n   \
    \     if v < 0 and (a == nil or v > a) then\n            a = v\n        elseif\
    \ v > 0 and (b == nil or v < b) then\n            b = v\n        end\n    end\n\
    \    return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 then\n            if not b or v < b then\n            \
    \    b = v\n            end\n        elseif v < 0 then\n            if not a or\
    \ v > a then\n                a = v\n            end\n        end\n    end\n \
    \   return a, b\nend", "  local largest_negative, smallest_positive = nil, nil\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative ==\
    \ nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    local largest_negative, smallest_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if largest_negative == nil or v > largest_negative then\n               \
    \ largest_negative = v\n            end\n        elseif v > 0 then\n         \
    \   if smallest_positive == nil or v < smallest_positive then\n              \
    \  smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    local max_neg = nil\n    local min_pos =\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (max_neg == nil or\
    \ v > max_neg) then\n            max_neg = v\n        elseif v > 0 and (min_pos\
    \ == nil or v < min_pos) then\n            min_pos = v\n        end\n    end\n\
    \    return max_neg, min_pos\nend", "    local a, b = nil, nil\n    for _, v in\
    \ ipairs(lst) do\n        if v < 0 and (a == nil or v > a) then\n            a\
    \ = v\n        elseif v > 0 and (b == nil or v < b) then\n            b = v\n\
    \        end\n    end\n    return a, b\nend", "    -- your code here\nend", " \
    \   local largest_negative = nil\n    local smallest_positive = nil\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "  -- your code here\nend", "  local a, b = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 and (a == nil or v > a) then\n      a = v\n    elseif v > 0\
    \ and (b == nil or v < b) then\n      b = v\n    end\n  end\n  return a, b\nend",
  "    local a, b = 0, 0\n    for i, v in ipairs(lst) do\n        if v < 0 and v >\
    \ a then\n            a = v\n        elseif v > 0 and v < b then\n           \
    \ b = v\n        end\n    end\n    return a, b\nend", "    local a, b = nil, nil\n\
    \    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or v > a) then\n\
    \            a = v\n        elseif v > 0 and (b == nil or v < b) then\n      \
    \      b = v\n        end\n    end\n    return a, b\nend", "  local largest, smallest\
    \ = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 and (largest == nil or\
    \ v > largest) then\n      largest = v\n    elseif v > 0 and (smallest == nil\
    \ or v < smallest) then\n      smallest = v\n    end\n  end\n  return largest,\
    \ smallest\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n\
    \        if v < 0 and (a == nil or v > a) then\n            a = v\n        elseif\
    \ v > 0 and (b == nil or v < b) then\n            b = v\n        end\n    end\n\
    \    return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    local largest_negative, smallest_positive\n\
    \    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "    local neg_max, pos_min = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (neg_max == nil or v > neg_max) then\n            neg_max\
    \ = v\n        elseif v > 0 and (pos_min == nil or v < pos_min) then\n       \
    \     pos_min = v\n        end\n    end\n    return neg_max, pos_min\nend", " \
    \   local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and\
    \ (a == nil or v > a) then\n            a = v\n        elseif v > 0 and (b ==\
    \ nil or v < b) then\n            b = v\n        end\n    end\n    return a, b\n\
    end", "  local a, b = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 and\
    \ (a == nil or v > a) then\n      a = v\n    elseif v > 0 and (b == nil or v <\
    \ b) then\n      b = v\n    end\n  end\n  return a, b\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "  -- your code here\nend",
  "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and\
    \ (a == nil or v > a) then\n            a = v\n        elseif v > 0 and (b ==\
    \ nil or v < b) then\n            b = v\n        end\n    end\n    return a, b\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "  -- your code here\nend", "    local largest_negative, smallest_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if largest_negative == nil or v > largest_negative then\n               \
    \ largest_negative = v\n            end\n        elseif v > 0 then\n         \
    \   if smallest_positive == nil or v < smallest_positive then\n              \
    \  smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "    local largest_negative, smallest_positive = nil,\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "  local a, b = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 and\
    \ (a == nil or v > a) then\n      a = v\n    elseif v > 0 and (b == nil or v <\
    \ b) then\n      b = v\n    end\n  end\n  return a, b\nend", "    local a, b =\
    \ nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or\
    \ v > a) then\n            a = v\n        elseif v > 0 and (b == nil or v < b)\
    \ then\n            b = v\n        end\n    end\n    return a, b\nend", "    local\
    \ largest_negative = nil\n    local smallest_positive = nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "  local largest,\
    \ smallest = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 and (largest\
    \ == nil or v > largest) then\n      largest = v\n    elseif v > 0 and (smallest\
    \ == nil or v < smallest) then\n      smallest = v\n    end\n  end\n  return largest,\
    \ smallest\nend", "    local a, b = 0, 0\n    for _, v in ipairs(lst) do\n   \
    \     if v < 0 and v > a then\n            a = v\n        elseif v > 0 and v <\
    \ b then\n            b = v\n        end\n    end\n    return a, b\nend", "  local\
    \ a, b = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 and (a == nil or\
    \ v > a) then\n      a = v\n    elseif v > 0 and (b == nil or v < b) then\n  \
    \    b = v\n    end\n  end\n  return a, b\nend", "  local largest_negative = nil\n\
    \  local smallest_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest_negative == nil or v > largest_negative then\n        largest_negative\
    \ = v\n      end\n    elseif v > 0 then\n      if smallest_positive == nil or\
    \ v < smallest_positive then\n        smallest_positive = v\n      end\n    end\n\
    \  end\n  return largest_negative, smallest_positive\nend", "    local largest_negative\
    \ = nil\n    local smallest_positive = nil\n    for _, v in ipairs(lst) do\n \
    \       if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "  local largest_negative,\
    \ smallest_positive = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest_negative == nil or v > largest_negative then\n        largest_negative\
    \ = v\n      end\n    elseif v > 0 then\n      if smallest_positive == nil or\
    \ v < smallest_positive then\n        smallest_positive = v\n      end\n    end\n\
    \  end\n  return largest_negative, smallest_positive\nend", "    local a, b =\
    \ nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or\
    \ v > a) then\n            a = v\n        elseif v > 0 and (b == nil or v < b)\
    \ then\n            b = v\n        end\n    end\n    return a, b\nend", "    local\
    \ min_pos, max_neg = math.huge, -math.huge\n    for _, v in ipairs(lst) do\n \
    \       if v > 0 then\n            min_pos = math.min(min_pos, v)\n        elseif\
    \ v < 0 then\n            max_neg = math.max(max_neg, v)\n        end\n    end\n\
    \    return max_neg, min_pos\nend", "    local largest_negative = nil\n    local\
    \ smallest_positive = nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n\
    \            if largest_negative == nil or v > largest_negative then\n       \
    \         largest_negative = v\n            end\n        elseif v > 0 then\n \
    \           if smallest_positive == nil or v < smallest_positive then\n      \
    \          smallest_positive = v\n            end\n        end\n    end\n    return\
    \ largest_negative, smallest_positive\nend", "    local a, b = nil, nil\n    for\
    \ _, v in ipairs(lst) do\n        if v < 0 and (a == nil or v > a) then\n    \
    \        a = v\n        elseif v > 0 and (b == nil or v < b) then\n          \
    \  b = v\n        end\n    end\n    return a, b\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "  local largest_negative\
    \ = nil\n  local smallest_positive = nil\n  for _, v in ipairs(lst) do\n    if\
    \ v < 0 then\n      if largest_negative == nil or v > largest_negative then\n\
    \        largest_negative = v\n      end\n    elseif v > 0 then\n      if smallest_positive\
    \ == nil or v < smallest_positive then\n        smallest_positive = v\n      end\n\
    \    end\n  end\n  return largest_negative, smallest_positive\nend", "    local\
    \ a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (a ==\
    \ nil or v > a) then\n            a = v\n        elseif v > 0 and (b == nil or\
    \ v < b) then\n            b = v\n        end\n    end\n    return a, b\nend",
  "  local a, b = nil, nil\n  for i = 1, #lst do\n    local v = lst[i]\n    if v <\
    \ 0 then\n      if a == nil or v > a then\n        a = v\n      end\n    elseif\
    \ v > 0 then\n      if b == nil or v < b then\n        b = v\n      end\n    end\n\
    \  end\n  return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    local neg, pos = {}, {}\n    for _, v in\
    \ ipairs(lst) do\n        if v < 0 then\n            table.insert(neg, v)\n  \
    \      elseif v > 0 then\n            table.insert(pos, v)\n        end\n    end\n\
    \    return neg[#neg] or nil, pos[1] or nil\nend", "    local a, b = nil, nil\n\
    \    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or v > a) then\n\
    \            a = v\n        elseif v > 0 and (b == nil or v < b) then\n      \
    \      b = v\n        end\n    end\n    return a, b\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "    local a, b = nil, nil\n\
    \    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil or v > a) then\n\
    \            a = v\n        elseif v > 0 and (b == nil or v < b) then\n      \
    \      b = v\n        end\n    end\n    return a, b\nend", "    local largest_negative,\
    \ smallest_positive\n    for _, v in ipairs(lst) do\n        if v < 0 then\n \
    \           if largest_negative == nil or v > largest_negative then\n        \
    \        largest_negative = v\n            end\n        elseif v > 0 then\n  \
    \          if smallest_positive == nil or v < smallest_positive then\n       \
    \         smallest_positive = v\n            end\n        end\n    end\n    return\
    \ largest_negative, smallest_positive\nend", "  -- your code here\nend", "  local\
    \ largest_negative, smallest_positive = nil, nil\n  for _, v in ipairs(lst) do\n\
    \    if v < 0 then\n      if largest_negative == nil or v > largest_negative then\n\
    \        largest_negative = v\n      end\n    elseif v > 0 then\n      if smallest_positive\
    \ == nil or v < smallest_positive then\n        smallest_positive = v\n      end\n\
    \    end\n  end\n  return largest_negative, smallest_positive\nend", "  local\
    \ largest_negative, smallest_positive = nil, nil\n  for _, v in ipairs(lst) do\n\
    \    if v < 0 then\n      if largest_negative == nil or v > largest_negative then\n\
    \        largest_negative = v\n      end\n    elseif v > 0 then\n      if smallest_positive\
    \ == nil or v < smallest_positive then\n        smallest_positive = v\n      end\n\
    \    end\n  end\n  return largest_negative, smallest_positive\nend", "  local\
    \ a, b = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 and (a == nil or\
    \ v > a) then\n      a = v\n    elseif v > 0 and (b == nil or v < b) then\n  \
    \    b = v\n    end\n  end\n  return a, b\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "  local largest_negative,\
    \ smallest_positive = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest_negative == nil or v > largest_negative then\n        largest_negative\
    \ = v\n      end\n    elseif v > 0 then\n      if smallest_positive == nil or\
    \ v < smallest_positive then\n        smallest_positive = v\n      end\n    end\n\
    \  end\n  return largest_negative, smallest_positive\nend", "  local largest_negative\
    \ = nil\n  local smallest_positive = nil\n  for _, v in ipairs(lst) do\n    if\
    \ v < 0 then\n      if largest_negative == nil or v > largest_negative then\n\
    \        largest_negative = v\n      end\n    elseif v > 0 then\n      if smallest_positive\
    \ == nil or v < smallest_positive then\n        smallest_positive = v\n      end\n\
    \    end\n  end\n  return largest_negative, smallest_positive\nend", "    local\
    \ a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (a ==\
    \ nil or v > a) then\n            a = v\n        elseif v > 0 and (b == nil or\
    \ v < b) then\n            b = v\n        end\n    end\n    return a, b\nend",
  "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and\
    \ (a == nil or v > a) then\n            a = v\n        elseif v > 0 and (b ==\
    \ nil or v < b) then\n            b = v\n        end\n    end\n    return a, b\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 and (a == nil or v > a) then\n            a = v\n        elseif v > 0 and\
    \ (b == nil or v < b) then\n            b = v\n        end\n    end\n    return\
    \ a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n   \
    \     if v < 0 and (a == nil or v > a) then\n            a = v\n        elseif\
    \ v > 0 and (b == nil or v < b) then\n            b = v\n        end\n    end\n\
    \    return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 and (a == nil or v > a) then\n            a = v\n     \
    \   elseif v > 0 and (b == nil or v < b) then\n            b = v\n        end\n\
    \    end\n    return a, b\nend", "    -- your code here\nend", "    local largest_negative\
    \ = nil\n    local smallest_positive = nil\n    for _, v in ipairs(lst) do\n \
    \       if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local a,\
    \ b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 and (a == nil\
    \ or v > a) then\n            a = v\n        elseif v > 0 and (b == nil or v <\
    \ b) then\n            b = v\n        end\n    end\n    return a, b\nend", " \
    \   local largest_negative = nil\n    local smallest_positive = nil\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local min_pos = nil\n    local max_neg = nil\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 then\n            if min_pos == nil or v < min_pos then\n\
    \                min_pos = v\n            end\n        elseif v < 0 then\n   \
    \         if max_neg == nil or v > max_neg then\n                max_neg = v\n\
    \            end\n        end\n    end\n    return max_neg, min_pos\nend", " \
    \   local largest_negative = nil\n    local smallest_positive = nil\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "  local max_neg, min_pos = nil, nil\n  for _, v in ipairs(lst) do\n   \
    \ if v < 0 and (max_neg == nil or v > max_neg) then\n      max_neg = v\n    elseif\
    \ v > 0 and (min_pos == nil or v < min_pos) then\n      min_pos = v\n    end\n\
    \  end\n  return max_neg, min_pos\nend", "  local a, b = nil, nil\n  for _, v\
    \ in ipairs(lst) do\n    if v < 0 and (a == nil or v > a) then\n      a = v\n\
    \    elseif v > 0 and (b == nil or v < b) then\n      b = v\n    end\n  end\n\
    \  return a, b\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
