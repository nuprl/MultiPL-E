name: HumanEval_104_unique_digits
language: lua
prompt: "-- Given a list of positive integers x. return a sorted list of all \n--\
  \ elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
  \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
  \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
  \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
  \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend", "  local result\
    \ = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    while v >\
    \ 0 do\n      local digit = v % 10\n      if digit % 2 == 0 then\n        has_even\
    \ = true\n        break\n      end\n      v = math.floor(v / 10)\n    end\n  \
    \  if not has_even then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend", "  local result = {}\n  for i = 1, #x do\n    local num\
    \ = x[i]\n    local unique = true\n    while num > 0 do\n      local digit = num\
    \ % 10\n      if digit % 2 == 0 then\n        unique = false\n        break\n\
    \      end\n      num = math.floor(num / 10)\n    end\n    if unique then\n  \
    \    table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n  return\
    \ result\nend", "    local result = {}\n    for i = 1, #x do\n        local num\
    \ = x[i]\n        local has_even = false\n        while num > 0 do\n         \
    \   local digit = num % 10\n            if digit % 2 == 0 then\n             \
    \   has_even = true\n                break\n            end\n            num =\
    \ math.floor(num / 10)\n        end\n        if not has_even then\n          \
    \  table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local res = {}\n    for _, v in ipairs(x) do\n\
    \        local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n\
    \            if tonumber(d) % 2 == 0 then\n                has_even = true\n \
    \               break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "    local t = {}\n    for i = 1, #x do\n        local\
    \ n = x[i]\n        local even = false\n        while n > 0 do\n            local\
    \ d = n % 10\n            if d % 2 == 0 then\n                even = true\n  \
    \              break\n            end\n            n = math.floor(n / 10)\n  \
    \      end\n        if not even then\n            t[#t + 1] = x[i]\n        end\n\
    \    end\n    table.sort(t)\n    return t\nend", "    local result = {}\n    for\
    \ _, v in ipairs(x) do\n        local has_even = false\n        while v > 0 do\n\
    \            local digit = v % 10\n            if digit % 2 == 0 then\n      \
    \          has_even = true\n                break\n            end\n         \
    \   v = math.floor(v / 10)\n        end\n        if not has_even then\n      \
    \      table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "  local res = {}\n  for _, v in ipairs(x) do\n    local\
    \ s = tostring(v)\n    local ok = true\n    for i = 1, #s do\n      if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n        ok = false\n        break\n      end\n    end\n \
    \   if ok then\n      res[#res + 1] = v\n    end\n  end\n  table.sort(res)\n \
    \ return res\nend", "    local result = {}\n    for _, v in ipairs(x) do\n   \
    \     local has_even = false\n        for c in tostring(v):gmatch('.') do\n  \
    \          if tonumber(c) % 2 == 0 then\n                has_even = true\n   \
    \             break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "  local t = {}\n  for _, v in ipairs(x) do\n    local\
    \ s = tostring(v)\n    local ok = true\n    for i = 1, #s do\n      if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n        ok = false\n        break\n      end\n    end\n \
    \   if ok then\n      t[#t + 1] = v\n    end\n  end\n  table.sort(t)\n  return\
    \ t\nend", "    local t = {}\n    for _, v in ipairs(x) do\n        local s =\
    \ tostring(v)\n        local has_even = false\n        for i = 1, #s do\n    \
    \        if tonumber(s:sub(i, i)) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(t, v)\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend", "  local result = {}\n  for i = 1, #x do\n    local num =\
    \ x[i]\n    local has_even = false\n    while num > 0 do\n      local digit =\
    \ num % 10\n      if digit % 2 == 0 then\n        has_even = true\n        break\n\
    \      end\n      num = math.floor(num / 10)\n    end\n    if not has_even then\n\
    \      table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n  return\
    \ result\nend", "    local t = {}\n    for _, v in ipairs(x) do\n        local\
    \ s = tostring(v)\n        local ok = true\n        for i = 1, #s do\n       \
    \     if tonumber(s:sub(i, i)) % 2 == 0 then\n                ok = false\n   \
    \             break\n            end\n        end\n        if ok then\n      \
    \      t[#t + 1] = v\n        end\n    end\n    table.sort(t)\n    return t\n\
    end", "    local res = {}\n    for _, v in ipairs(x) do\n        local has_even\
    \ = false\n        while v > 0 do\n            local d = v % 10\n            if\
    \ d % 2 == 0 then\n                has_even = true\n                break\n  \
    \          end\n            v = math.floor(v / 10)\n        end\n        if not\
    \ has_even then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "    local res = {}\n    for _, v in ipairs(x) do\n   \
    \     local has_even = false\n        while v > 0 do\n            local d = v\
    \ % 10\n            if d % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n            v = math.floor(v / 10)\n    \
    \    end\n        if not has_even then\n            table.insert(res, v)\n   \
    \     end\n    end\n    table.sort(res)\n    return res\nend", "    local t =\
    \ {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n        local\
    \ has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend", "    local\
    \ t = {}\n    for i = 1, #x do\n        local s = tostring(x[i])\n        local\
    \ ok = true\n        for j = 1, #s do\n            if s:sub(j, j) % 2 == 0 then\n\
    \                ok = false\n                break\n            end\n        end\n\
    \        if ok then\n            t[#t + 1] = x[i]\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend", "    local res = {}\n    for i = 1, #x do\n        local\
    \ num = x[i]\n        local is_unique = true\n        while num > 0 do\n     \
    \       local digit = num % 10\n            if digit % 2 == 0 then\n         \
    \       is_unique = false\n                break\n            end\n          \
    \  num = math.floor(num / 10)\n        end\n        if is_unique then\n      \
    \      res[#res + 1] = x[i]\n        end\n    end\n    table.sort(res)\n    return\
    \ res\nend", "    local t = {}\n    for _, v in ipairs(x) do\n        local s\
    \ = tostring(v)\n        local found = false\n        for i = 1, #s do\n     \
    \       if tonumber(s:sub(i, i)) % 2 == 0 then\n                found = true\n\
    \                break\n            end\n        end\n        if not found then\n\
    \            table.insert(t, v)\n        end\n    end\n    table.sort(t)\n   \
    \ return t\nend", "  local t = {}\n  for i = 1, #x do\n    local s = tostring(x[i])\n\
    \    local even = false\n    for j = 1, #s do\n      if tonumber(s:sub(j, j))\
    \ % 2 == 0 then\n        even = true\n        break\n      end\n    end\n    if\
    \ not even then\n      t[#t + 1] = x[i]\n    end\n  end\n  table.sort(t)\n  return\
    \ t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
