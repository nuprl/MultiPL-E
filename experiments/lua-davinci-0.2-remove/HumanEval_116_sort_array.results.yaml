language: lua
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    local function count_ones(n)\n\
    \        local count = 0\n        while n > 0 do\n            n = n & (n - 1)\n\
    \            count = count + 1\n        end\n        return count\n    end\n \
    \   table.sort(arr, function(a, b)\n        local ones_a = count_ones(a)\n   \
    \     local ones_b = count_ones(b)\n        if ones_a == ones_b then\n       \
    \     return a < b\n        else\n            return ones_a < ones_b\n       \
    \ end\n    end)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp32f5kv4h.lua:9: unexpected symbol near ''&''

    '
  stdout: ''
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsks_7uh.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpxsks_7uh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = string.gsub(string.format(\"%b\", a), \"[^1]\", \"\")\n  \
    \  local b_ones = string.gsub(string.format(\"%b\", b), \"[^1]\", \"\")\n    if\
    \ #a_ones == #b_ones then\n      return a < b\n    else\n      return #a_ones\
    \ < #b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpin64pjey.lua:7:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpin64pjey.lua:7:\
    \ in function </tmp/tmpin64pjey.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpin64pjey.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpin64pjey.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsks_7uh.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpxsks_7uh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count('1')\n    local b_ones = b:count('1')\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p4h956_.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp_p4h956_.lua:7:\
    \ in function </tmp/tmp_p4h956_.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmp_p4h956_.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp_p4h956_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count =\
    \ count + 1\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n\
    \    local ones_a, ones_b = count_ones(a), count_ones(b)\n    if ones_a == ones_b\
    \ then\n      return a < b\n    else\n      return ones_a < ones_b\n    end\n\
    \  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0poukdca.lua:9: unexpected symbol near ''&''

    '
  stdout: ''
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii1znkxw.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpii1znkxw.lua:7:\
    \ in function </tmp/tmpii1znkxw.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpii1znkxw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpii1znkxw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl5s9s75.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpsl5s9s75.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl5s9s75.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpsl5s9s75.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a1, b1 = a:count(\"1\"), b:count(\"1\")\n    if a1 == b1 then return\
    \ a < b end\n    return a1 < b1\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf8tk7b_9.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpf8tk7b_9.lua:7:\
    \ in function </tmp/tmpf8tk7b_9.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpf8tk7b_9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpf8tk7b_9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii1znkxw.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpii1znkxw.lua:7:\
    \ in function </tmp/tmpii1znkxw.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpii1znkxw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpii1znkxw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsks_7uh.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpxsks_7uh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsks_7uh.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpxsks_7uh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii1znkxw.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpii1znkxw.lua:7:\
    \ in function </tmp/tmpii1znkxw.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpii1znkxw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpii1znkxw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local ones_a = ones(a)\n    local ones_b\
    \ = ones(b)\n    if ones_a == ones_b then\n      return a < b\n    else\n    \
    \  return ones_a < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpot5x3uqh.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpot5x3uqh.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:count_ones()\n        local b_ones = b:count_ones()\n\
    \        if a_ones == b_ones then\n            return a < b\n        else\n  \
    \          return a_ones < b_ones\n        end\n    end)\n    return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0h4cbt3.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpu0h4cbt3.lua:7:\
    \ in function </tmp/tmpu0h4cbt3.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpu0h4cbt3.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpu0h4cbt3.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a, ones_b = count_ones(a), count_ones(b)\n  \
    \  if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwyehfbq.lua:29:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmptwyehfbq.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii1znkxw.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpii1znkxw.lua:7:\
    \ in function </tmp/tmpii1znkxw.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpii1znkxw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpii1znkxw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count('1')\n    local b_ones = b:count('1')\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p4h956_.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp_p4h956_.lua:7:\
    \ in function </tmp/tmp_p4h956_.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmp_p4h956_.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp_p4h956_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii1znkxw.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpii1znkxw.lua:7:\
    \ in function </tmp/tmpii1znkxw.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpii1znkxw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpii1znkxw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k1fznmo.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmp1k1fznmo.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    local function count_ones(n)\n\
    \        local count = 0\n        while n > 0 do\n            n = n & (n - 1)\n\
    \            count = count + 1\n        end\n        return count\n    end\n \
    \   table.sort(arr, function(a, b)\n        local a_ones = count_ones(a)\n   \
    \     local b_ones = count_ones(b)\n        if a_ones == b_ones then\n       \
    \     return a < b\n        else\n            return a_ones < b_ones\n       \
    \ end\n    end)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp4hrtwlv.lua:9: unexpected symbol near ''&''

    '
  stdout: ''
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl5s9s75.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpsl5s9s75.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function cmp(a, b)\n   \
    \ local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnhxrbqre.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpnhxrbqre.lua:7:\
    \ in function </tmp/tmpnhxrbqre.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpnhxrbqre.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpnhxrbqre.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count('1')\n    local b_ones = b:count('1')\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p4h956_.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp_p4h956_.lua:7:\
    \ in function </tmp/tmp_p4h956_.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmp_p4h956_.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp_p4h956_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsks_7uh.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpxsks_7uh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii1znkxw.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpii1znkxw.lua:7:\
    \ in function </tmp/tmpii1znkxw.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpii1znkxw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpii1znkxw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a - a % 2\n    local b_ones = b - b % 2\n    while a_ones\
    \ > 0 or b_ones > 0 do\n      if a_ones % 2 == 1 and b_ones % 2 == 0 then\n  \
    \      return true\n      elseif a_ones % 2 == 0 and b_ones % 2 == 1 then\n  \
    \      return false\n      end\n      a_ones = a_ones / 2\n      b_ones = b_ones\
    \ / 2\n    end\n    return a < b\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1k_pywm.lua:26:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {2, 3, 4, 5, 1}\nstack traceback:\n\t/tmp/tmpa1k_pywm.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsks_7uh.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpxsks_7uh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsks_7uh.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpxsks_7uh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii1znkxw.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpii1znkxw.lua:7:\
    \ in function </tmp/tmpii1znkxw.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpii1znkxw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpii1znkxw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function compare(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwscn1iew.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpwscn1iew.lua:7:\
    \ in function </tmp/tmpwscn1iew.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpwscn1iew.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpwscn1iew.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function compare(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  local bin_arr = {}\n  for _, v in ipairs(arr) do\n\
    \    table.insert(bin_arr, string.format('%b', v))\n  end\n  table.sort(bin_arr,\
    \ compare)\n  for i, v in ipairs(bin_arr) do\n    bin_arr[i] = tonumber(v, 2)\n\
    \  end\n  return bin_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd4e1eh_p.lua:17:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpd4e1eh_p.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpd4e1eh_p.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function compare(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwscn1iew.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpwscn1iew.lua:7:\
    \ in function </tmp/tmpwscn1iew.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpwscn1iew.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpwscn1iew.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = string.gsub(string.format(\"%b\", a), \"[^1]\", \"\")\n  \
    \  local b_ones = string.gsub(string.format(\"%b\", b), \"[^1]\", \"\")\n    if\
    \ #a_ones == #b_ones then\n      return a < b\n    else\n      return #a_ones\
    \ < #b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpin64pjey.lua:7:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpin64pjey.lua:7:\
    \ in function </tmp/tmpin64pjey.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpin64pjey.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpin64pjey.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function compare(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwscn1iew.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpwscn1iew.lua:7:\
    \ in function </tmp/tmpwscn1iew.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpwscn1iew.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpwscn1iew.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count('1')\n    local b_ones = b:count('1')\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p4h956_.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp_p4h956_.lua:7:\
    \ in function </tmp/tmp_p4h956_.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmp_p4h956_.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp_p4h956_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = ones(a)\n    local b_ones\
    \ = ones(b)\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xllbjv1.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmp1xllbjv1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsks_7uh.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpxsks_7uh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii1znkxw.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpii1znkxw.lua:7:\
    \ in function </tmp/tmpii1znkxw.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpii1znkxw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpii1znkxw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a1, b1 = a:count_ones(), b:count_ones()\n    if a1 == b1 then return\
    \ a < b end\n    return a1 < b1\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpph1nqrmp.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpph1nqrmp.lua:7:\
    \ in function </tmp/tmpph1nqrmp.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpph1nqrmp.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpph1nqrmp.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count('1')\n    local b_ones = b:count('1')\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p4h956_.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp_p4h956_.lua:7:\
    \ in function </tmp/tmp_p4h956_.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmp_p4h956_.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp_p4h956_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = ones(a)\n    local b_ones\
    \ = ones(b)\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xllbjv1.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmp1xllbjv1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count('1')\n    local b_ones = b:count('1')\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p4h956_.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp_p4h956_.lua:7:\
    \ in function </tmp/tmp_p4h956_.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmp_p4h956_.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp_p4h956_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count =\
    \ count + 1\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6oo5ris_.lua:9: unexpected symbol near ''&''

    '
  stdout: ''
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsks_7uh.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpxsks_7uh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function compare(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  local function to_binary(n)\n    local t = {}\n\
    \    while n > 0 do\n      t[#t + 1] = n % 2\n      n = math.floor(n / 2)\n  \
    \  end\n    return table.concat(t):reverse()\n  end\n  local t = {}\n  for i =\
    \ 1, #arr do\n    t[i] = to_binary(arr[i])\n  end\n  table.sort(t, compare)\n\
    \  for i = 1, #t do\n    t[i] = tonumber(t[i], 2)\n  end\n  return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0pj5d91.lua:37:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 4, 5, 3}\nstack traceback:\n\t/tmp/tmpo0pj5d91.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    local function count_ones(n)\n\
    \        local count = 0\n        while n > 0 do\n            count = count +\
    \ (n % 2)\n            n = math.floor(n / 2)\n        end\n        return count\n\
    \    end\n    table.sort(arr, function(a, b)\n        local ones_a = count_ones(a)\n\
    \        local ones_b = count_ones(b)\n        if ones_a == ones_b then\n    \
    \        return a < b\n        else\n            return ones_a < ones_b\n    \
    \    end\n    end)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf71wq1yx.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpf71wq1yx.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsks_7uh.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpxsks_7uh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl5s9s75.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpsl5s9s75.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsks_7uh.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpxsks_7uh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = ones(a)\n    local b_ones = ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmper2pg37j.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmper2pg37j.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function compare(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  local function to_binary(n)\n    local t = {}\n\
    \    while n > 0 do\n      table.insert(t, n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return table.concat(t):reverse()\n  end\n  local t = {}\n  for _,\
    \ n in ipairs(arr) do\n    table.insert(t, to_binary(n))\n  end\n  table.sort(t,\
    \ compare)\n  for i, n in ipairs(t) do\n    t[i] = tonumber(n, 2)\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbhu2e8k.lua:37:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 4, 5, 3}\nstack traceback:\n\t/tmp/tmprbhu2e8k.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl5s9s75.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpsl5s9s75.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsks_7uh.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpxsks_7uh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl5s9s75.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpsl5s9s75.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function bitcount(n)\n \
    \   local c = 0\n    while n > 0 do\n      c = c + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ c1, c2 = bitcount(a), bitcount(b)\n    if c1 == c2 then\n      return a < b\n\
    \    else\n      return c1 < c2\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ud507ll.lua:29:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmp5ud507ll.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function cmp(a, b)\n   \
    \ local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  local bin_arr = {}\n  for i, v in ipairs(arr) do\n\
    \    bin_arr[i] = string.format('%b', v)\n  end\n  table.sort(bin_arr, cmp)\n\
    \  for i, v in ipairs(bin_arr) do\n    bin_arr[i] = tonumber(v, 2)\n  end\n  return\
    \ bin_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1_rj_9sl.lua:17:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp1_rj_9sl.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp1_rj_9sl.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + n % 2\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszfgi91w.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpszfgi91w.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:count_ones()\n        local b_ones = b:count_ones()\n\
    \        if a_ones == b_ones then\n            return a < b\n        else\n  \
    \          return a_ones < b_ones\n        end\n    end)\n    return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0h4cbt3.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpu0h4cbt3.lua:7:\
    \ in function </tmp/tmpu0h4cbt3.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpu0h4cbt3.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpu0h4cbt3.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local c = 0\n    while n > 0 do\n      c = c + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ c = count_ones(a) - count_ones(b)\n    if c == 0 then\n      return a < b\n\
    \    else\n      return c < 0\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje7dopq7.lua:29:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpje7dopq7.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii1znkxw.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpii1znkxw.lua:7:\
    \ in function </tmp/tmpii1znkxw.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpii1znkxw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpii1znkxw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii1znkxw.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpii1znkxw.lua:7:\
    \ in function </tmp/tmpii1znkxw.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpii1znkxw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpii1znkxw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k1fznmo.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmp1k1fznmo.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function ones(n)\n    local\
    \ c = 0\n    while n > 0 do\n      c = c + n % 2\n      n = math.floor(n / 2)\n\
    \    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local oa,\
    \ ob = ones(a), ones(b)\n    if oa == ob then\n      return a < b\n    else\n\
    \      return oa < ob\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6ggmgh2.lua:29:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpo6ggmgh2.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:count('1')\n        local b_ones = b:count('1')\n\
    \        if a_ones == b_ones then\n            return a < b\n        else\n  \
    \          return a_ones < b_ones\n        end\n    end)\n    return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgztzfjvn.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpgztzfjvn.lua:7:\
    \ in function </tmp/tmpgztzfjvn.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpgztzfjvn.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpgztzfjvn.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    local function count_ones(n)\n\
    \        local count = 0\n        while n > 0 do\n            count = count +\
    \ (n % 2)\n            n = math.floor(n / 2)\n        end\n        return count\n\
    \    end\n    table.sort(arr, function(a, b)\n        local ones_a = count_ones(a)\n\
    \        local ones_b = count_ones(b)\n        if ones_a == ones_b then\n    \
    \        return a < b\n        else\n            return ones_a < ones_b\n    \
    \    end\n    end)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf71wq1yx.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpf71wq1yx.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n    if\
    \ a_ones == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5ovjtj8.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmph5ovjtj8.lua:7:\
    \ in function </tmp/tmph5ovjtj8.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmph5ovjtj8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmph5ovjtj8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:binary():count('1')\n    local b_ones = b:binary():count('1')\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpezcj34ij.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpezcj34ij.lua:7:\
    \ in function </tmp/tmpezcj34ij.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpezcj34ij.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpezcj34ij.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    local function compare(a, b)\n\
    \        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end\n    table.sort(arr,\
    \ compare)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7jjq8vz2.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp7jjq8vz2.lua:7:\
    \ in function </tmp/tmp7jjq8vz2.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmp7jjq8vz2.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp7jjq8vz2.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = string.gsub(string.format(\"%b\", a), \"[^1]\", \"\")\n  \
    \  local b_ones = string.gsub(string.format(\"%b\", b), \"[^1]\", \"\")\n    if\
    \ #a_ones == #b_ones then\n      return a < b\n    else\n      return #a_ones\
    \ < #b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpin64pjey.lua:7:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpin64pjey.lua:7:\
    \ in function </tmp/tmpin64pjey.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpin64pjey.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpin64pjey.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a, ones_b = count_ones(a), count_ones(b)\n  \
    \  if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwyehfbq.lua:29:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmptwyehfbq.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + n % 2\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszfgi91w.lua:30:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmpszfgi91w.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function cmp(a, b)\n   \
    \ local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnhxrbqre.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpnhxrbqre.lua:7:\
    \ in function </tmp/tmpnhxrbqre.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpnhxrbqre.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpnhxrbqre.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local ones_a = a:count('1')\n    local ones_b = b:count('1')\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpufij9nf0.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpufij9nf0.lua:7:\
    \ in function </tmp/tmpufij9nf0.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpufij9nf0.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpufij9nf0.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii1znkxw.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpii1znkxw.lua:7:\
    \ in function </tmp/tmpii1znkxw.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpii1znkxw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpii1znkxw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k1fznmo.lua:32:\
    \ expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\
    \t/tmp/tmp1k1fznmo.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750281
- exit_code: 1
  program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\nlocal function sort_array(arr)\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrht3q7d.lua:7:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpvrht3q7d.lua:7:\
    \ in function </tmp/tmpvrht3q7d.lua:6>\n\t[C]: in function 'sort'\n\t/tmp/tmpvrht3q7d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvrht3q7d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750281
