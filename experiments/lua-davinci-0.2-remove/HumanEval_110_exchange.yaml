name: HumanEval_110_exchange
language: lua
prompt: "-- In this problem, you will implement a function that takes two lists of\
  \ numbers,\n-- and determines whether it is possible to perform an exchange of elements\n\
  -- between them to make lst1 a list of only even numbers.\n-- There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n-- If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n-- all the elements of\
  \ lst1 to be even, return \"YES\".\n-- Otherwise, return \"NO\".\n-- For example:\n\
  -- It is assumed that the input lists will be non-empty.\nlocal function exchange(lst1,\
  \ lst2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2,\
  \ 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n\
  \    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
  \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
  \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 and\
    \ odds % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend", "    local odd_lst1 = {}\n    local even_lst2 = {}\n    for i,\
    \ v in ipairs(lst1) do\n        if v % 2 == 1 then\n            table.insert(odd_lst1,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(even_lst2, v)\n        end\n    end\n  \
    \  if #odd_lst1 == #even_lst2 then\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\n    end\nend", "    local evens = 0\n    local odds = 0\n   \
    \ for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n            evens =\
    \ evens + 1\n        else\n            odds = odds + 1\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            evens\
    \ = evens + 1\n        else\n            odds = odds + 1\n        end\n    end\n\
    \    if evens % 2 == 0 then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    local function is_even(n)\n        return n % 2\
    \ == 0\n    end", "  local function is_even(n)\n    return n % 2 == 0\n  end\n\
    \  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n\
    \    for _, v in ipairs(lst) do\n      if is_odd(v) then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local function exchange_elements(lst1,\
    \ lst2)\n    local lst1_odd_idx = {}\n    local lst2_even_idx = {}\n    for i,\
    \ v in ipairs(lst1) do\n      if is_odd(v) then\n        table.insert(lst1_odd_idx,\
    \ i)\n      end\n    end\n    for i, v in ipairs(lst2) do\n      if is_even(v)\
    \ then\n        table.insert(lst2_even_idx, i)\n      end\n    end\n    if #lst1_odd_idx\
    \ ~= #lst2_even_idx then\n      return false\n    end\n    for i = 1, #lst1_odd_idx\
    \ do\n      lst1[lst1_odd_idx[i]], lst2[lst2_even_idx[i]] =\n        lst2[lst2_even_idx[i]],\
    \ lst1[lst1_odd_idx[i]]\n    end\n    return true\n  end\n  if is_all_even(lst1)\
    \ then\n    return \"YES\"\n  end\n  if exchange_elements(lst1, lst2) then\n \
    \   return \"YES\"\n  end\n  return \"NO\"\nend", "    local function is_even(n)\n\
    \        return n % 2 == 0\n    end", "  local evens = {}\n  local odds = {}\n\
    \  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ v)\n    else\n      table.insert(odds, v)\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  local evens_count = #evens\n  local odds_count = #odds\n\
    \  if evens_count >= #lst1 then\n    return \"YES\"\n  elseif evens_count + odds_count\
    \ >= #lst1 then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", " \
    \   -- your code here\nend", "  local function is_even(x)\n    return x % 2 ==\
    \ 0\n  end\n  local function is_odd(x)\n    return x % 2 == 1\n  end\n  local\
    \ function is_all_even(lst)\n    for _, v in ipairs(lst) do\n      if is_odd(v)\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  local\
    \ function is_all_odd(lst)\n    for _, v in ipairs(lst) do\n      if is_even(v)\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  if\
    \ is_all_even(lst1) then\n    return \"YES\"\n  end\n  if is_all_odd(lst2) then\n\
    \    return \"NO\"\n  end\n  for i, v in ipairs(lst1) do\n    if is_odd(v) then\n\
    \      for j, w in ipairs(lst2) do\n        if is_even(w) then\n          lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n          return exchange(lst1, lst2)\n        end\n\
    \      end\n    end\n  end\n  return \"NO\"\nend", "  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 ~=\
    \ 0\n  end\n  local function exchange_elements(lst1, lst2)\n    local function\
    \ exchange_element(lst1, lst2)\n      local function exchange_element_with_odd(lst1,\
    \ lst2)\n        local function exchange_element_with_odd_from_lst2(lst1, lst2)\n\
    \          local function exchange_element_with_odd_from_lst2_with_even(lst1,\
    \ lst2)\n            local function exchange_element_with_odd_from_lst2_with_even_from_lst1(lst1,\
    \ lst2)\n              local function exchange_element_with_odd_from_lst2_with_even_from_lst1_with_odd(lst1,\
    \ lst2)\n                local function exchange_element_with_odd_from_lst2_with_even_from_lst1_with_odd_from_lst2(lst1,\
    \ lst2)\n                  local function exchange_element_with_odd_from_lst2_with_even_from_lst1_with_odd_from_lst2_with_even(lst1,\
    \ lst2)\n                    local function exchange_element_with_odd_from_lst2_with_even_from_lst1_with_odd_from_lst2_with_even_from_lst1(lst1,\
    \ lst2)\n                      local function exchange_element_with_odd_from_lst2_with_even_from_lst1_with_odd_from_lst2_with_even_from_lst1_with_odd(lst1,\
    \ lst2)\n                        local function exchange_element_with_odd_from_lst2_with_even_from_lst1_with_odd_from_lst2_with_even_from_lst1_with_odd_from_lst2(lst1,\
    \ lst2)\n                          local function exchange", "    local function\
    \ is_even(n)\n        return n % 2 == 0\n    end", "  local even = {}\n  local\
    \ odd = {}\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      table.insert(even,\
    \ v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd,\
    \ v)\n    end\n  end\n  if #even >= #odd then\n    return \"YES\"\n  else\n  \
    \  return \"NO\"\n  end\nend", "    local evens = {}\n    local odds = {}\n  \
    \  for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "  local odd1, odd2 = {}, {}\n  for i, v in ipairs(lst1)\
    \ do\n    if v % 2 == 1 then\n      table.insert(odd1, v)\n    end\n  end\n  for\
    \ i, v in ipairs(lst2) do\n    if v % 2 == 1 then\n      table.insert(odd2, v)\n\
    \    end\n  end\n  if #odd1 == #odd2 then\n    return \"YES\"\n  else\n    return\
    \ \"NO\"\n  end\nend", "    local lst1_odd = {}\n    local lst2_even = {}\n  \
    \  for i, v in ipairs(lst1) do\n        if v % 2 == 1 then\n            table.insert(lst1_odd,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(lst2_even, v)\n        end\n    end\n  \
    \  if #lst1_odd == 0 or #lst2_even == 0 then\n        return \"NO\"\n    end\n\
    \    return \"YES\"\nend", "    local lst1_odd = {}\n    local lst2_even = {}\n\
    \    for i, v in ipairs(lst1) do\n        if v % 2 == 1 then\n            table.insert(lst1_odd,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(lst2_even, v)\n        end\n    end\n  \
    \  if #lst1_odd == #lst2_even then\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\n    end\nend", "    local function is_even(n)\n        return\
    \ n % 2 == 0\n    end", "    local evens = 0\n    local odds = 0\n    for _, v\
    \ in ipairs(lst1) do\n        if v % 2 == 0 then\n            evens = evens +\
    \ 1\n        else\n            odds = odds + 1\n        end\n    end\n    for\
    \ _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    if\
    \ evens % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\
    \n    end\nend", "    local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 and\
    \ odds % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend", "    local function is_even(n)\n        return n % 2 == 0\n  \
    \  end", "    local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    for _, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    -- Check if lst1 is already even\n    local is_even\
    \ = true\n    for _, v in ipairs(lst1) do\n        if v % 2 ~= 0 then\n      \
    \      is_even = false\n            break\n        end\n    end\n    if is_even\
    \ then\n        return \"YES\"\n    end", "    local evens = {}\n    local odds\
    \ = {}\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n        \
    \    table.insert(evens, v)\n        else\n            table.insert(odds, v)\n\
    \        end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0\
    \ then\n            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    if #evens >= #odds then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "  -- TODO: Implement this function.\n\
    end", "    local function is_even(x)\n        return x % 2 == 0\n    end\n   \
    \ local function is_odd(x)\n        return x % 2 == 1\n    end\n    local function\
    \ exchange_elements(lst1, lst2)\n        local function exchange_elements_helper(lst1,\
    \ lst2, acc)\n            if #lst1 == 0 then\n                return acc\n   \
    \         elseif is_even(lst1[1]) then\n                return exchange_elements_helper(lst1:sub(2),\
    \ lst2, acc)\n            elseif is_odd(lst1[1]) then\n                local lst2_odd\
    \ = lst2:filter(is_odd)\n                if #lst2_odd == 0 then\n            \
    \        return false\n                else\n                    local lst2_odd_head\
    \ = lst2_odd[1]\n                    local lst2_odd_tail = lst2_odd:sub(2)\n \
    \                   local lst2_even = lst2:filter(is_even)\n                 \
    \   local new_lst1 = lst1:sub(2)\n                    new_lst1:insert(1, lst2_odd_head)\n\
    \                    local new_lst2 = lst2_even:concat(lst2_odd_tail)\n      \
    \              return exchange_elements_helper(new_lst1, new_lst2, true)\n   \
    \             end\n            end\n        end\n        return exchange_elements_helper(lst1,\
    \ lst2, false)\n    end\n    if exchange_elements(lst1, lst2) then\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend", "    local even_count\
    \ = 0\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n         \
    \   even_count = even_count + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            even_count = even_count - 1\n  \
    \      end\n    end\n    return even_count == 0 and \"YES\" or \"NO\"\nend", " \
    \   local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1) do\n   \
    \     if v % 2 == 0 then\n            evens = evens + 1\n        else\n      \
    \      odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n\
    \        if v % 2 == 0 then\n            evens = evens + 1\n        else\n   \
    \         odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 and odds\
    \ % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\n   \
    \ end\nend", "    local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 then\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "  local\
    \ evens = {}\n  local odds = {}\n  for _, v in ipairs(lst1) do\n    if v % 2 ==\
    \ 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n\
    \    end\n  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n     \
    \ table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n  end\n\
    \  if #evens >= #odds then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\n\
    end", "  local evens = {}\n  local odds = {}\n  for _, v in ipairs(lst1) do\n\
    \    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n\
    \      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n\
    \  end\n  if #evens >= #odds then\n    return \"YES\"\n  else\n    return \"NO\"\
    \n  end\nend", "    local even1 = 0\n    local even2 = 0\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            even1 = even1 + 1\n        end\n\
    \    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n      \
    \      even2 = even2 + 1\n        end\n    end\n    if even1 == #lst1 then\n \
    \       return \"YES\"\n    elseif even2 == #lst2 then\n        return \"YES\"\
    \n    elseif even1 + even2 >= #lst1 then\n        return \"YES\"\n    else\n \
    \       return \"NO\"\n    end\nend", "  local function is_even(n)\n    return\
    \ n % 2 == 0\n  end\n  local function exchange_elements(lst1, lst2)\n    local\
    \ function exchange_element(lst1, lst2, i)\n      if i > #lst1 then\n        return\
    \ true\n      end\n      if is_even(lst1[i]) then\n        return exchange_element(lst1,\
    \ lst2, i + 1)\n      end\n      for j = 1, #lst2 do\n        if is_even(lst2[j])\
    \ then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n          if exchange_element(lst1,\
    \ lst2, i + 1) then\n            return true\n          end\n          lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n        end\n      end\n      return false\n   \
    \ end\n    return exchange_element(lst1, lst2, 1)\n  end\n  if exchange_elements(lst1,\
    \ lst2) then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  local\
    \ evens, odds = {}, {}\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n\
    \      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n\
    \  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ v)\n    else\n      table.insert(odds, v)\n    end\n  end\n  if #evens >= #odds\
    \ then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "    local\
    \ lst1_odd = {}\n    local lst2_even = {}\n    for i, v in ipairs(lst1) do\n \
    \       if v % 2 == 1 then\n            table.insert(lst1_odd, v)\n        end\n\
    \    end\n    for i, v in ipairs(lst2) do\n        if v % 2 == 0 then\n      \
    \      table.insert(lst2_even, v)\n        end\n    end\n    if #lst1_odd == #lst2_even\
    \ then\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend",
  "    local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1) do\n    \
    \    if v % 2 == 0 then\n            evens = evens + 1\n        else\n       \
    \     odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n\
    \        if v % 2 == 0 then\n            evens = evens + 1\n        else\n   \
    \         odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 then\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "  local\
    \ evens = {}\n  local odds = {}\n  for _, v in ipairs(lst1) do\n    if v % 2 ==\
    \ 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n\
    \    end\n  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n     \
    \ table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n  end\n\
    \  local even_count = #evens\n  local odd_count = #odds\n  if even_count >= odd_count\
    \ then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "    local\
    \ count = 0\n    for i = 1, #lst1 do\n        if lst1[i] % 2 == 1 then\n     \
    \       count = count + 1\n        end\n    end\n    for i = 1, #lst2 do\n   \
    \     if lst2[i] % 2 == 1 then\n            count = count - 1\n        end\n \
    \   end\n    if count == 0 then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    local function is_even(n)\n        return n % 2\
    \ == 0\n    end", "    local lst1_odd = false\n    local lst2_odd = false\n  \
    \  for _, v in ipairs(lst1) do\n        if v % 2 == 1 then\n            lst1_odd\
    \ = true\n            break\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 1 then\n            lst2_odd = true\n            break\n\
    \        end\n    end\n    if lst1_odd and lst2_odd then\n        return \"NO\"\
    \n    else\n        return \"YES\"\n    end\nend", "  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local lst1_odd = {}\n    local lst2_even = {}\n    for _, n in ipairs(lst1)\
    \ do\n      if not is_even(n) then\n        table.insert(lst1_odd, n)\n      end\n\
    \    end\n    for _, n in ipairs(lst2) do\n      if is_even(n) then\n        table.insert(lst2_even,\
    \ n)\n      end\n    end\n    if #lst1_odd == #lst2_even then\n      return \"\
    YES\"\n    else\n      return \"NO\"\n    end\n  end\n  return exchange_elements(lst1,\
    \ lst2)\nend", "  -- TODO: implement this function\nend", "  local even_in_lst1\
    \ = 0\n  local even_in_lst2 = 0\n  for _, v in ipairs(lst1) do\n    if v % 2 ==\
    \ 0 then\n      even_in_lst1 = even_in_lst1 + 1\n    end\n  end\n  for _, v in\
    \ ipairs(lst2) do\n    if v % 2 == 0 then\n      even_in_lst2 = even_in_lst2 +\
    \ 1\n    end\n  end\n  if even_in_lst1 == #lst1 then\n    return \"YES\"\n  elseif\
    \ even_in_lst2 >= #lst1 - even_in_lst1 then\n    return \"YES\"\n  else\n    return\
    \ \"NO\"\n  end\nend", "    local evens = 0\n    local odds = 0\n    for _, v\
    \ in ipairs(lst1) do\n        if v % 2 == 0 then\n            evens = evens +\
    \ 1\n        else\n            odds = odds + 1\n        end\n    end\n    for\
    \ _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    if\
    \ evens % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\
    \n    end\nend", "  -- TODO: Implement this function.\nend", "    local evens\
    \ = {}\n    local odds = {}\n    for i = 1, #lst1 do\n        if lst1[i] % 2 ==\
    \ 0 then\n            table.insert(evens, lst1[i])\n        else\n           \
    \ table.insert(odds, lst1[i])\n        end\n    end\n    for i = 1, #lst2 do\n\
    \        if lst2[i] % 2 == 0 then\n            table.insert(evens, lst2[i])\n\
    \        else\n            table.insert(odds, lst2[i])\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    local function is_even(x)\n        return x % 2\
    \ == 0\n    end\n    local function is_odd(x)\n        return x % 2 == 1\n   \
    \ end\n    local function is_all_even(lst)\n        for _, v in ipairs(lst) do\n\
    \            if is_odd(v) then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    local function exchange_one(lst1,\
    \ lst2)\n        for i, v in ipairs(lst1) do\n            if is_odd(v) then\n\
    \                for j, w in ipairs(lst2) do\n                    if is_even(w)\
    \ then\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n        \
    \                return true\n                    end\n                end\n \
    \           end\n        end\n        return false\n    end\n    while not is_all_even(lst1)\
    \ do\n        if not exchange_one(lst1, lst2) then\n            return \"NO\"\n\
    \        end\n    end\n    return \"YES\"\nend", "    local evens = 0\n    local\
    \ odds = 0\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n    \
    \        evens = evens + 1\n        else\n            odds = odds + 1\n      \
    \  end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n\
    \            evens = evens + 1\n        else\n            odds = odds + 1\n  \
    \      end\n    end\n    if evens % 2 == 0 and odds % 2 == 0 then\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend", "    local lst1_odd\
    \ = {}\n    local lst2_even = {}\n    for i, v in ipairs(lst1) do\n        if\
    \ v % 2 == 1 then\n            table.insert(lst1_odd, v)\n        end\n    end\n\
    \    for i, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(lst2_even,\
    \ v)\n        end\n    end\n    if #lst1_odd == 0 or #lst2_even == 0 then\n  \
    \      return \"NO\"\n    end\n    return \"YES\"\nend", "    local function is_even(n)\n\
    \        return n % 2 == 0\n    end", "    local evens = {}\n    local odds =\
    \ {}\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n          \
    \  table.insert(evens, v)\n        else\n            table.insert(odds, v)\n \
    \       end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n\
    \            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    if #evens >= #odds then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "    local function is_even(x)\n\
    \        return x % 2 == 0\n    end\n    local function is_odd(x)\n        return\
    \ x % 2 == 1\n    end\n    local function exchange_elements(lst1, lst2)\n    \
    \    local lst1_odd_indices = {}\n        local lst2_even_indices = {}\n     \
    \   for i, v in ipairs(lst1) do\n            if is_odd(v) then\n             \
    \   table.insert(lst1_odd_indices, i)\n            end\n        end\n        for\
    \ i, v in ipairs(lst2) do\n            if is_even(v) then\n                table.insert(lst2_even_indices,\
    \ i)\n            end\n        end\n        if #lst1_odd_indices == 0 or #lst2_even_indices\
    \ == 0 then\n            return false\n        end\n        local lst1_odd_index\
    \ = lst1_odd_indices[1]\n        local lst2_even_index = lst2_even_indices[1]\n\
    \        lst1[lst1_odd_index] = lst2[lst2_even_index]\n        lst2[lst2_even_index]\
    \ = lst1[lst1_odd_index]\n        return true\n    end\n    while true do\n  \
    \      local success = exchange_elements(lst1, lst2)\n        if not success then\n\
    \            break\n        end\n    end\n    for _, v in ipairs(lst1) do\n  \
    \      if is_odd(v) then\n            return \"NO\"\n        end\n    end\n  \
    \  return \"YES\"\nend", "    local evens = {}\n    local odds = {}\n    for _,\
    \ v in ipairs(lst1) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    local evens = {}\n    local odds = {}\n    for _,\
    \ v in ipairs(lst1) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "  local function is_even(n)\n    return n % 2 == 0\n\
    \  end\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local function\
    \ is_all_even(lst)\n    for _, n in ipairs(lst) do\n      if is_odd(n) then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  local function\
    \ is_all_odd(lst)\n    for _, n in ipairs(lst) do\n      if is_even(n) then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  local function\
    \ exchange_one(lst1, lst2)\n    local function exchange_one_even(lst1, lst2)\n\
    \      for i, n in ipairs(lst1) do\n        if is_even(n) then\n          for\
    \ j, m in ipairs(lst2) do\n            if is_odd(m) then\n              lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n              return true\n            end\n   \
    \       end\n        end\n      end\n      return false\n    end\n    local function\
    \ exchange_one_odd(lst1, lst2)\n      for i, n in ipairs(lst1) do\n        if\
    \ is_odd(n) then\n          for j, m in ipairs(lst2) do\n            if is_even(m)\
    \ then\n              lst1[i], lst2[j] = lst2[j], lst1[i]\n              return\
    \ true\n            end\n          end\n        end\n      end\n      return false\n\
    \    end\n    if is_all_even(lst1) then\n      return true\n    elseif is_all_odd(lst1)\
    \ then\n      return false\n    elseif is_all_even(lst2) then\n      return false\n\
    \    elseif is_all_odd(lst2) then\n      return true\n    else\n      return exchange_one_even(lst1,\
    \ lst2) or exchange_one_odd(lst1, lst2", "    local even = {}\n    local odd =\
    \ {}\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n          \
    \  table.insert(even, v)\n        else\n            table.insert(odd, v)\n   \
    \     end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n\
    \            table.insert(even, v)\n        else\n            table.insert(odd,\
    \ v)\n        end\n    end\n    if #even >= #odd then\n        return \"YES\"\n\
    \    else\n        return \"NO\"\n    end\nend", "    local function is_even(x)\n\
    \        return x % 2 == 0\n    end\n    local function exchange_elements(lst1,\
    \ lst2)\n        local lst1_even = true\n        for _, x in ipairs(lst1) do\n\
    \            if not is_even(x) then\n                lst1_even = false\n     \
    \           break\n            end\n        end\n        if lst1_even then\n \
    \           return true\n        end\n        for i, x in ipairs(lst1) do\n  \
    \          if not is_even(x) then\n                for j, y in ipairs(lst2) do\n\
    \                    if is_even(y) then\n                        lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                        return exchange_elements(lst1, lst2)\n\
    \                    end\n                end\n            end\n        end\n\
    \        return false\n    end\n    return exchange_elements(lst1, lst2) and \"\
    YES\" or \"NO\"\nend", "  local evens = 0\n  local odds = 0\n  for _, v in ipairs(lst1)\
    \ do\n    if v % 2 == 0 then\n      evens = evens + 1\n    else\n      odds =\
    \ odds + 1\n    end\n  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n\
    \      evens = evens + 1\n    else\n      odds = odds + 1\n    end\n  end\n  if\
    \ evens == #lst1 + #lst2 then\n    return \"YES\"\n  elseif odds == #lst1 + #lst2\
    \ then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "    local\
    \ evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1) do\n        if v\
    \ % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if\
    \ v % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    if evens % 2 == 0 and odds % 2 == 0 then\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "   \
    \ local lst1_odd = {}\n    local lst2_even = {}\n    for i, v in ipairs(lst1)\
    \ do\n        if v % 2 == 1 then\n            table.insert(lst1_odd, v)\n    \
    \    end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2 == 0 then\n\
    \            table.insert(lst2_even, v)\n        end\n    end\n    if #lst1_odd\
    \ == #lst2_even then\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend", "    local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 and\
    \ odds % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend", "    local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    for _, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    local evens = 0\n    local odds = 0\n    for _,\
    \ v in ipairs(lst1) do\n        if v % 2 == 0 then\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    for\
    \ _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    if\
    \ evens % 2 == 0 and odds % 2 == 0 then\n        return \"YES\"\n    else\n  \
    \      return \"NO\"\n    end\nend", "  local evens = {}\n  local odds = {}\n\
    \  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ v)\n    else\n      table.insert(odds, v)\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  if #evens >= #odds then\n    return \"YES\"\n  else\n\
    \    return \"NO\"\n  end\nend", "    local evens = {}\n    local odds = {}\n\
    \    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "  local function is_even(n)\n    return n % 2 == 0\n\
    \  end\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local function\
    \ exchange_elements(lst1, lst2)\n    local lst1_even = lst1:filter(is_even)\n\
    \    local lst1_odd = lst1:filter(is_odd)\n    local lst2_even = lst2:filter(is_even)\n\
    \    local lst2_odd = lst2:filter(is_odd)\n    local lst1_even_count = lst1_even:count()\n\
    \    local lst2_even_count = lst2_even:count()\n    local lst1_odd_count = lst1_odd:count()\n\
    \    local lst2_odd_count = lst2_odd:count()\n    if lst1_even_count == 0 and\
    \ lst2_even_count == 0 then\n      return \"NO\"\n    elseif lst1_even_count ==\
    \ 0 and lst2_even_count > 0 then\n      return \"YES\"\n    elseif lst1_even_count\
    \ > 0 and lst2_even_count == 0 then\n      return \"NO\"\n    elseif lst1_even_count\
    \ > 0 and lst2_even_count > 0 then\n      if lst1_odd_count == 0 and lst2_odd_count\
    \ == 0 then\n        return \"YES\"\n      elseif lst1_odd_count == 0 and lst2_odd_count\
    \ > 0 then\n        return \"YES\"\n      elseif lst1_odd_count > 0 and lst2_odd_count\
    \ == 0 then\n        return \"NO\"\n      elseif lst1_odd_count > 0 and lst2_odd_count\
    \ > 0 then\n        if lst1_odd_count == lst2_even_count then\n          return\
    \ \"YES\"\n        elseif lst1_odd_count > lst2_even_count then\n          return\
    \ \"NO\"\n        elseif lst1_odd_count < lst2_even_count then\n          return",
  "  local evens = {}\n  local odds = {}\n  local evens_count = 0\n  local odds_count\
    \ = 0\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      evens_count\
    \ = evens_count + 1\n      evens[v] = true\n    else\n      odds_count = odds_count\
    \ + 1\n      odds[v] = true\n    end\n  end\n  for _, v in ipairs(lst2) do\n \
    \   if v % 2 == 0 then\n      if odds[v] then\n        odds_count = odds_count\
    \ - 1\n        odds[v] = nil\n      else\n        evens_count = evens_count +\
    \ 1\n        evens[v] = true\n      end\n    else\n      if evens[v] then\n  \
    \      evens_count = evens_count - 1\n        evens[v] = nil\n      else\n   \
    \     odds_count = odds_count + 1\n        odds[v] = true\n      end\n    end\n\
    \  end\n  if evens_count == #lst1 then\n    return \"YES\"\n  else\n    return\
    \ \"NO\"\n  end\nend", "    local evens = 0\n    local odds = 0\n    for _, v\
    \ in ipairs(lst1) do\n        if v % 2 == 0 then\n            evens = evens +\
    \ 1\n        else\n            odds = odds + 1\n        end\n    end\n    for\
    \ _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    if\
    \ evens % 2 == 0 and odds % 2 == 0 then\n        return \"YES\"\n    else\n  \
    \      return \"NO\"\n    end\nend", "    local function is_even(n)\n        return\
    \ n % 2 == 0\n    end", "    local lst1_odd = {}\n    local lst2_even = {}\n \
    \   for i, v in ipairs(lst1) do\n        if v % 2 == 1 then\n            table.insert(lst1_odd,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(lst2_even, v)\n        end\n    end\n  \
    \  if #lst1_odd == #lst2_even then\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\n    end\nend", "  local function is_even(n)\n    return n % 2\
    \ == 0\n  end\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local\
    \ function is_all_even(lst)\n    for _, n in ipairs(lst) do\n      if is_odd(n)\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  local\
    \ function exchange_elements(lst1, lst2)\n    local result = {}\n    for _, n\
    \ in ipairs(lst1) do\n      if is_odd(n) then\n        for i, m in ipairs(lst2)\
    \ do\n          if is_even(m) then\n            table.insert(result, {i, n})\n\
    \            break\n          end\n        end\n      end\n    end\n    return\
    \ result\n  end\n  local function exchange_elements_in_list(lst, exchanges)\n\
    \    for _, exchange in ipairs(exchanges) do\n      local i, n = exchange[1],\
    \ exchange[2]\n      lst[i] = n\n    end\n  end\n  local function exchange_elements_in_lists(lst1,\
    \ lst2, exchanges)\n    for _, exchange in ipairs(exchanges) do\n      local i,\
    \ n = exchange[1], exchange[2]\n      lst1[i] = n\n      lst2[i] = n\n    end\n\
    \  end\n  local exchanges = exchange_elements(lst1, lst2)\n  if #exchanges ==\
    \ 0 then\n    return \"NO\"\n  end\n  exchange_elements_in_lists(lst1, lst2, exchanges)\n\
    \  if is_all_even(lst1) then\n    return \"YES\"\n  else\n    return \"NO\"\n\
    \  end\nend", "  local evens = {}\n  local odds = {}\n  for _, v in ipairs(lst1)\
    \ do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n\
    \      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n\
    \  end\n  if #evens >= #odds then\n    return \"YES\"\n  else\n    return \"NO\"\
    \n  end\nend", "    local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 and\
    \ odds % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend", "  local function is_even(n)\n    return n % 2 == 0\n  end\n \
    \ local function exchange_elements(lst1, lst2)\n    local lst1_even = true\n \
    \   for _, v in ipairs(lst1) do\n      if not is_even(v) then\n        lst1_even\
    \ = false\n        break\n      end\n    end\n    if lst1_even then\n      return\
    \ true\n    end\n    for i, v in ipairs(lst1) do\n      if not is_even(v) then\n\
    \        for j, w in ipairs(lst2) do\n          if is_even(w) then\n         \
    \   lst1[i], lst2[j] = w, v\n            if exchange_elements(lst1, lst2) then\n\
    \              return true\n            end\n            lst1[i], lst2[j] = v,\
    \ w\n          end\n        end\n      end\n    end\n    return false\n  end\n\
    \  return exchange_elements(lst1, lst2) and \"YES\" or \"NO\"\nend", "  local\
    \ lst1_odd = {}\n  local lst2_even = {}\n  for _, v in ipairs(lst1) do\n    if\
    \ v % 2 == 1 then\n      table.insert(lst1_odd, v)\n    end\n  end\n  for _, v\
    \ in ipairs(lst2) do\n    if v % 2 == 0 then\n      table.insert(lst2_even, v)\n\
    \    end\n  end\n  if #lst1_odd == #lst2_even then\n    return \"YES\"\n  else\n\
    \    return \"NO\"\n  end\nend", "  local lst1_even = true\n  local lst2_even\
    \ = true\n  for _, v in ipairs(lst1) do\n    if v % 2 ~= 0 then\n      lst1_even\
    \ = false\n      break\n    end\n  end\n  for _, v in ipairs(lst2) do\n    if\
    \ v % 2 ~= 0 then\n      lst2_even = false\n      break\n    end\n  end\n  if\
    \ lst1_even then\n    return \"YES\"\n  elseif lst2_even then\n    return \"YES\"\
    \n  else\n    return \"NO\"\n  end\nend", "  local evens = {}\n  local odds =\
    \ {}\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ v)\n    else\n      table.insert(odds, v)\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  if #evens >= #odds then\n    return \"YES\"\n  else\n\
    \    return \"NO\"\n  end\nend", "    local lst1_even, lst1_odd = {}, {}\n   \
    \ local lst2_even, lst2_odd = {}, {}\n    for _, v in ipairs(lst1) do\n      \
    \  if v % 2 == 0 then\n            table.insert(lst1_even, v)\n        else\n\
    \            table.insert(lst1_odd, v)\n        end\n    end\n    for _, v in\
    \ ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(lst2_even,\
    \ v)\n        else\n            table.insert(lst2_odd, v)\n        end\n    end\n\
    \    if #lst1_even == #lst1 then\n        return \"YES\"\n    end\n    if #lst1_odd\
    \ == #lst1 then\n        if #lst2_even == 0 then\n            return \"NO\"\n\
    \        end\n        return \"YES\"\n    end\n    if #lst2_even == 0 then\n \
    \       return \"NO\"\n    end\n    return \"YES\"\nend", "  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_element(lst1, lst2, i)\n      if i > #lst1 then\n\
    \        return true\n      end\n      if is_even(lst1[i]) then\n        return\
    \ exchange_element(lst1, lst2, i + 1)\n      end\n      for j = 1, #lst2 do\n\
    \        if is_even(lst2[j]) then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \          if exchange_element(lst1, lst2, i + 1) then\n            return true\n\
    \          end\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n        end\n \
    \     end\n      return false\n    end\n    return exchange_element(lst1, lst2,\
    \ 1)\n  end\n  return exchange_elements(lst1, lst2) and \"YES\" or \"NO\"\nend",
  "  local evens = {}\n  local odds = {}\n  for _, v in ipairs(lst1) do\n    if v\
    \ % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n\
    \      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n\
    \  end\n  if #evens >= #odds then\n    return \"YES\"\n  else\n    return \"NO\"\
    \n  end\nend", "  local evens = {}\n  local odds = {}\n  for i, v in ipairs(lst1)\
    \ do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  for i, v in ipairs(lst2) do\n    if v % 2 == 0 then\n\
    \      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n\
    \  end\n  if #evens >= #odds then\n    return \"YES\"\n  else\n    return \"NO\"\
    \n  end\nend", "  local function is_even(n)\n    return n % 2 == 0\n  end\n  local\
    \ function exchange_elements(lst1, lst2)\n    local function exchange_element(lst1,\
    \ lst2, i)\n      if i > #lst1 then\n        return lst1, lst2\n      end\n  \
    \    if is_even(lst1[i]) then\n        return exchange_element(lst1, lst2, i +\
    \ 1)\n      end\n      for j = 1, #lst2 do\n        if is_even(lst2[j]) then\n\
    \          lst1[i], lst2[j] = lst2[j], lst1[i]\n          return exchange_element(lst1,\
    \ lst2, i + 1)\n        end\n      end\n      return lst1, lst2\n    end\n   \
    \ return exchange_element(lst1, lst2, 1)\n  end\n  local function is_all_even(lst)\n\
    \    for i = 1, #lst do\n      if not is_even(lst[i]) then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local lst1, lst2 = exchange_elements(lst1,\
    \ lst2)\n  return is_all_even(lst1) and \"YES\" or \"NO\"\nend", "  local function\
    \ is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n    return\
    \ n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, n in ipairs(lst)\
    \ do\n      if is_odd(n) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function exchange_elements(lst1, lst2)\n    local lst1_even\
    \ = is_all_even(lst1)\n    local lst2_even = is_all_even(lst2)\n    if lst1_even\
    \ and lst2_even then\n      return \"YES\"\n    elseif lst1_even then\n      return\
    \ \"NO\"\n    elseif lst2_even then\n      return \"NO\"\n    else\n      for\
    \ i, n in ipairs(lst1) do\n        if is_odd(n) then\n          for j, m in ipairs(lst2)\
    \ do\n            if is_even(m) then\n              lst1[i] = m\n            \
    \  lst2[j] = n\n              return exchange_elements(lst1, lst2)\n         \
    \   end\n          end\n        end\n      end\n    end\n  end\n  return exchange_elements(lst1,\
    \ lst2)\nend", "    local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    for _, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "  local function is_even(x)\n    return x % 2 == 0\n\
    \  end\n  local function is_odd(x)\n    return x % 2 == 1\n  end\n  local function\
    \ is_all_even(lst)\n    for i = 1, #lst do\n      if is_odd(lst[i]) then\n   \
    \     return false\n      end\n    end\n    return true\n  end\n  local function\
    \ exchange_elements(lst1, lst2)\n    local lst1_even_count = 0\n    local lst2_odd_count\
    \ = 0\n    for i = 1, #lst1 do\n      if is_even(lst1[i]) then\n        lst1_even_count\
    \ = lst1_even_count + 1\n      end\n    end\n    for i = 1, #lst2 do\n      if\
    \ is_odd(lst2[i]) then\n        lst2_odd_count = lst2_odd_count + 1\n      end\n\
    \    end\n    if lst1_even_count == #lst1 then\n      return true\n    end\n \
    \   if lst2_odd_count == 0 then\n      return false\n    end\n    return lst1_even_count\
    \ >= lst2_odd_count\n  end\n  if is_all_even(lst1) then\n    return \"YES\"\n\
    \  end\n  if exchange_elements(lst1, lst2) then\n    return \"YES\"\n  end\n \
    \ return \"NO\"\nend", "  local function is_even(n)\n    return n % 2 == 0\n \
    \ end\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local function\
    \ is_even_list(lst)\n    for _, n in ipairs(lst) do\n      if is_odd(n) then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  local function\
    \ exchange_elements(lst1, lst2)\n    local lst = {}\n    for _, n in ipairs(lst1)\
    \ do\n      if is_odd(n) then\n        for i, m in ipairs(lst2) do\n         \
    \ if is_even(m) then\n            lst1[i] = m\n            lst2[i] = n\n     \
    \       table.insert(lst, {n, m})\n          end\n        end\n      end\n   \
    \ end\n    return lst\n  end\n  local function exchange_elements_rec(lst1, lst2)\n\
    \    if is_even_list(lst1) then\n      return true\n    end\n    local lst = exchange_elements(lst1,\
    \ lst2)\n    if #lst == 0 then\n      return false\n    end\n    for _, pair in\
    \ ipairs(lst) do\n      local n, m = pair[1], pair[2]\n      for i, x in ipairs(lst1)\
    \ do\n        if x == n then\n          lst1[i] = m\n        end\n      end\n\
    \      for i, x in ipairs(lst2) do\n        if x == m then\n          lst2[i]\
    \ = n\n        end\n      end\n      if exchange_elements_rec(lst1, lst2) then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  if exchange_elements_rec(lst1,\
    \ lst2) then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  \
    \  local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n  \
    \      if v % 2 == 0 then\n            table.insert(evens, v)\n        else\n\
    \            table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return \"YES\"\n    else\n        return \"NO\"\n   \
    \ end\nend", "    local evens = {}\n    local odds = {}\n    for i, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    for i, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    local evens_count = #evens\n    local odds_count = #odds\n    if evens_count\
    \ >= #lst1 then\n        return \"YES\"\n    elseif odds_count >= #lst1 then\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "   \
    \ local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n   \
    \     if v % 2 == 0 then\n            table.insert(evens, v)\n        else\n \
    \           table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return \"YES\"\n    else\n        return \"NO\"\n   \
    \ end\nend", "    local function is_even(n)\n        return n % 2 == 0\n    end",
  "    local function is_even(n)\n        return n % 2 == 0\n    end", "  local evens\
    \ = {}\n  local odds = {}\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n\
    \      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n\
    \  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ v)\n    else\n      table.insert(odds, v)\n    end\n  end\n  if #evens >= #odds\
    \ then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end", "    local lst1_even\
    \ = true\n    local lst2_even = true\n    for _, v in ipairs(lst1) do\n      \
    \  if v % 2 ~= 0 then\n            lst1_even = false\n            break\n    \
    \    end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 ~= 0 then\n\
    \            lst2_even = false\n            break\n        end\n    end\n    if\
    \ lst1_even then\n        return \"YES\"\n    elseif lst2_even then\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend", "  local lst1_odd =\
    \ {}\n  local lst2_even = {}\n  for _, v in ipairs(lst1) do\n    if v % 2 == 1\
    \ then\n      table.insert(lst1_odd, v)\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v % 2 == 0 then\n      table.insert(lst2_even, v)\n    end\n  end\n\
    \  if #lst1_odd == #lst2_even then\n    return \"YES\"\n  else\n    return \"\
    NO\"\n  end\nend", "    local even = {}\n    local odd = {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n\
    \            table.insert(odd, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n\
    \            table.insert(odd, v)\n        end\n    end\n    if #odd % 2 == 0\
    \ then\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend",
  "  local function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i, v in ipairs(lst1) do\n      if is_odd(v) then\n        for j, w in\
    \ ipairs(lst2) do\n          if is_even(w) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_elements(lst1, lst2) then\n      return \"NO\"\n    end\n\
    \  end\n  return \"YES\"\nend", "    local lst1_even = true\n    local lst2_even\
    \ = true\n    for _, v in ipairs(lst1) do\n        if v % 2 ~= 0 then\n      \
    \      lst1_even = false\n            break\n        end\n    end\n    for _,\
    \ v in ipairs(lst2) do\n        if v % 2 ~= 0 then\n            lst2_even = false\n\
    \            break\n        end\n    end\n    if lst1_even then\n        return\
    \ \"YES\"\n    elseif lst2_even then\n        return \"YES\"\n    else\n     \
    \   return \"NO\"\n    end\nend", "    local evens = 0\n    local odds = 0\n \
    \   for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n            evens\
    \ = evens + 1\n        else\n            odds = odds + 1\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            evens\
    \ = evens + 1\n        else\n            odds = odds + 1\n        end\n    end\n\
    \    if evens % 2 == 0 then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    local evens = {}\n    local odds = {}\n    for _,\
    \ v in ipairs(lst1) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    -- your code here\n    local even = 0\n    local\
    \ odd = 0\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    if even > odd then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "  -- TODO: Implement this function.\nend", "    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end", "    local evens =\
    \ {}\n    local odds = {}\n    for i, v in ipairs(lst1) do\n        if v % 2 ==\
    \ 0 then\n            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    if #evens >= #odds then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 ~=\
    \ 0\n  end\n  local function exchange_elements(lst1, lst2)\n    local function\
    \ exchange_element(lst1, lst2)\n      local function exchange_element_helper(lst1,\
    \ lst2, i)\n        if i > #lst1 then\n          return false\n        elseif\
    \ is_even(lst1[i]) then\n          return true\n        elseif is_odd(lst1[i])\
    \ and is_even(lst2[i]) then\n          lst1[i], lst2[i] = lst2[i], lst1[i]\n \
    \         return true\n        else\n          return exchange_element_helper(lst1,\
    \ lst2, i + 1)\n        end\n      end\n      return exchange_element_helper(lst1,\
    \ lst2, 1)\n    end\n    local function exchange_elements_helper(lst1, lst2)\n\
    \      if exchange_element(lst1, lst2) then\n        return exchange_elements_helper(lst1,\
    \ lst2)\n      else\n        return lst1, lst2\n      end\n    end\n    return\
    \ exchange_elements_helper(lst1, lst2)\n  end\n  local function is_all_even(lst)\n\
    \    local function is_all_even_helper(lst, i)\n      if i > #lst then\n     \
    \   return true\n      elseif is_even(lst[i]) then\n        return is_all_even_helper(lst,\
    \ i + 1)\n      else\n        return false\n      end\n    end\n    return is_all_even_helper(lst,\
    \ 1)\n  end\n  local lst1, lst2 = exchange_elements(lst1, lst2)\n  if is_all_even(lst1)\
    \ then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "    local\
    \ evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n        if\
    \ v % 2 == 0 then\n            table.insert(evens, v)\n        else\n        \
    \    table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ == #lst1 then\n        return \"YES\"\n    else\n        return \"NO\"\n   \
    \ end\nend", "    -- TODO: Implement this function.\n    -- Hint: You can use\
    \ the modulo operator (%) to check if a number is even.\n    -- Hint: You can\
    \ use the table.remove() function to remove an element from a list.\n    -- Hint:\
    \ You can use the table.insert() function to insert an element into a list.\n\
    \    -- Hint: You can use the table.concat() function to concatenate two lists.\n\
    \    -- Hint: You can use the # operator to get the length of a list.\n    --\
    \ Hint: You can use the string.format() function to format a string.\n    -- Hint:\
    \ You can use the string.rep() function to repeat a string.\n    -- Hint: You\
    \ can use the string.sub() function to get a substring.\n    -- Hint: You can\
    \ use the string.gsub() function to replace all occurrences of a substring.\n\
    \    -- Hint: You can use the string.gmatch() function to iterate over all occurrences\
    \ of a substring.\n    -- Hint: You can use the string.match() function to get\
    \ the first occurrence of a substring.\n    -- Hint: You can use the string.find()\
    \ function to find the position of a substring.\n    -- Hint: You can use the\
    \ string.reverse() function to reverse a string.\n    -- Hint: You can use the\
    \ string.lower() function to convert a string to lowercase.\n    -- Hint: You\
    \ can use the string.upper() function to convert a string to uppercase.\n    --\
    \ Hint: You can use the string.char() function to convert a number to a character.\n\
    \    -- Hint: You can use the string.byte() function to convert a character to\
    \ a number.\n    -- Hint: You can use the string.len() function to get the length\
    \ of a string.\n    -- Hint: You can use the string.format() function to format\
    \ a string.\n    -- Hint: You can use the string.rep() function to repeat a string.\n\
    \    -- Hint: You can use the string.sub() function to get a substring.\n    --\
    \ Hint: You can use the string.gsub() function to replace all occurrences of a\
    \ substring.\n    -- Hint: You", "  local evens = {}\n  local odds = {}\n  for\
    \ _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n\
    \    else\n      table.insert(odds, v)\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  if #evens >= #odds then\n    return \"YES\"\n  else\n\
    \    return \"NO\"\n  end\nend", "  local function is_even(n)\n    return n %\
    \ 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local\
    \ function is_all_even(lst)\n    for _, v in ipairs(lst) do\n      if is_odd(v)\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  local\
    \ function exchange_elements(lst1, lst2)\n    local lst1_odd_idx = {}\n    local\
    \ lst2_even_idx = {}\n    for i, v in ipairs(lst1) do\n      if is_odd(v) then\n\
    \        table.insert(lst1_odd_idx, i)\n      end\n    end\n    for i, v in ipairs(lst2)\
    \ do\n      if is_even(v) then\n        table.insert(lst2_even_idx, i)\n     \
    \ end\n    end\n    if #lst1_odd_idx == 0 or #lst2_even_idx == 0 then\n      return\
    \ false\n    end\n    for _, v in ipairs(lst1_odd_idx) do\n      lst1[v] = lst2[lst2_even_idx[1]]\n\
    \      table.remove(lst2_even_idx, 1)\n    end\n    return true\n  end\n  while\
    \ not is_all_even(lst1) do\n    if not exchange_elements(lst1, lst2) then\n  \
    \    return \"NO\"\n    end\n  end\n  return \"YES\"\nend", "    local function\
    \ is_even(n)\n        return n % 2 == 0\n    end", "  -- TODO: Implement me!\n\
    end", "    local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1) do\n\
    \        if v % 2 == 0 then\n            evens = evens + 1\n        else\n   \
    \         odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 then\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "   \
    \ local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1) do\n     \
    \   if v % 2 == 0 then\n            evens = evens + 1\n        else\n        \
    \    odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n\
    \        if v % 2 == 0 then\n            evens = evens + 1\n        else\n   \
    \         odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 and odds\
    \ % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\n   \
    \ end\nend", "    local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    for _, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "  local function is_even(n)\n    return n % 2 == 0\n\
    \  end\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local function\
    \ exchange_elements(lst1, lst2)\n    local lst1_even = {}\n    local lst1_odd\
    \ = {}\n    local lst2_even = {}\n    local lst2_odd = {}\n    for _, v in ipairs(lst1)\
    \ do\n      if is_even(v) then\n        table.insert(lst1_even, v)\n      else\n\
    \        table.insert(lst1_odd, v)\n      end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n      if is_even(v) then\n        table.insert(lst2_even, v)\n      else\n\
    \        table.insert(lst2_odd, v)\n      end\n    end\n    if #lst1_even == #lst1\
    \ then\n      return true\n    end\n    if #lst1_odd == #lst1 then\n      return\
    \ false\n    end\n    if #lst1_even > #lst2_odd then\n      return false\n   \
    \ end\n    return true\n  end\n  if exchange_elements(lst1, lst2) then\n    return\
    \ \"YES\"\n  else\n    return \"NO\"\n  end\nend", "    local function is_even(n)\n\
    \        return n % 2 == 0\n    end", "    local evens = {}\n    local odds =\
    \ {}\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n          \
    \  table.insert(evens, v)\n        else\n            table.insert(odds, v)\n \
    \       end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n\
    \            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    if #evens >= #odds then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 ~=\
    \ 0\n  end\n  local function exchange_elements(lst1, lst2)\n    local lst1_even\
    \ = lst1:filter(is_even)\n    local lst1_odd = lst1:filter(is_odd)\n    local\
    \ lst2_even = lst2:filter(is_even)\n    local lst2_odd = lst2:filter(is_odd)\n\
    \    local lst1_odd_count = lst1_odd:count()\n    local lst2_even_count = lst2_even:count()\n\
    \    if lst1_odd_count == 0 then\n      return true\n    elseif lst2_even_count\
    \ == 0 then\n      return false\n    elseif lst1_odd_count <= lst2_even_count\
    \ then\n      return true\n    else\n      return false\n    end\n  end\n  if\
    \ exchange_elements(lst1, lst2) then\n    return \"YES\"\n  else\n    return \"\
    NO\"\n  end\nend", "    local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 then\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "   \
    \ local even = {}\n    local odd = {}\n    for _, v in ipairs(lst1) do\n     \
    \   if v % 2 == 0 then\n            table.insert(even, v)\n        else\n    \
    \        table.insert(odd, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n\
    \            table.insert(odd, v)\n        end\n    end\n    if #even >= #odd\
    \ then\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend",
  "  local function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, n\
    \ in ipairs(lst) do\n      if is_odd(n) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_element(lst1, lst2, i)\n      if i > #lst1 then\n\
    \        return is_all_even(lst1)\n      end\n      if is_even(lst1[i]) then\n\
    \        return exchange_element(lst1, lst2, i + 1)\n      end\n      for j =\
    \ 1, #lst2 do\n        if is_even(lst2[j]) then\n          lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n          if exchange_element(lst1, lst2, i + 1) then\n  \
    \          return true\n          end\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \        end\n      end\n      return false\n    end\n    return exchange_element(lst1,\
    \ lst2, 1)\n  end\n  return exchange_elements(lst1, lst2) and \"YES\" or \"NO\"\
    \nend", "    local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    for _, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    local evens, odds = {}, {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    for _, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    local evens = {}\n    local odds = {}\n    for _,\
    \ v in ipairs(lst1) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "  local evens, odds = {}, {}\n  for _, v in ipairs(lst1)\
    \ do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n\
    \      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n\
    \  end\n  return #evens >= #odds and \"YES\" or \"NO\"\nend", "  -- TODO: implement\
    \ the function here\nend", "  local even_numbers = {}\n  local odd_numbers = {}\n\
    \  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      table.insert(even_numbers,\
    \ v)\n    else\n      table.insert(odd_numbers, v)\n    end\n  end\n  for _, v\
    \ in ipairs(lst2) do\n    if v % 2 == 0 then\n      table.insert(even_numbers,\
    \ v)\n    else\n      table.insert(odd_numbers, v)\n    end\n  end\n  if #even_numbers\
    \ >= #odd_numbers then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\n\
    end", "    local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    for _, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    local evens = 0\n    local odds = 0\n    for _,\
    \ v in ipairs(lst1) do\n        if v % 2 == 0 then\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    for\
    \ _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    if\
    \ evens % 2 == 0 and odds % 2 == 0 then\n        return \"YES\"\n    else\n  \
    \      return \"NO\"\n    end\nend", "  local function is_even(n)\n    return\
    \ n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n\
    \  local function is_exchangeable(lst1, lst2)\n    local even_count = 0\n    local\
    \ odd_count = 0\n    for _, n in ipairs(lst1) do\n      if is_even(n) then\n \
    \       even_count = even_count + 1\n      else\n        odd_count = odd_count\
    \ + 1\n      end\n    end\n    for _, n in ipairs(lst2) do\n      if is_even(n)\
    \ then\n        even_count = even_count - 1\n      else\n        odd_count = odd_count\
    \ - 1\n      end\n    end\n    return even_count >= 0 and odd_count >= 0\n  end\n\
    \  return is_exchangeable(lst1, lst2) and \"YES\" or \"NO\"\nend", "    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end", "  -- TODO: Implement\
    \ this function.\nend", "  local function is_even(n)\n    return n % 2 == 0\n\
    \  end\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local function\
    \ exchange_elements(lst1, lst2)\n    local lst1_odd_elements = {}\n    local lst2_even_elements\
    \ = {}\n    for _, v in ipairs(lst1) do\n      if is_odd(v) then\n        table.insert(lst1_odd_elements,\
    \ v)\n      end\n    end\n    for _, v in ipairs(lst2) do\n      if is_even(v)\
    \ then\n        table.insert(lst2_even_elements, v)\n      end\n    end\n    if\
    \ #lst1_odd_elements == #lst2_even_elements then\n      return \"YES\"\n    else\n\
    \      return \"NO\"\n    end\n  end\n  return exchange_elements(lst1, lst2)\n\
    end", "    local evens = 0\n    local odds = 0\n    for i, v in ipairs(lst1) do\n\
    \        if v % 2 == 0 then\n            evens = evens + 1\n        else\n   \
    \         odds = odds + 1\n        end\n    end\n    for i, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    if evens > odds then\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_elements_helper(lst1, lst2, i, j)\n      if i > #lst1\
    \ or j > #lst2 then\n        return lst1, lst2\n      end\n      if is_even(lst1[i])\
    \ then\n        return exchange_elements_helper(lst1, lst2, i + 1, j)\n      elseif\
    \ is_odd(lst2[j]) then\n        return exchange_elements_helper(lst1, lst2, i,\
    \ j + 1)\n      else\n        lst1[i], lst2[j] = lst2[j], lst1[i]\n        return\
    \ exchange_elements_helper(lst1, lst2, i + 1, j + 1)\n      end\n    end\n   \
    \ return exchange_elements_helper(lst1, lst2, 1, 1)\n  end\n  local function all_even(lst)\n\
    \    for _, v in ipairs(lst) do\n      if is_odd(v) then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local lst1, lst2 = exchange_elements(lst1,\
    \ lst2)\n  if all_even(lst1) then\n    return \"YES\"\n  else\n    return \"NO\"\
    \n  end\nend", "    local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 then\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "  --\
    \ TODO: Implement this function\nend", "    local function is_even(n)\n      \
    \  return n % 2 == 0\n    end", "    local even = {}\n    local odd = {}\n   \
    \ for i, v in ipairs(lst1) do\n        if v % 2 == 0 then\n            table.insert(even,\
    \ v)\n        else\n            table.insert(odd, v)\n        end\n    end\n \
    \   for i, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(even,\
    \ v)\n        else\n            table.insert(odd, v)\n        end\n    end\n \
    \   if #even >= #odd then\n        return \"YES\"\n    else\n        return \"\
    NO\"\n    end\nend", "    local even = {}\n    local odd = {}\n    for _, v in\
    \ ipairs(lst1) do\n        if v % 2 == 0 then\n            table.insert(even,\
    \ v)\n        else\n            table.insert(odd, v)\n        end\n    end\n \
    \   for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(even,\
    \ v)\n        else\n            table.insert(odd, v)\n        end\n    end\n \
    \   if #even >= #odd then\n        return \"YES\"\n    else\n        return \"\
    NO\"\n    end\nend", "    local count = 0\n    for _, v in ipairs(lst1) do\n \
    \       if v % 2 == 1 then\n            count = count + 1\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            count\
    \ = count - 1\n        end\n    end\n    if count == 0 then\n        return \"\
    YES\"\n    else\n        return \"NO\"\n    end\nend", "  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 ~=\
    \ 0\n  end\n  local function count_even(lst)\n    local count = 0\n    for _,\
    \ v in ipairs(lst) do\n      if is_even(v) then\n        count = count + 1\n \
    \     end\n    end\n    return count\n  end\n  local function count_odd(lst)\n\
    \    local count = 0\n    for _, v in ipairs(lst) do\n      if is_odd(v) then\n\
    \        count = count + 1\n      end\n    end\n    return count\n  end\n  local\
    \ function exchange_even_odd(lst1, lst2)\n    local even_count = count_even(lst1)\n\
    \    local odd_count = count_odd(lst2)\n    if even_count == #lst1 then\n    \
    \  return true\n    elseif even_count > #lst1 then\n      return false\n    elseif\
    \ even_count + odd_count >= #lst1 then\n      return true\n    else\n      return\
    \ false\n    end\n  end\n  return exchange_even_odd(lst1, lst2) and \"YES\" or\
    \ \"NO\"\nend", "    local lst1_odd = {}\n    local lst2_even = {}\n    for i,\
    \ v in ipairs(lst1) do\n        if v % 2 == 1 then\n            table.insert(lst1_odd,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(lst2_even, v)\n        end\n    end\n  \
    \  if #lst1_odd == #lst2_even then\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\n    end\nend", "    local function is_even(n)\n        return\
    \ n % 2 == 0\n    end", "  local function is_even(n)\n    return n % 2 == 0\n\
    \  end\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local function\
    \ is_all_even(lst)\n    for _, n in ipairs(lst) do\n      if is_odd(n) then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  local function\
    \ exchange_elements(lst1, lst2)\n    local function exchange_element(lst1, lst2,\
    \ i)\n      local n = lst1[i]\n      if is_even(n) then\n        return lst1,\
    \ lst2\n      end\n      for j, m in ipairs(lst2) do\n        if is_even(m) then\n\
    \          lst1[i] = m\n          lst2[j] = n\n          return lst1, lst2\n \
    \       end\n      end\n      return lst1, lst2\n    end\n    for i = 1, #lst1\
    \ do\n      lst1, lst2 = exchange_element(lst1, lst2, i)\n    end\n    return\
    \ lst1, lst2\n  end\n  local function exchange_elements_rec(lst1, lst2)\n    if\
    \ is_all_even(lst1) then\n      return lst1, lst2\n    end\n    local lst1_, lst2_\
    \ = exchange_elements(lst1, lst2)\n    if lst1_ == lst1 then\n      return lst1,\
    \ lst2\n    end\n    return exchange_elements_rec(lst1_, lst2_)\n  end\n  local\
    \ lst1_, lst2_ = exchange_elements_rec(lst1, lst2)\n  if is_all_even(lst1_) then\n\
    \    return \"YES\"\n  end\n  return \"NO\"\nend", "  local evens = {}\n  local\
    \ odds = {}\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ v)\n    else\n      table.insert(odds, v)\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  if #evens >= #odds then\n    return \"YES\"\n  else\n\
    \    return \"NO\"\n  end\nend", "    local function is_even(n)\n        return\
    \ n % 2 == 0\n    end", "  local evens = {}\n  local odds = {}\n  for _, v in\
    \ ipairs(lst1) do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n\
    \      table.insert(odds, v)\n    end\n  end\n  for _, v in ipairs(lst2) do\n\
    \    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  if #evens >= #odds then\n    return \"YES\"\n  else\n\
    \    return \"NO\"\n  end\nend", "    local evens = 0\n    local odds = 0\n  \
    \  for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n            evens\
    \ = evens + 1\n        else\n            odds = odds + 1\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            evens\
    \ = evens + 1\n        else\n            odds = odds + 1\n        end\n    end\n\
    \    if evens % 2 == 0 then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "  local evens = {}\n  local odds = {}\n  for _, v in\
    \ ipairs(lst1) do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n\
    \      table.insert(odds, v)\n    end\n  end\n  for _, v in ipairs(lst2) do\n\
    \    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  if #evens >= #odds then\n    return \"YES\"\n  else\n\
    \    return \"NO\"\n  end\nend", "  local function is_even(n)\n    return n %\
    \ 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local\
    \ function exchange_elements(lst1, lst2)\n    local function exchange_elements_helper(lst1,\
    \ lst2, acc)\n      if #lst1 == 0 then\n        return acc\n      elseif is_even(lst1[1])\
    \ then\n        return exchange_elements_helper(lst1:sub(2), lst2, acc)\n    \
    \  elseif is_odd(lst1[1]) then\n        local index = lst2:find(lst1[1])\n   \
    \     if index then\n          return exchange_elements_helper(lst1:sub(2), lst2:sub(1,\
    \ index - 1) .. lst2:sub(index + 1), acc + 1)\n        else\n          return\
    \ false\n        end\n      end\n    end\n    return exchange_elements_helper(lst1,\
    \ lst2, 0)\n  end\n  local result = exchange_elements(lst1, lst2)\n  if result\
    \ then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  local evens,\
    \ odds = {}, {}\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n     \
    \ table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n  end\n\
    \  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ v)\n    else\n      table.insert(odds, v)\n    end\n  end\n  if #evens >= #odds\
    \ then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "    local\
    \ evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1) do\n        if v\
    \ % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if\
    \ v % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    if evens % 2 == 0 and odds % 2 == 0 then\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "   \
    \ local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n   \
    \     if v % 2 == 0 then\n            table.insert(evens, v)\n        else\n \
    \           table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return \"YES\"\n    else\n        return \"NO\"\n   \
    \ end\nend", "    local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 then\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "   \
    \ local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n   \
    \     if v % 2 == 0 then\n            table.insert(evens, v)\n        else\n \
    \           table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return \"YES\"\n    else\n        return \"NO\"\n   \
    \ end\nend", "    local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    for _, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "  local lst1_odd = {}\n  local lst2_even = {}\n  for\
    \ i, v in ipairs(lst1) do\n    if v % 2 == 1 then\n      table.insert(lst1_odd,\
    \ v)\n    end\n  end\n  for i, v in ipairs(lst2) do\n    if v % 2 == 0 then\n\
    \      table.insert(lst2_even, v)\n    end\n  end\n  if #lst1_odd == 0 or #lst2_even\
    \ == 0 then\n    return \"NO\"\n  end\n  return \"YES\"\nend", "    -- your code\
    \ here\n    local lst1_odd = {}\n    local lst2_even = {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 1 then\n            table.insert(lst1_odd, v)\n    \
    \    end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n\
    \            table.insert(lst2_even, v)\n        end\n    end\n    if #lst1_odd\
    \ == #lst2_even then\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend", "    local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    for _, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "  local function is_even(n)\n    return n % 2 == 0\n\
    \  end\n  local function exchange_elements(lst1, lst2)\n    local function exchange_element(lst1,\
    \ lst2, i)\n      if i > #lst1 then\n        return true\n      end\n      if\
    \ is_even(lst1[i]) then\n        return exchange_element(lst1, lst2, i + 1)\n\
    \      end\n      for j = 1, #lst2 do\n        if is_even(lst2[j]) then\n    \
    \      lst1[i], lst2[j] = lst2[j], lst1[i]\n          if exchange_element(lst1,\
    \ lst2, i + 1) then\n            return true\n          end\n          lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n        end\n      end\n      return false\n   \
    \ end\n    return exchange_element(lst1, lst2, 1)\n  end\n  if exchange_elements(lst1,\
    \ lst2) then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  \
    \  local function is_even(n)\n        return n % 2 == 0\n    end", "  -- TODO:\
    \ implement this function\nend", "    local evens = {}\n    local odds = {}\n\
    \    for i, v in ipairs(lst1) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    for i, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    local lst1_odd = {}\n    local lst2_even = {}\n\
    \    for i, v in ipairs(lst1) do\n        if v % 2 == 1 then\n            table.insert(lst1_odd,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(lst2_even, v)\n        end\n    end\n  \
    \  if #lst1_odd == 0 or #lst2_even == 0 then\n        return \"NO\"\n    end\n\
    \    return \"YES\"\nend", "  -- TODO: Implement this function.\nend", "    local\
    \ even_count = 0\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n\
    \            even_count = even_count + 1\n        end\n    end\n    local odd_count\
    \ = #lst1 - even_count\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0\
    \ then\n            odd_count = odd_count - 1\n        else\n            even_count\
    \ = even_count - 1\n        end\n    end\n    return even_count <= 0 and odd_count\
    \ <= 0 and \"YES\" or \"NO\"\nend", "  -- your code here\n  local even = {}\n\
    \  local odd = {}\n  for i, v in ipairs(lst1) do\n    if v % 2 == 0 then\n   \
    \   table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n\
    \  for i, v in ipairs(lst2) do\n    if v % 2 == 0 then\n      table.insert(even,\
    \ v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  local even_count\
    \ = 0\n  for i, v in ipairs(even) do\n    if v % 2 == 0 then\n      even_count\
    \ = even_count + 1\n    end\n  end\n  if even_count == #even then\n    return\
    \ \"YES\"\n  else\n    return \"NO\"\n  end\nend", "    local evens = {}\n   \
    \ local odds = {}\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n\
    \            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    if #evens >= #odds then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "    local evens = {}\n    local\
    \ odds = {}\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n   \
    \         table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    if #evens >= #odds then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "  -- TODO: Implement this function.\n\
    end", "  -- TODO: Implement this function.\nend", "    local lst1_odd = {}\n \
    \   local lst2_even = {}\n    for _, v in ipairs(lst1) do\n        if v % 2 ==\
    \ 1 then\n            table.insert(lst1_odd, v)\n        end\n    end\n    for\
    \ _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(lst2_even,\
    \ v)\n        end\n    end\n    if #lst1_odd == #lst2_even then\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend", "  local function is_even(x)\n\
    \    return x % 2 == 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local lst1_even = true\n    for _, x in ipairs(lst1) do\n      if not is_even(x)\
    \ then\n        lst1_even = false\n        break\n      end\n    end\n    if lst1_even\
    \ then\n      return true\n    end\n    for i, x in ipairs(lst1) do\n      if\
    \ is_even(x) then\n        for j, y in ipairs(lst2) do\n          if not is_even(y)\
    \ then\n            lst1[i], lst2[j] = lst2[j], lst1[i]\n            if exchange_elements(lst1,\
    \ lst2) then\n              return true\n            end\n            lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n          end\n        end\n      end\n    end\n\
    \    return false\n  end\n  if exchange_elements(lst1, lst2) then\n    return\
    \ \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 ~=\
    \ 0\n  end\n  local function exchange_elements(lst1, lst2)\n    local lst1_even\
    \ = true\n    local lst2_even = true\n    for _, n in ipairs(lst1) do\n      if\
    \ is_odd(n) then\n        lst1_even = false\n        break\n      end\n    end\n\
    \    for _, n in ipairs(lst2) do\n      if is_odd(n) then\n        lst2_even =\
    \ false\n        break\n      end\n    end\n    if lst1_even and lst2_even then\n\
    \      return true\n    end\n    if lst1_even then\n      for i, n in ipairs(lst2)\
    \ do\n        if is_odd(n) then\n          for j, m in ipairs(lst1) do\n     \
    \       if is_even(m) then\n              lst1[j] = n\n              lst2[i] =\
    \ m\n              return exchange_elements(lst1, lst2)\n            end\n   \
    \       end\n        end\n      end\n    elseif lst2_even then\n      for i, n\
    \ in ipairs(lst1) do\n        if is_odd(n) then\n          for j, m in ipairs(lst2)\
    \ do\n            if is_even(m) then\n              lst1[i] = m\n            \
    \  lst2[j] = n\n              return exchange_elements(lst1, lst2)\n         \
    \   end\n          end\n        end\n      end\n    end\n    return false\n  end\n\
    \  if exchange_elements(lst1, lst2) then\n    return \"YES\"\n  else\n    return\
    \ \"NO\"\n  end\nend", "  local function is_even(n)\n    return n % 2 == 0\n \
    \ end\n  local function exchange_elements(lst1, lst2)\n    local lst1_even = true\n\
    \    for _, v in ipairs(lst1) do\n      if not is_even(v) then\n        lst1_even\
    \ = false\n        break\n      end\n    end\n    if lst1_even then\n      return\
    \ true\n    end\n    for i, v in ipairs(lst1) do\n      if not is_even(v) then\n\
    \        for j, w in ipairs(lst2) do\n          if is_even(w) then\n         \
    \   lst1[i], lst2[j] = w, v\n            if exchange_elements(lst1, lst2) then\n\
    \              return true\n            end\n            lst1[i], lst2[j] = v,\
    \ w\n          end\n        end\n      end\n    end\n    return false\n  end\n\
    \  if exchange_elements(lst1, lst2) then\n    return \"YES\"\n  else\n    return\
    \ \"NO\"\n  end\nend", "  local lst1_odd = {}\n  local lst2_even = {}\n  for _,\
    \ v in ipairs(lst1) do\n    if v % 2 == 1 then\n      table.insert(lst1_odd, v)\n\
    \    end\n  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n     \
    \ table.insert(lst2_even, v)\n    end\n  end\n  if #lst1_odd == #lst2_even then\n\
    \    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  local even_count\
    \ = 0\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      even_count\
    \ = even_count + 1\n    end\n  end\n  local odd_count = #lst1 - even_count\n \
    \ local even_count2 = 0\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n\
    \      even_count2 = even_count2 + 1\n    end\n  end\n  local odd_count2 = #lst2\
    \ - even_count2\n  if even_count2 >= odd_count and odd_count2 >= even_count then\n\
    \    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "    local function\
    \ is_even(n)\n        return n % 2 == 0\n    end", "    local function is_even(n)\n\
    \        return n % 2 == 0\n    end", "    local evens = {}\n    local odds =\
    \ {}\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n          \
    \  table.insert(evens, v)\n        else\n            table.insert(odds, v)\n \
    \       end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n\
    \            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    if #evens >= #odds then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "    local evens = 0\n    local\
    \ odds = 0\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n    \
    \        evens = evens + 1\n        else\n            odds = odds + 1\n      \
    \  end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n\
    \            evens = evens + 1\n        else\n            odds = odds + 1\n  \
    \      end\n    end\n    if evens % 2 == 0 and odds % 2 == 0 then\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend", "    local evens =\
    \ {}\n    local odds = {}\n    for i, v in ipairs(lst1) do\n        if v % 2 ==\
    \ 0 then\n            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    if #evens >= #odds then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "    local evens = {}\n    local\
    \ odds = {}\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n   \
    \         table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    if #evens >= #odds then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "    local evens = {}\n    local\
    \ odds = {}\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n   \
    \         table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    if #evens >= #odds then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "    local evens = 0\n    local\
    \ odds = 0\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n    \
    \        evens = evens + 1\n        else\n            odds = odds + 1\n      \
    \  end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n\
    \            evens = evens + 1\n        else\n            odds = odds + 1\n  \
    \      end\n    end\n    if evens % 2 == 0 then\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend", "    local function is_even(n)\n      \
    \  return n % 2 == 0\n    end", "    local function is_even(n)\n        return\
    \ n % 2 == 0\n    end", "    -- TODO: Implement this function.\n    -- Hint: You\
    \ can use the modulo operator (%) to check if a number is even.\n    -- For example:\n\
    \    -- local x = 5\n    -- local y = x % 2 -- y is 1\n    -- local z = 6 % 2\
    \ -- z is 0\n    --\n    -- You can also use the # operator to get the length\
    \ of a list.\n    -- For example:\n    -- local lst = {1, 2, 3, 4}\n    -- local\
    \ len = #lst -- len is 4\n    --\n    -- You can use the table.insert function\
    \ to insert a value into a list.\n    -- For example:\n    -- local lst = {1,\
    \ 2, 3, 4}\n    -- table.insert(lst, 5) -- lst is now {1, 2, 3, 4, 5}\n    --\
    \ table.insert(lst, 2, 6) -- lst is now {1, 6, 2, 3, 4, 5}\n    --\n    -- You\
    \ can use the table.remove function to remove a value from a list.\n    -- For\
    \ example:\n    -- local lst = {1, 2, 3, 4}\n    -- table.remove(lst, 2) -- lst\
    \ is now {1, 3, 4}\n    -- table.remove(lst) -- lst is now {1, 3}\n    --\n  \
    \  -- You can use the table.concat function to concatenate two lists.\n    --\
    \ For example:\n    -- local lst1 = {1, 2, 3, 4}\n    -- local lst2 = {5, 6, 7,\
    \ 8}\n    -- local lst3 = table.concat(lst1, lst2) -- lst3 is now {1, 2, 3, 4,\
    \ 5, 6, 7, 8}\n    --\n    -- You can use the table.sort function to sort a list.\n\
    \    -- For example:\n    -- local lst = {4, 2, 1, 3}\n    -- table.sort(lst)\
    \ -- lst is now {1, 2, 3, 4}\n    --\n    -- You can use the table.unpack function\
    \ to unpack a list.\n", "  local function is_even(n)\n    return n % 2 == 0\n\
    \  end\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local function\
    \ exchange_one(lst1, lst2)\n    local i, j = 1, 1\n    while i <= #lst1 and j\
    \ <= #lst2 do\n      if is_even(lst1[i]) then\n        i = i + 1\n      elseif\
    \ is_odd(lst2[j]) then\n        j = j + 1\n      else\n        lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n        return true\n      end\n    end\n    return false\n\
    \  end\n  while exchange_one(lst1, lst2) do end\n  for _, n in ipairs(lst1) do\n\
    \    if is_odd(n) then\n      return \"NO\"\n    end\n  end\n  return \"YES\"\n\
    end", "    local count = 0\n    for _, v in ipairs(lst1) do\n        if v % 2\
    \ == 1 then\n            count = count + 1\n        end\n    end\n    for _, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            count = count -\
    \ 1\n        end\n    end\n    if count == 0 then\n        return \"YES\"\n  \
    \  else\n        return \"NO\"\n    end\nend", "    local evens = {}\n    local\
    \ odds = {}\n    for i, v in ipairs(lst1) do\n        if v % 2 == 0 then\n   \
    \         table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(evens, v)\n        else\n            table.insert(odds,\
    \ v)\n        end\n    end\n    if #evens >= #odds then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 ~=\
    \ 0\n  end\n  local function exchange_elements(lst1, lst2)\n    local function\
    \ exchange_elements_helper(lst1, lst2, acc)\n      if #lst1 == 0 then\n      \
    \  return acc\n      elseif is_even(lst1[1]) then\n        return exchange_elements_helper(table.unpack(lst1,\
    \ 2))\n      elseif is_odd(lst1[1]) then\n        local lst2_odd_index = table.index_of(lst2,\
    \ is_odd)\n        if lst2_odd_index == nil then\n          return false\n   \
    \     else\n          local lst2_odd = lst2[lst2_odd_index]\n          table.remove(lst2,\
    \ lst2_odd_index)\n          table.insert(lst2, lst1[1])\n          table.remove(lst1,\
    \ 1)\n          table.insert(lst1, lst2_odd)\n          return exchange_elements_helper(lst1,\
    \ lst2, true)\n        end\n      end\n    end\n    return exchange_elements_helper(lst1,\
    \ lst2, false)\n  end\n  if exchange_elements(lst1, lst2) then\n    return \"\
    YES\"\n  else\n    return \"NO\"\n  end\nend", "  -- TODO: Implement this function.\n\
    end", "    local function is_even(n)\n        return n % 2 == 0\n    end", " \
    \   local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1) do\n   \
    \     if v % 2 == 0 then\n            evens = evens + 1\n        else\n      \
    \      odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n\
    \        if v % 2 == 0 then\n            evens = evens + 1\n        else\n   \
    \         odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 and odds\
    \ % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\n   \
    \ end\nend", "  local function is_even(n)\n    return n % 2 == 0\n  end\n  local\
    \ function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local function exchange_elements(lst1,\
    \ lst2)\n    local function exchange_elements_helper(lst1, lst2, acc)\n      if\
    \ #lst1 == 0 then\n        return acc\n      elseif is_even(lst1[1]) then\n  \
    \      return exchange_elements_helper(\n          {table.unpack(lst1, 2)},\n\
    \          lst2,\n          acc\n        )\n      elseif is_odd(lst1[1]) then\n\
    \        local new_lst1 = {table.unpack(lst1, 2)}\n        local new_lst2 = {table.unpack(lst2,\
    \ 2)}\n        local new_acc = {table.unpack(acc)}\n        table.insert(new_acc,\
    \ lst1[1])\n        table.insert(new_acc, lst2[1])\n        return exchange_elements_helper(\n\
    \          new_lst1,\n          new_lst2,\n          new_acc\n        )\n    \
    \  end\n    end\n    return exchange_elements_helper(lst1, lst2, {})\n  end\n\
    \  local exchanged_elements = exchange_elements(lst1, lst2)\n  if #exchanged_elements\
    \ == 0 then\n    return \"NO\"\n  else\n    return \"YES\"\n  end\nend", "  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, n\
    \ in ipairs(lst) do\n      if is_odd(n) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_element(lst1, lst2, i)\n      local n1 = lst1[i]\n\
    \      local n2 = lst2[i]\n      lst1[i] = n2\n      lst2[i] = n1\n    end\n \
    \   for i = 1, #lst1 do\n      if is_even(lst1[i]) then\n        if is_odd(lst2[i])\
    \ then\n          exchange_element(lst1, lst2, i)\n        end\n      else\n \
    \       if is_even(lst2[i]) then\n          exchange_element(lst1, lst2, i)\n\
    \        end\n      end\n    end\n  end\n  exchange_elements(lst1, lst2)\n  if\
    \ is_all_even(lst1) then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\n\
    end", "    local even_count = 0\n    for _, v in ipairs(lst1) do\n        if v\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        end\n    end\n\
    \    local odd_count = #lst1 - even_count\n    for _, v in ipairs(lst2) do\n \
    \       if v % 2 == 0 then\n            odd_count = odd_count - 1\n        else\n\
    \            even_count = even_count - 1\n        end\n    end\n    return even_count\
    \ <= 0 and odd_count <= 0 and \"YES\" or \"NO\"\nend", "    local lst1_odd = {}\n\
    \    local lst2_even = {}\n    for i, v in ipairs(lst1) do\n        if v % 2 ==\
    \ 1 then\n            table.insert(lst1_odd, v)\n        end\n    end\n    for\
    \ i, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(lst2_even,\
    \ v)\n        end\n    end\n    if #lst1_odd == 0 or #lst2_even == 0 then\n  \
    \      return \"NO\"\n    end\n    return \"YES\"\nend", "    local lst1_even\
    \ = true\n    local lst2_even = true\n    for _, v in ipairs(lst1) do\n      \
    \  if v % 2 ~= 0 then\n            lst1_even = false\n            break\n    \
    \    end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 ~= 0 then\n\
    \            lst2_even = false\n            break\n        end\n    end\n    if\
    \ lst1_even and lst2_even then\n        return \"YES\"\n    elseif lst1_even or\
    \ lst2_even then\n        return \"YES\"\n    else\n        return \"NO\"\n  \
    \  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
