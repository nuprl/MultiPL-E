name: HumanEval_110_exchange
language: lua
prompt: "-- In this problem, you will implement a function that takes two lists of\
  \ numbers,\n-- and determines whether it is possible to perform an exchange of elements\n\
  -- between them to make lst1 a list of only even numbers.\n-- There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n-- If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n-- all the elements of\
  \ lst1 to be even, return \"YES\".\n-- Otherwise, return \"NO\".\n-- For example:\n\
  -- It is assumed that the input lists will be non-empty.\nlocal function exchange(lst1,\
  \ lst2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2,\
  \ 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n\
  \    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
  \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
  \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 and\
    \ odds % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend", "    local odd_lst1 = {}\n    local even_lst2 = {}\n    for i,\
    \ v in ipairs(lst1) do\n        if v % 2 == 1 then\n            table.insert(odd_lst1,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(even_lst2, v)\n        end\n    end\n  \
    \  if #odd_lst1 == #even_lst2 then\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\n    end\nend", "    local evens = 0\n    local odds = 0\n   \
    \ for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n            evens =\
    \ evens + 1\n        else\n            odds = odds + 1\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            evens\
    \ = evens + 1\n        else\n            odds = odds + 1\n        end\n    end\n\
    \    if evens % 2 == 0 then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    local function is_even(n)\n        return n % 2\
    \ == 0\n    end", "  local function is_even(n)\n    return n % 2 == 0\n  end\n\
    \  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n\
    \    for _, v in ipairs(lst) do\n      if is_odd(v) then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local function exchange_elements(lst1,\
    \ lst2)\n    local lst1_odd_idx = {}\n    local lst2_even_idx = {}\n    for i,\
    \ v in ipairs(lst1) do\n      if is_odd(v) then\n        table.insert(lst1_odd_idx,\
    \ i)\n      end\n    end\n    for i, v in ipairs(lst2) do\n      if is_even(v)\
    \ then\n        table.insert(lst2_even_idx, i)\n      end\n    end\n    if #lst1_odd_idx\
    \ ~= #lst2_even_idx then\n      return false\n    end\n    for i = 1, #lst1_odd_idx\
    \ do\n      lst1[lst1_odd_idx[i]], lst2[lst2_even_idx[i]] =\n        lst2[lst2_even_idx[i]],\
    \ lst1[lst1_odd_idx[i]]\n    end\n    return true\n  end\n  if is_all_even(lst1)\
    \ then\n    return \"YES\"\n  end\n  if exchange_elements(lst1, lst2) then\n \
    \   return \"YES\"\n  end\n  return \"NO\"\nend", "    local function is_even(n)\n\
    \        return n % 2 == 0\n    end", "  local evens = {}\n  local odds = {}\n\
    \  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ v)\n    else\n      table.insert(odds, v)\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds,\
    \ v)\n    end\n  end\n  local evens_count = #evens\n  local odds_count = #odds\n\
    \  if evens_count >= #lst1 then\n    return \"YES\"\n  elseif evens_count + odds_count\
    \ >= #lst1 then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", " \
    \   -- your code here\nend", "  local function is_even(x)\n    return x % 2 ==\
    \ 0\n  end\n  local function is_odd(x)\n    return x % 2 == 1\n  end\n  local\
    \ function is_all_even(lst)\n    for _, v in ipairs(lst) do\n      if is_odd(v)\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  local\
    \ function is_all_odd(lst)\n    for _, v in ipairs(lst) do\n      if is_even(v)\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  if\
    \ is_all_even(lst1) then\n    return \"YES\"\n  end\n  if is_all_odd(lst2) then\n\
    \    return \"NO\"\n  end\n  for i, v in ipairs(lst1) do\n    if is_odd(v) then\n\
    \      for j, w in ipairs(lst2) do\n        if is_even(w) then\n          lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n          return exchange(lst1, lst2)\n        end\n\
    \      end\n    end\n  end\n  return \"NO\"\nend", "  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 ~=\
    \ 0\n  end\n  local function exchange_elements(lst1, lst2)\n    local function\
    \ exchange_element(lst1, lst2)\n      local function exchange_element_with_odd(lst1,\
    \ lst2)\n        local function exchange_element_with_odd_from_lst2(lst1, lst2)\n\
    \          local function exchange_element_with_odd_from_lst2_with_even(lst1,\
    \ lst2)\n            local function exchange_element_with_odd_from_lst2_with_even_from_lst1(lst1,\
    \ lst2)\n              local function exchange_element_with_odd_from_lst2_with_even_from_lst1_with_odd(lst1,\
    \ lst2)\n                local function exchange_element_with_odd_from_lst2_with_even_from_lst1_with_odd_from_lst2(lst1,\
    \ lst2)\n                  local function exchange_element_with_odd_from_lst2_with_even_from_lst1_with_odd_from_lst2_with_even(lst1,\
    \ lst2)\n                    local function exchange_element_with_odd_from_lst2_with_even_from_lst1_with_odd_from_lst2_with_even_from_lst1(lst1,\
    \ lst2)\n                      local function exchange_element_with_odd_from_lst2_with_even_from_lst1_with_odd_from_lst2_with_even_from_lst1_with_odd(lst1,\
    \ lst2)\n                        local function exchange_element_with_odd_from_lst2_with_even_from_lst1_with_odd_from_lst2_with_even_from_lst1_with_odd_from_lst2(lst1,\
    \ lst2)\n                          local function exchange", "    local function\
    \ is_even(n)\n        return n % 2 == 0\n    end", "  local even = {}\n  local\
    \ odd = {}\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      table.insert(even,\
    \ v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd,\
    \ v)\n    end\n  end\n  if #even >= #odd then\n    return \"YES\"\n  else\n  \
    \  return \"NO\"\n  end\nend", "    local evens = {}\n    local odds = {}\n  \
    \  for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "  local odd1, odd2 = {}, {}\n  for i, v in ipairs(lst1)\
    \ do\n    if v % 2 == 1 then\n      table.insert(odd1, v)\n    end\n  end\n  for\
    \ i, v in ipairs(lst2) do\n    if v % 2 == 1 then\n      table.insert(odd2, v)\n\
    \    end\n  end\n  if #odd1 == #odd2 then\n    return \"YES\"\n  else\n    return\
    \ \"NO\"\n  end\nend", "    local lst1_odd = {}\n    local lst2_even = {}\n  \
    \  for i, v in ipairs(lst1) do\n        if v % 2 == 1 then\n            table.insert(lst1_odd,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(lst2_even, v)\n        end\n    end\n  \
    \  if #lst1_odd == 0 or #lst2_even == 0 then\n        return \"NO\"\n    end\n\
    \    return \"YES\"\nend", "    local lst1_odd = {}\n    local lst2_even = {}\n\
    \    for i, v in ipairs(lst1) do\n        if v % 2 == 1 then\n            table.insert(lst1_odd,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            table.insert(lst2_even, v)\n        end\n    end\n  \
    \  if #lst1_odd == #lst2_even then\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\n    end\nend", "    local function is_even(n)\n        return\
    \ n % 2 == 0\n    end", "    local evens = 0\n    local odds = 0\n    for _, v\
    \ in ipairs(lst1) do\n        if v % 2 == 0 then\n            evens = evens +\
    \ 1\n        else\n            odds = odds + 1\n        end\n    end\n    for\
    \ _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    if\
    \ evens % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\
    \n    end\nend", "    local evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        else\n\
    \            odds = odds + 1\n        end\n    end\n    if evens % 2 == 0 and\
    \ odds % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend", "    local function is_even(n)\n        return n % 2 == 0\n  \
    \  end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
