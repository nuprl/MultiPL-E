language: lua
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal from = 1\n\tlocal to = 1\n\twhile true do\n\t\tfrom,\
    \ to = string.find(string, substring, from, true)\n\t\tif from == nil then\n\t\
    \t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\tfrom = to + 1\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxdwn4vr.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmprxdwn4vr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local index = 1\n    while true do\n        index =\
    \ string:find(substring, index, true)\n        if index == nil then break end\n\
    \        count = count + 1\n        index = index + 1\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile i <= #string do\n\t\tlocal j = string:find(substring,\
    \ i, true)\n\t\tif j then\n\t\t\tcount = count + 1\n\t\t\ti = j + 1\n\t\telse\n\
    \t\t\tbreak\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tfor i in string.gmatch(string, substring) do\n\t\tcount =\
    \ count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq87iyiof.lua:15:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpq87iyiof.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start_index = 1\n    local end_index = string.len(substring)\n\
    \    while true do\n        local index = string.find(string, substring, start_index,\
    \ true)\n        if index == nil then\n            break\n        end\n      \
    \  count = count + 1\n        start_index = index + 1\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local i = 0\n  while true do\n    i = string.find(string,\
    \ substring, i + 1, true)\n    if i == nil then\n      break\n    end\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal index = 0\n\twhile true do\n\t\tindex = string:find(substring,\
    \ index + 1)\n\t\tif index == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal index = string:find(substring,\
    \ start, true)\n\t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart = index + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: -1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start_index = 1\n    while true do\n        local\
    \ start_index, end_index = string.find(string, substring, start_index)\n     \
    \   if start_index == nil then\n            break\n        end\n        count\
    \ = count + 1\n        start_index = end_index + 1\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750347
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\ti = string:find(substring,\
    \ i, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\ti = i + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_index = 1\n\twhile true do\n\t\tlocal index =\
    \ string:find(substring, start_index, true)\n\t\tif not index then\n\t\t\tbreak\n\
    \t\tend\n\t\tcount = count + 1\n\t\tstart_index = index + 1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal index = string:find(substring,\
    \ start, true)\n\t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart = index + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local offset = 1\n    while true do\n        local start_pos,\
    \ end_pos = string.find(string, substring, offset, true)\n        if start_pos\
    \ == nil then\n            break\n        end\n        count = count + 1\n   \
    \     offset = end_pos + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurfn8ort.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpurfn8ort.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local index = 1\n    while true do\n        index =\
    \ string:find(substring, index, true)\n        if index == nil then\n        \
    \    break\n        end\n        count = count + 1\n        index = index + 1\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\ti = string:find(substring,\
    \ i, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\ti = i + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_index = 1\n\twhile true do\n\t\tlocal index =\
    \ string:find(substring, start_index, true)\n\t\tif not index then\n\t\t\tbreak\n\
    \t\tend\n\t\tcount = count + 1\n\t\tstart_index = index + 1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 0\n\twhile true do\n\t\ti = string.find(string,\
    \ substring, i + 1, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount\
    \ = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start_pos = 1\n  while true do\n    local pos = string.find(string,\
    \ substring, start_pos, true)\n    if not pos then\n      break\n    end\n   \
    \ count = count + 1\n    start_pos = pos + 1\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal from = 1\n\tlocal to = 1\n\twhile true do\n\t\tfrom,\
    \ to = string.find(string, substring, from, true)\n\t\tif from == nil then\n\t\
    \t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\tfrom = to + 1\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxdwn4vr.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmprxdwn4vr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal index = string:find(substring,\
    \ start, true)\n\t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart = index + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal s_len = string.len(substring)\n\tlocal s_pos = 1\n\t\
    local s_end = string.len(string)\n\twhile s_pos <= s_end do\n\t\tlocal s, e =\
    \ string.find(string, substring, s_pos, true)\n\t\tif s then\n\t\t\tcount = count\
    \ + 1\n\t\t\ts_pos = s + s_len\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp023ts9na.lua:24:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp023ts9na.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start_pos = 1\n    while true do\n        local\
    \ pos = string.find(string, substring, start_pos, true)\n        if not pos then\n\
    \            break\n        end\n        count = count + 1\n        start_pos\
    \ = pos + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= #string do\n\t\t\
    if string:sub(i, i + #substring - 1) == substring then\n\t\t\tcount = count +\
    \ 1\n\t\t\ti = i + #substring\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsag4zn1.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpjsag4zn1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal from = 1\n\tlocal to = string.len(substring)\n\twhile\
    \ true do\n\t\tlocal found_at = string.find(string, substring, from, true)\n\t\
    \tif found_at == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\tfrom\
    \ = found_at + to\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoovjlq3e.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpoovjlq3e.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local s, e = string.find(string, substring, 1, true)\n \
    \ while s do\n    count = count + 1\n    s, e = string.find(string, substring,\
    \ e + 1, true)\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdiu50wu6.lua:17:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpdiu50wu6.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start = 1\n  while true do\n    local pos = string.find(string,\
    \ substring, start, true)\n    if not pos then\n      break\n    end\n    count\
    \ = count + 1\n    start = pos + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local index = 1\n    while true do\n        index =\
    \ string:find(substring, index, true)\n        if index == nil then\n        \
    \    break\n        end\n        count = count + 1\n        index = index + 1\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile i <= #string do\n\t\tlocal j = string:find(substring,\
    \ i, true)\n\t\tif j then\n\t\t\tcount = count + 1\n\t\t\ti = j + 1\n\t\telse\n\
    \t\t\tbreak\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start_pos = 1\n    while true do\n        local\
    \ pos = string.find(string, substring, start_pos, true)\n        if not pos then\n\
    \            break\n        end\n        count = count + 1\n        start_pos\
    \ = pos + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local last_found = 0\n    while true do\n        local\
    \ found = string.find(string, substring, last_found+1, true)\n        if found\
    \ == nil then break end\n        count = count + 1\n        last_found = found\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local position = 1\n    while true do\n        local\
    \ start, finish = string.find(string, substring, position)\n        if start ==\
    \ nil then\n            break\n        end\n        count = count + 1\n      \
    \  position = finish + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnfajjz6.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmptnfajjz6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\ti = string:find(substring,\
    \ i, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\ti = i + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local last_found = 0\n    while true do\n        local\
    \ found = string.find(string, substring, last_found + 1, true)\n        if found\
    \ == nil then\n            break\n        end\n        count = count + 1\n   \
    \     last_found = found\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\tlocal j = string.find(string,\
    \ substring, i, true)\n\t\tif j then\n\t\t\tcount = count + 1\n\t\t\ti = j + 1\n\
    \t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal index = 0\n\twhile true do\n\t\tindex = string:find(substring,\
    \ index + 1)\n\t\tif index == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal last_found = 0\n\tlocal ssub = string.sub\n\tlocal\
    \ slen = string.len\n\tlocal sfind = string.find\n\twhile true do\n\t\tlast_found\
    \ = sfind(string, substring, last_found + 1, true)\n\t\tif last_found then\n\t\
    \t\tcount = count + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_pos = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start_pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart_pos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_pos = 1\n\twhile true do\n\t\tlocal pos = string.find(string,\
    \ substring, start_pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\t\
    count = count + 1\n\t\tstart_pos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal from = 1\n\twhile true do\n\t\tlocal start_pos, end_pos\
    \ = string.find(string, substring, from)\n\t\tif start_pos == nil then\n\t\t\t\
    break\n\t\tend\n\t\tcount = count + 1\n\t\tfrom = end_pos + 1\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0y6tll8.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpb0y6tll8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local i = 1\n    local j = 1\n    local k = 1\n    local\
    \ l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n\
    \    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local\
    \ u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n\
    \    local z = 1\n    local aa = 1\n    local ab = 1\n    local ac = 1\n    local\
    \ ad = 1\n    local ae = 1\n    local af = 1\n    local ag = 1\n    local ah =\
    \ 1\n    local ai = 1\n    local aj = 1\n    local ak = 1\n    local al = 1\n\
    \    local am = 1\n    local an = 1\n    local ao = 1\n    local ap = 1\n    local\
    \ aq = 1\n    local ar = 1\n    local as = 1\n    local at = 1\n    local au =\
    \ 1\n    local av = 1\n    local aw = 1\n    local ax = 1\n    local ay = 1\n\
    \    local az = 1\n    local ba = 1\n    local bb = 1\n    local bc = 1\n    local\
    \ bd = 1\n    local be = 1\n    local bf = 1\n    local bg = 1\n    local bh =\
    \ 1\n    local bi = 1\n    local bj = 1\n    local bk = 1\n    local bl = 1\n\
    \    local bm = 1\n    local bn = 1\n    local bo = 1\n    local bp = 1\n    local\
    \ bq = 1\n    local br = 1\n    local bs = 1\n    local bt = 1\n    local bu =\
    \ 1\n    local bv = 1\n    local bw = 1\n    local bx = 1\n    local by = 1\n\
    \    local bz = 1\n    local ca = 1\n    local cb = 1\n    local cc = 1\n    local\
    \ cd = 1\n    local ce = 1\n    local cf = 1\n    local cg = 1\n    local ch =\
    \ 1\n    local ci = 1\n    local cj =\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbbv6ymkm.lua:84: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local i = 0\n  while true do\n    i = string.find(string,\
    \ substring, i+1, true)\n    if i == nil then\n      break\n    end\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= #string do\n\t\t\
    if string:sub(i, i + #substring - 1) == substring then\n\t\t\tcount = count +\
    \ 1\n\t\t\ti = i + #substring\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsag4zn1.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpjsag4zn1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local offset = 0\n    while true do\n        local start,\
    \ finish = string.find(string, substring, offset, true)\n        if start == nil\
    \ then\n            break\n        end\n        count = count + 1\n        offset\
    \ = finish + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxuljjpn.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpkxuljjpn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal pos = 1\n\twhile true do\n\t\tpos = string:find(substring,\
    \ pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\tpos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal s, e = string.find(string, substring, 1, true)\n\t\
    while s do\n\t\tcount = count + 1\n\t\ts, e = string.find(string, substring, e\
    \ + 1, true)\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkohbqo9.lua:17:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpqkohbqo9.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal from = 1\n\tlocal to = 1\n\twhile true do\n\t\tfrom,\
    \ to = string.find(string, substring, from, true)\n\t\tif from == nil then\n\t\
    \t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\tfrom = to + 1\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxdwn4vr.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmprxdwn4vr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_pos = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start_pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart_pos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local i = 1\n    local j = 1\n    local k = 1\n    local\
    \ l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n\
    \    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local\
    \ u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n\
    \    local z = 1\n    local aa = 1\n    local ab = 1\n    local ac = 1\n    local\
    \ ad = 1\n    local ae = 1\n    local af = 1\n    local ag = 1\n    local ah =\
    \ 1\n    local ai = 1\n    local aj = 1\n    local ak = 1\n    local al = 1\n\
    \    local am = 1\n    local an = 1\n    local ao = 1\n    local ap = 1\n    local\
    \ aq = 1\n    local ar = 1\n    local as = 1\n    local at = 1\n    local au =\
    \ 1\n    local av = 1\n    local aw = 1\n    local ax = 1\n    local ay = 1\n\
    \    local az = 1\n    local ba = 1\n    local bb = 1\n    local bc = 1\n    local\
    \ bd = 1\n    local be = 1\n    local bf = 1\n    local bg = 1\n    local bh =\
    \ 1\n    local bi = 1\n    local bj = 1\n    local bk = 1\n    local bl = 1\n\
    \    local bm = 1\n    local bn = 1\n    local bo = 1\n    local bp = 1\n    local\
    \ bq = 1\n    local br = 1\n    local bs = 1\n    local bt = 1\n    local bu =\
    \ 1\n    local bv = 1\n    local bw = 1\n    local bx = 1\n    local by = 1\n\
    \    local bz = 1\n    local ca = 1\n    local cb = 1\n    local cc = 1\n    local\
    \ cd = 1\n    local ce = 1\n    local cf = 1\n    local cg = 1\n    local ch =\
    \ 1\n    local ci = 1\n    local cj =\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbbv6ymkm.lua:84: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\ti = string:find(substring,\
    \ i, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\ti = i + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local i = 0\n    while true do\n        i = string.find(string,\
    \ substring, i + 1, true)\n        if i == nil then break end\n        count =\
    \ count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal last_found = 0\n\twhile true do\n\t\tlast_found = string:find(substring,\
    \ last_found + 1, true)\n\t\tif last_found == nil then\n\t\t\tbreak\n\t\tend\n\
    \t\tcount = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal last_found = 0\n\twhile true do\n\t\tlast_found = string:find(substring,\
    \ last_found + 1, true)\n\t\tif last_found == nil then\n\t\t\tbreak\n\t\tend\n\
    \t\tcount = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start_pos = 1\n    while true do\n        local\
    \ pos = string.find(string, substring, start_pos, true)\n        if not pos then\n\
    \            break\n        end\n        count = count + 1\n        start_pos\
    \ = pos + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal index = 1\n\twhile true do\n\t\tindex = string:find(substring,\
    \ index, true)\n\t\tif index == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tindex = index + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local i = 1\n    while true do\n        local j = string.find(string,\
    \ substring, i, true)\n        if j == nil then\n            break\n        end\n\
    \        count = count + 1\n        i = j + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal pos = 1\n\twhile true do\n\t\tpos = string:find(substring,\
    \ pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\tpos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start = 1\n  while true do\n    local pos = string.find(string,\
    \ substring, start, true)\n    if not pos then break end\n    count = count +\
    \ 1\n    start = pos + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start_index = 1\n    local end_index = string.len(substring)\n\
    \    while true do\n        local index = string.find(string, substring, start_index,\
    \ true)\n        if index == nil then\n            break\n        end\n      \
    \  count = count + 1\n        start_index = index + 1\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local from = 1\n    local to = #substring\n    while\
    \ true do\n        local start_pos, end_pos = string:find(substring, from, true)\n\
    \        if start_pos == nil then\n            break\n        end\n        count\
    \ = count + 1\n        from = end_pos + 1\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooo9s0dk.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpooo9s0dk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then break end\n\t\tcount = count + 1\n\t\tstart\
    \ = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start = 1\n  while true do\n    local pos = string.find(string,\
    \ substring, start, true)\n    if not pos then\n      break\n    end\n    count\
    \ = count + 1\n    start = pos + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    local from, to = string.find(string,\
    \ substring, start)\n    while from do\n        count = count + 1\n        start\
    \ = to + 1\n        from, to = string.find(string, substring, start)\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rkgkgma.lua:19:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp7rkgkgma.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local i = 0\n  while true do\n    i = string.find(string,\
    \ substring, i + 1, true)\n    if i == nil then\n      break\n    end\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local pos = 1\n    while true do\n        pos = string:find(substring,\
    \ pos, true)\n        if not pos then\n            break\n        end\n      \
    \  count = count + 1\n        pos = pos + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local index = 1\n    while true do\n        index =\
    \ string:find(substring, index, true)\n        if index == nil then\n        \
    \    break\n        end\n        count = count + 1\n        index = index + 1\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start = 1\n  while true do\n    local pos = string.find(string,\
    \ substring, start, true)\n    if not pos then break end\n    count = count +\
    \ 1\n    start = pos + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local i = 1\n  while true do\n    i = string.find(string,\
    \ substring, i, true)\n    if i == nil then\n      break\n    end\n    count =\
    \ count + 1\n    i = i + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal found = string.find(string,\
    \ substring, start, true)\n\t\tif found then\n\t\t\tcount = count + 1\n\t\t\t\
    start = found + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= #string do\n\t\t\
    if string:sub(i, i + #substring - 1) == substring then\n\t\t\tcount = count +\
    \ 1\n\t\t\ti = i + #substring\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsag4zn1.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpjsag4zn1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local offset = 0\n    while true do\n        local start_pos,\
    \ end_pos = string.find(string, substring, offset, true)\n        if start_pos\
    \ == nil then\n            break\n        end\n        count = count + 1\n   \
    \     offset = end_pos + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauam54br.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpauam54br.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local last_found = 0\n    while true do\n        local\
    \ found = string.find(string, substring, last_found+1, true)\n        if found\
    \ == nil then break end\n        count = count + 1\n        last_found = found\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start_pos = 1\n    while true do\n        local\
    \ pos = string.find(string, substring, start_pos, true)\n        if not pos then\n\
    \            break\n        end\n        count = count + 1\n        start_pos\
    \ = pos + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\ti = string:find(substring,\
    \ i, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\ti = i + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start = 1\n  while true do\n    local index = string:find(substring,\
    \ start, true)\n    if not index then\n      break\n    end\n    count = count\
    \ + 1\n    start = index + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\ti = string:find(substring,\
    \ i, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\ti = i + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local i = 1\n    while true do\n        local j = string.find(string,\
    \ substring, i, true)\n        if j == nil then\n            break\n        end\n\
    \        count = count + 1\n        i = j + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start = 1\n  while true do\n    local pos = string.find(string,\
    \ substring, start, true)\n    if not pos then break end\n    count = count +\
    \ 1\n    start = pos + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then break end\n \
    \       count = count + 1\n        start = pos + 1\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local from = 1\n    local to = string.len(substring)\n\
    \    while from <= string.len(string) do\n        local found = string.find(string,\
    \ substring, from, true)\n        if found ~= nil then\n            count = count\
    \ + 1\n            from = found + to\n        else\n            break\n      \
    \  end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnujp3ti8.lua:23:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpnujp3ti8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local index = 0\n    local start_index = 0\n    while\
    \ index do\n        index = string:find(substring, start_index, true)\n      \
    \  if index then\n            count = count + 1\n            start_index = index\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local i = 1\n    while i <= #string do\n        local\
    \ j = string.find(string, substring, i, true)\n        if j == nil then\n    \
    \        break\n        end\n        count = count + 1\n        i = j + 1\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local i = 1\n    while i <= #string do\n        local\
    \ j = string.find(string, substring, i, true)\n        if j == nil then\n    \
    \        break\n        end\n        count = count + 1\n        i = j + 1\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\tlocal j = string.find(string,\
    \ substring, i, true)\n\t\tif j == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount =\
    \ count + 1\n\t\ti = j + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local pos = 1\n    while true do\n        local found_pos\
    \ = string:find(substring, pos, true)\n        if not found_pos then\n       \
    \     break\n        end\n        count = count + 1\n        pos = found_pos +\
    \ 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local i = 1\n    while i <= #string do\n        local\
    \ j = string.find(string, substring, i, true)\n        if j == nil then\n    \
    \        break\n        end\n        count = count + 1\n        i = j + 1\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start_pos = 1\n  local end_pos = string.len(substring)\n\
    \  while true do\n    local pos = string.find(string, substring, start_pos, true)\n\
    \    if not pos then\n      break\n    end\n    count = count + 1\n    start_pos\
    \ = pos + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 0\n\twhile true do\n\t\ti = string:find(substring,\
    \ i + 1)\n\t\tif i == nil then break end\n\t\tcount = count + 1\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local from = 1\n    local to = string.len(substring)\n\
    \    while from <= string.len(string) do\n        local found = string.find(string,\
    \ substring, from, true)\n        if found then\n            count = count + 1\n\
    \            from = found + to\n        else\n            break\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporwwxn7d.lua:23:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmporwwxn7d.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tfor i = 1, #string - #substring + 1 do\n\t\tif string:sub(i,\
    \ i + #substring - 1) == substring then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_pos = 1\n\twhile true do\n\t\tlocal pos = string.find(string,\
    \ substring, start_pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\t\
    count = count + 1\n\t\tstart_pos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local from = 1\n    local to = 1\n    while true do\n\
    \        from, to = string.find(string, substring, from, true)\n        if from\
    \ == nil then\n            break\n        end\n        count = count + 1\n   \
    \     from = to + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qgtwq0s.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp3qgtwq0s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal pos = 1\n\twhile true do\n\t\tpos = string:find(substring,\
    \ pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\tpos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i + #substring\
    \ - 1) == substring then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start_index = 1\n  while true do\n    local index\
    \ = string.find(string, substring, start_index, true)\n    if index == nil then\n\
    \      break\n    end\n    count = count + 1\n    start_index = index + 1\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local last_found = 0\n  while true do\n    local found =\
    \ string.find(string, substring, last_found+1, true)\n    if found == nil then\
    \ break end\n    count = count + 1\n    last_found = found\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local index\
    \ = string:find(substring, start, true)\n        if not index then\n         \
    \   break\n        end\n        count = count + 1\n        start = index + 1\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then break end\n \
    \       count = count + 1\n        start = pos + 1\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: -1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_index = 1\n\twhile true do\n\t\tlocal start_index,\
    \ end_index = string.find(string, substring, start_index)\n\t\tif start_index\
    \ == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\tstart_index =\
    \ end_index + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750347
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start_pos = 1\n    while true do\n        local\
    \ pos = string.find(string, substring, start_pos, true)\n        if not pos then\n\
    \            break\n        end\n        count = count + 1\n        start_pos\
    \ = pos + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal index = string:find(substring,\
    \ start, true)\n\t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart = index + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start = 1\n  while true do\n    local pos = string.find(string,\
    \ substring, start, true)\n    if not pos then\n      break\n    end\n    count\
    \ = count + 1\n    start = pos + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start = 1\n  while true do\n    local pos = string.find(string,\
    \ substring, start, true)\n    if not pos then break end\n    count = count +\
    \ 1\n    start = pos + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal index = string:find(substring,\
    \ start, true)\n\t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart = index + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_pos = 1\n\twhile true do\n\t\tlocal pos = string.find(string,\
    \ substring, start_pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\t\
    count = count + 1\n\t\tstart_pos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_pos = 1\n\twhile true do\n\t\tlocal pos = string.find(string,\
    \ substring, start_pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\t\
    count = count + 1\n\t\tstart_pos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal pos = 1\n\twhile true do\n\t\tpos = string:find(substring,\
    \ pos, true)\n\t\tif not pos then break end\n\t\tcount = count + 1\n\t\tpos =\
    \ pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal index = string:find(substring,\
    \ start, true)\n\t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart = index + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local pos = 1\n    while true do\n        pos = string:find(substring,\
    \ pos, true)\n        if not pos then\n            break\n        end\n      \
    \  count = count + 1\n        pos = pos + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local i = 1\n    while true do\n        local j = string.find(string,\
    \ substring, i, true)\n        if j == nil then\n            break\n        end\n\
    \        count = count + 1\n        i = j + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start = 1\n  while true do\n    local pos = string.find(string,\
    \ substring, start, true)\n    if not pos then\n      break\n    end\n    count\
    \ = count + 1\n    start = pos + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local last_found = 0\n    while true do\n        local\
    \ found = string.find(string, substring, last_found + 1, true)\n        if found\
    \ == nil then\n            break\n        end\n        count = count + 1\n   \
    \     last_found = found\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile i <= #string do\n\t\tlocal j = string:find(substring,\
    \ i, true)\n\t\tif j then\n\t\t\tcount = count + 1\n\t\t\ti = j + 1\n\t\telse\n\
    \t\t\tbreak\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\tlocal start_index = string.find(string,\
    \ substring, i, true)\n\t\tif start_index == nil then\n\t\t\tbreak\n\t\tend\n\t\
    \tcount = count + 1\n\t\ti = start_index + 1\n\tend\n\treturn count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start = 1\n  while true do\n    local pos = string.find(string,\
    \ substring, start, true)\n    if not pos then\n      break\n    end\n    count\
    \ = count + 1\n    start = pos + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start = 1\n  while true do\n    local pos = string.find(string,\
    \ substring, start, true)\n    if not pos then\n      break\n    end\n    count\
    \ = count + 1\n    start = pos + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 0\n\twhile true do\n\t\ti = string.find(string,\
    \ substring, i + 1, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount\
    \ = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\tlocal j = string.find(string,\
    \ substring, i, true)\n\t\tif j == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount =\
    \ count + 1\n\t\ti = j + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_pos = 1\n\twhile true do\n\t\tlocal pos = string.find(string,\
    \ substring, start_pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\t\
    count = count + 1\n\t\tstart_pos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then break end\n\t\tcount = count + 1\n\t\tstart\
    \ = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local i = 0\n  while true do\n    i = string.find(string,\
    \ substring, i + 1, true)\n    if i == nil then\n      break\n    end\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal last_index = 0\n\twhile true do\n\t\tlocal index =\
    \ string:find(substring, last_index + 1, true)\n\t\tif not index then\n\t\t\t\
    break\n\t\tend\n\t\tcount = count + 1\n\t\tlast_index = index\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_pos = 1\n\twhile true do\n\t\tlocal pos = string.find(string,\
    \ substring, start_pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\t\
    count = count + 1\n\t\tstart_pos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_index = 1\n\twhile true do\n\t\tlocal index =\
    \ string:find(substring, start_index, true)\n\t\tif not index then\n\t\t\tbreak\n\
    \t\tend\n\t\tcount = count + 1\n\t\tstart_index = index + 1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal from = 1\n\twhile true do\n\t\tlocal start, finish\
    \ = string.find(string, substring, from, true)\n\t\tif start == nil then\n\t\t\
    \tbreak\n\t\tend\n\t\tcount = count + 1\n\t\tfrom = finish + 1\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalay93li.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpalay93li.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local i = 1\n    while i <= #string do\n        local\
    \ j = string.find(string, substring, i, true)\n        if j == nil then\n    \
    \        break\n        end\n        count = count + 1\n        i = j + 1\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local offset = 1\n  while true do\n    local start, stop\
    \ = string.find(string, substring, offset, true)\n    if start == nil then\n \
    \     break\n    end\n    count = count + 1\n    offset = stop + 1\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rqwt7bt.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp0rqwt7bt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local last_found = 0\n  while true do\n    last_found =\
    \ string:find(substring, last_found + 1, true)\n    if last_found == nil then\n\
    \      break\n    end\n    count = count + 1\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 0\n\twhile true do\n\t\ti = string.find(string,\
    \ substring, i + 1, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount\
    \ = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    local from, to = string.find(string,\
    \ substring, start)\n    while from do\n        count = count + 1\n        start\
    \ = to + 1\n        from, to = string.find(string, substring, start)\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rkgkgma.lua:19:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp7rkgkgma.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local i = 1\n    local j = 1\n    local len_string =\
    \ string.len(string)\n    local len_substring = string.len(substring)\n    while\
    \ i <= len_string do\n        if string.sub(string, i, i + len_substring - 1)\
    \ == substring then\n            count = count + 1\n            i = i + len_substring\n\
    \        else\n            i = i + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7ljcvge.lua:24:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpy7ljcvge.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal index = 1\n\twhile true do\n\t\tlocal i, j = string.find(string,\
    \ substring, index, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount\
    \ = count + 1\n\t\tindex = j + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkg413a0.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmppkg413a0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 0\n\twhile true do\n\t\ti = string:find(substring,\
    \ i + 1)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local last_found = 0\n    while true do\n        local\
    \ found = string.find(string, substring, last_found + 1, true)\n        if found\
    \ == nil then\n            break\n        end\n        count = count + 1\n   \
    \     last_found = found\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local index = 1\n    while true do\n        index =\
    \ string:find(substring, index, true)\n        if index == nil then\n        \
    \    break\n        end\n        count = count + 1\n        index = index + 1\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal position = string:find(substring,\
    \ start, true)\n\t\tif not position then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart = position + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal index = string:find(substring,\
    \ start, true)\n\t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart = index + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local index = 1\n    while true do\n        index =\
    \ string:find(substring, index, true)\n        if index == nil then\n        \
    \    break\n        end\n        count = count + 1\n        index = index + 1\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\ti = string:find(substring,\
    \ i, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\ti = i + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal index = string:find(substring,\
    \ start, true)\n\t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart = index + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_pos = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start_pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count\
    \ + 1\n\t\tstart_pos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start_pos = 1\n    while true do\n        local\
    \ pos = string.find(string, substring, start_pos, true)\n        if not pos then\n\
    \            break\n        end\n        count = count + 1\n        start_pos\
    \ = pos + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local pos = 1\n    while true do\n        pos = string:find(substring,\
    \ pos, true)\n        if not pos then\n            break\n        end\n      \
    \  count = count + 1\n        pos = pos + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal pos = 1\n\twhile true do\n\t\tpos = string:find(substring,\
    \ pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\tpos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal from = 1\n\tlocal to = 1\n\twhile true do\n\t\tfrom,\
    \ to = string.find(string, substring, from, true)\n\t\tif from == nil then\n\t\
    \t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\tfrom = to + 1\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxdwn4vr.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmprxdwn4vr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local index = 1\n  while true do\n    index = string:find(substring,\
    \ index, true)\n    if index == nil then\n      break\n    end\n    count = count\
    \ + 1\n    index = index + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local start = 1\n  local from, to = string.find(string,\
    \ substring, start)\n  while from do\n    count = count + 1\n    start = to +\
    \ 1\n    from, to = string.find(string, substring, start)\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4o59zjm8.lua:19:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp4o59zjm8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local i = 1\n  while true do\n    local j = string.find(string,\
    \ substring, i, true)\n    if j == nil then\n      break\n    end\n    count =\
    \ count + 1\n    i = j + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal pos = 1\n\twhile true do\n\t\tpos = string:find(substring,\
    \ pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\tpos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local pos = 1\n    while true do\n        pos = string:find(substring,\
    \ pos, true)\n        if not pos then\n            break\n        end\n      \
    \  count = count + 1\n        pos = pos + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_pos = 1\n\twhile true do\n\t\tlocal pos = string.find(string,\
    \ substring, start_pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\t\
    count = count + 1\n\t\tstart_pos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\ti = string:find(substring,\
    \ i, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\ti = i + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal pos = 1\n\twhile true do\n\t\tpos = string:find(substring,\
    \ pos, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\tpos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 0\n\twhile true do\n\t\ti = string:find(substring,\
    \ i + 1)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile i <= #string do\n\t\tlocal j = string:find(substring,\
    \ i, true)\n\t\tif j then\n\t\t\tcount = count + 1\n\t\t\ti = j + 1\n\t\telse\n\
    \t\t\tbreak\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        local pos\
    \ = string:find(substring, start, true)\n        if not pos then\n           \
    \ break\n        end\n        count = count + 1\n        start = pos + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal from = 1\n\tlocal to = string.len(substring)\n\twhile\
    \ (from <= string.len(string)) do\n\t\tlocal found = string.find(string, substring,\
    \ from, true)\n\t\tif (found ~= nil) then\n\t\t\tcount = count + 1\n\t\t\tfrom\
    \ = found + to\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6zk3094.lua:23:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp_6zk3094.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
