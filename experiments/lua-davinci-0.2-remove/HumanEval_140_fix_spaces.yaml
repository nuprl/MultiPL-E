name: HumanEval_140_fix_spaces
language: lua
prompt: "-- Given a string text, replace all spaces in it with underscores, \n-- and\
  \ if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
  \ spaces with -\nlocal function fix_spaces(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
  \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
  \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
  \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
  \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return string.gsub(text, \" +\", function(s)\n        if string.len(s)\
    \ > 2 then\n            return \"-\"\n        else\n            return \"_\"\n\
    \        end\n    end)\nend", "\tlocal res = string.gsub(text, \"  +\", \" \"\
    )\n\tres = string.gsub(res, \" \", \"_\")\n\treturn res\nend", "    return string.gsub(text,\
    \ \" +\", \" \"):gsub(\" \", \"_\")\nend", "    local new_text = text:gsub(\"\
    %s+\", \" \")\n    new_text = new_text:gsub(\"%s\", \"_\")\n    return new_text\n\
    end", "    return text:gsub(\"%s+\", function(s)\n        if #s > 2 then\n   \
    \         return \"-\"\n        else\n            return \"_\"\n        end\n\
    \    end)\nend", "    local result = text:gsub(\"%s+\", \"_\")\n    result = result:gsub(\"\
    _+\", \"-\")\n    return result\nend", "    local result = text:gsub(\"%s+\",\
    \ \"_\")\n    result = result:gsub(\"_+\", \"-\")\n    return result\nend", " \
    \   local new_text = text:gsub(\"%s+\", \"_\")\n    new_text = new_text:gsub(\"\
    _+\", \"-\")\n    return new_text\nend", "    local res = text:gsub(\"%s+\", \"\
    _\")\n    res = res:gsub(\"_+\", \"-\")\n    return res\nend", "    local result\
    \ = text:gsub(\"%s+\", \" \")\n    result = result:gsub(\"%s\", \"_\")\n    return\
    \ result\nend", "    if text then\n        text = string.gsub(text, \" +\", \"\
    \ \")\n        text = string.gsub(text, \" \", \"_\")\n        text = string.gsub(text,\
    \ \" \", \"-\")\n        return text\n    end\nend", "    local res = text:gsub(\"\
    %s+\", \"_\")\n    res = res:gsub(\"_+\", \"-\")\n    return res\nend", "  local\
    \ result = text:gsub(\"%s+\", \"_\")\n  result = result:gsub(\"_+\", \"-\")\n\
    \  return result\nend", "    local result = text:gsub(\"%s+\", \"_\")\n    result\
    \ = result:gsub(\"_+\", \"-\")\n    return result\nend", "    local res = text:gsub(\"\
    %s+\", \"_\")\n    res = res:gsub(\"_+\", \"-\")\n    return res\nend", "    local\
    \ result = text:gsub(\"%s+\", \"_\")\n    result = result:gsub(\"_+\", \"-\")\n\
    \    return result\nend", "    if not text then return end\n    text = text:gsub(\"\
    %s+\", \" \")\n    text = text:gsub(\" \", \"_\")\n    text = text:gsub(\"_+\"\
    , \"-\")\n    return text\nend", "    local result = text:gsub(\"%s+\", \"_\"\
    )\n    result = result:gsub(\"_+\", \"-\")\n    return result\nend", "    text\
    \ = text:gsub(\"%s+\", \" \")\n    text = text:gsub(\"%s\", \"_\")\n    return\
    \ text\nend", "    local new_text = string.gsub(text, \" \", \"_\")\n    new_text\
    \ = string.gsub(new_text, \"__\", \"_\")\n    new_text = string.gsub(new_text,\
    \ \"__\", \"_\")\n    new_text = string.gsub(new_text, \"__\", \"_\")\n    new_text\
    \ = string.gsub(new_text, \"__\", \"_\")\n    new_text = string.gsub(new_text,\
    \ \"__\", \"_\")\n    new_text = string.gsub(new_text, \"__\", \"_\")\n    new_text\
    \ = string.gsub(new_text, \"__\", \"_\")\n    new_text = string.gsub(new_text,\
    \ \"__\", \"_\")\n    new_text = string.gsub(new_text, \"__\", \"_\")\n    new_text\
    \ = string.gsub(new_text, \"__\", \"_\")\n    new_text = string.gsub(new_text,\
    \ \"__\", \"_\")\n    new_text = string.gsub(new_text, \"__\", \"_\")\n    new_text\
    \ = string.gsub(new_text, \"__\", \"_\")\n    new_text = string.gsub(new_text,\
    \ \"__\", \"_\")\n    new_text = string.gsub(new_text, \"__\", \"_\")\n    new_text\
    \ = string.gsub(new_text, \"__\", \"_\")\n    new_text = string.gsub(new_text,\
    \ \"__\", \"_\")\n    new_text = string.gsub(new_text, \"__\", \"_\")\n    new_text\
    \ = string.gsub(new_text, \"__\", \"_\")\n    new_text = string.gsub(new_text,\
    \ \"__\", \"_\")\n    new_text = string.gsub(new_text, \"__\", \"_\")\n    new_text\
    \ = string.gsub(new_text, \"__\", \"_\")\n    new_text = string.gsub(new_text,\
    \ \"__\", \"_\")\n    new_text = string.gsub(new_text, \"__\", \"_\")\n    new_text\
    \ = string.gsub(new_text"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
