language: lua
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    while\
    \ v > 0 do\n      local digit = v % 10\n      if digit % 2 == 0 then\n       \
    \ has_even = true\n        break\n      end\n      v = math.floor(v / 10)\n  \
    \  end\n    if not has_even then\n      table.insert(result, v)\n    end\n  end\n\
    \  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4er_z29.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpn4er_z29.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do\n    local num = x[i]\n    local unique = true\n\
    \    while num > 0 do\n      local digit = num % 10\n      if digit % 2 == 0 then\n\
    \        unique = false\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if unique then\n      table.insert(result, x[i])\n    end\n\
    \  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ has_even = false\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                has_even = true\n  \
    \              break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, x[i])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        for d in tostring(v):gmatch(\"%d\") do\n            if tonumber(d) %\
    \ 2 == 0 then\n                has_even = true\n                break\n      \
    \      end\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local n = x[i]\n        local even\
    \ = false\n        while n > 0 do\n            local d = n % 10\n            if\
    \ d % 2 == 0 then\n                even = true\n                break\n      \
    \      end\n            n = math.floor(n / 10)\n        end\n        if not even\
    \ then\n            t[#t + 1] = x[i]\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local digit = v % 10\n            if digit\
    \ % 2 == 0 then\n                has_even = true\n                break\n    \
    \        end\n            v = math.floor(v / 10)\n        end\n        if not\
    \ has_even then\n            table.insert(result, v)\n        end\n    end\n \
    \   table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4du2jea.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpz4du2jea.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local ok\
    \ = true\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        ok = false\n        break\n      end\n    end\n    if ok then\n     \
    \ res[#res + 1] = v\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        for c in tostring(v):gmatch('.') do\n            if tonumber(c) % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local ok\
    \ = true\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        ok = false\n        break\n      end\n    end\n    if ok then\n     \
    \ t[#t + 1] = v\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do\n    local num = x[i]\n    local has_even =\
    \ false\n    while num > 0 do\n      local digit = num % 10\n      if digit %\
    \ 2 == 0 then\n        has_even = true\n        break\n      end\n      num =\
    \ math.floor(num / 10)\n    end\n    if not has_even then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local ok = true\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                ok = false\n                break\n     \
    \       end\n        end\n        if ok then\n            t[#t + 1] = v\n    \
    \    end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_az_mlq.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpp_az_mlq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_az_mlq.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpp_az_mlq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local s = tostring(x[i])\n     \
    \   local ok = true\n        for j = 1, #s do\n            if s:sub(j, j) % 2\
    \ == 0 then\n                ok = false\n                break\n            end\n\
    \        end\n        if ok then\n            t[#t + 1] = x[i]\n        end\n\
    \    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ is_unique = true\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                is_unique = false\n\
    \                break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if is_unique then\n            res[#res + 1] = x[i]\n  \
    \      end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local found = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                found = true\n                break\n   \
    \         end\n        end\n        if not found then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local s = tostring(x[i])\n    local even = false\n\
    \    for j = 1, #s do\n      if tonumber(s:sub(j, j)) % 2 == 0 then\n        even\
    \ = true\n        break\n      end\n    end\n    if not even then\n      t[#t\
    \ + 1] = x[i]\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local n = x[i]\n        local even\
    \ = false\n        while n > 0 do\n            local d = n % 10\n            if\
    \ d % 2 == 0 then\n                even = true\n                break\n      \
    \      end\n            n = math.floor(n / 10)\n        end\n        if not even\
    \ then\n            t[#t + 1] = x[i]\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        for d in tostring(v):gmatch('%d') do\n            if tonumber(d) % 2\
    \ == 0 then\n                has_even = true\n                break\n        \
    \    end\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ is_odd = true\n        while num > 0 do\n            local digit = num % 10\n\
    \            if digit % 2 == 0 then\n                is_odd = false\n        \
    \        break\n            end\n            num = math.floor(num / 10)\n    \
    \    end\n        if is_odd then\n            res[#res + 1] = x[i]\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local ok\
    \ = true\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        ok = false\n        break\n      end\n    end\n    if ok then\n     \
    \ t[#t + 1] = v\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local ok\
    \ = true\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        ok = false\n        break\n      end\n    end\n    if ok then\n     \
    \ res[#res + 1] = v\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ has_even = false\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                has_even = true\n  \
    \              break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local s = tostring(x[i])\n    local has_even\
    \ = false\n    for j = 1, #s do\n      if tonumber(s:sub(j, j)) % 2 == 0 then\n\
    \        has_even = true\n        break\n      end\n    end\n    if not has_even\
    \ then\n      t[#t + 1] = x[i]\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplux61tu4.lua:26:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmplux61tu4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local digits = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        for d in tostring(v):gmatch(\"%d\") do\n            if tonumber(d) %\
    \ 2 == 0 then\n                has_even = true\n                break\n      \
    \      end\n        end\n        if not has_even then\n            table.insert(digits,\
    \ v)\n        end\n    end\n    table.sort(digits)\n    return digits\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local s = tostring(x[i])\n     \
    \   local even = false\n        for j = 1, #s do\n            if tonumber(s:sub(j,\
    \ j)) % 2 == 0 then\n                even = true\n                break\n    \
    \        end\n        end\n        if not even then\n            t[#t + 1] = x[i]\n\
    \        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _, v in ipairs(x) do\n    local str = tostring(v)\n    local\
    \ has_even = false\n    for i = 1, #str do\n      if tonumber(str:sub(i, i)) %\
    \ 2 == 0 then\n        has_even = true\n        break\n      end\n    end\n  \
    \  if not has_even then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local s = tostring(x[i])\n     \
    \   local even = false\n        for j = 1, #s do\n            if tonumber(s:sub(j,\
    \ j)) % 2 == 0 then\n                even = true\n                break\n    \
    \        end\n        end\n        if not even then\n            t[#t + 1] = x[i]\n\
    \        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        if not s:find('[02468]') then\n            table.insert(res, v)\n   \
    \     end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_az_mlq.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpp_az_mlq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _, v in ipairs(x) do\n    local is_unique = true\n    for\
    \ i = 1, #tostring(v) do\n      if tonumber(tostring(v):sub(i, i)) % 2 == 0 then\n\
    \        is_unique = false\n        break\n      end\n    end\n    if is_unique\
    \ then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _,v in ipairs(x) do\n    local has_even = false\n    while\
    \ v > 0 do\n      local d = v % 10\n      if d % 2 == 0 then\n        has_even\
    \ = true\n        break\n      end\n      v = math.floor(v / 10)\n    end\n  \
    \  if not has_even then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp246w_6d6.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp246w_6d6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _,v in ipairs(x) do\n    local has_even = false\n    for\
    \ d in tostring(v):gmatch('%d') do\n      if tonumber(d) % 2 == 0 then\n     \
    \   has_even = true\n        break\n      end\n    end\n    if not has_even then\n\
    \      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    for d\
    \ in tostring(v):gmatch(\"%d\") do\n      if tonumber(d) % 2 == 0 then\n     \
    \   has_even = true\n        break\n      end\n    end\n    if not has_even then\n\
    \      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    for d\
    \ in tostring(v):gmatch('%d') do\n      if tonumber(d) % 2 == 0 then\n       \
    \ has_even = true\n        break\n      end\n    end\n    if not has_even then\n\
    \      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    while\
    \ v > 0 do\n      local digit = v % 10\n      if digit % 2 == 0 then\n       \
    \ has_even = true\n        break\n      end\n      v = math.floor(v / 10)\n  \
    \  end\n    if not has_even then\n      table.insert(result, v)\n    end\n  end\n\
    \  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4er_z29.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpn4er_z29.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for _,v in ipairs(x) do\n    local s = tostring(v)\n    local ok =\
    \ true\n    for i=1,#s do\n      if tonumber(s:sub(i,i)) % 2 == 0 then\n     \
    \   ok = false\n        break\n      end\n    end\n    if ok then\n      t[#t+1]\
    \ = v\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local digits = {}\n    for _, n in ipairs(x) do\n        local has_even = false\n\
    \        while n > 0 do\n            local d = n % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            n = math.floor(n / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(digits, n)\n        end\n    end\n    return\
    \ digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr8jmrvp.lua:27:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpbr8jmrvp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i, v in ipairs(x) do\n        local is_odd = true\n  \
    \      while v > 0 do\n            if (v % 10) % 2 == 0 then\n               \
    \ is_odd = false\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if is_odd then\n            table.insert(t, i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43r1530b.lua:26:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmp43r1530b.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do\n    local num = x[i]\n    local is_unique =\
    \ true\n    while num > 0 do\n      local digit = num % 10\n      if digit % 2\
    \ == 0 then\n        is_unique = false\n        break\n      end\n      num =\
    \ math.floor(num / 10)\n    end\n    if is_unique then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do\n    local num = x[i]\n    local is_odd = true\n\
    \    while num > 0 do\n      local digit = num % 10\n      if digit % 2 == 0 then\n\
    \        is_odd = false\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if is_odd then\n      table.insert(result, x[i])\n    end\n\
    \  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local n = x[i]\n        local even\
    \ = false\n        while n > 0 do\n            local d = n % 10\n            if\
    \ d % 2 == 0 then\n                even = true\n                break\n      \
    \      end\n            n = math.floor(n / 10)\n        end\n        if not even\
    \ then\n            t[#t + 1] = x[i]\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ is_unique = true\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                is_unique = false\n\
    \                break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if is_unique then\n            res[#res + 1] = x[i]\n  \
    \      end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ is_unique = true\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                is_unique = false\n\
    \                break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if is_unique then\n            res[#res + 1] = x[i]\n  \
    \      end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local n = x[i]\n    local even = false\n   \
    \ while n > 0 do\n      local d = n % 10\n      if d % 2 == 0 then\n        even\
    \ = true\n        break\n      end\n      n = math.floor(n / 10)\n    end\n  \
    \  if not even then\n      t[#t + 1] = x[i]\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _, v in ipairs(x) do\n    if not v:find('[02468]') then\n\
    \      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbqjec2x2.lua:8:\
    \ attempt to index local 'v' (a number value)\nstack traceback:\n\t/tmp/tmpbqjec2x2.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpbqjec2x2.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ is_unique = true\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                is_unique = false\n\
    \                break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if is_unique then\n            table.insert(result, x[i])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local n = x[i]\n    local s = tostring(n)\n\
    \    local even = false\n    for j = 1, #s do\n      local d = tonumber(s:sub(j,\
    \ j))\n      if d % 2 == 0 then\n        even = true\n        break\n      end\n\
    \    end\n    if not even then\n      t[#t + 1] = n\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzmtepn6.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpnzmtepn6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    local function has_even_digit(n)\n        while n > 0 do\n\
    \            if n % 2 == 0 then\n                return true\n            end\n\
    \            n = math.floor(n / 10)\n        end\n        return false\n    end\n\
    \    for _, v in ipairs(x) do\n        if not has_even_digit(v) then\n       \
    \     table.insert(t, v)\n        end\n    end\n    table.sort(t)\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        for d in tostring(v):gmatch('%d') do\n            if tonumber(d) % 2\
    \ == 0 then\n                has_even = true\n                break\n        \
    \    end\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local n = x[i]\n        local ok\
    \ = true\n        while n > 0 do\n            if n % 2 == 0 then\n           \
    \     ok = false\n                break\n            end\n            n = math.floor(n\
    \ / 10)\n        end\n        if ok then\n            t[#t + 1] = x[i]\n     \
    \   end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local digits = {}\n    for _, v in ipairs(x) do\n        local str = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #str do\n            local\
    \ digit = tonumber(str:sub(i, i))\n            if digit % 2 == 0 then\n      \
    \          has_even = true\n                break\n            end\n        end\n\
    \        if not has_even then\n            table.insert(digits, v)\n        end\n\
    \    end\n    table.sort(digits)\n    return digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local s = tostring(x[i])\n    local even = false\n\
    \    for j = 1, #s do\n      if tonumber(s:sub(j, j)) % 2 == 0 then\n        even\
    \ = true\n        break\n      end\n    end\n    if not even then\n      t[#t\
    \ + 1] = x[i]\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local is_unique = true\n\
    \        while v > 0 do\n            local digit = v % 10\n            if digit\
    \ % 2 == 0 then\n                is_unique = false\n                break\n  \
    \          end\n            v = math.floor(v / 10)\n        end\n        if is_unique\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92tjmo31.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp92tjmo31.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    local digits = {}\n    for i = 1, #x do\n        local\
    \ num = x[i]\n        local has_even = false\n        while num > 0 do\n     \
    \       local digit = num % 10\n            if digit % 2 == 0 then\n         \
    \       has_even = true\n                break\n            end\n            num\
    \ = math.floor(num / 10)\n        end\n        if not has_even then\n        \
    \    table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    for d\
    \ in tostring(v):gmatch('%d') do\n      if tonumber(d) % 2 == 0 then\n       \
    \ has_even = true\n        break\n      end\n    end\n    if not has_even then\n\
    \      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_az_mlq.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpp_az_mlq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do\n    local num = x[i]\n    local has_even =\
    \ false\n    while num > 0 do\n      local digit = num % 10\n      if digit %\
    \ 2 == 0 then\n        has_even = true\n        break\n      end\n      num =\
    \ math.floor(num / 10)\n    end\n    if not has_even then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ is_unique = true\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                is_unique = false\n\
    \                break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if is_unique then\n            res[#res + 1] = x[i]\n  \
    \      end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local ok = true\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                ok = false\n                break\n     \
    \       end\n        end\n        if ok then\n            res[#res + 1] = v\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fmhyt09.lua:26:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmp1fmhyt09.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for i = 1, #x do\n    local num = x[i]\n    local has_even = false\n\
    \    while num > 0 do\n      local digit = num % 10\n      if digit % 2 == 0 then\n\
    \        has_even = true\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if not has_even then\n      res[#res + 1] = x[i]\n    end\n\
    \  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _, v in ipairs(x) do\n    if not v:find('[24680]') then\n\
    \      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffnpjo53.lua:8:\
    \ attempt to index local 'v' (a number value)\nstack traceback:\n\t/tmp/tmpffnpjo53.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpffnpjo53.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmum1wmf5.lua:27:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpmum1wmf5.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even_digit\
    \ = false\n        for d in tostring(v):gmatch(\"%d\") do\n            if tonumber(d)\
    \ % 2 == 0 then\n                has_even_digit = true\n                break\n\
    \            end\n        end\n        if not has_even_digit then\n          \
    \  table.insert(result, v)\n        end\n    end\n    table.sort(result)\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    for d\
    \ in tostring(v):gmatch('%d') do\n      if tonumber(d) % 2 == 0 then\n       \
    \ has_even = true\n        break\n      end\n    end\n    if not has_even then\n\
    \      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local n = x[i]\n    local ok = true\n    while\
    \ n > 0 do\n      if n % 2 == 0 then\n        ok = false\n        break\n    \
    \  end\n      n = math.floor(n / 10)\n    end\n    if ok then\n      t[#t + 1]\
    \ = x[i]\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        for d in tostring(v):gmatch('%d') do\n            if tonumber(d) % 2\
    \ == 0 then\n                has_even = true\n                break\n        \
    \    end\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do\n    local num = x[i]\n    local has_even =\
    \ false\n    while num > 0 do\n      local digit = num % 10\n      if digit %\
    \ 2 == 0 then\n        has_even = true\n        break\n      end\n      num =\
    \ math.floor(num / 10)\n    end\n    if not has_even then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local ok = true\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                ok = false\n                break\n     \
    \       end\n        end\n        if ok then\n            t[#t + 1] = v\n    \
    \    end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ t = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal has_even = false\n\t\twhile v\
    \ > 0 do\n\t\t\tlocal d = v % 10\n\t\t\tif d % 2 == 0 then\n\t\t\t\thas_even =\
    \ true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv = math.floor(v / 10)\n\t\tend\n\t\t\
    if not has_even then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\ttable.sort(t)\n\
    \treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcuefyfk.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpbcuefyfk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function is_even(x)\n    return x % 2 == 0\n  end\n  local function has_even_digit(x)\n\
    \    local s = tostring(x)\n    for i = 1, #s do\n      if is_even(tonumber(s:sub(i,\
    \ i))) then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  local function sort_func(a, b)\n    return a < b\n  end\n  local result = {}\n\
    \  for i = 1, #x do\n    if not has_even_digit(x[i]) then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  table.sort(result, sort_func)\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local flag = true\n    for d in tostring(v):gmatch('%d')\
    \ do\n      if tonumber(d) % 2 == 0 then\n        flag = false\n        break\n\
    \      end\n    end\n    if flag then\n      table.insert(res, v)\n    end\n \
    \ end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local n = x[i]\n    local s = tostring(n)\n\
    \    local even = false\n    for j = 1, #s do\n      local d = tonumber(s:sub(j,\
    \ j))\n      if d % 2 == 0 then\n        even = true\n        break\n      end\n\
    \    end\n    if not even then\n      t[#t + 1] = n\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzmtepn6.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpnzmtepn6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local ok = true\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                ok = false\n                break\n     \
    \       end\n        end\n        if ok then\n            t[#t + 1] = v\n    \
    \    end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_az_mlq.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpp_az_mlq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_az_mlq.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpp_az_mlq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local ok = true\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                ok = false\n                break\n     \
    \       end\n        end\n        if ok then\n            t[#t + 1] = v\n    \
    \    end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function is_odd(n)\n        while n > 0 do\n            if n % 2 == 0\
    \ then\n                return false\n            end\n            n = math.floor(n\
    \ / 10)\n        end\n        return true\n    end\n    local t = {}\n    for\
    \ _, v in ipairs(x) do\n        if is_odd(v) then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    for d\
    \ in tostring(v):gmatch('%d') do\n      if tonumber(d) % 2 == 0 then\n       \
    \ has_even = true\n        break\n      end\n    end\n    if not has_even then\n\
    \      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i,v in ipairs(x) do\n        local s = tostring(v)\n \
    \       local has_even = false\n        for j = 1, #s do\n            if tonumber(s:sub(j,j))\
    \ % 2 == 0 then\n                has_even = true\n                break\n    \
    \        end\n        end\n        if not has_even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ is_unique = true\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                is_unique = false\n\
    \                break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if is_unique then\n            res[#res + 1] = x[i]\n  \
    \      end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function is_odd(n)\n        while n > 0 do\n            if n % 2 == 0\
    \ then\n                return false\n            end\n            n = math.floor(n\
    \ / 10)\n        end\n        return true\n    end\n    local t = {}\n    for\
    \ i = 1, #x do\n        if is_odd(x[i]) then\n            t[#t + 1] = x[i]\n \
    \       end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do\n    local is_unique = true\n    local num =\
    \ x[i]\n    while num > 0 do\n      local digit = num % 10\n      if digit % 2\
    \ == 0 then\n        is_unique = false\n        break\n      end\n      num =\
    \ math.floor(num / 10)\n    end\n    if is_unique then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local s = tostring(x[i])\n     \
    \   local ok = true\n        for j = 1, #s do\n            if tonumber(s:sub(j,\
    \ j)) % 2 == 0 then\n                ok = false\n                break\n     \
    \       end\n        end\n        if ok then\n            t[#t + 1] = x[i]\n \
    \       end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local ok\
    \ = true\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        ok = false\n        break\n      end\n    end\n    if ok then\n     \
    \ t[#t + 1] = v\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for i = 1, #x do\n    local num = x[i]\n    local has_even = false\n\
    \    while num > 0 do\n      local digit = num % 10\n      if digit % 2 == 0 then\n\
    \        has_even = true\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if not has_even then\n      res[#res + 1] = x[i]\n    end\n\
    \  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ res = {}\n\tfor i = 1, #x do\n\t\tlocal num = x[i]\n\t\tlocal has_even = false\n\
    \t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit % 2 == 0 then\n\
    \t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num\
    \ / 10)\n\t\tend\n\t\tif not has_even then\n\t\t\tres[#res + 1] = x[i]\n\t\tend\n\
    \tend\n\ttable.sort(res)\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local ok\
    \ = true\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        ok = false\n        break\n      end\n    end\n    if ok then\n     \
    \ t[#t + 1] = v\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _, v in ipairs(x) do\n    local is_unique = true\n    for\
    \ d in tostring(v):gmatch('%d') do\n      if tonumber(d) % 2 == 0 then\n     \
    \   is_unique = false\n        break\n      end\n    end\n    if is_unique then\n\
    \      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local digits = {}\n    for _, v in ipairs(x) do\n        local is_unique = true\n\
    \        for d in tostring(v):gmatch('%d') do\n            if tonumber(d) % 2\
    \ == 0 then\n                is_unique = false\n                break\n      \
    \      end\n        end\n        if is_unique then\n            table.insert(digits,\
    \ v)\n        end\n    end\n    table.sort(digits)\n    return digits\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function has_even_digit(n)\n        while n > 0 do\n            if (n\
    \ % 10) % 2 == 0 then\n                return true\n            end\n        \
    \    n = math.floor(n / 10)\n        end\n        return false\n    end\n    local\
    \ result = {}\n    for _, n in ipairs(x) do\n        if not has_even_digit(n)\
    \ then\n            table.insert(result, n)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function is_odd(n)\n    while n > 0 do\n      if n % 2 == 0 then\n        return\
    \ false\n      end\n      n = math.floor(n / 10)\n    end\n    return true\n \
    \ end\n  local res = {}\n  for _, v in ipairs(x) do\n    if is_odd(v) then\n \
    \     table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local s = tostring(x[i])\n     \
    \   local even = false\n        for j = 1, #s do\n            if tonumber(s:sub(j,\
    \ j)) % 2 == 0 then\n                even = true\n                break\n    \
    \        end\n        end\n        if not even then\n            t[#t + 1] = x[i]\n\
    \        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local ok = true\n    for d in tostring(v):gmatch('%d')\
    \ do\n      if tonumber(d) % 2 == 0 then\n        ok = false\n        break\n\
    \      end\n    end\n    if ok then\n      res[#res + 1] = v\n    end\n  end\n\
    \  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                even = true\n                break\n    \
    \        end\n        end\n        if not even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        if not v:find('[02468]')\
    \ then\n            t[#t+1] = v\n        end\n    end\n    table.sort(t)\n   \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy_34_4bx.lua:8:\
    \ attempt to index local 'v' (a number value)\nstack traceback:\n\t/tmp/tmpy_34_4bx.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpy_34_4bx.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local digits = {}\n  \
    \      for d in tostring(v):gmatch('%d') do\n            digits[d] = true\n  \
    \      end\n        if not digits['2'] and not digits['4'] and not digits['6']\
    \ and not digits['8'] then\n            res[#res + 1] = v\n        end\n    end\n\
    \    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51_943bb.lua:24:\
    \ expected: {}\nactual: {10}\nstack traceback:\n\t/tmp/tmp51_943bb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ is_odd = true\n        while num > 0 do\n            local digit = num % 10\n\
    \            if digit % 2 == 0 then\n                is_odd = false\n        \
    \        break\n            end\n            num = math.floor(num / 10)\n    \
    \    end\n        if is_odd then\n            res[#res + 1] = x[i]\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for i = 1, #x do\n    local num = x[i]\n    local is_odd = true\n\
    \    while num > 0 do\n      local digit = num % 10\n      if digit % 2 == 0 then\n\
    \        is_odd = false\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if is_odd then\n      res[#res + 1] = x[i]\n    end\n  end\n\
    \  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        if not v:find('[02468]')\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpukwt_05s.lua:8:\
    \ attempt to index local 'v' (a number value)\nstack traceback:\n\t/tmp/tmpukwt_05s.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpukwt_05s.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local n = x[i]\n    local is_unique = true\n\
    \    while n > 0 do\n      local d = n % 10\n      if d % 2 == 0 then\n      \
    \  is_unique = false\n        break\n      end\n      n = (n - d) / 10\n    end\n\
    \    if is_unique then\n      t[#t + 1] = x[i]\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local has_even\
    \ = false\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        has_even = true\n        break\n      end\n    end\n    if not has_even\
    \ then\n      table.insert(t, v)\n    end\n  end\n  table.sort(t)\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        if not v:find(\"%d[02468]\"\
    ) then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuq5jg4cj.lua:8:\
    \ attempt to index local 'v' (a number value)\nstack traceback:\n\t/tmp/tmpuq5jg4cj.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpuq5jg4cj.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local digit = v % 10\n            if digit\
    \ % 2 == 0 then\n                has_even = true\n                break\n    \
    \        end\n            v = math.floor(v / 10)\n        end\n        if not\
    \ has_even then\n            table.insert(result, v)\n        end\n    end\n \
    \   table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4du2jea.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpz4du2jea.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for i=1,#x do\n    local num = x[i]\n    local has_even = false\n\
    \    while num > 0 do\n      local digit = num % 10\n      if digit % 2 == 0 then\n\
    \        has_even = true\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if not has_even then\n      res[#res+1] = x[i]\n    end\n\
    \  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    for d\
    \ in tostring(v):gmatch('%d') do\n      if tonumber(d) % 2 == 0 then\n       \
    \ has_even = true\n        break\n      end\n    end\n    if not has_even then\n\
    \      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    if not v:find(\"%d*[02468]%d*\") then\n\
    \      res[#res + 1] = v\n    end\n  end\n  table.sort(res)\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp80bqh_9g.lua:8:\
    \ attempt to index local 'v' (a number value)\nstack traceback:\n\t/tmp/tmp80bqh_9g.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp80bqh_9g.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ has_even = false\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                has_even = true\n  \
    \              break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, x[i])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local n = x[i]\n        local s\
    \ = tostring(n)\n        local has_even = false\n        for j = 1, #s do\n  \
    \          local c = s:sub(j, j)\n            if tonumber(c) % 2 == 0 then\n \
    \               has_even = true\n                break\n            end\n    \
    \    end\n        if not has_even then\n            t[#t + 1] = n\n        end\n\
    \    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        if not v:find('[02468]')\
    \ then\n            res[#res + 1] = v\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9bqpx0bo.lua:8:\
    \ attempt to index local 'v' (a number value)\nstack traceback:\n\t/tmp/tmp9bqpx0bo.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp9bqpx0bo.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local even = false\n   \
    \     while v > 0 do\n            if (v % 10) % 2 == 0 then\n                even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not even then\n            table.insert(t, v)\n\
    \        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ft6_3ic.lua:27:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp4ft6_3ic.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        for d in tostring(v):gmatch(\"%d\") do\n            if tonumber(d) %\
    \ 2 == 0 then\n                has_even = true\n                break\n      \
    \      end\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzmtepn6.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpnzmtepn6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local is_odd = true\n    while v >\
    \ 0 do\n      if (v % 10) % 2 == 0 then\n        is_odd = false\n        break\n\
    \      end\n      v = math.floor(v / 10)\n    end\n    if is_odd then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5sn_txf6.lua:27:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp5sn_txf6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ res = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal has_even = false\n\t\twhile\
    \ v > 0 do\n\t\t\tlocal d = v % 10\n\t\t\tif d % 2 == 0 then\n\t\t\t\thas_even\
    \ = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv = math.floor(v / 10)\n\t\tend\n\t\t\
    if not has_even then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\ttable.sort(res)\n\
    \treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54wcycdq.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp54wcycdq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    while\
    \ v > 0 do\n      local d = v % 10\n      if d % 2 == 0 then\n        has_even\
    \ = true\n        break\n      end\n      v = math.floor(v / 10)\n    end\n  \
    \  if not has_even then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcoerdtd.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgcoerdtd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ has_even_digit(n)\n        while n > 0 do\n            if is_even(n % 10) then\n\
    \                return true\n            end\n            n = math.floor(n /\
    \ 10)\n        end\n        return false\n    end\n    local function sort_func(a,\
    \ b)\n        return a < b\n    end\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result, sort_func)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function is_odd(n)\n        while n > 0 do\n            if n % 2 == 0\
    \ then\n                return false\n            end\n            n = math.floor(n\
    \ / 10)\n        end\n        return true\n    end\n    local function sort(a,\
    \ b)\n        return a < b\n    end\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        if is_odd(v) then\n            table.insert(result, v)\n       \
    \ end\n    end\n    table.sort(result, sort)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for i = 1, #x do\n    local num = x[i]\n    local is_unique = true\n\
    \    while num > 0 do\n      local digit = num % 10\n      if digit % 2 == 0 then\n\
    \        is_unique = false\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if is_unique then\n      res[#res + 1] = x[i]\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkrdx1ktq.lua:28:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpkrdx1ktq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        local s = tostring(v)\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ unique = true\n        while num > 0 do\n            local digit = num % 10\n\
    \            if digit % 2 == 0 then\n                unique = false\n        \
    \        break\n            end\n            num = math.floor(num / 10)\n    \
    \    end\n        if unique then\n            res[#res + 1] = x[i]\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local ok\
    \ = true\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        ok = false\n        break\n      end\n    end\n    if ok then\n     \
    \ res[#res + 1] = v\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ has_even = false\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                has_even = true\n  \
    \              break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        if not v:find('[02468]')\
    \ then\n            res[#res + 1] = v\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9bqpx0bo.lua:8:\
    \ attempt to index local 'v' (a number value)\nstack traceback:\n\t/tmp/tmp9bqpx0bo.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp9bqpx0bo.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ has_even = false\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                has_even = true\n  \
    \              break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ has_even = false\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                has_even = true\n  \
    \              break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local n = x[i]\n        local even\
    \ = false\n        while n > 0 do\n            local d = n % 10\n            if\
    \ d % 2 == 0 then\n                even = true\n                break\n      \
    \      end\n            n = math.floor(n / 10)\n        end\n        if not even\
    \ then\n            t[#t + 1] = x[i]\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ is_unique = true\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                is_unique = false\n\
    \                break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if is_unique then\n            table.insert(result, x[i])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for _,v in ipairs(x) do\n    local s = tostring(v)\n    local u =\
    \ true\n    for i=1,#s do\n      if tonumber(s:sub(i,i)) % 2 == 0 then\n     \
    \   u = false\n        break\n      end\n    end\n    if u then\n      t[#t+1]\
    \ = v\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        for d in tostring(v):gmatch('%d') do\n            if tonumber(d) % 2\
    \ == 0 then\n                has_even = true\n                break\n        \
    \    end\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local n = x[i]\n        local flag\
    \ = true\n        while n > 0 do\n            if n % 2 == 0 then\n           \
    \     flag = false\n                break\n            end\n            n = math.floor(n\
    \ / 10)\n        end\n        if flag then\n            t[#t + 1] = x[i]\n   \
    \     end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        if not s:find('[02468]') then\n            table.insert(res, v)\n   \
    \     end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local n = x[i]\n    local s = tostring(n)\n\
    \    local even = false\n    for j = 1, #s do\n      local d = tonumber(s:sub(j,\
    \ j))\n      if d % 2 == 0 then\n        even = true\n        break\n      end\n\
    \    end\n    if not even then\n      t[#t + 1] = n\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local has_even\
    \ = false\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        has_even = true\n        break\n      end\n    end\n    if not has_even\
    \ then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4gz4hfn.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpp4gz4hfn.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_az_mlq.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpp_az_mlq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function is_unique(n)\n    local digits = {}\n    while n > 0 do\n      local\
    \ d = n % 10\n      if d % 2 == 0 then return false end\n      n = math.floor(n\
    \ / 10)\n    end\n    return true\n  end\n  local t = {}\n  for _, v in ipairs(x)\
    \ do\n    if is_unique(v) then table.insert(t, v) end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local s = tostring(x[i])\n    local flag = true\n\
    \    for j = 1, #s do\n      if tonumber(s:sub(j, j)) % 2 == 0 then\n        flag\
    \ = false\n        break\n      end\n    end\n    if flag then\n      t[#t + 1]\
    \ = x[i]\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local has_even\
    \ = false\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        has_even = true\n        break\n      end\n    end\n    if not has_even\
    \ then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        if not has_even_digit(v)\
    \ then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc9pxjbu4.lua:8:\
    \ attempt to call global 'has_even_digit' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpc9pxjbu4.lua:8: in function 'candidate'\n\t/tmp/tmpc9pxjbu4.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local digit = v % 10\n            if digit\
    \ % 2 == 0 then\n                has_even = true\n                break\n    \
    \        end\n            v = math.floor(v / 10)\n        end\n        if not\
    \ has_even then\n            table.insert(result, i)\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0w05vit.lua:27:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpd0w05vit.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local s = tostring(x[i])\n     \
    \   local has_even = false\n        for j = 1, #s do\n            if tonumber(s:sub(j,\
    \ j)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            t[#t\
    \ + 1] = x[i]\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ t = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal has_even = false\n\t\twhile v\
    \ > 0 do\n\t\t\tlocal d = v % 10\n\t\t\tif d % 2 == 0 then\n\t\t\t\thas_even =\
    \ true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv = math.floor(v / 10)\n\t\tend\n\t\t\
    if not has_even then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\ttable.sort(t)\n\
    \treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcuefyfk.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpbcuefyfk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function is_even(n)\n    local function is_even_digit(d)\n      return d % 2\
    \ == 0\n    end\n    local function split(n)\n      if n < 10 then return {n}\
    \ end\n      return {n % 10} + split(math.floor(n / 10))\n    end\n    return\
    \ not any(is_even_digit, split(n))\n  end\n  return sort(filter(is_even, x))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ounbfl3.lua:16:\
    \ attempt to call global 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmp3ounbfl3.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp3ounbfl3.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzmtepn6.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpnzmtepn6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    for\
    \ d in tostring(v):gmatch('%d') do\n      if d % 2 == 0 then\n        has_even\
    \ = true\n        break\n      end\n    end\n    if not has_even then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_az_mlq.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpp_az_mlq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function is_odd(x)\n        local function is_even(x)\n            return\
    \ x % 2 == 0\n        end\n        return not is_even(x)\n    end\n    local function\
    \ has_even_digit(x)\n        local function has_even_digit_aux(x)\n          \
    \  if x == 0 then\n                return false\n            else\n          \
    \      return is_odd(x % 10) and has_even_digit_aux(math.floor(x / 10))\n    \
    \        end\n        end\n        return has_even_digit_aux(x)\n    end\n   \
    \ local function unique_digits_aux(x, acc)\n        if #x == 0 then\n        \
    \    return acc\n        else\n            if has_even_digit(x[1]) then\n    \
    \            return unique_digits_aux(table.slice(x, 2), acc)\n            else\n\
    \                return unique_digits_aux(table.slice(x, 2), table.append(acc,\
    \ x[1]))\n            end\n        end\n    end\n    return unique_digits_aux(x,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpblb3g3zc.lua:29:\
    \ attempt to call field 'slice' (a nil value)\nstack traceback:\n\t/tmp/tmpblb3g3zc.lua:29:\
    \ in function </tmp/tmpblb3g3zc.lua:22>\n\t(tail call): ?\n\t/tmp/tmpblb3g3zc.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local s = tostring(x[i])\n    local flag = true\n\
    \    for j = 1, #s do\n      if tonumber(s:sub(j, j)) % 2 == 0 then\n        flag\
    \ = false\n        break\n      end\n    end\n    if flag then\n      t[#t + 1]\
    \ = x[i]\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local is_unique = true\n        for i = 1, #s do\n            if s:sub(i,\
    \ i) % 2 == 0 then\n                is_unique = false\n                break\n\
    \            end\n        end\n        if is_unique then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    if not v:find('[02468]') then\n  \
    \    res[#res+1] = v\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp032yxybm.lua:8:\
    \ attempt to index local 'v' (a number value)\nstack traceback:\n\t/tmp/tmp032yxybm.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp032yxybm.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    for\
    \ d in tostring(v):gmatch(\"%d\") do\n      if tonumber(d) % 2 == 0 then\n   \
    \     has_even = true\n        break\n      end\n    end\n    if not has_even\
    \ then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local ok = true\n    \
    \    for d in tostring(v):gmatch('%d') do\n            if tonumber(d) % 2 == 0\
    \ then\n                ok = false\n                break\n            end\n \
    \       end\n        if ok then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function is_odd(n)\n    while n > 0 do\n      if n % 2 == 0 then\n        return\
    \ false\n      end\n      n = math.floor(n / 10)\n    end\n    return true\n \
    \ end\n  local t = {}\n  for _, v in ipairs(x) do\n    if is_odd(v) then\n   \
    \   table.insert(t, v)\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local n = x[i]\n    local even = false\n   \
    \ while n > 0 do\n      local d = n % 10\n      if d % 2 == 0 then\n        even\
    \ = true\n        break\n      end\n      n = math.floor(n / 10)\n    end\n  \
    \  if not even then\n      t[#t + 1] = x[i]\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local has_even\
    \ = false\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        has_even = true\n        break\n      end\n    end\n    if not has_even\
    \ then\n      table.insert(t, v)\n    end\n  end\n  table.sort(t)\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function is_odd(n)\n    while n > 0 do\n      if n % 2 == 0 then\n        return\
    \ false\n      end\n      n = math.floor(n / 10)\n    end\n    return true\n \
    \ end\n  local function sort(a, b)\n    return a < b\n  end\n  local t = {}\n\
    \  for _, v in ipairs(x) do\n    if is_odd(v) then\n      table.insert(t, v)\n\
    \    end\n  end\n  table.sort(t, sort)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ has_even = false\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                has_even = true\n  \
    \              break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, x[i])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n    while\
    \ v > 0 do\n      local digit = v % 10\n      if digit % 2 == 0 then\n       \
    \ has_even = true\n        break\n      end\n      v = math.floor(v / 10)\n  \
    \  end\n    if not has_even then\n      table.insert(result, v)\n    end\n  end\n\
    \  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4er_z29.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpn4er_z29.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local s = tostring(x[i])\n     \
    \   local flag = true\n        for j = 1, #s do\n            if tonumber(s:sub(j,\
    \ j)) % 2 == 0 then\n                flag = false\n                break\n   \
    \         end\n        end\n        if flag then\n            t[#t + 1] = x[i]\n\
    \        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ is_unique = true\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                is_unique = false\n\
    \                break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if is_unique then\n            res[#res + 1] = x[i]\n  \
    \      end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _,v in ipairs(x) do\n    local flag = true\n    for d in tostring(v):gmatch('%d')\
    \ do\n      if d:byte() % 2 == 0 then\n        flag = false\n        break\n \
    \     end\n    end\n    if flag then\n      res[#res+1] = v\n    end\n  end\n\
    \  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ function is_even(n)\n    while n > 0 do\n      if (n % 10) % 2 == 0 then return\
    \ false end\n      n = math.floor(n / 10)\n    end\n    return true\n  end\n \
    \ local res = {}\n  for _, v in ipairs(x) do\n    if is_even(v) then table.insert(res,\
    \ v) end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local digit = v % 10\n            if digit\
    \ % 2 == 0 then\n                has_even = true\n                break\n    \
    \        end\n            v = math.floor(v / 10)\n        end\n        if not\
    \ has_even then\n            table.insert(result, v)\n        end\n    end\n \
    \   table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4du2jea.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpz4du2jea.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ has_even_digit(n)\n        while n > 0 do\n            if is_even(n % 10) then\n\
    \                return true\n            end\n            n = math.floor(n /\
    \ 10)\n        end\n        return false\n    end\n    local function sort_func(a,\
    \ b)\n        return a < b\n    end\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result, sort_func)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local ok = true\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                ok = false\n                break\n     \
    \       end\n        end\n        if ok then\n            t[#t + 1] = v\n    \
    \    end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local digits = {}\n  \
    \      for d in tostring(v):gmatch('%d') do\n            digits[d] = true\n  \
    \      end\n        if not digits['0'] and not digits['2'] and not digits['4']\
    \ and not digits['6'] and not digits['8'] then\n            res[#res + 1] = v\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local ok\
    \ = true\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        ok = false\n        break\n      end\n    end\n    if ok then\n     \
    \ t[#t + 1] = v\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    local s = tostring(v)\n    local has_even\
    \ = false\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 == 0 then\n\
    \        has_even = true\n        break\n      end\n    end\n    if not has_even\
    \ then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ your code here\n  local result = {}\n  for i = 1, #x do\n    local has_even\
    \ = false\n    for j = 1, #tostring(x[i]) do\n      if tonumber(tostring(x[i]):sub(j,\
    \ j)) % 2 == 0 then\n        has_even = true\n        break\n      end\n    end\n\
    \    if not has_even then\n      table.insert(result, x[i])\n    end\n  end\n\
    \  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local d = v % 10\n            if d % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_az_mlq.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpp_az_mlq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function has_even_digit(n)\n        while n > 0 do\n            if n %\
    \ 2 == 0 then\n                return true\n            end\n            n = math.floor(n\
    \ / 10)\n        end\n        return false\n    end\n    local function unique_digits_rec(x,\
    \ i, res)\n        if i > #x then\n            return res\n        elseif not\
    \ has_even_digit(x[i]) then\n            table.insert(res, x[i])\n        end\n\
    \        return unique_digits_rec(x, i + 1, res)\n    end\n    local res = {}\n\
    \    return unique_digits_rec(x, 1, res)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu825980i.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpu825980i.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do\n    local num = x[i]\n    local is_odd = true\n\
    \    while num > 0 do\n      local digit = num % 10\n      if digit % 2 == 0 then\n\
    \        is_odd = false\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if is_odd then\n      table.insert(result, x[i])\n    end\n\
    \  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ has_even = false\n        while num > 0 do\n            local digit = num %\
    \ 10\n            if digit % 2 == 0 then\n                has_even = true\n  \
    \              break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, x[i])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local unique = true\n\
    \        for c in tostring(v):gmatch(\"%d\") do\n            if tonumber(c) %\
    \ 2 == 0 then\n                unique = false\n                break\n       \
    \     end\n        end\n        if unique then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ unique = true\n        while num > 0 do\n            local digit = num % 10\n\
    \            if digit % 2 == 0 then\n                unique = false\n        \
    \        break\n            end\n            num = math.floor(num / 10)\n    \
    \    end\n        if unique then\n            table.insert(result, x[i])\n   \
    \     end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local n = x[i]\n        local s\
    \ = tostring(n)\n        local flag = true\n        for j = 1, #s do\n       \
    \     local d = tonumber(s:sub(j, j))\n            if d % 2 == 0 then\n      \
    \          flag = false\n                break\n            end\n        end\n\
    \        if flag then\n            t[#t + 1] = n\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            local digit = v % 10\n            if digit\
    \ % 2 == 0 then\n                has_even = true\n                break\n    \
    \        end\n            v = math.floor(v / 10)\n        end\n        if not\
    \ has_even then\n            table.insert(result, v)\n        end\n    end\n \
    \   table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4du2jea.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpz4du2jea.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for _, i in ipairs(x) do\n    local s = tostring(i)\n    local ok\
    \ = true\n    for j = 1, #s do\n      if tonumber(s:sub(j, j)) % 2 == 0 then\n\
    \        ok = false\n        break\n      end\n    end\n    if ok then\n     \
    \ t[#t + 1] = i\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local unique = {}\n    for _, v in ipairs(x) do\n        local flag = true\n\
    \        while v > 0 do\n            if (v % 10) % 2 == 0 then\n             \
    \   flag = false\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if flag then\n            table.insert(unique, v)\n\
    \        end\n    end\n    table.sort(unique)\n    return unique\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplo5eefkb.lua:27:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmplo5eefkb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local s = tostring(x[i])\n     \
    \   local has_even = false\n        for j = 1, #s do\n            if tonumber(s:sub(j,\
    \ j)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            t[#t\
    \ + 1] = x[i]\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, v in ipairs(x) do\n        local s = tostring(v)\n\
    \        local ok = true\n        for i = 1, #s do\n            if tonumber(s:sub(i,\
    \ i)) % 2 == 0 then\n                ok = false\n                break\n     \
    \       end\n        end\n        if ok then\n            t[#t + 1] = v\n    \
    \    end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local digits = {}\n  \
    \      for d in tostring(v):gmatch('%d') do\n            digits[d] = true\n  \
    \      end\n        if not digits['0'] and not digits['2'] and not digits['4']\
    \ and not digits['6'] and not digits['8'] then\n            res[#res + 1] = v\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750219
