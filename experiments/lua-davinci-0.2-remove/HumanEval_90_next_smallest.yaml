name: HumanEval_90_next_smallest
language: lua
prompt: "-- You are given a list of integers.\n-- Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n-- Return None if there is\
  \ no such element.\nlocal function next_smallest(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
  \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
  \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
  \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2\
    \ then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or\
    \ min2\nend", "    local smallest = math.huge\n    local second_smallest = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < smallest then\n            second_smallest\
    \ = smallest\n            smallest = v\n        elseif v < second_smallest then\n\
    \            second_smallest = v\n        end\n    end\n    return second_smallest\
    \ == math.huge and nil or second_smallest\nend", "  local min, min2\n  for _,\
    \ v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n    \
    \  min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2\nend", "  local min = math.min(unpack(lst))\n  local min_idx =\
    \ table.indexof(lst, min)\n  table.remove(lst, min_idx)\n  return math.min(unpack(lst))\n\
    end", "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2\nend", "    local smallest = math.huge\n    local second_smallest\
    \ = math.huge\n    for _, v in ipairs(lst) do\n        if v < smallest then\n\
    \            second_smallest = smallest\n            smallest = v\n        elseif\
    \ v < second_smallest then\n            second_smallest = v\n        end\n   \
    \ end\n    return second_smallest\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min = math.min(unpack(lst))\n \
    \ local min_idx = nil\n  for i, v in ipairs(lst) do\n    if v == min then\n  \
    \    min_idx = i\n      break\n    end\n  end\n  table.remove(lst, min_idx)\n\
    \  return math.min(unpack(lst))\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "    local min1, min2\n    for _, v in ipairs(lst)\
    \ do\n        if not min1 or v < min1 then\n            min2 = min1\n        \
    \    min1 = v\n        elseif not min2 or v < min2 then\n            min2 = v\n\
    \        end\n    end\n    return min2\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2\nend", "    local smallest, next_smallest = math.huge, math.huge\n    for\
    \ _, v in ipairs(lst) do\n        if v < smallest then\n            next_smallest\
    \ = smallest\n            smallest = v\n        elseif v < next_smallest then\n\
    \            next_smallest = v\n        end\n    end\n    return next_smallest\
    \ ~= math.huge and next_smallest or nil\nend", "  local smallest = math.huge\n\
    \  local next_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest\
    \ then\n      next_smallest = smallest\n      smallest = v\n    elseif v < next_smallest\
    \ then\n      next_smallest = v\n    end\n  end\n  return next_smallest\nend",
  "    local min = math.huge\n    local min2 = math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2\nend", "  local min, second_min = math.huge, math.huge\n  for _,\
    \ v in ipairs(lst) do\n    if v < min then\n      second_min = min\n      min\
    \ = v\n    elseif v < second_min then\n      second_min = v\n    end\n  end\n\
    \  return second_min == math.huge and nil or second_min\nend", "    local min\
    \ = math.min(unpack(lst))\n    local min_index = nil\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_index = i\n            break\n\
    \        end\n    end\n    table.remove(lst, min_index)\n    return math.min(unpack(lst))\n\
    end", "    local smallest = math.huge\n    local second_smallest = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < smallest then\n            second_smallest\
    \ = smallest\n            smallest = v\n        elseif v < second_smallest then\n\
    \            second_smallest = v\n        end\n    end\n    return second_smallest\
    \ == math.huge and nil or second_smallest\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
