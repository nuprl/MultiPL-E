name: HumanEval_90_next_smallest
language: lua
prompt: "-- You are given a list of integers.\n-- Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n-- Return None if there is\
  \ no such element.\nlocal function next_smallest(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
  \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
  \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
  \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2\
    \ then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or\
    \ min2\nend", "    local smallest = math.huge\n    local second_smallest = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < smallest then\n            second_smallest\
    \ = smallest\n            smallest = v\n        elseif v < second_smallest then\n\
    \            second_smallest = v\n        end\n    end\n    return second_smallest\
    \ == math.huge and nil or second_smallest\nend", "  local min, min2\n  for _,\
    \ v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n    \
    \  min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2\nend", "  local min = math.min(unpack(lst))\n  local min_idx =\
    \ table.indexof(lst, min)\n  table.remove(lst, min_idx)\n  return math.min(unpack(lst))\n\
    end", "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2\nend", "    local smallest = math.huge\n    local second_smallest\
    \ = math.huge\n    for _, v in ipairs(lst) do\n        if v < smallest then\n\
    \            second_smallest = smallest\n            smallest = v\n        elseif\
    \ v < second_smallest then\n            second_smallest = v\n        end\n   \
    \ end\n    return second_smallest\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min = math.min(unpack(lst))\n \
    \ local min_idx = nil\n  for i, v in ipairs(lst) do\n    if v == min then\n  \
    \    min_idx = i\n      break\n    end\n  end\n  table.remove(lst, min_idx)\n\
    \  return math.min(unpack(lst))\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "    local min1, min2\n    for _, v in ipairs(lst)\
    \ do\n        if not min1 or v < min1 then\n            min2 = min1\n        \
    \    min1 = v\n        elseif not min2 or v < min2 then\n            min2 = v\n\
    \        end\n    end\n    return min2\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2\nend", "    local smallest, next_smallest = math.huge, math.huge\n    for\
    \ _, v in ipairs(lst) do\n        if v < smallest then\n            next_smallest\
    \ = smallest\n            smallest = v\n        elseif v < next_smallest then\n\
    \            next_smallest = v\n        end\n    end\n    return next_smallest\
    \ ~= math.huge and next_smallest or nil\nend", "  local smallest = math.huge\n\
    \  local next_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest\
    \ then\n      next_smallest = smallest\n      smallest = v\n    elseif v < next_smallest\
    \ then\n      next_smallest = v\n    end\n  end\n  return next_smallest\nend",
  "    local min = math.huge\n    local min2 = math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2\nend", "  local min, second_min = math.huge, math.huge\n  for _,\
    \ v in ipairs(lst) do\n    if v < min then\n      second_min = min\n      min\
    \ = v\n    elseif v < second_min then\n      second_min = v\n    end\n  end\n\
    \  return second_min == math.huge and nil or second_min\nend", "    local min\
    \ = math.min(unpack(lst))\n    local min_index = nil\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_index = i\n            break\n\
    \        end\n    end\n    table.remove(lst, min_index)\n    return math.min(unpack(lst))\n\
    end", "    local smallest = math.huge\n    local second_smallest = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < smallest then\n            second_smallest\
    \ = smallest\n            smallest = v\n        elseif v < second_smallest then\n\
    \            second_smallest = v\n        end\n    end\n    return second_smallest\
    \ == math.huge and nil or second_smallest\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "    local min, min2\n    for _, v in ipairs(lst) do\n        if not min or v <\
    \ min then\n            min2 = min\n            min = v\n        elseif not min2\
    \ or v < min2 then\n            min2 = v\n        end\n    end\n    return min2\n\
    end", "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v <\
    \ min then\n      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2\nend", "    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 ~= math.huge and min2 or\
    \ nil\nend", "  local min = math.huge\n  local min2 = math.huge\n  for _, v in\
    \ ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n    elseif\
    \ v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and\
    \ nil or min2\nend", "    local smallest, second_smallest\n    for _, v in ipairs(lst)\
    \ do\n        if not smallest or v < smallest then\n            second_smallest\
    \ = smallest\n            smallest = v\n        elseif not second_smallest or\
    \ v < second_smallest then\n            second_smallest = v\n        end\n   \
    \ end\n    return second_smallest\nend", "    local min, min2 = math.huge, math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2 == math.huge and nil or min2\nend", "  local\
    \ min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min\
    \ then\n      min2 = min\n      min = v\n    elseif v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local\
    \ min = math.huge\n  local second_min = math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      second_min = min\n      min = v\n    elseif v < second_min\
    \ then\n      second_min = v\n    end\n  end\n  return second_min == math.huge\
    \ and nil or second_min\nend", "  local min = math.huge\n  local min2 = math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\n\
    end", "    local min, min2\n    for _, v in ipairs(lst) do\n        if not min\
    \ or v < min then\n            min2 = min\n            min = v\n        elseif\
    \ not min2 or v < min2 then\n            min2 = v\n        end\n    end\n    return\
    \ min2\nend", "  local smallest = math.huge\n  local second_smallest = math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < smallest then\n      second_smallest\
    \ = smallest\n      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest == math.huge and nil or second_smallest\n\
    end", "    local min = math.huge\n    local min2 = math.huge\n    for _, v in\
    \ ipairs(lst) do\n        if v < min then\n            min2 = min\n          \
    \  min = v\n        elseif v < min2 then\n            min2 = v\n        end\n\
    \    end\n    return min2 == math.huge and nil or min2\nend", "  local smallest\
    \ = math.huge\n  local second_smallest = math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < smallest then\n      second_smallest = smallest\n      smallest\
    \ = v\n    elseif v < second_smallest then\n      second_smallest = v\n    end\n\
    \  end\n  return second_smallest ~= math.huge and second_smallest or nil\nend",
  "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n\
    \      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n     \
    \ min2 = v\n    end\n  end\n  return min2\nend", "    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end", "    local smallest = math.huge\n    local second_smallest = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < smallest then\n            second_smallest\
    \ = smallest\n            smallest = v\n        elseif v < second_smallest then\n\
    \            second_smallest = v\n        end\n    end\n    return second_smallest\
    \ == math.huge and nil or second_smallest\nend", "  local min = math.min(unpack(lst))\n\
    \  local min_idx = nil\n  for i, v in ipairs(lst) do\n    if v == min then\n \
    \     min_idx = i\n      break\n    end\n  end\n  table.remove(lst, min_idx)\n\
    \  return math.min(unpack(lst))\nend", "    local min, min2 = math.huge, math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2 == math.huge and nil or min2\nend", "  local\
    \ smallest, next_smallest = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < smallest then\n      next_smallest = smallest\n      smallest = v\n\
    \    elseif v < next_smallest then\n      next_smallest = v\n    end\n  end\n\
    \  return next_smallest == math.huge and nil or next_smallest\nend", "    local\
    \ min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if\
    \ v < min then\n            min2 = min\n            min = v\n        elseif v\
    \ < min2 then\n            min2 = v\n        end\n    end\n    return min2 ~=\
    \ math.huge and min2 or nil\nend", "  local smallest = math.huge\n  local second_smallest\
    \ = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest then\n      second_smallest\
    \ = smallest\n      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest == math.huge and nil or second_smallest\n\
    end", "  local min = math.min(unpack(lst))\n  local min_idx = 0\n  for i, v in\
    \ ipairs(lst) do\n    if v == min then\n      min_idx = i\n      break\n    end\n\
    \  end\n  table.remove(lst, min_idx)\n  return math.min(unpack(lst))\nend", " \
    \   local smallest = math.huge\n    local second_smallest = math.huge\n    for\
    \ _, v in ipairs(lst) do\n        if v < smallest then\n            second_smallest\
    \ = smallest\n            smallest = v\n        elseif v < second_smallest then\n\
    \            second_smallest = v\n        end\n    end\n    return second_smallest\
    \ == math.huge and nil or second_smallest\nend", "  local min = math.min(unpack(lst))\n\
    \  local min_idx = 0\n  for i,v in ipairs(lst) do\n    if v == min then\n    \
    \  min_idx = i\n      break\n    end\n  end\n  table.remove(lst, min_idx)\n  return\
    \ math.min(unpack(lst))\nend", "  local smallest = math.huge\n  local next_smallest\
    \ = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest then\n      next_smallest\
    \ = smallest\n      smallest = v\n    elseif v < next_smallest then\n      next_smallest\
    \ = v\n    end\n  end\n  return next_smallest == math.huge and nil or next_smallest\n\
    end", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 ~= math.huge and min2 or nil\n\
    end", "  local smallest = math.huge\n  local second_smallest = math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < smallest then\n      second_smallest = smallest\n\
    \      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest\nend", "    local smallest = math.huge\n\
    \    local second_smallest = math.huge\n    for _, v in ipairs(lst) do\n     \
    \   if v < smallest then\n            second_smallest = smallest\n           \
    \ smallest = v\n        elseif v < second_smallest then\n            second_smallest\
    \ = v\n        end\n    end\n    return second_smallest\nend", "  local min =\
    \ math.min(unpack(lst))\n  local min_idx = 0\n  for i, v in ipairs(lst) do\n \
    \   if v == min then\n      min_idx = i\n      break\n    end\n  end\n  table.remove(lst,\
    \ min_idx)\n  return math.min(unpack(lst))\nend", "  local min = math.min(unpack(lst))\n\
    \  local min_idx = 1\n  for i, v in ipairs(lst) do\n    if v == min then\n   \
    \   min_idx = i\n      break\n    end\n  end\n  table.remove(lst, min_idx)\n \
    \ return math.min(unpack(lst))\nend", "  local min = math.min(unpack(lst))\n \
    \ local min_idx = table.index_of(lst, min)\n  table.remove(lst, min_idx)\n  return\
    \ math.min(unpack(lst))\nend", "  local smallest = math.huge\n  local second_smallest\
    \ = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest then\n      second_smallest\
    \ = smallest\n      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest == math.huge and nil or second_smallest\n\
    end", "  local smallest = math.huge\n  local second_smallest = math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < smallest then\n      second_smallest = smallest\n\
    \      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest\nend", "  local min = math.huge\n\
    \  local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      min2 = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2\nend", "  local smallest = math.huge\n  local second_smallest\
    \ = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest then\n      second_smallest\
    \ = smallest\n      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest\nend", "    local smallest = math.huge\n\
    \    local second_smallest = math.huge\n    for _, v in ipairs(lst) do\n     \
    \   if v < smallest then\n            second_smallest = smallest\n           \
    \ smallest = v\n        elseif v < second_smallest then\n            second_smallest\
    \ = v\n        end\n    end\n    return second_smallest ~= math.huge and second_smallest\
    \ or nil\nend", "    local min = math.huge\n    local min2 = math.huge\n    for\
    \ _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n  \
    \          min = v\n        elseif v < min2 then\n            min2 = v\n     \
    \   end\n    end\n    return min2\nend", "    local min = math.huge\n    local\
    \ min2 = math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n\
    \            min2 = min\n            min = v\n        elseif v < min2 then\n \
    \           min2 = v\n        end\n    end\n    return min2 == math.huge and nil\
    \ or min2\nend", "  local min, min2 = math.huge, math.huge\n  for i = 1, #lst\
    \ do\n    if lst[i] < min then\n      min2 = min\n      min = lst[i]\n    elseif\
    \ lst[i] < min2 then\n      min2 = lst[i]\n    end\n  end\n  return min2\nend",
  "  local smallest = math.huge\n  local second_smallest = math.huge\n  for _, v in\
    \ ipairs(lst) do\n    if v < smallest then\n      second_smallest = smallest\n\
    \      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest == math.huge and nil or second_smallest\n\
    end", "    local min = math.huge\n    local min2 = math.huge\n    for _, v in\
    \ ipairs(lst) do\n        if v < min then\n            min2 = min\n          \
    \  min = v\n        elseif v < min2 then\n            min2 = v\n        end\n\
    \    end\n    return min2\nend", "    local min = math.huge\n    local min2 =\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end", "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2 == math.huge and nil or min2\nend", "  local smallest = math.huge\n\
    \  local second_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v <\
    \ smallest then\n      second_smallest = smallest\n      smallest = v\n    elseif\
    \ v < second_smallest then\n      second_smallest = v\n    end\n  end\n  return\
    \ second_smallest == math.huge and nil or second_smallest\nend", "  local min\
    \ = math.min(unpack(lst))\n  local min2 = math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v > min and v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min = math.huge\n  local min2\
    \ = math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 =\
    \ min\n      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2\nend", "  local min, min2 = math.huge, math.huge\n  for _, v in\
    \ ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n    elseif\
    \ v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and\
    \ nil or min2\nend", "    local smallest, next_smallest = math.huge, math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < smallest then\n            next_smallest\
    \ = smallest\n            smallest = v\n        elseif v < next_smallest then\n\
    \            next_smallest = v\n        end\n    end\n    return next_smallest\
    \ == math.huge and nil or next_smallest\nend", "    local min = math.huge\n  \
    \  local min2 = math.huge\n    for _, v in ipairs(lst) do\n        if v < min\
    \ then\n            min2 = min\n            min = v\n        elseif v < min2 then\n\
    \            min2 = v\n        end\n    end\n    return min2\nend", "  local min\
    \ = math.min(unpack(lst))\n  local min2 = math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v > min and v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 ~= math.huge and min2 or nil\nend", "    local smallest = math.huge\n \
    \   local next_smallest = math.huge\n    for _, v in ipairs(lst) do\n        if\
    \ v < smallest then\n            next_smallest = smallest\n            smallest\
    \ = v\n        elseif v < next_smallest then\n            next_smallest = v\n\
    \        end\n    end\n    return next_smallest == math.huge and nil or next_smallest\n\
    end", "  local smallest = math.huge\n  local next_smallest = math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < smallest then\n      next_smallest = smallest\n\
    \      smallest = v\n    elseif v < next_smallest then\n      next_smallest =\
    \ v\n    end\n  end\n  return next_smallest == math.huge and nil or next_smallest\n\
    end", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\n\
    end", "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v <\
    \ min then\n      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2\nend", "  local smallest = math.huge\n\
    \  local next_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest\
    \ then\n      next_smallest = smallest\n      smallest = v\n    elseif v < next_smallest\
    \ then\n      next_smallest = v\n    end\n  end\n  return next_smallest == math.huge\
    \ and nil or next_smallest\nend", "  local smallest = math.huge\n  local next_smallest\
    \ = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest then\n      next_smallest\
    \ = smallest\n      smallest = v\n    elseif v < next_smallest then\n      next_smallest\
    \ = v\n    end\n  end\n  return next_smallest\nend", "  local smallest = math.huge\n\
    \  local second_smallest = math.huge\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      second_smallest = smallest\n      smallest = lst[i]\n    elseif\
    \ lst[i] < second_smallest then\n      second_smallest = lst[i]\n    end\n  end\n\
    \  return second_smallest\nend", "    local min = math.huge\n    local min2 =\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end", "    local smallest = math.huge\n    local second_smallest = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < smallest then\n            second_smallest\
    \ = smallest\n            smallest = v\n        elseif v < second_smallest then\n\
    \            second_smallest = v\n        end\n    end\n    return second_smallest\
    \ == math.huge and nil or second_smallest\nend", "  local smallest = math.huge\n\
    \  local second_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v <\
    \ smallest then\n      second_smallest = smallest\n      smallest = v\n    elseif\
    \ v < second_smallest then\n      second_smallest = v\n    end\n  end\n  return\
    \ second_smallest == math.huge and nil or second_smallest\nend", "    local min\
    \ = math.min(unpack(lst))\n    local min_index = table.index_of(lst, min)\n  \
    \  table.remove(lst, min_index)\n    return math.min(unpack(lst))\nend", "  local\
    \ smallest = math.huge\n  local next_smallest = math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < smallest then\n      next_smallest = smallest\n      smallest\
    \ = v\n    elseif v < next_smallest then\n      next_smallest = v\n    end\n \
    \ end\n  return next_smallest\nend", "    local min, min2 = math.huge, math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2 == math.huge and nil or min2\nend", "  local\
    \ min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n  \
    \    min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2\nend", "  local smallest = math.huge\n  local\
    \ second_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest\
    \ then\n      second_smallest = smallest\n      smallest = v\n    elseif v < second_smallest\
    \ then\n      second_smallest = v\n    end\n  end\n  return second_smallest\n\
    end", "  local smallest, next_smallest = math.huge, math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < smallest then\n      next_smallest = smallest\n      smallest\
    \ = v\n    elseif v < next_smallest then\n      next_smallest = v\n    end\n \
    \ end\n  return next_smallest ~= math.huge and next_smallest or nil\nend", " \
    \   local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n \
    \       if v < min then\n            min2 = min\n            min = v\n       \
    \ elseif v < min2 then\n            min2 = v\n        end\n    end\n    return\
    \ min2 ~= math.huge and min2 or nil\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "  local smallest = math.huge\n  local second_smallest = math.huge\n  for _, v in\
    \ ipairs(lst) do\n    if v < smallest then\n      second_smallest = smallest\n\
    \      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest == math.huge and nil or second_smallest\n\
    end", "    local smallest, next_smallest = math.huge, math.huge\n    for _, v\
    \ in ipairs(lst) do\n        if v < smallest then\n            next_smallest =\
    \ smallest\n            smallest = v\n        elseif v < next_smallest then\n\
    \            next_smallest = v\n        end\n    end\n    return next_smallest\
    \ == math.huge and nil or next_smallest\nend", "  local smallest = math.huge\n\
    \  local second_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v <\
    \ smallest then\n      second_smallest = smallest\n      smallest = v\n    elseif\
    \ v < second_smallest then\n      second_smallest = v\n    end\n  end\n  return\
    \ second_smallest == math.huge and nil or second_smallest\nend", "    local min\
    \ = math.min(unpack(lst))\n    local min_idx = 1\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_idx = i\n            break\n \
    \       end\n    end\n    table.remove(lst, min_idx)\n    return math.min(unpack(lst))\n\
    end", "  local smallest = math.huge\n  local second_smallest = math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < smallest then\n      second_smallest = smallest\n\
    \      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest == math.huge and nil or second_smallest\n\
    end", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\n\
    end", "  local smallest = math.huge\n  local next_smallest = math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < smallest then\n      next_smallest = smallest\n\
    \      smallest = v\n    elseif v < next_smallest then\n      next_smallest =\
    \ v\n    end\n  end\n  return next_smallest\nend", "    local smallest = math.huge\n\
    \    local second_smallest = math.huge\n    for _, v in ipairs(lst) do\n     \
    \   if v < smallest then\n            second_smallest = smallest\n           \
    \ smallest = v\n        elseif v < second_smallest then\n            second_smallest\
    \ = v\n        end\n    end\n    return second_smallest\nend", "    local smallest\
    \ = math.huge\n    local next_smallest = math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < smallest then\n            next_smallest = smallest\n   \
    \         smallest = v\n        elseif v < next_smallest then\n            next_smallest\
    \ = v\n        end\n    end\n    return next_smallest\nend", "    local min, min2\
    \ = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n\
    \            min2 = min\n            min = v\n        elseif v < min2 then\n \
    \           min2 = v\n        end\n    end\n    return min2 == math.huge and nil\
    \ or min2\nend", "    local min, min2 = math.huge, math.huge\n    for _, v in\
    \ ipairs(lst) do\n        if v < min then\n            min2 = min\n          \
    \  min = v\n        elseif v < min2 then\n            min2 = v\n        end\n\
    \    end\n    return min2 == math.huge and nil or min2\nend", "  local smallest\
    \ = math.huge\n  local next_smallest = math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < smallest then\n      next_smallest = smallest\n      smallest = v\n\
    \    elseif v < next_smallest then\n      next_smallest = v\n    end\n  end\n\
    \  return next_smallest\nend", "\tlocal smallest, second_smallest\n\tfor _, v\
    \ in ipairs(lst) do\n\t\tif not smallest or v < smallest then\n\t\t\tsecond_smallest\
    \ = smallest\n\t\t\tsmallest = v\n\t\telseif not second_smallest or v < second_smallest\
    \ then\n\t\t\tsecond_smallest = v\n\t\tend\n\tend\n\treturn second_smallest\n\
    end", "    local min = math.huge\n    local min2 = math.huge\n    for _, v in\
    \ ipairs(lst) do\n        if v < min then\n            min2 = min\n          \
    \  min = v\n        elseif v < min2 then\n            min2 = v\n        end\n\
    \    end\n    return min2 == math.huge and nil or min2\nend", "  local min = math.huge\n\
    \  local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      min2 = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2\nend", "  local smallest = lst[1]\n  local second_smallest\
    \ = nil\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      second_smallest\
    \ = smallest\n      smallest = lst[i]\n    elseif lst[i] < second_smallest or\
    \ second_smallest == nil then\n      second_smallest = lst[i]\n    end\n  end\n\
    \  return second_smallest\nend", "    local min, min2\n    for _, v in ipairs(lst)\
    \ do\n        if not min or v < min then\n            min2 = min\n           \
    \ min = v\n        elseif not min2 or v < min2 then\n            min2 = v\n  \
    \      end\n    end\n    return min2\nend", "  local smallest = math.huge\n  local\
    \ second_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest\
    \ then\n      second_smallest = smallest\n      smallest = v\n    elseif v < second_smallest\
    \ then\n      second_smallest = v\n    end\n  end\n  return second_smallest\n\
    end", "    local smallest = math.huge\n    local second_smallest = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < smallest then\n            second_smallest\
    \ = smallest\n            smallest = v\n        elseif v < second_smallest then\n\
    \            second_smallest = v\n        end\n    end\n    return second_smallest\
    \ ~= math.huge and second_smallest or nil\nend", "    local smallest, next_smallest\
    \ = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if v < smallest\
    \ then\n            next_smallest = smallest\n            smallest = v\n     \
    \   elseif v < next_smallest then\n            next_smallest = v\n        end\n\
    \    end\n    return next_smallest\nend", "  local smallest = math.huge\n  local\
    \ next_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest\
    \ then\n      next_smallest = smallest\n      smallest = v\n    elseif v < next_smallest\
    \ then\n      next_smallest = v\n    end\n  end\n  return next_smallest\nend",
  "  local min = math.huge\n  local next_min = math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < min then\n      next_min = min\n      min = v\n    elseif v <\
    \ next_min then\n      next_min = v\n    end\n  end\n  return next_min\nend",
  "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if\
    \ v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n  \
    \    min2 = v\n    end\n  end\n  return min2\nend", "    local smallest = math.huge\n\
    \    local second_smallest = math.huge\n    for _, v in ipairs(lst) do\n     \
    \   if v < smallest then\n            second_smallest = smallest\n           \
    \ smallest = v\n        elseif v < second_smallest then\n            second_smallest\
    \ = v\n        end\n    end\n    return second_smallest\nend", "  local smallest,\
    \ second_smallest\n  for _, v in ipairs(lst) do\n    if not smallest or v < smallest\
    \ then\n      second_smallest = smallest\n      smallest = v\n    elseif not second_smallest\
    \ or v < second_smallest then\n      second_smallest = v\n    end\n  end\n  return\
    \ second_smallest\nend", "  local min, min2 = math.huge, math.huge\n  for _, v\
    \ in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n  \
    \  elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge\
    \ and nil or min2\nend", "    local min = math.huge\n    local min2 = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2\nend", "  local smallest = math.huge\n  local\
    \ second_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest\
    \ then\n      second_smallest = smallest\n      smallest = v\n    elseif v < second_smallest\
    \ then\n      second_smallest = v\n    end\n  end\n  return second_smallest ~=\
    \ math.huge and second_smallest or nil\nend", "    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end", "  local smallest = math.huge\n  local next_smallest = math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < smallest then\n      next_smallest = smallest\n\
    \      smallest = v\n    elseif v < next_smallest then\n      next_smallest =\
    \ v\n    end\n  end\n  return next_smallest\nend", "  local min = math.huge\n\
    \  local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      min2 = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2\nend", "  local smallest, next_smallest = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest then\n      next_smallest\
    \ = smallest\n      smallest = v\n    elseif v < next_smallest then\n      next_smallest\
    \ = v\n    end\n  end\n  return next_smallest == math.huge and nil or next_smallest\n\
    end", "    local min, min2\n    for _, v in ipairs(lst) do\n        if not min\
    \ or v < min then\n            min2 = min\n            min = v\n        elseif\
    \ not min2 or v < min2 then\n            min2 = v\n        end\n    end\n    return\
    \ min2\nend", "  local min = math.min(unpack(lst))\n  local min2 = min\n  for\
    \ _, v in ipairs(lst) do\n    if v > min and v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2\nend", "    local smallest, next_smallest = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < smallest then\n  \
    \          next_smallest = smallest\n            smallest = v\n        elseif\
    \ v < next_smallest then\n            next_smallest = v\n        end\n    end\n\
    \    return next_smallest == math.huge and nil or next_smallest\nend", "  local\
    \ min = math.min(unpack(lst))\n  local min_idx = nil\n  for i, v in ipairs(lst)\
    \ do\n    if v == min then\n      min_idx = i\n      break\n    end\n  end\n \
    \ table.remove(lst, min_idx)\n  return math.min(unpack(lst))\nend", "  local min,\
    \ min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n      min2\
    \ = min\n      min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n\
    \    end\n  end\n  return min2\nend", "    local min, min2 = math.huge, math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2 == math.huge and nil or min2\nend", "  local\
    \ min = math.min(unpack(lst))\n  local min_idx = nil\n  for i, v in ipairs(lst)\
    \ do\n    if v == min then\n      min_idx = i\n      break\n    end\n  end\n \
    \ table.remove(lst, min_idx)\n  return math.min(unpack(lst))\nend", "  local min\
    \ = math.min(unpack(lst))\n  local min_idx = 0\n  for i, v in ipairs(lst) do\n\
    \    if v == min then\n      min_idx = i\n      break\n    end\n  end\n  table.remove(lst,\
    \ min_idx)\n  return math.min(unpack(lst))\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\n\
    end", "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2 ~= math.huge and min2 or nil\nend", "  local smallest = lst[1]\n\
    \  local next_smallest = nil\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      next_smallest = smallest\n      smallest = lst[i]\n    elseif lst[i] <\
    \ next_smallest or next_smallest == nil then\n      next_smallest = lst[i]\n \
    \   end\n  end\n  return next_smallest\nend", "    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 ~= math.huge and min2 or\
    \ nil\nend", "    local min, min2\n    for _, v in ipairs(lst) do\n        if\
    \ not min or v < min then\n            min2 = min\n            min = v\n     \
    \   elseif not min2 or v < min2 then\n            min2 = v\n        end\n    end\n\
    \    return min2\nend", "    local min = math.huge\n    local min2 = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2\nend", "  local min = math.min(unpack(lst))\n\
    \  local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v > min and v\
    \ < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and\
    \ nil or min2\nend", "    local smallest = lst[1]\n    local next_smallest = nil\n\
    \    for i = 2, #lst do\n        if lst[i] < smallest then\n            next_smallest\
    \ = smallest\n            smallest = lst[i]\n        elseif lst[i] < next_smallest\
    \ or next_smallest == nil then\n            next_smallest = lst[i]\n        end\n\
    \    end\n    return next_smallest\nend", "  local min = math.min(unpack(lst))\n\
    \  local min_idx = nil\n  for i, v in ipairs(lst) do\n    if v == min then\n \
    \     min_idx = i\n      break\n    end\n  end\n  table.remove(lst, min_idx)\n\
    \  return math.min(unpack(lst))\nend", "    local min = math.huge\n    local min2\
    \ = math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n     \
    \       min2 = min\n            min = v\n        elseif v < min2 then\n      \
    \      min2 = v\n        end\n    end\n    return min2\nend", "    local min,\
    \ min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if v <\
    \ min then\n            min2 = min\n            min = v\n        elseif v < min2\
    \ then\n            min2 = v\n        end\n    end\n    return min2 == math.huge\
    \ and nil or min2\nend", "  local min = math.huge\n  local min2 = math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "    local smallest = math.huge\n    local\
    \ second_smallest = math.huge\n    for _, v in ipairs(lst) do\n        if v <\
    \ smallest then\n            second_smallest = smallest\n            smallest\
    \ = v\n        elseif v < second_smallest then\n            second_smallest =\
    \ v\n        end\n    end\n    return second_smallest == math.huge and nil or\
    \ second_smallest\nend", "    local smallest, second_smallest\n    for _, v in\
    \ ipairs(lst) do\n        if not smallest or v < smallest then\n            second_smallest\
    \ = smallest\n            smallest = v\n        elseif not second_smallest or\
    \ v < second_smallest then\n            second_smallest = v\n        end\n   \
    \ end\n    return second_smallest\nend", "  local min = math.huge\n  local min2\
    \ = math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 =\
    \ min\n      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2 == math.huge and nil or min2\nend", "    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend", "  local smallest\
    \ = math.huge\n  local next_smallest = math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < smallest then\n      next_smallest = smallest\n      smallest = v\n\
    \    elseif v < next_smallest then\n      next_smallest = v\n    end\n  end\n\
    \  return next_smallest == math.huge and nil or next_smallest\nend", "  local\
    \ min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min\
    \ then\n      min2 = min\n      min = v\n    elseif v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2 == math.huge and nil or min2\nend", "   \
    \ local smallest, second_smallest\n    for _, v in ipairs(lst) do\n        if\
    \ not smallest or v < smallest then\n            second_smallest = smallest\n\
    \            smallest = v\n        elseif not second_smallest or v < second_smallest\
    \ then\n            second_smallest = v\n        end\n    end\n    return second_smallest\n\
    end", "    local min, min2\n    for _, v in ipairs(lst) do\n        if not min\
    \ or v < min then\n            min2 = min\n            min = v\n        elseif\
    \ not min2 or v < min2 then\n            min2 = v\n        end\n    end\n    return\
    \ min2\nend", "    local min, min2\n    for _, v in ipairs(lst) do\n        if\
    \ not min or v < min then\n            min2 = min\n            min = v\n     \
    \   elseif not min2 or v < min2 then\n            min2 = v\n        end\n    end\n\
    \    return min2\nend", "  local smallest = math.huge\n  local second_smallest\
    \ = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest then\n      second_smallest\
    \ = smallest\n      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest == math.huge and nil or second_smallest\n\
    end", "  -- TODO: Implement this function.\n  return nil\nend", "    local min,\
    \ min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if v <\
    \ min then\n            min2 = min\n            min = v\n        elseif v < min2\
    \ then\n            min2 = v\n        end\n    end\n    return min2 ~= math.huge\
    \ and min2 or nil\nend", "  local min = math.min(unpack(lst))\n  local min_idx\
    \ = 1\n  for i, v in ipairs(lst) do\n    if v == min then\n      min_idx = i\n\
    \      break\n    end\n  end\n  table.remove(lst, min_idx)\n  if #lst == 0 then\n\
    \    return nil\n  end\n  return math.min(unpack(lst))\nend", "  local min = math.huge\n\
    \  local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      min2 = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ ~= math.huge and min2 or nil\nend", "    local smallest = math.huge\n    local\
    \ second_smallest = math.huge\n    for _, v in ipairs(lst) do\n        if v <\
    \ smallest then\n            second_smallest = smallest\n            smallest\
    \ = v\n        elseif v < second_smallest then\n            second_smallest =\
    \ v\n        end\n    end\n    return second_smallest == math.huge and nil or\
    \ second_smallest\nend", "  local min, next_min\n  for _, v in ipairs(lst) do\n\
    \    if not min or v < min then\n      next_min = min\n      min = v\n    elseif\
    \ not next_min or v < next_min then\n      next_min = v\n    end\n  end\n  return\
    \ next_min\nend", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2\
    \ then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or\
    \ min2\nend", "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min\
    \ or v < min then\n      min2 = min\n      min = v\n    elseif not min2 or v <\
    \ min2 then\n      min2 = v\n    end\n  end\n  return min2\nend", "  local smallest,\
    \ next_smallest\n  for _, v in ipairs(lst) do\n    if not smallest or v < smallest\
    \ then\n      next_smallest = smallest\n      smallest = v\n    elseif not next_smallest\
    \ or v < next_smallest then\n      next_smallest = v\n    end\n  end\n  return\
    \ next_smallest\nend", "    local smallest = math.huge\n    local next_smallest\
    \ = math.huge\n    for _, v in ipairs(lst) do\n        if v < smallest then\n\
    \            next_smallest = smallest\n            smallest = v\n        elseif\
    \ v < next_smallest then\n            next_smallest = v\n        end\n    end\n\
    \    return next_smallest\nend", "    local min, min2 = math.huge, math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2 == math.huge and nil or min2\nend", "  local\
    \ smallest = math.huge\n  local next_smallest = math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < smallest then\n      next_smallest = smallest\n      smallest\
    \ = v\n    elseif v < next_smallest then\n      next_smallest = v\n    end\n \
    \ end\n  return next_smallest\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "    local min = math.min(unpack(lst))\n    local min_idx = nil\n    for i, v in\
    \ ipairs(lst) do\n        if v == min then\n            min_idx = i\n        \
    \    break\n        end\n    end\n    table.remove(lst, min_idx)\n    if #lst\
    \ == 0 then\n        return nil\n    end\n    return math.min(unpack(lst))\nend",
  "  local smallest, next_smallest = math.huge, math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < smallest then\n      next_smallest = smallest\n      smallest\
    \ = v\n    elseif v < next_smallest then\n      next_smallest = v\n    end\n \
    \ end\n  return next_smallest == math.huge and nil or next_smallest\nend", " \
    \   local smallest, next_smallest = math.huge, math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < smallest then\n            next_smallest = smallest\n   \
    \         smallest = v\n        elseif v < next_smallest then\n            next_smallest\
    \ = v\n        end\n    end\n    return next_smallest == math.huge and nil or\
    \ next_smallest\nend", "    local smallest = math.huge\n    local next_smallest\
    \ = math.huge\n    for _, v in ipairs(lst) do\n        if v < smallest then\n\
    \            next_smallest = smallest\n            smallest = v\n        elseif\
    \ v < next_smallest then\n            next_smallest = v\n        end\n    end\n\
    \    return next_smallest == math.huge and nil or next_smallest\nend", "  local\
    \ min = math.huge\n  local next_min = math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      next_min = min\n      min = v\n    elseif v < next_min\
    \ then\n      next_min = v\n    end\n  end\n  return next_min ~= math.huge and\
    \ next_min or nil\nend", "    local min = math.huge\n    local nmin = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            nmin = min\n\
    \            min = v\n        elseif v < nmin then\n            nmin = v\n   \
    \     end\n    end\n    return nmin == math.huge and nil or nmin\nend", "  local\
    \ min = math.huge\n  local min2 = math.huge\n  for _, v in ipairs(lst) do\n  \
    \  if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\n\
    end", "  local smallest = math.huge\n  local second_smallest = math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < smallest then\n      second_smallest = smallest\n\
    \      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest\nend", "    local min = math.huge\n\
    \    local min2 = math.huge\n    for _, v in ipairs(lst) do\n        if v < min\
    \ then\n            min2 = min\n            min = v\n        elseif v < min2 then\n\
    \            min2 = v\n        end\n    end\n    return min2 == math.huge and\
    \ nil or min2\nend", "    local min = math.huge\n    local min2 = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2\nend", "    local smallest = math.huge\n \
    \   local second_smallest = math.huge\n    for _, v in ipairs(lst) do\n      \
    \  if v < smallest then\n            second_smallest = smallest\n            smallest\
    \ = v\n        elseif v < second_smallest then\n            second_smallest =\
    \ v\n        end\n    end\n    return second_smallest == math.huge and nil or\
    \ second_smallest\nend", "  local min, min2\n  for _, v in ipairs(lst) do\n  \
    \  if not min or v < min then\n      min2 = min\n      min = v\n    elseif not\
    \ min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "    local smallest = math.huge\n    local second_smallest = math.huge\n    for\
    \ _, v in ipairs(lst) do\n        if v < smallest then\n            second_smallest\
    \ = smallest\n            smallest = v\n        elseif v < second_smallest then\n\
    \            second_smallest = v\n        end\n    end\n    return second_smallest\
    \ == math.huge and nil or second_smallest\nend", "    local min = math.min(unpack(lst))\n\
    \    local min_idx = 0\n    for i, v in ipairs(lst) do\n        if v == min then\n\
    \            min_idx = i\n            break\n        end\n    end\n    table.remove(lst,\
    \ min_idx)\n    return math.min(unpack(lst))\nend", "    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end", "  local min = math.min(unpack(lst))\n  local min_idx = 0\n  for i, v in\
    \ ipairs(lst) do\n    if v == min then\n      min_idx = i\n      break\n    end\n\
    \  end\n  table.remove(lst, min_idx)\n  return math.min(unpack(lst))\nend", " \
    \   local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n \
    \       if v < min then\n            min2 = min\n            min = v\n       \
    \ elseif v < min2 then\n            min2 = v\n        end\n    end\n    return\
    \ min2 == math.huge and nil or min2\nend", "    local smallest = math.huge\n \
    \   local second_smallest = math.huge\n    for _, v in ipairs(lst) do\n      \
    \  if v < smallest then\n            second_smallest = smallest\n            smallest\
    \ = v\n        elseif v < second_smallest then\n            second_smallest =\
    \ v\n        end\n    end\n    return second_smallest ~= math.huge and second_smallest\
    \ or nil\nend", "    local min = math.huge\n    local next_min = math.huge\n \
    \   for _, v in ipairs(lst) do\n        if v < min then\n            next_min\
    \ = min\n            min = v\n        elseif v < next_min then\n            next_min\
    \ = v\n        end\n    end\n    return next_min ~= math.huge and next_min or\
    \ nil\nend", "    local min = math.min(unpack(lst))\n    local min_idx = table.index_of(lst,\
    \ min)\n    table.remove(lst, min_idx)\n    return math.min(unpack(lst))\nend",
  "    local smallest = math.huge\n    local second_smallest = math.huge\n    for\
    \ _, v in ipairs(lst) do\n        if v < smallest then\n            second_smallest\
    \ = smallest\n            smallest = v\n        elseif v < second_smallest then\n\
    \            second_smallest = v\n        end\n    end\n    return second_smallest\n\
    end", "  local smallest = math.huge\n  local second_smallest = math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < smallest then\n      second_smallest = smallest\n\
    \      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest == math.huge and nil or second_smallest\n\
    end", "    local smallest, next_smallest = math.huge, math.huge\n    for _, v\
    \ in ipairs(lst) do\n        if v < smallest then\n            next_smallest =\
    \ smallest\n            smallest = v\n        elseif v < next_smallest then\n\
    \            next_smallest = v\n        end\n    end\n    return next_smallest\
    \ == math.huge and nil or next_smallest\nend", "  local smallest = math.huge\n\
    \  local next_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest\
    \ then\n      next_smallest = smallest\n      smallest = v\n    elseif v < next_smallest\
    \ then\n      next_smallest = v\n    end\n  end\n  return next_smallest == math.huge\
    \ and nil or next_smallest\nend", "  local smallest = math.huge\n  local second_smallest\
    \ = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest then\n      second_smallest\
    \ = smallest\n      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest\nend", "  local smallest, next_smallest\
    \ = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest then\n\
    \      next_smallest = smallest\n      smallest = v\n    elseif v < next_smallest\
    \ then\n      next_smallest = v\n    end\n  end\n  return next_smallest == math.huge\
    \ and nil or next_smallest\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\n\
    end", "    local min = math.huge\n    local min2 = math.huge\n    for _, v in\
    \ ipairs(lst) do\n        if v < min then\n            min2 = min\n          \
    \  min = v\n        elseif v < min2 then\n            min2 = v\n        end\n\
    \    end\n    return min2\nend", "  local smallest = math.huge\n  local next_smallest\
    \ = math.huge\n  for _, v in ipairs(lst) do\n    if v < smallest then\n      next_smallest\
    \ = smallest\n      smallest = v\n    elseif v < next_smallest then\n      next_smallest\
    \ = v\n    end\n  end\n  return next_smallest\nend", "  local min, min2\n  for\
    \ _, v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n \
    \     min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n\
    \  end\n  return min2\nend", "  local min, min2 = math.huge, math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n\
    \    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge\
    \ and nil or min2\nend", "    local min = math.huge\n    local min2 = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2\nend", "  local min = math.min(unpack(lst))\n\
    \  local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v > min and v\
    \ < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and\
    \ nil or min2\nend", "  local min = math.huge\n  local min2 = math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n\
    \    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge\
    \ and nil or min2\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
