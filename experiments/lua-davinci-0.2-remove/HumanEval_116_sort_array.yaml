name: HumanEval_116_sort_array
language: lua
prompt: "-- In this Kata, you have to sort an array of non-negative integers according\
  \ to\n-- number of ones in their binary representation in ascending order.\n-- For\
  \ similar number of ones, sort based on decimal value.\n-- It must be implemented\
  \ like this:\nlocal function sort_array(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
  \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
  \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
  \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
  \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
  \ 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "    local function count_ones(n)\n        local count = 0\n    \
    \    while n > 0 do\n            n = n & (n - 1)\n            count = count +\
    \ 1\n        end\n        return count\n    end\n    table.sort(arr, function(a,\
    \ b)\n        local ones_a = count_ones(a)\n        local ones_b = count_ones(b)\n\
    \        if ones_a == ones_b then\n            return a < b\n        else\n  \
    \          return ones_a < ones_b\n        end\n    end)\n    return arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones\
    \ = string.gsub(string.format(\"%b\", a), \"[^1]\", \"\")\n    local b_ones =\
    \ string.gsub(string.format(\"%b\", b), \"[^1]\", \"\")\n    if #a_ones == #b_ones\
    \ then\n      return a < b\n    else\n      return #a_ones < #b_ones\n    end\n\
    \  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones =\
    \ b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a < b\n  \
    \  else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n \
    \   local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n     \
    \ return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = a:count('1')\n\
    \    local b_ones = b:count('1')\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count = count +\
    \ 1\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ ones_a, ones_b = count_ones(a), count_ones(b)\n    if ones_a == ones_b then\n\
    \      return a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n\
    \  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = a:count_ones()\n\
    \    local b_ones = b:count_ones()\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "    table.sort(arr, function(a, b)\n        local a_ones = a:gsub('0',\
    \ ''):len()\n        local b_ones = b:gsub('0', ''):len()\n        if a_ones ==\
    \ b_ones then\n            return a < b\n        else\n            return a_ones\
    \ < b_ones\n        end\n    end)\n    return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
