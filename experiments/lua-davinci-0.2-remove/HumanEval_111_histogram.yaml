name: HumanEval_111_histogram
language: lua
prompt: "-- Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
  \ count.\n-- If several letters have the same occurrence, return all of them.\n\
  -- Example:\nlocal function histogram(test)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
  \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
  \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
  \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
  \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b\
  \ b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t']\
  \ = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
  \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    local max = 0\n    for i = 1, #test do\n\
    \        local c = test:sub(i, i)\n        if result[c] == nil then\n        \
    \    result[c] = 1\n        else\n            result[c] = result[c] + 1\n    \
    \    end\n        if result[c] > max then\n            max = result[c]\n     \
    \   end\n    end\n    local final = {}\n    for k, v in pairs(result) do\n   \
    \     if v == max then\n            final[k] = v\n        end\n    end\n    return\
    \ final\nend", "    local dict = {}\n    for i = 1, #test do\n        local letter\
    \ = test:sub(i, i)\n        if dict[letter] then\n            dict[letter] = dict[letter]\
    \ + 1\n        else\n            dict[letter] = 1\n        end\n    end\n    local\
    \ max = 0\n    local max_letters = {}\n    for letter, count in pairs(dict) do\n\
    \        if count > max then\n            max = count\n            max_letters\
    \ = {letter}\n        elseif count == max then\n            table.insert(max_letters,\
    \ letter)\n        end\n    end\n    return max_letters, max\nend", "    local\
    \ hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n     \
    \   if hist[c] then\n            hist[c] = hist[c] + 1\n        else\n       \
    \     hist[c] = 1\n        end\n    end\n    return hist\nend", "    local hist\
    \ = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c]\
    \ = (hist[c] or 0) + 1\n    end\n    local max = 0\n    for k, v in pairs(hist)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ local res = {}\n    for k, v in pairs(hist) do\n        if v == max then\n \
    \           res[k] = v\n        end\n    end\n    return res\nend", "    local\
    \ hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n     \
    \   hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local result\
    \ = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if result[c] then\n            result[c] = result[c] + 1\n     \
    \   else\n            result[c] = 1\n        end\n        if result[c] > max then\n\
    \            max = result[c]\n        end\n    end\n    local max_letters = {}\n\
    \    for k, v in pairs(result) do\n        if v == max then\n            max_letters[#max_letters\
    \ + 1] = k\n        end\n    end\n    return max_letters, max\nend", "    local\
    \ letters = {}\n    local max = 0\n    for i = 1, #test do\n        local letter\
    \ = test:sub(i, i)\n        if letters[letter] then\n            letters[letter]\
    \ = letters[letter] + 1\n        else\n            letters[letter] = 1\n     \
    \   end\n        if letters[letter] > max then\n            max = letters[letter]\n\
    \        end\n    end\n    local result = {}\n    for k, v in pairs(letters) do\n\
    \        if v == max then\n            table.insert(result, k)\n        end\n\
    \    end\n    return result\nend", "    local hist = {}\n    for c in test:gmatch(\"\
    .\") do\n        hist[c] = (hist[c] or 0) + 1\n    end\n    local max = 0\n  \
    \  for _, v in pairs(hist) do\n        max = math.max(max, v)\n    end\n    local\
    \ result = {}\n    for k, v in pairs(hist) do\n        if v == max then\n    \
    \        result[#result + 1] = k\n        end\n    end\n    return result\nend",
  "    local dict = {}\n    for i = 1, #test do\n        local char = test:sub(i,\
    \ i)\n        if dict[char] then\n            dict[char] = dict[char] + 1\n  \
    \      else\n            dict[char] = 1\n        end\n    end\n    return dict\n\
    end", "    local result = {}\n    local max = 0\n    for i = 1, #test do\n   \
    \     local c = test:sub(i, i)\n        if result[c] == nil then\n           \
    \ result[c] = 1\n        else\n            result[c] = result[c] + 1\n       \
    \ end\n        if result[c] > max then\n            max = result[c]\n        end\n\
    \    end\n    local result2 = {}\n    for k, v in pairs(result) do\n        if\
    \ v == max then\n            result2[k] = v\n        end\n    end\n    return\
    \ result2\nend", "    local hist = {}\n    for i = 1, #test do\n        local\
    \ c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return\
    \ hist\nend", "    local hist = {}\n    local max = 0\n    for i = 1, #test do\n\
    \        local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    \
    \    if hist[c] > max then\n            max = hist[c]\n        end\n    end\n\
    \    local res = {}\n    for k, v in pairs(hist) do\n        if v == max then\n\
    \            res[#res + 1] = k\n        end\n    end\n    return res\nend", " \
    \   local dict = {}\n    local max = 0\n    local max_letters = {}\n    for i\
    \ = 1, #test do\n        local letter = test:sub(i, i)\n        if dict[letter]\
    \ == nil then\n            dict[letter] = 1\n        else\n            dict[letter]\
    \ = dict[letter] + 1\n        end\n        if dict[letter] > max then\n      \
    \      max = dict[letter]\n            max_letters = {letter}\n        elseif\
    \ dict[letter] == max then\n            table.insert(max_letters, letter)\n  \
    \      end\n    end\n    return {[max] = max_letters}\nend", "    local result\
    \ = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if result[c] == nil then\n            result[c] = 1\n        else\n\
    \            result[c] = result[c] + 1\n        end\n        if result[c] > max\
    \ then\n            max = result[c]\n        end\n    end\n    local result2 =\
    \ {}\n    for k, v in pairs(result) do\n        if v == max then\n           \
    \ result2[k] = v\n        end\n    end\n    return result2\nend", "    local hist\
    \ = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c]\
    \ = (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local hist = {}\n\
    \    for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c] =\
    \ (hist[c] or 0) + 1\n    end\n    local max = 0\n    for k, v in pairs(hist)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ local result = {}\n    for k, v in pairs(hist) do\n        if v == max then\n\
    \            result[k] = v\n        end\n    end\n    return result\nend", " \
    \   local result = {}\n    local max = 0\n    for i=1,#test do\n        local\
    \ c = test:sub(i,i)\n        if result[c] == nil then\n            result[c] =\
    \ 1\n        else\n            result[c] = result[c] + 1\n        end\n      \
    \  if result[c] > max then\n            max = result[c]\n        end\n    end\n\
    \    local result2 = {}\n    for k,v in pairs(result) do\n        if v == max\
    \ then\n            result2[k] = v\n        end\n    end\n    return result2\n\
    end", "    local result = {}\n    local max = 0\n    for i = 1, #test do\n   \
    \     local c = test:sub(i, i)\n        if result[c] == nil then\n           \
    \ result[c] = 1\n        else\n            result[c] = result[c] + 1\n       \
    \ end\n        if result[c] > max then\n            max = result[c]\n        end\n\
    \    end\n    local res = {}\n    for k, v in pairs(result) do\n        if v ==\
    \ max then\n            res[#res + 1] = k\n        end\n    end\n    return res\n\
    end", "    local dict = {}\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if dict[c] then\n            dict[c] = dict[c] + 1\n        else\n\
    \            dict[c] = 1\n        end\n    end\n    return dict\nend", "    local\
    \ hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n     \
    \   hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local result\
    \ = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if result[c] == nil then\n            result[c] = 1\n        else\n\
    \            result[c] = result[c] + 1\n        end\n        if result[c] > max\
    \ then\n            max = result[c]\n        end\n    end\n    local max_letters\
    \ = {}\n    for k, v in pairs(result) do\n        if v == max then\n         \
    \   table.insert(max_letters, k)\n        end\n    end\n    return {\n       \
    \ max = max,\n        letters = max_letters\n    }\nend", "    local result =\
    \ {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        local count = result[c] or 0\n        result[c] = count + 1\n  \
    \      if count + 1 > max then\n            max = count + 1\n        end\n   \
    \ end\n    local letters = {}\n    for k, v in pairs(result) do\n        if v\
    \ == max then\n            table.insert(letters, k)\n        end\n    end\n  \
    \  return letters, max\nend", "    local dict = {}\n    for i = 1, #test do\n\
    \        local letter = test:sub(i, i)\n        if dict[letter] then\n       \
    \     dict[letter] = dict[letter] + 1\n        else\n            dict[letter]\
    \ = 1\n        end\n    end\n    return dict\nend", "    local letters = {}\n\
    \    local max = 0\n    for i = 1, #test do\n        local letter = test:sub(i,\
    \ i)\n        if not letters[letter] then\n            letters[letter] = 1\n \
    \       else\n            letters[letter] = letters[letter] + 1\n        end\n\
    \        if letters[letter] > max then\n            max = letters[letter]\n  \
    \      end\n    end\n    local result = {}\n    for k, v in pairs(letters) do\n\
    \        if v == max then\n            result[k] = v\n        end\n    end\n \
    \   return result\nend", "    local hist = {}\n    local max = 0\n    for i =\
    \ 1, #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c] or\
    \ 0) + 1\n        if hist[c] > max then\n            max = hist[c]\n        end\n\
    \    end\n    local result = {}\n    for k, v in pairs(hist) do\n        if v\
    \ == max then\n            result[#result + 1] = k\n        end\n    end\n   \
    \ return result\nend", "    local dict = {}\n    local max_count = 0\n    local\
    \ max_letters = {}\n    for i = 1, #test do\n        local letter = test:sub(i,\
    \ i)\n        if dict[letter] == nil then\n            dict[letter] = 1\n    \
    \    else\n            dict[letter] = dict[letter] + 1\n        end\n        if\
    \ dict[letter] > max_count then\n            max_count = dict[letter]\n      \
    \      max_letters = {letter}\n        elseif dict[letter] == max_count then\n\
    \            table.insert(max_letters, letter)\n        end\n    end\n    return\
    \ {count = max_count, letters = max_letters}\nend", "  local hist = {}\n  for\
    \ i = 1, #test do\n    local c = test:sub(i, i)\n    hist[c] = (hist[c] or 0)\
    \ + 1\n  end\n  local max = 0\n  local max_letters = {}\n  for k, v in pairs(hist)\
    \ do\n    if v > max then\n      max = v\n      max_letters = {k}\n    elseif\
    \ v == max then\n      table.insert(max_letters, k)\n    end\n  end\n  return\
    \ max_letters, max\nend", "    local hist = {}\n    for i = 1, #test do\n    \
    \    local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n\
    \    return hist\nend", "    local result = {}\n    local letters = {}\n    local\
    \ max = 0\n    for i = 1, #test do\n        local letter = test:sub(i, i)\n  \
    \      if not letters[letter] then\n            letters[letter] = 1\n        else\n\
    \            letters[letter] = letters[letter] + 1\n        end\n        if letters[letter]\
    \ > max then\n            max = letters[letter]\n        end\n    end\n    for\
    \ k, v in pairs(letters) do\n        if v == max then\n            table.insert(result,\
    \ k)\n        end\n    end\n    return result\nend", "    local hist = {}\n  \
    \  for i = 1, #test do\n        local char = test:sub(i, i)\n        hist[char]\
    \ = (hist[char] or 0) + 1\n    end\n    return hist\nend", "    local dict = {}\n\
    \    for i = 1, #test do\n        local letter = test:sub(i, i)\n        if dict[letter]\
    \ then\n            dict[letter] = dict[letter] + 1\n        else\n          \
    \  dict[letter] = 1\n        end\n    end\n    local max = 0\n    local max_letters\
    \ = {}\n    for k, v in pairs(dict) do\n        if v > max then\n            max\
    \ = v\n            max_letters = {k}\n        elseif v == max then\n         \
    \   table.insert(max_letters, k)\n        end\n    end\n    return max_letters,\
    \ max\nend", "    local hist = {}\n    for i = 1, #test do\n        local c =\
    \ test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    local max\
    \ = 0\n    for k, v in pairs(hist) do\n        if v > max then\n            max\
    \ = v\n        end\n    end\n    local ret = {}\n    for k, v in pairs(hist) do\n\
    \        if v == max then\n            ret[k] = v\n        end\n    end\n    return\
    \ ret\nend", "    local result = {}\n    local max = 0\n    for i = 1, #test do\n\
    \        local c = test:sub(i, i)\n        local count = result[c] or 0\n    \
    \    count = count + 1\n        result[c] = count\n        if count > max then\n\
    \            max = count\n        end\n    end\n    local letters = {}\n    for\
    \ k, v in pairs(result) do\n        if v == max then\n            table.insert(letters,\
    \ k)\n        end\n    end\n    return letters, max\nend", "    local hist = {}\n\
    \    for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c] =\
    \ (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local result = {}\n\
    \    for i = 1, #test do\n        local letter = test:sub(i, i)\n        if result[letter]\
    \ == nil then\n            result[letter] = 1\n        else\n            result[letter]\
    \ = result[letter] + 1\n        end\n    end\n    return result\nend", "    local\
    \ hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n     \
    \   hist[c] = (hist[c] or 0) + 1\n    end\n    local max = 0\n    for k, v in\
    \ pairs(hist) do\n        if v > max then\n            max = v\n        end\n\
    \    end\n    local result = {}\n    for k, v in pairs(hist) do\n        if v\
    \ == max then\n            result[k] = v\n        end\n    end\n    return result\n\
    end", "    local hist = {}\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", " \
    \   local hist = {}\n    for i = 1, #test do\n        local char = test:sub(i,\
    \ i)\n        hist[char] = (hist[char] or 0) + 1\n    end\n    return hist\nend",
  "    local result = {}\n    local max = 0\n    for i = 1, #test do\n        local\
    \ c = test:sub(i, i)\n        local count = result[c] or 0\n        count = count\
    \ + 1\n        result[c] = count\n        if count > max then\n            max\
    \ = count\n        end\n    end\n    local result2 = {}\n    for k, v in pairs(result)\
    \ do\n        if v == max then\n            result2[k] = v\n        end\n    end\n\
    \    return result2\nend", "  local result = {}\n  for i = 1, #test do\n    local\
    \ c = test:sub(i, i)\n    if result[c] then\n      result[c] = result[c] + 1\n\
    \    else\n      result[c] = 1\n    end\n  end\n  return result\nend", "    local\
    \ hist = {}\n    for i = 1, #test do\n        local char = test:sub(i, i)\n  \
    \      hist[char] = (hist[char] or 0) + 1\n    end\n    return hist\nend", " \
    \   local result = {}\n    local max = 0\n    for i = 1, #test do\n        local\
    \ letter = test:sub(i, i)\n        if result[letter] == nil then\n           \
    \ result[letter] = 1\n        else\n            result[letter] = result[letter]\
    \ + 1\n        end\n        if result[letter] > max then\n            max = result[letter]\n\
    \        end\n    end\n    local result2 = {}\n    for k, v in pairs(result) do\n\
    \        if v == max then\n            result2[k] = v\n        end\n    end\n\
    \    return result2\nend", "    local result = {}\n    local max = 0\n    for\
    \ i = 1, #test do\n        local c = test:sub(i, i)\n        if result[c] == nil\
    \ then\n            result[c] = 1\n        else\n            result[c] = result[c]\
    \ + 1\n        end\n        if result[c] > max then\n            max = result[c]\n\
    \        end\n    end\n    local max_letters = {}\n    for k, v in pairs(result)\
    \ do\n        if v == max then\n            table.insert(max_letters, k)\n   \
    \     end\n    end\n    return max_letters, max\nend", "  local hist = {}\n  for\
    \ i = 1, #test do\n    local c = test:sub(i, i)\n    hist[c] = (hist[c] or 0)\
    \ + 1\n  end\n  return hist\nend", "    local letters = {}\n    local max = 0\n\
    \    for i = 1, #test do\n        local letter = test:sub(i, i)\n        if letters[letter]\
    \ == nil then\n            letters[letter] = 1\n        else\n            letters[letter]\
    \ = letters[letter] + 1\n        end\n        if letters[letter] > max then\n\
    \            max = letters[letter]\n        end\n    end\n    local result = {}\n\
    \    for k, v in pairs(letters) do\n        if v == max then\n            result[k]\
    \ = v\n        end\n    end\n    return result\nend", "  local hist = {}\n  for\
    \ i = 1, #test do\n    local c = test:sub(i, i)\n    hist[c] = (hist[c] or 0)\
    \ + 1\n  end\n  local max = 0\n  local max_letters = {}\n  for k, v in pairs(hist)\
    \ do\n    if v > max then\n      max = v\n      max_letters = {k}\n    elseif\
    \ v == max then\n      table.insert(max_letters, k)\n    end\n  end\n  return\
    \ max_letters, max\nend", "    local hist = {}\n    for i = 1, #test do\n    \
    \    local c = test:sub(i, i)\n        if hist[c] then\n            hist[c] =\
    \ hist[c] + 1\n        else\n            hist[c] = 1\n        end\n    end\n \
    \   return hist\nend", "    local hist = {}\n    for i = 1, #test do\n       \
    \ local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n  \
    \  return hist\nend", "    local hist = {}\n    for i = 1, #test do\n        local\
    \ c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return\
    \ hist\nend", "  local hist = {}\n  for i = 1, #test do\n    local char = test:sub(i,\
    \ i)\n    if not hist[char] then\n      hist[char] = 1\n    else\n      hist[char]\
    \ = hist[char] + 1\n    end\n  end\n  return hist\nend", "    local hist = {}\n\
    \    for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c] =\
    \ (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local hist = {}\n \
    \   for i = 1, #test do\n        local char = test:sub(i, i)\n        if hist[char]\
    \ then\n            hist[char] = hist[char] + 1\n        else\n            hist[char]\
    \ = 1\n        end\n    end\n    return hist\nend", "    local hist = {}\n   \
    \ for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c]\
    \ or 0) + 1\n    end\n    return hist\nend", "    local hist = {}\n    for i =\
    \ 1, #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c] or\
    \ 0) + 1\n    end\n    return hist\nend", "    local result = {}\n    local max\
    \ = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n        local\
    \ count = result[c] or 0\n        result[c] = count + 1\n        if count + 1\
    \ > max then\n            max = count + 1\n        end\n    end\n    local letters\
    \ = {}\n    for k, v in pairs(result) do\n        if v == max then\n         \
    \   table.insert(letters, k)\n        end\n    end\n    return letters, max\n\
    end", "    local result = {}\n    local max = 0\n    for i = 1, #test do\n   \
    \     local c = test:sub(i, i)\n        local count = result[c] or 0\n       \
    \ count = count + 1\n        result[c] = count\n        if count > max then\n\
    \            max = count\n        end\n    end\n    local result2 = {}\n    for\
    \ k, v in pairs(result) do\n        if v == max then\n            result2[k] =\
    \ v\n        end\n    end\n    return result2\nend", "  local result = {}\n  local\
    \ max = 0\n  for i = 1, #test do\n    local c = test:sub(i, i)\n    if not result[c]\
    \ then\n      result[c] = 1\n    else\n      result[c] = result[c] + 1\n    end\n\
    \    if result[c] > max then\n      max = result[c]\n    end\n  end\n  local result2\
    \ = {}\n  for k, v in pairs(result) do\n    if v == max then\n      result2[k]\
    \ = v\n    end\n  end\n  return result2\nend", "    local result = {}\n    local\
    \ max = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n       \
    \ if result[c] == nil then\n            result[c] = 1\n        else\n        \
    \    result[c] = result[c] + 1\n        end\n        if result[c] > max then\n\
    \            max = result[c]\n        end\n    end\n    local res = {}\n    for\
    \ k, v in pairs(result) do\n        if v == max then\n            res[#res + 1]\
    \ = k\n        end\n    end\n    return res\nend", "    local dict = {}\n    for\
    \ i = 1, #test do\n        local char = test:sub(i, i)\n        if dict[char]\
    \ == nil then\n            dict[char] = 1\n        else\n            dict[char]\
    \ = dict[char] + 1\n        end\n    end\n    return dict\nend", "    local result\
    \ = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        local count = result[c] or 0\n        result[c] = count + 1\n  \
    \      if result[c] > max then\n            max = result[c]\n        end\n   \
    \ end\n    local result2 = {}\n    for k, v in pairs(result) do\n        if v\
    \ == max then\n            result2[k] = v\n        end\n    end\n    return result2\n\
    end", "  local hist = {}\n  for i = 1, #test do\n    local c = test:sub(i, i)\n\
    \    hist[c] = (hist[c] or 0) + 1\n  end\n  return hist\nend", "    local hist\
    \ = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n        if\
    \ hist[c] then\n            hist[c] = hist[c] + 1\n        else\n            hist[c]\
    \ = 1\n        end\n    end\n    return hist\nend", "    local result = {}\n \
    \   local max = 0\n    for i = 1, #test do\n        local letter = test:sub(i,\
    \ i)\n        if not result[letter] then\n            result[letter] = 1\n   \
    \     else\n            result[letter] = result[letter] + 1\n        end\n   \
    \     if result[letter] > max then\n            max = result[letter]\n       \
    \ end\n    end\n    local result2 = {}\n    for k, v in pairs(result) do\n   \
    \     if v == max then\n            result2[k] = v\n        end\n    end\n   \
    \ return result2\nend", "    local result = {}\n    local max = 0\n    for i =\
    \ 1, #test do\n        local c = test:sub(i, i)\n        if result[c] == nil then\n\
    \            result[c] = 1\n        else\n            result[c] = result[c] +\
    \ 1\n        end\n        if result[c] > max then\n            max = result[c]\n\
    \        end\n    end\n    local res = {}\n    for k, v in pairs(result) do\n\
    \        if v == max then\n            res[#res + 1] = k\n        end\n    end\n\
    \    return res\nend", "    local hist = {}\n    for i = 1, #test do\n       \
    \ local c = test:sub(i, i)\n        if hist[c] then\n            hist[c] = hist[c]\
    \ + 1\n        else\n            hist[c] = 1\n        end\n    end\n    return\
    \ hist\nend", "    local hist = {}\n    for i = 1, #test do\n        local c =\
    \ test:sub(i, i)\n        if hist[c] == nil then\n            hist[c] = 1\n  \
    \      else\n            hist[c] = hist[c] + 1\n        end\n    end\n    return\
    \ hist\nend", "    local hist = {}\n    for i = 1, #test do\n        local c =\
    \ test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\n\
    end", "    local letters = {}\n    local max = 0\n    for i = 1, #test do\n  \
    \      local letter = test:sub(i, i)\n        if letters[letter] == nil then\n\
    \            letters[letter] = 1\n        else\n            letters[letter] =\
    \ letters[letter] + 1\n        end\n        if letters[letter] > max then\n  \
    \          max = letters[letter]\n        end\n    end\n    local result = {}\n\
    \    for k, v in pairs(letters) do\n        if v == max then\n            result[k]\
    \ = v\n        end\n    end\n    return result\nend", "    local hist = {}\n \
    \   for i = 1, #test do\n        local char = test:sub(i, i)\n        hist[char]\
    \ = (hist[char] or 0) + 1\n    end\n    local max = 0\n    local max_chars = {}\n\
    \    for char, count in pairs(hist) do\n        if count > max then\n        \
    \    max = count\n            max_chars = {char}\n        elseif count == max\
    \ then\n            table.insert(max_chars, char)\n        end\n    end\n    return\
    \ max_chars, max\nend", "    local dict = {}\n    local max = 0\n    for i = 1,\
    \ #test do\n        local c = test:sub(i, i)\n        if dict[c] == nil then\n\
    \            dict[c] = 1\n        else\n            dict[c] = dict[c] + 1\n  \
    \      end\n        if dict[c] > max then\n            max = dict[c]\n       \
    \ end\n    end\n    local result = {}\n    for k, v in pairs(dict) do\n      \
    \  if v == max then\n            table.insert(result, k)\n        end\n    end\n\
    \    return result\nend", "    local dict = {}\n    for i = 1, #test do\n    \
    \    local c = test:sub(i, i)\n        if dict[c] then\n            dict[c] =\
    \ dict[c] + 1\n        else\n            dict[c] = 1\n        end\n    end\n \
    \   return dict\nend", "    local result = {}\n    local max = 0\n    for i =\
    \ 1, #test do\n        local c = test:sub(i, i)\n        if not result[c] then\n\
    \            result[c] = 1\n        else\n            result[c] = result[c] +\
    \ 1\n        end\n        if result[c] > max then\n            max = result[c]\n\
    \        end\n    end\n    local res = {}\n    for k, v in pairs(result) do\n\
    \        if v == max then\n            res[#res + 1] = k\n        end\n    end\n\
    \    return res\nend", "    local hist = {}\n    for i = 1, #test do\n       \
    \ local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n  \
    \  return hist\nend", "    local dict = {}\n    local max = 0\n    for i = 1,\
    \ #test do\n        local c = test:sub(i, i)\n        if not dict[c] then\n  \
    \          dict[c] = 1\n        else\n            dict[c] = dict[c] + 1\n    \
    \    end\n        if dict[c] > max then\n            max = dict[c]\n        end\n\
    \    end\n    local result = {}\n    for k, v in pairs(dict) do\n        if v\
    \ == max then\n            table.insert(result, k)\n        end\n    end\n   \
    \ return result\nend", "    local hist = {}\n    for i = 1, #test do\n       \
    \ local letter = test:sub(i, i)\n        if hist[letter] then\n            hist[letter]\
    \ = hist[letter] + 1\n        else\n            hist[letter] = 1\n        end\n\
    \    end\n    return hist\nend", "    local result = {}\n    local max = 0\n \
    \   for i = 1, #test do\n        local c = test:sub(i, i)\n        local count\
    \ = result[c] or 0\n        count = count + 1\n        result[c] = count\n   \
    \     if count > max then\n            max = count\n        end\n    end\n   \
    \ local result2 = {}\n    for k, v in pairs(result) do\n        if v == max then\n\
    \            result2[k] = v\n        end\n    end\n    return result2\nend", " \
    \   local dict = {}\n    for i = 1, #test do\n        local letter = test:sub(i,\
    \ i)\n        if dict[letter] then\n            dict[letter] = dict[letter] +\
    \ 1\n        else\n            dict[letter] = 1\n        end\n    end\n    local\
    \ max = 0\n    local max_letters = {}\n    for k, v in pairs(dict) do\n      \
    \  if v > max then\n            max = v\n            max_letters = {k}\n     \
    \   elseif v == max then\n            table.insert(max_letters, k)\n        end\n\
    \    end\n    return max_letters, max\nend", "    local hist = {}\n    for i =\
    \ 1, #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c] or\
    \ 0) + 1\n    end\n    return hist\nend", "    local hist = {}\n    for i = 1,\
    \ #test do\n        local char = test:sub(i, i)\n        if hist[char] then\n\
    \            hist[char] = hist[char] + 1\n        else\n            hist[char]\
    \ = 1\n        end\n    end\n    return hist\nend", "    local letters = {}\n\
    \    local max = 0\n    for i = 1, #test do\n        local letter = test:sub(i,\
    \ i)\n        if letters[letter] == nil then\n            letters[letter] = 1\n\
    \        else\n            letters[letter] = letters[letter] + 1\n        end\n\
    \        if letters[letter] > max then\n            max = letters[letter]\n  \
    \      end\n    end\n    local result = {}\n    for k, v in pairs(letters) do\n\
    \        if v == max then\n            result[k] = v\n        end\n    end\n \
    \   return result\nend", "    local result = {}\n    local max = 0\n    for i\
    \ = 1, #test do\n        local c = test:sub(i, i)\n        local count = result[c]\
    \ or 0\n        result[c] = count + 1\n        if count + 1 > max then\n     \
    \       max = count + 1\n        end\n    end\n    local letters = {}\n    for\
    \ k, v in pairs(result) do\n        if v == max then\n            table.insert(letters,\
    \ k)\n        end\n    end\n    return {\n        letters = letters,\n       \
    \ count = max\n    }\nend", "    local letters = {}\n    local max = 0\n    for\
    \ i = 1, #test do\n        local letter = test:sub(i, i)\n        if letters[letter]\
    \ == nil then\n            letters[letter] = 1\n        else\n            letters[letter]\
    \ = letters[letter] + 1\n        end\n        if letters[letter] > max then\n\
    \            max = letters[letter]\n        end\n    end\n    local result = {}\n\
    \    for k, v in pairs(letters) do\n        if v == max then\n            result[k]\
    \ = v\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n\
    \        if not result[c] then\n            result[c] = 1\n        else\n    \
    \        result[c] = result[c] + 1\n        end\n        if result[c] > max then\n\
    \            max = result[c]\n        end\n    end\n    local final = {}\n   \
    \ for k, v in pairs(result) do\n        if v == max then\n            final[k]\
    \ = v\n        end\n    end\n    return final\nend", "    local hist = {}\n  \
    \  for i = 1, #test do\n        local c = test:sub(i, i)\n        if hist[c] then\n\
    \            hist[c] = hist[c] + 1\n        else\n            hist[c] = 1\n  \
    \      end\n    end\n    return hist\nend", "    local result = {}\n    local\
    \ max = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n       \
    \ if result[c] == nil then\n            result[c] = 1\n        else\n        \
    \    result[c] = result[c] + 1\n        end\n        if result[c] > max then\n\
    \            max = result[c]\n        end\n    end\n    local result2 = {}\n \
    \   for k, v in pairs(result) do\n        if v == max then\n            result2[k]\
    \ = v\n        end\n    end\n    return result2\nend", "    local dict = {}\n\
    \    local max = 0\n    local max_letters = {}\n    for i = 1, #test do\n    \
    \    local letter = test:sub(i, i)\n        if dict[letter] == nil then\n    \
    \        dict[letter] = 1\n        else\n            dict[letter] = dict[letter]\
    \ + 1\n        end\n        if dict[letter] > max then\n            max = dict[letter]\n\
    \            max_letters = {letter}\n        elseif dict[letter] == max then\n\
    \            table.insert(max_letters, letter)\n        end\n    end\n    return\
    \ max_letters, max\nend", "    local letters = {}\n    for i = 1, #test do\n \
    \       local letter = test:sub(i, i)\n        if letters[letter] == nil then\n\
    \            letters[letter] = 1\n        else\n            letters[letter] =\
    \ letters[letter] + 1\n        end\n    end\n    local max = 0\n    local max_letters\
    \ = {}\n    for letter, count in pairs(letters) do\n        if count > max then\n\
    \            max = count\n            max_letters = {letter}\n        elseif count\
    \ == max then\n            table.insert(max_letters, letter)\n        end\n  \
    \  end\n    return max_letters, max\nend", "    local hist = {}\n    for i = 1,\
    \ #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0)\
    \ + 1\n    end\n    return hist\nend", "    local hist = {}\n    for i = 1, #test\
    \ do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n\
    \    end\n    local max = 0\n    for k, v in pairs(hist) do\n        if v > max\
    \ then\n            max = v\n        end\n    end\n    local result = {}\n   \
    \ for k, v in pairs(hist) do\n        if v == max then\n            result[k]\
    \ = v\n        end\n    end\n    return result\nend", "    local hist = {}\n \
    \   local max = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n\
    \        hist[c] = (hist[c] or 0) + 1\n        if hist[c] > max then\n       \
    \     max = hist[c]\n        end\n    end\n    local result = {}\n    for k, v\
    \ in pairs(hist) do\n        if v == max then\n            result[#result + 1]\
    \ = k\n        end\n    end\n    return result\nend", "    local hist = {}\n \
    \   for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c]\
    \ or 0) + 1\n    end\n    return hist\nend", "    local result = {}\n    local\
    \ max = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n       \
    \ if not result[c] then\n            result[c] = 1\n        else\n           \
    \ result[c] = result[c] + 1\n        end\n        if result[c] > max then\n  \
    \          max = result[c]\n        end\n    end\n    local res = {}\n    for\
    \ k, v in pairs(result) do\n        if v == max then\n            res[#res + 1]\
    \ = k\n        end\n    end\n    return res\nend", "    local hist = {}\n    for\
    \ i = 1, #test do\n        local char = test:sub(i, i)\n        hist[char] = (hist[char]\
    \ or 0) + 1\n    end\n    return hist\nend", "    local hist = {}\n    for i =\
    \ 1, #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c] or\
    \ 0) + 1\n    end\n    return hist\nend", "    local hist = {}\n    for i = 1,\
    \ #test do\n        local char = test:sub(i, i)\n        hist[char] = (hist[char]\
    \ or 0) + 1\n    end\n    return hist\nend", "    local hist = {}\n    local max\
    \ = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c]\
    \ = (hist[c] or 0) + 1\n        if hist[c] > max then\n            max = hist[c]\n\
    \        end\n    end\n    local result = {}\n    for k, v in pairs(hist) do\n\
    \        if v == max then\n            result[#result + 1] = k\n        end\n\
    \    end\n    return result\nend", "    local hist = {}\n    for i = 1, #test\
    \ do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n\
    \    end\n    return hist\nend", "  local hist = {}\n  for i = 1, #test do\n \
    \   local c = test:sub(i, i)\n    hist[c] = (hist[c] or 0) + 1\n  end\n  return\
    \ hist\nend", "    local hist = {}\n    for i = 1, #test do\n        local c =\
    \ test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\n\
    end", "    local hist = {}\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", " \
    \   local hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n\
    \        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local\
    \ result = {}\n    local max = 0\n    for i = 1, #test do\n        local char\
    \ = test:sub(i, i)\n        if result[char] == nil then\n            result[char]\
    \ = 1\n        else\n            result[char] = result[char] + 1\n        end\n\
    \        if result[char] > max then\n            max = result[char]\n        end\n\
    \    end\n    local result2 = {}\n    for k, v in pairs(result) do\n        if\
    \ v == max then\n            result2[k] = v\n        end\n    end\n    return\
    \ result2\nend", "    local hist = {}\n    for i = 1, #test do\n        local\
    \ c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return\
    \ hist\nend", "    local hist = {}\n    for i = 1, #test do\n        local c =\
    \ test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\n\
    end", "    local hist = {}\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", " \
    \   local hist = {}\n    for i = 1, #test do\n        local char = test:sub(i,\
    \ i)\n        if hist[char] then\n            hist[char] = hist[char] + 1\n  \
    \      else\n            hist[char] = 1\n        end\n    end\n    return hist\n\
    end", "    local hist = {}\n    for i = 1, #test do\n        local char = test:sub(i,\
    \ i)\n        if hist[char] then\n            hist[char] = hist[char] + 1\n  \
    \      else\n            hist[char] = 1\n        end\n    end\n    return hist\n\
    end", "  local hist = {}\n  for i = 1, #test do\n    local c = test:sub(i, i)\n\
    \    hist[c] = (hist[c] or 0) + 1\n  end\n  local max = 0\n  for k, v in pairs(hist)\
    \ do\n    if v > max then\n      max = v\n    end\n  end\n  local result = {}\n\
    \  for k, v in pairs(hist) do\n    if v == max then\n      result[k] = v\n   \
    \ end\n  end\n  return result\nend", "  local hist = {}\n  for i = 1, #test do\n\
    \    local c = test:sub(i, i)\n    hist[c] = (hist[c] or 0) + 1\n  end\n  return\
    \ hist\nend", "    local hist = {}\n    for i = 1, #test do\n        local c =\
    \ test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\n\
    end", "    local hist = {}\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", " \
    \   local result = {}\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if result[c] == nil then\n            result[c] = 1\n        else\n\
    \            result[c] = result[c] + 1\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  local max = 0\n  for i = 1, #test do\n    local\
    \ c = test:sub(i, i)\n    if result[c] == nil then\n      result[c] = 1\n    else\n\
    \      result[c] = result[c] + 1\n    end\n    if result[c] > max then\n     \
    \ max = result[c]\n    end\n  end\n  local res = {}\n  for k, v in pairs(result)\
    \ do\n    if v == max then\n      res[#res + 1] = k\n    end\n  end\n  return\
    \ res\nend", "    local hist = {}\n    for i = 1, #test do\n        local c =\
    \ test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    local max\
    \ = 0\n    for _, v in pairs(hist) do\n        if v > max then\n            max\
    \ = v\n        end\n    end\n    local result = {}\n    for k, v in pairs(hist)\
    \ do\n        if v == max then\n            result[k] = v\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    local max = 0\n    for i\
    \ = 1, #test do\n        local c = test:sub(i, i)\n        if result[c] == nil\
    \ then\n            result[c] = 1\n        else\n            result[c] = result[c]\
    \ + 1\n        end\n        if result[c] > max then\n            max = result[c]\n\
    \        end\n    end\n    local result2 = {}\n    for k, v in pairs(result) do\n\
    \        if v == max then\n            result2[k] = v\n        end\n    end\n\
    \    return result2\nend", "    local hist = {}\n    for i = 1, #test do\n   \
    \     local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n\
    \    return hist\nend", "  local result = {}\n  local max = 0\n  for i = 1, #test\
    \ do\n    local letter = test:sub(i, i)\n    if result[letter] == nil then\n \
    \     result[letter] = 1\n    else\n      result[letter] = result[letter] + 1\n\
    \    end\n    if result[letter] > max then\n      max = result[letter]\n    end\n\
    \  end\n  local max_letters = {}\n  for k, v in pairs(result) do\n    if v ==\
    \ max then\n      table.insert(max_letters, k)\n    end\n  end\n  return max_letters,\
    \ max\nend", "    local hist = {}\n    for i = 1, #test do\n        local c =\
    \ test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    local max\
    \ = 0\n    for k, v in pairs(hist) do\n        if v > max then\n            max\
    \ = v\n        end\n    end\n    local res = {}\n    for k, v in pairs(hist) do\n\
    \        if v == max then\n            res[k] = v\n        end\n    end\n    return\
    \ res\nend", "    local hist = {}\n    for i = 1, #test do\n        local c =\
    \ test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\n\
    end", "    local hist = {}\n    local max = 0\n    for i = 1, #test do\n     \
    \   local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n        if\
    \ hist[c] > max then\n            max = hist[c]\n        end\n    end\n    local\
    \ result = {}\n    for k, v in pairs(hist) do\n        if v == max then\n    \
    \        result[#result + 1] = k\n        end\n    end\n    return result\nend",
  "    local hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n\
    \        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local\
    \ result = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        local count = result[c] or 0\n        result[c] = count + 1\n  \
    \      if count + 1 > max then\n            max = count + 1\n        end\n   \
    \ end\n    local result2 = {}\n    for k, v in pairs(result) do\n        if v\
    \ == max then\n            result2[k] = v\n        end\n    end\n    return result2\n\
    end", "    local result = {}\n    for i = 1, #test do\n        local char = test:sub(i,\
    \ i)\n        if result[char] then\n            result[char] = result[char] +\
    \ 1\n        else\n            result[char] = 1\n        end\n    end\n    return\
    \ result\nend", "    local hist = {}\n    for i = 1, #test do\n        local c\
    \ = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return\
    \ hist\nend", "    local result = {}\n    local max = 0\n    for i = 1, #test\
    \ do\n        local c = test:sub(i, i)\n        local count = (result[c] or 0)\
    \ + 1\n        result[c] = count\n        if count > max then\n            max\
    \ = count\n        end\n    end\n    local result2 = {}\n    for k, v in pairs(result)\
    \ do\n        if v == max then\n            result2[k] = v\n        end\n    end\n\
    \    return result2\nend", "    local result = {}\n    local max = 0\n    for\
    \ i = 1, #test do\n        local c = test:sub(i, i)\n        local count = result[c]\
    \ or 0\n        result[c] = count + 1\n        if result[c] > max then\n     \
    \       max = result[c]\n        end\n    end\n    local result2 = {}\n    for\
    \ k, v in pairs(result) do\n        if v == max then\n            result2[k] =\
    \ v\n        end\n    end\n    return result2\nend", "    local result = {}\n\
    \    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n\
    \        if result[c] == nil then\n            result[c] = 1\n        else\n \
    \           result[c] = result[c] + 1\n        end\n        if result[c] > max\
    \ then\n            max = result[c]\n        end\n    end\n    local final = {}\n\
    \    for k, v in pairs(result) do\n        if v == max then\n            final[k]\
    \ = v\n        end\n    end\n    return final\nend", "    local result = {}\n\
    \    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n\
    \        local count = result[c] or 0\n        count = count + 1\n        result[c]\
    \ = count\n        if count > max then\n            max = count\n        end\n\
    \    end\n    local res = {}\n    for k, v in pairs(result) do\n        if v ==\
    \ max then\n            res[#res + 1] = k\n        end\n    end\n    return res\n\
    end", "    local hist = {}\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", " \
    \   local hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n\
    \        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local\
    \ result = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if result[c] == nil then\n            result[c] = 1\n        else\n\
    \            result[c] = result[c] + 1\n        end\n        if result[c] > max\
    \ then\n            max = result[c]\n        end\n    end\n    local result2 =\
    \ {}\n    for k, v in pairs(result) do\n        if v == max then\n           \
    \ result2[k] = v\n        end\n    end\n    return result2\nend", "  local dict\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for i = 1, #test do\n   \
    \ local letter = test:sub(i, i)\n    if dict[letter] == nil then\n      dict[letter]\
    \ = 1\n    else\n      dict[letter] = dict[letter] + 1\n    end\n    if dict[letter]\
    \ > max then\n      max = dict[letter]\n      max_letters = {letter}\n    elseif\
    \ dict[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return {[max] = max_letters}\nend", "    local dict = {}\n    for i\
    \ = 1, #test do\n        local c = test:sub(i, i)\n        if dict[c] then\n \
    \           dict[c] = dict[c] + 1\n        else\n            dict[c] = 1\n   \
    \     end\n    end\n    return dict\nend", "    local hist = {}\n    for i = 1,\
    \ #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0)\
    \ + 1\n    end\n    return hist\nend", "    local result = {}\n    local max =\
    \ 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n        if not\
    \ result[c] then\n            result[c] = 1\n        else\n            result[c]\
    \ = result[c] + 1\n        end\n        if result[c] > max then\n            max\
    \ = result[c]\n        end\n    end\n    local res = {}\n    for k, v in pairs(result)\
    \ do\n        if v == max then\n            res[#res + 1] = k\n        end\n \
    \   end\n    return res\nend", "  local hist = {}\n  for i = 1, #test do\n   \
    \ local c = test:sub(i, i)\n    hist[c] = (hist[c] or 0) + 1\n  end\n  return\
    \ hist\nend", "    local result = {}\n    local max = 0\n    for i = 1, #test\
    \ do\n        local c = test:sub(i, i)\n        local count = result[c] or 0\n\
    \        count = count + 1\n        result[c] = count\n        if count > max\
    \ then\n            max = count\n        end\n    end\n    local result2 = {}\n\
    \    for k, v in pairs(result) do\n        if v == max then\n            result2[k]\
    \ = v\n        end\n    end\n    return result2\nend", "    local result = {}\n\
    \    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n\
    \        if result[c] == nil then\n            result[c] = 1\n        else\n \
    \           result[c] = result[c] + 1\n        end\n        if result[c] > max\
    \ then\n            max = result[c]\n        end\n    end\n    local result2 =\
    \ {}\n    for k, v in pairs(result) do\n        if v == max then\n           \
    \ result2[k] = v\n        end\n    end\n    return result2\nend", "    local result\
    \ = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        local count = result[c] or 0\n        count = count + 1\n      \
    \  result[c] = count\n        if count > max then\n            max = count\n \
    \       end\n    end\n    local result2 = {}\n    for k, v in pairs(result) do\n\
    \        if v == max then\n            result2[k] = v\n        end\n    end\n\
    \    return result2\nend", "    local hist = {}\n    for i = 1, #test do\n   \
    \     local letter = test:sub(i, i)\n        if hist[letter] then\n          \
    \  hist[letter] = hist[letter] + 1\n        else\n            hist[letter] = 1\n\
    \        end\n    end\n    return hist\nend", "  local hist = {}\n  for i = 1,\
    \ #test do\n    local c = test:sub(i, i)\n    hist[c] = (hist[c] or 0) + 1\n \
    \ end\n  return hist\nend", "    local result = {}\n    for i = 1, #test do\n\
    \        local c = test:sub(i, i)\n        if result[c] then\n            result[c]\
    \ = result[c] + 1\n        else\n            result[c] = 1\n        end\n    end\n\
    \    return result\nend", "  local hist = {}\n  for i = 1, #test do\n    local\
    \ c = test:sub(i, i)\n    hist[c] = (hist[c] or 0) + 1\n  end\n  return hist\n\
    end", "  local histo = {}\n  local max = 0\n  for i = 1, #test do\n    local c\
    \ = test:sub(i, i)\n    histo[c] = (histo[c] or 0) + 1\n    if histo[c] > max\
    \ then\n      max = histo[c]\n    end\n  end\n  local result = {}\n  for k, v\
    \ in pairs(histo) do\n    if v == max then\n      result[#result + 1] = k\n  \
    \  end\n  end\n  return result\nend", "  local result = {}\n  local max = 0\n\
    \  for i = 1, #test do\n    local c = test:sub(i, i)\n    if result[c] == nil\
    \ then\n      result[c] = 1\n    else\n      result[c] = result[c] + 1\n    end\n\
    \    if result[c] > max then\n      max = result[c]\n    end\n  end\n  local keys\
    \ = {}\n  for k, v in pairs(result) do\n    if v == max then\n      table.insert(keys,\
    \ k)\n    end\n  end\n  return keys, max\nend", "    local hist = {}\n    for\
    \ i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c]\
    \ or 0) + 1\n    end\n    return hist\nend", "    local hist = {}\n    for i =\
    \ 1, #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c] or\
    \ 0) + 1\n    end\n    local max = 0\n    for k, v in pairs(hist) do\n       \
    \ if v > max then\n            max = v\n        end\n    end\n    local result\
    \ = {}\n    for k, v in pairs(hist) do\n        if v == max then\n           \
    \ result[k] = v\n        end\n    end\n    return result\nend", "\tlocal hist\
    \ = {}\n\tlocal max = 0\n\tfor i = 1, #test do\n\t\tlocal c = test:sub(i, i)\n\
    \t\tif not hist[c] then\n\t\t\thist[c] = 1\n\t\telse\n\t\t\thist[c] = hist[c]\
    \ + 1\n\t\tend\n\t\tif hist[c] > max then\n\t\t\tmax = hist[c]\n\t\tend\n\tend\n\
    \tlocal result = {}\n\tfor k, v in pairs(hist) do\n\t\tif v == max then\n\t\t\t\
    table.insert(result, k)\n\t\tend\n\tend\n\treturn result\nend", "  local result\
    \ = {}\n  local max = 0\n  for i = 1, #test do\n    local c = test:sub(i, i)\n\
    \    local count = result[c] or 0\n    result[c] = count + 1\n    if count + 1\
    \ > max then\n      max = count + 1\n    end\n  end\n  local result2 = {}\n  for\
    \ k, v in pairs(result) do\n    if v == max then\n      result2[k] = v\n    end\n\
    \  end\n  return result2\nend", "    local result = {}\n    local max = 0\n  \
    \  for i = 1, #test do\n        local c = test:sub(i, i)\n        if result[c]\
    \ == nil then\n            result[c] = 1\n        else\n            result[c]\
    \ = result[c] + 1\n        end\n        if result[c] > max then\n            max\
    \ = result[c]\n        end\n    end\n    local result2 = {}\n    for k, v in pairs(result)\
    \ do\n        if v == max then\n            result2[k] = v\n        end\n    end\n\
    \    return result2\nend", "    local result = {}\n    local max = 0\n    for\
    \ i = 1, #test do\n        local letter = test:sub(i, i)\n        if not result[letter]\
    \ then\n            result[letter] = 1\n        else\n            result[letter]\
    \ = result[letter] + 1\n        end\n        if result[letter] > max then\n  \
    \          max = result[letter]\n        end\n    end\n    local max_letters =\
    \ {}\n    for k, v in pairs(result) do\n        if v == max then\n           \
    \ table.insert(max_letters, k)\n        end\n    end\n    return max_letters,\
    \ max\nend", "    local result = {}\n    local max = 0\n    for i = 1, #test do\n\
    \        local c = test:sub(i, i)\n        if result[c] == nil then\n        \
    \    result[c] = 1\n        else\n            result[c] = result[c] + 1\n    \
    \    end\n        if result[c] > max then\n            max = result[c]\n     \
    \   end\n    end\n    local result2 = {}\n    for k, v in pairs(result) do\n \
    \       if v == max then\n            result2[k] = v\n        end\n    end\n \
    \   return result2\nend", "    local dict = {}\n    for i = 1, #test do\n    \
    \    local letter = test:sub(i, i)\n        if dict[letter] then\n           \
    \ dict[letter] = dict[letter] + 1\n        else\n            dict[letter] = 1\n\
    \        end\n    end\n    return dict\nend", "    local result = {}\n    local\
    \ max = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n       \
    \ local count = (result[c] or 0) + 1\n        result[c] = count\n        if count\
    \ > max then\n            max = count\n        end\n    end\n    local letters\
    \ = {}\n    for k, v in pairs(result) do\n        if v == max then\n         \
    \   table.insert(letters, k)\n        end\n    end\n    return letters, max\n\
    end", "    local dict = {}\n    for i = 1, #test do\n        local letter = test:sub(i,\
    \ i)\n        if dict[letter] == nil then\n            dict[letter] = 1\n    \
    \    else\n            dict[letter] = dict[letter] + 1\n        end\n    end\n\
    \    return dict\nend", "    local result = {}\n    local max = 0\n    for i =\
    \ 1, #test do\n        local c = test:sub(i, i)\n        local count = result[c]\
    \ or 0\n        result[c] = count + 1\n        if count + 1 > max then\n     \
    \       max = count + 1\n        end\n    end\n    local result2 = {}\n    for\
    \ k, v in pairs(result) do\n        if v == max then\n            result2[k] =\
    \ v\n        end\n    end\n    return result2\nend", "    local letters = {}\n\
    \    local max = 0\n    for i = 1, #test do\n        local letter = test:sub(i,\
    \ i)\n        if letters[letter] == nil then\n            letters[letter] = 1\n\
    \        else\n            letters[letter] = letters[letter] + 1\n        end\n\
    \        if letters[letter] > max then\n            max = letters[letter]\n  \
    \      end\n    end\n    local result = {}\n    for letter, count in pairs(letters)\
    \ do\n        if count == max then\n            table.insert(result, letter)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ max = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n       \
    \ local count = result[c] or 0\n        count = count + 1\n        result[c] =\
    \ count\n        if count > max then\n            max = count\n        end\n \
    \   end\n    local letters = {}\n    for k, v in pairs(result) do\n        if\
    \ v == max then\n            table.insert(letters, k)\n        end\n    end\n\
    \    return letters, max\nend", "    local hist = {}\n    for i = 1, #test do\n\
    \        local char = test:sub(i, i)\n        hist[char] = (hist[char] or 0) +\
    \ 1\n    end\n    local max = 0\n    local max_chars = {}\n    for char, count\
    \ in pairs(hist) do\n        if count > max then\n            max = count\n  \
    \          max_chars = {char}\n        elseif count == max then\n            table.insert(max_chars,\
    \ char)\n        end\n    end\n    return max_chars, max\nend", "  local hist\
    \ = {}\n  for i = 1, #test do\n    local c = test:sub(i, i)\n    hist[c] = (hist[c]\
    \ or 0) + 1\n  end\n  local max = 0\n  local max_letters = {}\n  for k, v in pairs(hist)\
    \ do\n    if v > max then\n      max = v\n      max_letters = {k}\n    elseif\
    \ v == max then\n      table.insert(max_letters, k)\n    end\n  end\n  return\
    \ max_letters, max\nend", "    local hist = {}\n    for i = 1, #test do\n    \
    \    local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n\
    \    return hist\nend", "    local hist = {}\n    for i = 1, #test do\n      \
    \  local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n \
    \   return hist\nend", "    local result = {}\n    local max_count = 0\n    for\
    \ i = 1, #test do\n        local c = test:sub(i, i)\n        if result[c] == nil\
    \ then\n            result[c] = 1\n        else\n            result[c] = result[c]\
    \ + 1\n        end\n        if result[c] > max_count then\n            max_count\
    \ = result[c]\n        end\n    end\n    local max_letters = {}\n    for k, v\
    \ in pairs(result) do\n        if v == max_count then\n            table.insert(max_letters,\
    \ k)\n        end\n    end\n    return max_letters, max_count\nend", "  local\
    \ result = {}\n  local max = 0\n  for i = 1, #test do\n    local c = test:sub(i,\
    \ i)\n    if not result[c] then\n      result[c] = 1\n    else\n      result[c]\
    \ = result[c] + 1\n    end\n    if result[c] > max then\n      max = result[c]\n\
    \    end\n  end\n  local res = {}\n  for k, v in pairs(result) do\n    if v ==\
    \ max then\n      res[#res + 1] = k\n    end\n  end\n  return res\nend", "   \
    \ local result = {}\n    local max = 0\n    for i = 1, #test do\n        local\
    \ letter = test:sub(i, i)\n        if result[letter] then\n            result[letter]\
    \ = result[letter] + 1\n        else\n            result[letter] = 1\n       \
    \ end\n        if result[letter] > max then\n            max = result[letter]\n\
    \        end\n    end\n    local letters = {}\n    for letter, count in pairs(result)\
    \ do\n        if count == max then\n            table.insert(letters, letter)\n\
    \        end\n    end\n    return letters, max\nend", "    local hist = {}\n \
    \   for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c]\
    \ or 0) + 1\n    end\n    local max = 0\n    for k, v in pairs(hist) do\n    \
    \    if v > max then\n            max = v\n        end\n    end\n    local result\
    \ = {}\n    for k, v in pairs(hist) do\n        if v == max then\n           \
    \ result[k] = v\n        end\n    end\n    return result\nend", "    local hist\
    \ = {}\n    for i = 1, #test do\n        local char = test:sub(i, i)\n       \
    \ hist[char] = (hist[char] or 0) + 1\n    end\n    return hist\nend", "  local\
    \ t = {}\n  for i = 1, #test do\n    local c = test:sub(i, i)\n    if t[c] then\n\
    \      t[c] = t[c] + 1\n    else\n      t[c] = 1\n    end\n  end\n  return t\n\
    end", "    local result = {}\n    local max = 0\n    for i = 1, #test do\n   \
    \     local c = test:sub(i, i)\n        local count = result[c] or 0\n       \
    \ count = count + 1\n        result[c] = count\n        if count > max then\n\
    \            max = count\n        end\n    end\n    local letters = {}\n    for\
    \ k, v in pairs(result) do\n        if v == max then\n            table.insert(letters,\
    \ k)\n        end\n    end\n    return letters, max\nend", "    local letters\
    \ = {}\n    local max = 0\n    for i = 1, #test do\n        local letter = test:sub(i,\
    \ i)\n        if letters[letter] == nil then\n            letters[letter] = 1\n\
    \        else\n            letters[letter] = letters[letter] + 1\n        end\n\
    \        if letters[letter] > max then\n            max = letters[letter]\n  \
    \      end\n    end\n    local result = {}\n    for k, v in pairs(letters) do\n\
    \        if v == max then\n            result[k] = v\n        end\n    end\n \
    \   return result\nend", "    local hist = {}\n    for i = 1, #test do\n     \
    \   local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n\
    \    return hist\nend", "    local hist = {}\n    local max = 0\n    for i = 1,\
    \ #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0)\
    \ + 1\n        if hist[c] > max then\n            max = hist[c]\n        end\n\
    \    end\n    local result = {}\n    for k, v in pairs(hist) do\n        if v\
    \ == max then\n            result[#result + 1] = k\n        end\n    end\n   \
    \ return result\nend", "  local result = {}\n  local max = 0\n  for i = 1, #test\
    \ do\n    local c = test:sub(i, i)\n    local count = result[c] or 0\n    result[c]\
    \ = count + 1\n    if count + 1 > max then\n      max = count + 1\n    end\n \
    \ end\n  local result2 = {}\n  for k, v in pairs(result) do\n    if v == max then\n\
    \      result2[k] = v\n    end\n  end\n  return result2\nend", "    local result\
    \ = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        local count = result[c] or 0\n        count = count + 1\n      \
    \  result[c] = count\n        if count > max then\n            max = count\n \
    \       end\n    end\n    local res = {}\n    for k, v in pairs(result) do\n \
    \       if v == max then\n            res[#res + 1] = k\n        end\n    end\n\
    \    return res\nend", "    local result = {}\n    local max = 0\n    for i =\
    \ 1, #test do\n        local c = test:sub(i, i)\n        if result[c] == nil then\n\
    \            result[c] = 1\n        else\n            result[c] = result[c] +\
    \ 1\n        end\n        if result[c] > max then\n            max = result[c]\n\
    \        end\n    end\n    local result2 = {}\n    for k, v in pairs(result) do\n\
    \        if v == max then\n            result2[k] = v\n        end\n    end\n\
    \    return result2\nend", "  local hist = {}\n  for i = 1, #test do\n    local\
    \ c = test:sub(i, i)\n    hist[c] = (hist[c] or 0) + 1\n  end\n  return hist\n\
    end", "    local result = {}\n    local max = 0\n    for i = 1, #test do\n   \
    \     local c = test:sub(i, i)\n        local count = result[c] or 0\n       \
    \ count = count + 1\n        result[c] = count\n        if count > max then\n\
    \            max = count\n        end\n    end\n    local letters = {}\n    for\
    \ k, v in pairs(result) do\n        if v == max then\n            table.insert(letters,\
    \ k)\n        end\n    end\n    return letters, max\nend", "    local hist = {}\n\
    \    for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c] =\
    \ (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local dict = {}\n \
    \   local max = 0\n    local max_letters = {}\n    for i = 1, #test do\n     \
    \   local letter = test:sub(i, i)\n        if dict[letter] == nil then\n     \
    \       dict[letter] = 1\n        else\n            dict[letter] = dict[letter]\
    \ + 1\n        end\n        if dict[letter] > max then\n            max = dict[letter]\n\
    \            max_letters = {letter}\n        elseif dict[letter] == max then\n\
    \            table.insert(max_letters, letter)\n        end\n    end\n    return\
    \ {[max] = max_letters}\nend", "    local hist = {}\n    for i = 1, #test do\n\
    \        local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n\
    \    local max = 0\n    for k, v in pairs(hist) do\n        if v > max then\n\
    \            max = v\n        end\n    end\n    local result = {}\n    for k,\
    \ v in pairs(hist) do\n        if v == max then\n            result[k] = v\n \
    \       end\n    end\n    return result\nend", "    local hist = {}\n    for i\
    \ = 1, #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c]\
    \ or 0) + 1\n    end\n    local max = 0\n    for k, v in pairs(hist) do\n    \
    \    if v > max then\n            max = v\n        end\n    end\n    local res\
    \ = {}\n    for k, v in pairs(hist) do\n        if v == max then\n           \
    \ res[#res + 1] = k\n        end\n    end\n    return res\nend", "    local result\
    \ = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if result[c] == nil then\n            result[c] = 1\n        else\n\
    \            result[c] = result[c] + 1\n        end\n        if result[c] > max\
    \ then\n            max = result[c]\n        end\n    end\n    local answer =\
    \ {}\n    for k, v in pairs(result) do\n        if v == max then\n           \
    \ answer[k] = v\n        end\n    end\n    return answer\nend", "    local result\
    \ = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if not result[c] then\n            result[c] = 1\n        else\n\
    \            result[c] = result[c] + 1\n        end\n        if result[c] > max\
    \ then\n            max = result[c]\n        end\n    end\n    local out = {}\n\
    \    for k, v in pairs(result) do\n        if v == max then\n            out[#out\
    \ + 1] = k\n        end\n    end\n    return out\nend", "    local result = {}\n\
    \    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i, i)\n\
    \        if result[c] == nil then\n            result[c] = 1\n        else\n \
    \           result[c] = result[c] + 1\n        end\n        if result[c] > max\
    \ then\n            max = result[c]\n        end\n    end\n    local result2 =\
    \ {}\n    for k, v in pairs(result) do\n        if v == max then\n           \
    \ result2[k] = v\n        end\n    end\n    return result2\nend", "  local hist\
    \ = {}\n  for i = 1, #test do\n    local c = test:sub(i, i)\n    hist[c] = (hist[c]\
    \ or 0) + 1\n  end\n  return hist\nend", "  local hist = {}\n  local max = 0\n\
    \  local max_letters = {}\n  for i = 1, #test do\n    local letter = test:sub(i,\
    \ i)\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter] > max then\n\
    \      max = hist[letter]\n      max_letters = {letter}\n    elseif hist[letter]\
    \ == max then\n      max_letters[#max_letters + 1] = letter\n    end\n  end\n\
    \  return {max = max, letters = max_letters}\nend", "    local hist = {}\n   \
    \ for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c] = (hist[c]\
    \ or 0) + 1\n    end\n    return hist\nend", "    local dict = {}\n    for i =\
    \ 1, #test do\n        local letter = test:sub(i, i)\n        if dict[letter]\
    \ == nil then\n            dict[letter] = 1\n        else\n            dict[letter]\
    \ = dict[letter] + 1\n        end\n    end\n    return dict\nend", "    local\
    \ hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n     \
    \   hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local hist\
    \ = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c]\
    \ = (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local dict = {}\n\
    \    for i = 1, #test do\n        local c = test:sub(i, i)\n        if dict[c]\
    \ then\n            dict[c] = dict[c] + 1\n        else\n            dict[c] =\
    \ 1\n        end\n    end\n    return dict\nend", "    local hist = {}\n    for\
    \ i = 1, #test do\n        local char = test:sub(i, i)\n        hist[char] = (hist[char]\
    \ or 0) + 1\n    end\n    return hist\nend", "    local result = {}\n    local\
    \ max = 0\n    for i = 1, #test do\n        local char = test:sub(i, i)\n    \
    \    local count = (result[char] or 0) + 1\n        result[char] = count\n   \
    \     if count > max then\n            max = count\n        end\n    end\n   \
    \ local max_chars = {}\n    for char, count in pairs(result) do\n        if count\
    \ == max then\n            max_chars[#max_chars + 1] = char\n        end\n   \
    \ end\n    return max_chars, max\nend", "  local hist = {}\n  for i = 1, #test\
    \ do\n    local c = test:sub(i, i)\n    hist[c] = (hist[c] or 0) + 1\n  end\n\
    \  return hist\nend", "  local result = {}\n  local max = 0\n  for i = 1, #test\
    \ do\n    local c = test:sub(i, i)\n    local count = result[c] or 0\n    result[c]\
    \ = count + 1\n    if count + 1 > max then\n      max = count + 1\n    end\n \
    \ end\n  local result2 = {}\n  for k, v in pairs(result) do\n    if v == max then\n\
    \      result2[k] = v\n    end\n  end\n  return result2\nend", "    local result\
    \ = {}\n    local max = 0\n    for i = 1, #test do\n        local letter = test:sub(i,\
    \ i)\n        if result[letter] == nil then\n            result[letter] = 1\n\
    \        else\n            result[letter] = result[letter] + 1\n        end\n\
    \        if result[letter] > max then\n            max = result[letter]\n    \
    \    end\n    end\n    local final = {}\n    for k, v in pairs(result) do\n  \
    \      if v == max then\n            final[k] = v\n        end\n    end\n    return\
    \ final\nend", "  local hist = {}\n  for i = 1, #test do\n    local c = test:sub(i,\
    \ i)\n    hist[c] = (hist[c] or 0) + 1\n  end\n  return hist\nend", "  local result\
    \ = {}\n  local max = 0\n  for i = 1, #test do\n    local c = test:sub(i, i)\n\
    \    if result[c] == nil then\n      result[c] = 1\n    else\n      result[c]\
    \ = result[c] + 1\n    end\n    if result[c] > max then\n      max = result[c]\n\
    \    end\n  end\n  local output = {}\n  for k, v in pairs(result) do\n    if v\
    \ == max then\n      output[#output + 1] = k\n    end\n  end\n  return output\n\
    end", "    local hist = {}\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", " \
    \ local result = {}\n  local max = 0\n  for i = 1, #test do\n    local c = test:sub(i,\
    \ i)\n    if not result[c] then\n      result[c] = 1\n    else\n      result[c]\
    \ = result[c] + 1\n    end\n    if result[c] > max then\n      max = result[c]\n\
    \    end\n  end\n  local result2 = {}\n  for k, v in pairs(result) do\n    if\
    \ v == max then\n      result2[k] = v\n    end\n  end\n  return result2\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
