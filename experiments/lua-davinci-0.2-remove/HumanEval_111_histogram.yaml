name: HumanEval_111_histogram
language: lua
prompt: "-- Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
  \ count.\n-- If several letters have the same occurrence, return all of them.\n\
  -- Example:\nlocal function histogram(test)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
  \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
  \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
  \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
  \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b\
  \ b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t']\
  \ = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
  \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    local max = 0\n    for i = 1, #test do\n\
    \        local c = test:sub(i, i)\n        if result[c] == nil then\n        \
    \    result[c] = 1\n        else\n            result[c] = result[c] + 1\n    \
    \    end\n        if result[c] > max then\n            max = result[c]\n     \
    \   end\n    end\n    local final = {}\n    for k, v in pairs(result) do\n   \
    \     if v == max then\n            final[k] = v\n        end\n    end\n    return\
    \ final\nend", "    local dict = {}\n    for i = 1, #test do\n        local letter\
    \ = test:sub(i, i)\n        if dict[letter] then\n            dict[letter] = dict[letter]\
    \ + 1\n        else\n            dict[letter] = 1\n        end\n    end\n    local\
    \ max = 0\n    local max_letters = {}\n    for letter, count in pairs(dict) do\n\
    \        if count > max then\n            max = count\n            max_letters\
    \ = {letter}\n        elseif count == max then\n            table.insert(max_letters,\
    \ letter)\n        end\n    end\n    return max_letters, max\nend", "    local\
    \ hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n     \
    \   if hist[c] then\n            hist[c] = hist[c] + 1\n        else\n       \
    \     hist[c] = 1\n        end\n    end\n    return hist\nend", "    local hist\
    \ = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c]\
    \ = (hist[c] or 0) + 1\n    end\n    local max = 0\n    for k, v in pairs(hist)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ local res = {}\n    for k, v in pairs(hist) do\n        if v == max then\n \
    \           res[k] = v\n        end\n    end\n    return res\nend", "    local\
    \ hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n     \
    \   hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local result\
    \ = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if result[c] then\n            result[c] = result[c] + 1\n     \
    \   else\n            result[c] = 1\n        end\n        if result[c] > max then\n\
    \            max = result[c]\n        end\n    end\n    local max_letters = {}\n\
    \    for k, v in pairs(result) do\n        if v == max then\n            max_letters[#max_letters\
    \ + 1] = k\n        end\n    end\n    return max_letters, max\nend", "    local\
    \ letters = {}\n    local max = 0\n    for i = 1, #test do\n        local letter\
    \ = test:sub(i, i)\n        if letters[letter] then\n            letters[letter]\
    \ = letters[letter] + 1\n        else\n            letters[letter] = 1\n     \
    \   end\n        if letters[letter] > max then\n            max = letters[letter]\n\
    \        end\n    end\n    local result = {}\n    for k, v in pairs(letters) do\n\
    \        if v == max then\n            table.insert(result, k)\n        end\n\
    \    end\n    return result\nend", "    local hist = {}\n    for c in test:gmatch(\"\
    .\") do\n        hist[c] = (hist[c] or 0) + 1\n    end\n    local max = 0\n  \
    \  for _, v in pairs(hist) do\n        max = math.max(max, v)\n    end\n    local\
    \ result = {}\n    for k, v in pairs(hist) do\n        if v == max then\n    \
    \        result[#result + 1] = k\n        end\n    end\n    return result\nend",
  "    local dict = {}\n    for i = 1, #test do\n        local char = test:sub(i,\
    \ i)\n        if dict[char] then\n            dict[char] = dict[char] + 1\n  \
    \      else\n            dict[char] = 1\n        end\n    end\n    return dict\n\
    end", "    local result = {}\n    local max = 0\n    for i = 1, #test do\n   \
    \     local c = test:sub(i, i)\n        if result[c] == nil then\n           \
    \ result[c] = 1\n        else\n            result[c] = result[c] + 1\n       \
    \ end\n        if result[c] > max then\n            max = result[c]\n        end\n\
    \    end\n    local result2 = {}\n    for k, v in pairs(result) do\n        if\
    \ v == max then\n            result2[k] = v\n        end\n    end\n    return\
    \ result2\nend", "    local hist = {}\n    for i = 1, #test do\n        local\
    \ c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    return\
    \ hist\nend", "    local hist = {}\n    local max = 0\n    for i = 1, #test do\n\
    \        local c = test:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    \
    \    if hist[c] > max then\n            max = hist[c]\n        end\n    end\n\
    \    local res = {}\n    for k, v in pairs(hist) do\n        if v == max then\n\
    \            res[#res + 1] = k\n        end\n    end\n    return res\nend", " \
    \   local dict = {}\n    local max = 0\n    local max_letters = {}\n    for i\
    \ = 1, #test do\n        local letter = test:sub(i, i)\n        if dict[letter]\
    \ == nil then\n            dict[letter] = 1\n        else\n            dict[letter]\
    \ = dict[letter] + 1\n        end\n        if dict[letter] > max then\n      \
    \      max = dict[letter]\n            max_letters = {letter}\n        elseif\
    \ dict[letter] == max then\n            table.insert(max_letters, letter)\n  \
    \      end\n    end\n    return {[max] = max_letters}\nend", "    local result\
    \ = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if result[c] == nil then\n            result[c] = 1\n        else\n\
    \            result[c] = result[c] + 1\n        end\n        if result[c] > max\
    \ then\n            max = result[c]\n        end\n    end\n    local result2 =\
    \ {}\n    for k, v in pairs(result) do\n        if v == max then\n           \
    \ result2[k] = v\n        end\n    end\n    return result2\nend", "    local hist\
    \ = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c]\
    \ = (hist[c] or 0) + 1\n    end\n    return hist\nend", "    local hist = {}\n\
    \    for i = 1, #test do\n        local c = test:sub(i, i)\n        hist[c] =\
    \ (hist[c] or 0) + 1\n    end\n    local max = 0\n    for k, v in pairs(hist)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ local result = {}\n    for k, v in pairs(hist) do\n        if v == max then\n\
    \            result[k] = v\n        end\n    end\n    return result\nend", " \
    \   local result = {}\n    local max = 0\n    for i=1,#test do\n        local\
    \ c = test:sub(i,i)\n        if result[c] == nil then\n            result[c] =\
    \ 1\n        else\n            result[c] = result[c] + 1\n        end\n      \
    \  if result[c] > max then\n            max = result[c]\n        end\n    end\n\
    \    local result2 = {}\n    for k,v in pairs(result) do\n        if v == max\
    \ then\n            result2[k] = v\n        end\n    end\n    return result2\n\
    end", "    local result = {}\n    local max = 0\n    for i = 1, #test do\n   \
    \     local c = test:sub(i, i)\n        if result[c] == nil then\n           \
    \ result[c] = 1\n        else\n            result[c] = result[c] + 1\n       \
    \ end\n        if result[c] > max then\n            max = result[c]\n        end\n\
    \    end\n    local res = {}\n    for k, v in pairs(result) do\n        if v ==\
    \ max then\n            res[#res + 1] = k\n        end\n    end\n    return res\n\
    end", "    local dict = {}\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if dict[c] then\n            dict[c] = dict[c] + 1\n        else\n\
    \            dict[c] = 1\n        end\n    end\n    return dict\nend", "    local\
    \ hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n     \
    \   hist[c] = (hist[c] or 0) + 1\n    end\n    return hist\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
