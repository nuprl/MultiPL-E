name: HumanEval_9_rolling_max
language: lua
prompt: "-- From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n\
  \    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    local max = numbers[1]\n    local result = {max}\n    for i = 2,\
    \ #numbers do\n        if numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n        result[i] = max\n    end\n    return result\nend", "   \
    \ local result = {}\n    local max = numbers[1]\n    for i = 1, #numbers do\n\
    \        max = math.max(max, numbers[i])\n        result[i] = max\n    end\n \
    \   return result\nend", "    local result = {}\n    local max = numbers[1]\n\
    \    result[1] = max\n    for i = 2, #numbers do\n        if numbers[i] > max\
    \ then\n            max = numbers[i]\n        end\n        result[i] = max\n \
    \   end\n    return result\nend", "    local result = {}\n    local max = numbers[1]\n\
    \    result[1] = max\n    for i = 2, #numbers do\n        if numbers[i] > max\
    \ then\n            max = numbers[i]\n        end\n        result[i] = max\n \
    \   end\n    return result\nend", "    local maxes = {}\n    local max = numbers[1]\n\
    \    for i = 1, #numbers do\n        if numbers[i] > max then\n            max\
    \ = numbers[i]\n        end\n        maxes[i] = max\n    end\n    return maxes\n\
    end", "    local result = {}\n    local max = numbers[1]\n    table.insert(result,\
    \ max)\n    for i = 2, #numbers do\n        max = math.max(max, numbers[i])\n\
    \        table.insert(result, max)\n    end\n    return result\nend", "    local\
    \ max_so_far = numbers[1]\n    local result = {max_so_far}\n    for i = 2, #numbers\
    \ do\n        if numbers[i] > max_so_far then\n            max_so_far = numbers[i]\n\
    \        end\n        result[i] = max_so_far\n    end\n    return result\nend",
  "    local max = 0\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        max = math.max(max, number)\n        table.insert(result, max)\n\
    \    end\n    return result\nend", "    local max = {}\n    local current_max\
    \ = -math.huge\n    for i = 1, #numbers do\n        current_max = math.max(current_max,\
    \ numbers[i])\n        max[i] = current_max\n    end\n    return max\nend", " \
    \   local max = numbers[1]\n    local result = {max}\n    for i = 2, #numbers\
    \ do\n        if numbers[i] > max then\n            max = numbers[i]\n       \
    \ end\n        result[i] = max\n    end\n    return result\nend", "    local max_so_far\
    \ = 0\n    local result = {}\n    for _, n in ipairs(numbers) do\n        max_so_far\
    \ = math.max(max_so_far, n)\n        table.insert(result, max_so_far)\n    end\n\
    \    return result\nend", "    local max = numbers[1]\n    local result = {max}\n\
    \    for i = 2, #numbers do\n        max = math.max(max, numbers[i])\n       \
    \ result[i] = max\n    end\n    return result\nend", "    local max = numbers[1]\n\
    \    local result = {max}\n    for i = 2, #numbers do\n        if numbers[i] >\
    \ max then\n            max = numbers[i]\n        end\n        result[i] = max\n\
    \    end\n    return result\nend", "    local result = {}\n    local max = numbers[1]\n\
    \    result[1] = max\n    for i = 2, #numbers do\n        if numbers[i] > max\
    \ then\n            max = numbers[i]\n        end\n        result[i] = max\n \
    \   end\n    return result\nend", "    local max = numbers[1]\n    local result\
    \ = {max}\n    for i = 2, #numbers do\n        if numbers[i] > max then\n    \
    \        max = numbers[i]\n        end\n        result[i] = max\n    end\n   \
    \ return result\nend", "    local result = {}\n    local max = numbers[1]\n  \
    \  for i = 1, #numbers do\n        if numbers[i] > max then\n            max =\
    \ numbers[i]\n        end\n        result[i] = max\n    end\n    return result\n\
    end", "    local max_so_far = numbers[1]\n    local result = {max_so_far}\n  \
    \  for i = 2, #numbers do\n        local current = numbers[i]\n        if current\
    \ > max_so_far then\n            max_so_far = current\n        end\n        result[i]\
    \ = max_so_far\n    end\n    return result\nend", "    local max = 0\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if number > max\
    \ then\n            max = number\n        end\n        table.insert(result, max)\n\
    \    end\n    return result\nend", "    local max = numbers[1]\n    local result\
    \ = {max}\n    for i = 2, #numbers do\n        if numbers[i] > max then\n    \
    \        max = numbers[i]\n        end\n        result[i] = max\n    end\n   \
    \ return result\nend", "    local result = {}\n    local max = numbers[1]\n  \
    \  result[1] = max\n    for i = 2, #numbers do\n        if numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n        result[i] = max\n    end\n\
    \    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
