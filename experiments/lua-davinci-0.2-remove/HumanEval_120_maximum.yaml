name: HumanEval_120_maximum
language: lua
prompt: "-- Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n-- Example\
  \ 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in the range\
  \ of [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
  \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
  \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
  \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1),\
  \ {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20,\
  \ 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n\
  \    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3,\
  \ 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})\n  \
  \  lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
  \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n \
  \   lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local n = #arr\n    if n == 0 then return {} end\n    if k == 0\
    \ then return {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickselect(arr, l, r, k)\n   \
    \     local p = partition(arr, l, r)\n        if p == k then\n            return\n\
    \        elseif p > k then\n            quickselect(arr, l, p - 1, k)\n      \
    \  else\n            quickselect(arr, p + 1, r, k)\n        end\n    end\n   \
    \ quickselect(arr, 1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1,\
    \ n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend", "    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            if i < j then\n             \
    \   arr[i] = arr[j]\n                i = i + 1\n            end\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           if i < j then\n                arr[j] = arr[i]\n                j\
    \ = j - 1\n            end\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, l, r)\n        if l < r then\n\
    \            local p = partition(arr, l, r)\n            quickSort(arr, l, p -\
    \ 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, n)\n    local res = {}\n    for i = n, n - k + 1, -1 do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n    if\
    \ k == len then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        local j = 1\n        while j <= k do\n   \
    \         if arr[i] > res[j] then\n                table.remove(res, j)\n    \
    \            table.insert(res, j, arr[i])\n                break\n           \
    \ end\n            j = j + 1\n        end\n    end\n    return res\nend", "  \
    \  local n = #arr\n    local function partition(l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            if i < j then\n                arr[i] = arr[j]\n          \
    \      i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(l, r)\n        if l < r then\n            local pivot = partition(l,\
    \ r)\n            quick_sort(l, pivot - 1)\n            quick_sort(pivot + 1,\
    \ r)\n        end\n    end\n    quick_sort(1, n)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n    local\
    \ function partition(left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(left, right)\n        if left < right then\n            local mid\
    \ = partition(left, right)\n            quick_sort(left, mid - 1)\n          \
    \  quick_sort(mid + 1, right)\n        end\n    end\n    quick_sort(1, len)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend", "    local n = #arr\n    if n == 0 then return {} end\n\
    \    if k == 0 then return {} end\n    if k >= n then return arr end\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 1, -1 do\n        local j = i\n        while j * 2 <= k do\n          \
    \  local l = j * 2\n            local r = l + 1\n            if r <= k and heap[r]\
    \ < heap[l] then\n                l = r\n            end\n            if heap[j]\
    \ > heap[l] then\n                heap[j], heap[l] = heap[l], heap[j]\n      \
    \          j = l\n            else\n                break\n            end\n \
    \       end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            local j = 1\n            while j *\
    \ 2 <= k do\n                local l = j * 2\n                local r = l + 1\n\
    \                if r <= k and heap[r] < heap[l] then\n                    l =\
    \ r\n                end\n                if heap[j] > heap[l] then\n        \
    \            heap[j], heap[l] = heap[l], heap[j]\n                    j = l\n\
    \                else\n                    break\n                end\n      \
    \      end\n        end\n    end\n    return heap\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            if i < j then\n     \
    \           arr[i] = arr[j]\n                i = i + 1\n            end\n    \
    \        while i < j and arr[i] >= pivot do\n                i = i + 1\n     \
    \       end\n            if i < j then\n                arr[j] = arr[i]\n    \
    \            j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local m = partition(arr, l, r)\n            quickSort(arr,\
    \ l, m - 1)\n            quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local len = #arr\n    if k == 0 then\n  \
    \      return {}\n    elseif k == len then\n        return arr\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l + 1\n        local j = r\n        while i <= j do\n            while i <=\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       while i <= j and arr[j] <= pivot do\n                j = j - 1\n     \
    \       end\n            if i < j then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n\
    \        return j\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr\n        elseif p > k then\n            return quickSelect(arr, l, p - 1,\
    \ k)\n        else\n            return quickSelect(arr, p + 1, r, k)\n       \
    \ end\n    end\n    return quickSelect(arr, 1, len, k)\nend", "    local n = #arr\n\
    \    if k == n then\n        table.sort(arr)\n        return arr\n    end\n  \
    \  local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n   \
    \ table.sort(res)\n    for i = k + 1, n do\n        if arr[i] > res[1] then\n\
    \            res[1] = arr[i]\n            table.sort(res)\n        end\n    end\n\
    \    return res\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local heap = {}\n    for i = 1, k do\n     \
    \   heap[i] = arr[i]\n    end\n    table.sort(heap)\n    for i = k + 1, len do\n\
    \        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            table.sort(heap)\n\
    \        end\n    end\n    return heap\nend", "    local n = #arr\n    local function\
    \ quickSort(arr, left, right)\n        if left >= right then return end\n    \
    \    local i, j = left, right\n        local pivot = arr[i]\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do j = j - 1 end\n       \
    \     arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do i = i +\
    \ 1 end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n  \
    \      quickSort(arr, left, i - 1)\n        quickSort(arr, i + 1, right)\n   \
    \ end\n    quickSort(arr, 1, n)\n    local res = {}\n    for i = 1, k do\n   \
    \     res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n  \
    \  if k == 0 then\n        return {}\n    elseif k == n then\n        return arr\n\
    \    end\n    local function partition(left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local left = 1\n    local right = n\n    local index = partition(left, right)\n\
    \    while index ~= k - 1 do\n        if index > k - 1 then\n            right\
    \ = index - 1\n            index = partition(left, right)\n        else\n    \
    \        left = index + 1\n            index = partition(left, right)\n      \
    \  end\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    local function partition(l,\
    \ r)\n        local pivot = arr[l]\n        local i = l\n        local j = r\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSelect(l, r)\n        if l\
    \ < r then\n            local p = partition(l, r)\n            if p == k then\n\
    \                return\n            elseif p < k then\n                quickSelect(p\
    \ + 1, r)\n            else\n                quickSelect(l, p - 1)\n         \
    \   end\n        end\n    end\n    quickSelect(1, n)\n    local res = {}\n   \
    \ for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", " \
    \   local n = #arr\n    if n == 0 then return {} end\n    local heap = {}\n  \
    \  for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n\
    \        heapify(heap, i, k)\n    end\n    for i = k + 1, n do\n        if arr[i]\
    \ > heap[1] then\n            heap[1] = arr[i]\n            heapify(heap, 1, k)\n\
    \        end\n    end\n    return heap\nend", "    local len = #arr\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, len do\n        local j = 1\n        while j <= k and heap[j] > arr[i]\
    \ do\n            j = j + 1\n        end\n        if j <= k then\n           \
    \ for l = k, j + 1, -1 do\n                heap[l] = heap[l - 1]\n           \
    \ end\n            heap[j] = arr[i]\n        end\n    end\n    return heap\nend",
  "    local len = #arr\n    if len == 0 then return {} end\n    if len == 1 then\
    \ return arr end\n    local res = {}\n    for i = 1, k do\n        local max =\
    \ arr[i]\n        local idx = i\n        for j = i + 1, len do\n            if\
    \ arr[j] > max then\n                max = arr[j]\n                idx = j\n \
    \           end\n        end\n        res[i] = max\n        arr[idx] = arr[i]\n\
    \        arr[i] = max\n    end\n    return res\nend", "    local len = #arr\n\
    \    if k == len then\n        table.sort(arr)\n        return arr\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1] then\n\
    \            table.remove(res, 1)\n            table.insert(res, arr[i])\n   \
    \         table.sort(res)\n        end\n    end\n    return res\nend", "    local\
    \ len = #arr\n    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local pivot = partition(arr,\
    \ l, r)\n            quickSort(arr, l, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, r)\n        end\n    end\n    quickSort(arr, 1, len)\n    local res\
    \ = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res, arr[i])\n\
    \    end\n    return res\nend", "    local n = #arr\n    if k == n then\n    \
    \    table.sort(arr)\n        return arr\n    end\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for\
    \ i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1] = arr[i]\n\
    \            table.sort(res)\n        end\n    end\n    return res\nend", "  \
    \  local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    local function heapify(arr, i, n)\n\
    \        local l, r = 2 * i, 2 * i + 1\n        local max = i\n        if l <=\
    \ n and arr[l] > arr[max] then\n            max = l\n        end\n        if r\
    \ <= n and arr[r] > arr[max] then\n            max = r\n        end\n        if\
    \ max ~= i then\n            arr[i], arr[max] = arr[max], arr[i]\n           \
    \ heapify(arr, max, n)\n        end\n    end\n    local function build_heap(arr,\
    \ n)\n        for i = math.floor(n / 2), 1, -1 do\n            heapify(arr, i,\
    \ n)\n        end\n    end\n    build_heap(res, k)\n    for i = k + 1, n do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            heapify(res,\
    \ 1, k)\n        end\n    end\n    return res\nend", "    local n = #arr\n   \
    \ local function partition(l, r)\n        local pivot = arr[l]\n        local\
    \ i = l\n        local j = r\n        while i < j do\n            while i < j\
    \ and arr[j] <= pivot do\n                j = j - 1\n            end\n       \
    \     arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n      \
    \          i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(l,\
    \ r)\n        if l >= r then\n            return\n        end\n        local m\
    \ = partition(l, r)\n        if m == k - 1 then\n            return\n        elseif\
    \ m > k - 1 then\n            quickSelect(l, m - 1)\n        else\n          \
    \  quickSelect(m + 1, r)\n        end\n    end\n    quickSelect(1, n)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local n = #arr\n    if n == 0 then return {} end\n    if k ==\
    \ 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l + 1\n\
    \        local j = r\n        while i <= j do\n            while i <= j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            while i\
    \ <= j and arr[j] <= pivot do\n                j = j - 1\n            end\n  \
    \          if i < j then\n                arr[i], arr[j] = arr[j], arr[i]\n  \
    \          end\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n       \
    \ return j\n    end\n    local function quickSelect(arr, l, r, k)\n        if\
    \ l == r then return arr[l] end\n        local j = partition(arr, l, r)\n    \
    \    if j == k then return arr[j] end\n        if j > k then\n            return\
    \ quickSelect(arr, l, j - 1, k)\n        else\n            return quickSelect(arr,\
    \ j + 1, r, k)\n        end\n    end\n    local pivot = quickSelect(arr, 1, n,\
    \ k)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n\
    \            res[#res + 1] = arr[i]\n        end\n    end\n    return res\nend",
  "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return arr[pivot]\n  \
    \      elseif pivot > k then\n            return quickSelect(arr, left, pivot\
    \ - 1, k)\n        else\n            return quickSelect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    local function sort(arr, left, right)\n      \
    \  if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            sort(arr, left, pivot - 1)\n            sort(arr, pivot + 1, right)\n\
    \        end\n    end\n    local function merge(arr, left, mid, right)\n     \
    \   local tmp = {}\n        local i = left\n        local j = mid + 1\n      \
    \  local k = 1\n        while i <= mid and j <= right do\n            if arr[i]\
    \ <= arr[j] then\n                tmp[k] = arr[i]\n                i = i + 1\n\
    \            else\n                tmp[k] = arr[j]\n                j = j + 1\n\
    \            end\n            k = k + 1\n        end\n        while i <= mid do\n\
    \            tmp[k] = arr[i]\n            i = i + 1\n            k = k + 1\n \
    \       end\n        while j <= right do\n            tmp[k] = arr[j]\n      \
    \      j = j + 1\n            k = k + 1\n        end\n        for i = left, right\
    \ do\n            arr[i] = tmp[i - left + 1]\n        end", "    local len = #arr\n\
    \    if k == len then\n        table.sort(arr)\n        return arr\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1] then\n\
    \            table.remove(res, 1)\n            table.insert(res, arr[i])\n   \
    \         table.sort(res)\n        end\n    end\n    return res\nend", "    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k == n then return arr end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    for i = k + 1, n do\n        local j =\
    \ 1\n        while j <= k and arr[i] > res[j] do\n            j = j + 1\n    \
    \    end\n        if j <= k then\n            for l = k, j + 1, -1 do\n      \
    \          res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend", "    local n = #arr\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l + 1\n\
    \        local j = r\n        while true do\n            while arr[i] < pivot\
    \ and i < r do\n                i = i + 1\n            end\n            while\
    \ arr[j] > pivot and j > l do\n                j = j - 1\n            end\n  \
    \          if i >= j then\n                break\n            end\n          \
    \  arr[i], arr[j] = arr[j], arr[i]\n        end\n        arr[l], arr[j] = arr[j],\
    \ arr[l]\n        return j\n    end\n    local function quickselect(arr, l, r,\
    \ k)\n        if l >= r then\n            return\n        end\n        local j\
    \ = partition(arr, l, r)\n        if j == k then\n            return\n       \
    \ elseif j > k then\n            quickselect(arr, l, j - 1, k)\n        else\n\
    \            quickselect(arr, j + 1, r, k)\n        end\n    end\n    quickselect(arr,\
    \ 1, n, n - k + 1)\n    return arr\nend", "    local n = #arr\n    if n == 0 then\
    \ return {} end\n    if k == 0 then return {} end\n    if k >= n then return arr\
    \ end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n  \
    \  end\n    for i = k, 1, -1 do\n        heapify(heap, i, k)\n    end\n    for\
    \ i = k + 1, n do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n\
    \            heapify(heap, 1, k)\n        end\n    end\n    return heap\nend",
  "    local len = #arr\n    if len == 0 then\n        return {}\n    end\n    if\
    \ k == 0 then\n        return {}\n    end\n    if k == len then\n        return\
    \ arr\n    end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    for i = k, 1, -1 do\n        local j = i * 2\n        while j <=\
    \ k do\n            if j + 1 <= k and heap[j + 1] > heap[j] then\n           \
    \     j = j + 1\n            end\n            if heap[i] >= heap[j] then\n   \
    \             break\n            end\n            heap[i], heap[j] = heap[j],\
    \ heap[i]\n            i = j\n            j = i * 2\n        end\n    end\n  \
    \  for i = k + 1, len do\n        if arr[i] > heap[1] then\n            heap[1]\
    \ = arr[i]\n            local j = 1\n            while j <= k do\n           \
    \     local t = j * 2\n                if t <= k and heap[t] > heap[t + 1] then\n\
    \                    t = t + 1\n                end\n                if heap[j]\
    \ >= heap[t] then\n                    break\n                end\n          \
    \      heap[j], heap[t] = heap[t], heap[j]\n                j = t\n          \
    \  end\n        end\n    end\n    return heap\nend", "    local n = #arr\n   \
    \ if k == 0 then\n        return {}\n    elseif k == n then\n        return arr\n\
    \    end\n    local function partition(l, r)\n        local pivot = arr[r]\n \
    \       local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i\
    \ + 1\n            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n\
    \        return i\n    end\n    local function quickSelect(l, r, k)\n        if\
    \ l == r then\n            return\n        end\n        local p = partition(l,\
    \ r)\n        if p == k then\n            return\n        elseif p < k then\n\
    \            quickSelect(p + 1, r, k)\n        else\n            quickSelect(l,\
    \ p - 1, k)\n        end\n    end\n    quickSelect(1, n, n - k + 1)\n    return\
    \ arr\nend", "    local n = #arr\n    if n == 0 then return {} end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    for i =\
    \ k + 1, n do\n        local j = 1\n        while j <= k and res[j] < arr[i] do\n\
    \            j = j + 1\n        end\n        if j <= k then\n            for l\
    \ = k, j + 1, -1 do\n                res[l] = res[l - 1]\n            end\n  \
    \          res[j] = arr[i]\n        end\n    end\n    return res\nend", "    local\
    \ n = #arr\n    local function partition(l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(l, r)\n        if l < r then\n            local p = partition(l,\
    \ r)\n            if p == k then\n                return\n            elseif p\
    \ < k then\n                quickSelect(p + 1, r)\n            else\n        \
    \        quickSelect(l, p - 1)\n            end\n        end\n    end\n    quickSelect(1,\
    \ n)\n    return arr\nend", "    local len = #arr\n    if k == len then\n    \
    \    table.sort(arr)\n        return arr\n    end\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for\
    \ i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1] = arr[i]\n\
    \            table.sort(res)\n        end\n    end\n    return res\nend", "  \
    \  local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l + 1\n        local\
    \ j = r\n        while true do\n            while i <= j and arr[i] >= pivot do\
    \ i = i + 1 end\n            while i <= j and arr[j] <= pivot do j = j - 1 end\n\
    \            if i > j then break end\n            arr[i], arr[j] = arr[j], arr[i]\n\
    \        end\n        arr[l], arr[j] = arr[j], arr[l]\n        return j\n    end\n\
    \    local function quickselect(arr, l, r, k)\n        local j = partition(arr,\
    \ l, r)\n        if j == k then return arr[j] end\n        if j > k then return\
    \ quickselect(arr, l, j - 1, k) end\n        return quickselect(arr, j + 1, r,\
    \ k)\n    end\n    local function quickselect2(arr, l, r, k)\n        local j\
    \ = partition(arr, l, r)\n        if j == k then return arr end\n        if j\
    \ > k then return quickselect2(arr, l, j - 1, k) end\n        return quickselect2(arr,\
    \ j + 1, r, k)\n    end\n    local function quickselect3(arr, l, r, k)\n     \
    \   local j = partition(arr, l, r)\n        if j == k then return arr end\n  \
    \      if j > k then return quickselect3(arr, l, j - 1, k) end\n        return\
    \ quickselect3(arr, j + 1, r, k)\n    end\n    local function quickselect4(arr,\
    \ l, r, k)\n        local j = partition(arr, l, r)\n        if j == k then return\
    \ arr end\n        if j > k then return quickselect4(arr, l, j - 1, k) end\n \
    \       return quickselect4(arr, j + 1, r, k)\n    end\n    local function quickselect5(arr,",
  "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local heap = {}\n    for i =\
    \ 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n      \
    \  local j = i * 2\n        while j <= k do\n            if j + 1 <= k and heap[j\
    \ + 1] < heap[j] then\n                j = j + 1\n            end\n          \
    \  if heap[i] <= heap[j] then\n                break\n            end\n      \
    \      heap[i], heap[j] = heap[j], heap[i]\n            i = j\n            j =\
    \ i * 2\n        end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1]\
    \ then\n            heap[1] = arr[i]\n            local j = 1\n            while\
    \ j <= k do\n                local l = j * 2\n                if l <= k and heap[l]\
    \ < heap[j] then\n                    j = l\n                end\n           \
    \     if l + 1 <= k and heap[l + 1] < heap[j] then\n                    j = l\
    \ + 1\n                end\n                if heap[i] <= heap[j] then\n     \
    \               break\n                end\n                heap[i], heap[j] =\
    \ heap[j], heap[i]\n                i = j\n                j = i * 2\n       \
    \     end\n        end\n    end\n    return heap\nend", "    local n = #arr\n\
    \    local function partition(l, r)\n        local pivot = arr[l]\n        local\
    \ i = l\n        local j = r\n        while i < j do\n            while i < j\
    \ and arr[j] <= pivot do\n                j = j - 1\n            end\n       \
    \     arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n      \
    \          i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickselect(l,\
    \ r, k)\n        if l == r then\n            return\n        end\n        local\
    \ i = partition(l, r)\n        if i == k then\n            return\n        elseif\
    \ i < k then\n            quickselect(i + 1, r, k)\n        else\n           \
    \ quickselect(l, i - 1, k)\n        end\n    end\n    quickselect(1, n, n - k\
    \ + 1)\n    local res = {}\n    for i = n - k + 1, n do\n        res[#res + 1]\
    \ = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    local function\
    \ partition(left, right)\n        local pivot = arr[left]\n        local i = left\n\
    \        local j = right\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSort(left,\
    \ right)\n        if left < right then\n            local pivot = partition(left,\
    \ right)\n            if pivot == k then\n                return\n           \
    \ elseif pivot > k then\n                quickSort(left, pivot - 1)\n        \
    \    else\n                quickSort(pivot + 1, right)\n            end\n    \
    \    end\n    end\n    quickSort(1, n)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n\
    \    if len == 0 then return {} end\n    if len <= k then return arr end\n   \
    \ local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n  \
    \  for i = k, len do\n        local j = 1\n        while j <= k and heap[j] >\
    \ arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n    \
    \        for l = k, j + 1, -1 do\n                heap[l] = heap[l - 1]\n    \
    \        end\n            heap[j] = arr[i]\n        end\n    end\n    return heap\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local i = partition(arr,\
    \ left, right)\n        if i == k then\n            return arr[i]\n        elseif\
    \ i > k then\n            return quickSelect(arr, left, i - 1, k)\n        else\n\
    \            return quickSelect(arr, i + 1, right, k)\n        end\n    end\n\
    \    local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local i = partition(arr, left, right)\n            quickSort(arr,\
    \ left, i - 1)\n            quickSort(arr, i + 1, right)\n        end\n    end\n\
    \    local function merge(arr1, arr2)\n        local i = 1\n        local j =\
    \ 1\n        local arr = {}\n        while i <= #arr1 and j <= #arr2 do\n    \
    \        if arr1[i] > arr2[j] then\n                arr[#arr + 1] = arr1[i]\n\
    \                i = i + 1\n            else\n                arr[#arr + 1] =\
    \ arr2[j]\n                j = j + 1\n            end\n        end\n        while\
    \ i <= #arr1 do\n            arr[#arr + 1] = arr1[i]\n            i = i + 1\n\
    \        end\n        while j <= #arr2 do\n            arr[#arr + 1] = arr2[j]\n\
    \            j = j + 1\n        end\n        return arr\n    end\n    local function\
    \ mergeSort(arr)\n        if #arr <= 1 then\n            return arr\n       ",
  "    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n then\n\
    \        return arr\n    end\n    local function partition(arr, l, r)\n      \
    \  local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n  \
    \          if arr[j] > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \                i = i + 1\n            end\n        end\n        arr[i], arr[r]\
    \ = arr[r], arr[i]\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        local p = partition(arr, l, r)\n        if p == k then\n \
    \           return\n        elseif p > k then\n            quickselect(arr, l,\
    \ p - 1, k)\n        else\n            quickselect(arr, p + 1, r, k)\n       \
    \ end\n    end\n    quickselect(arr, 1, n, k)\n    return arr\nend", "    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1]\
    \ then\n            table.remove(res, 1)\n            table.insert(res, arr[i])\n\
    \            table.sort(res)\n        end\n    end\n    return res\nend", "  \
    \  local function partition(arr, l, r)\n        local pivot = arr[l]\n       \
    \ local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ select(arr, l, r, k)\n        if l == r then\n            return arr[l]\n  \
    \      end\n        local i = partition(arr, l, r)\n        local j = i - l +\
    \ 1\n        if j == k then\n            return arr[i]\n        elseif j > k then\n\
    \            return select(arr, l, i - 1, k)\n        else\n            return\
    \ select(arr, i + 1, r, k - j)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local i = partition(arr, l, r)\n \
    \           quickSort(arr, l, i - 1)\n            quickSort(arr, i + 1, r)\n \
    \       end\n    end\n    local function merge(arr1, arr2)\n        local arr\
    \ = {}\n        local i, j = 1, 1\n        while i <= #arr1 and j <= #arr2 do\n\
    \            if arr1[i] > arr2[j] then\n                arr[#arr + 1] = arr1[i]\n\
    \                i = i + 1\n            else\n                arr[#arr + 1] =\
    \ arr2[j]\n                j = j + 1\n            end\n        end\n        while\
    \ i <= #arr1 do\n            arr[#arr + 1] = arr1[i]\n            i = i + 1\n\
    \        end\n        while j <= #arr2 do\n            arr[#arr + 1] = arr2[j]\n\
    \            j = j + 1\n        end\n        return arr\n    end\n    local function\
    \ mergeSort(arr, l, r)\n        if", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == n then return arr end\n\
    \    local function partition(l, r)\n        local i, j = l, r\n        local\
    \ pivot = arr[l]\n        while i < j do\n            while i < j and arr[j] <=\
    \ pivot do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local l, r = 1, n\n    while true do\n       \
    \ local p = partition(l, r)\n        if p == k then\n            break\n     \
    \   elseif p < k then\n            l = p + 1\n        else\n            r = p\
    \ - 1\n        end\n    end\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ left, right, k)\n        if left == right then\n            return arr[left]\n\
    \        end\n        local pivot = partition(arr, left, right)\n        if pivot\
    \ == k then\n            return arr[pivot]\n        elseif pivot > k then\n  \
    \          return quickSelect(arr, left, pivot - 1, k)\n        else\n       \
    \     return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n   \
    \ local function quickSort(arr, left, right)\n        if left < right then\n \
    \           local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    local function merge(arr1, arr2)\n        local i, j = 1, 1\n  \
    \      local arr = {}\n        while i <= #arr1 and j <= #arr2 do\n          \
    \  if arr1[i] > arr2[j] then\n                arr[#arr + 1] = arr1[i]\n      \
    \          i = i + 1\n            else\n                arr[#arr + 1] = arr2[j]\n\
    \                j = j + 1\n            end\n        end\n        while i <= #arr1\
    \ do\n            arr[#arr + 1] = arr1[i]\n            i = i + 1\n        end\n\
    \        while j <= #arr2 do\n            arr[#arr + 1] = arr2[j]\n          \
    \  j = j + 1\n        end\n        return arr\n    end\n    local function mergeSort(arr)\n\
    \        if #arr == 1 then\n            return arr\n        end", "    local n\
    \ = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k == n then return arr end\n    local function partition(arr, l, r)\n\
    \        local i, j = l, r\n        local pivot = arr[l]\n        while i < j\
    \ do\n            while i < j and arr[j] <= pivot do\n                j = j -\
    \ 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSelect(arr, l, r, k)\n        if l == r then return\
    \ arr[l] end\n        local i = partition(arr, l, r)\n        if i == k then return\
    \ arr[i] end\n        if i > k then\n            return quickSelect(arr, l, i\
    \ - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n  \
    \      end\n    end\n    local pivot = quickSelect(arr, 1, n, k)\n    local res\
    \ = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    return res\nend", "    local n = #arr\n\
    \    local function partition(l, r)\n        local i, j = l, r\n        local\
    \ pivot = arr[l]\n        while i < j do\n            while i < j and arr[j] <=\
    \ pivot do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local l, r = 1, n\n    while l <= r do\n     \
    \   local m = partition(l, r)\n        if m == k then\n            break\n   \
    \     elseif m < k then\n            l = m + 1\n        else\n            r =\
    \ m - 1\n        end\n    end\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    if\
    \ n == 0 then return {} end\n    if k == 0 then return {} end\n    if k == n then\
    \ return arr end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    for i = k + 1, n do\n        local j = 1\n        while j <= k and\
    \ res[j] < arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n\
    \            for l = k, j + 1, -1 do\n                res[l] = res[l - 1]\n  \
    \          end\n            res[j] = arr[i]\n        end\n    end\n    return\
    \ res\nend", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i == k then\n\
    \            return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local function quickSort(arr, l, r)\n        if l <\
    \ r then\n            local i = partition(arr, l, r)\n            quickSort(arr,\
    \ l, i - 1)\n            quickSort(arr, i + 1, r)\n        end\n    end\n    local\
    \ function mergeSort(arr, l, r)\n        if l < r then\n            local m =\
    \ math.floor((l + r) / 2)\n            mergeSort(arr, l, m)\n            mergeSort(arr,\
    \ m + 1, r)\n            local i = l\n            local j = m + 1\n          \
    \  local tmp = {}\n            while i <= m and j <= r do\n                if\
    \ arr[i] <= arr[j] then\n                    table.insert(tmp, arr[i])\n     \
    \               i = i + 1\n                else\n                    table.insert(tmp,\
    \ arr[j])\n                    j = j + 1\n                end\n            end\n\
    \            while i <= m do\n                table.insert(tmp, arr[i])\n    \
    \            i = i + 1\n            end\n            while j <= r do\n       \
    \         table.insert(tmp, arr[j])\n                j = j + 1\n            end\n\
    \           ", "    local n = #arr\n    if n == 0 then return {} end\n    if k\
    \ == 0 then return {} end\n    if k == n then return arr end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        local m = partition(arr, l, r)\n        if m == k then\n \
    \           return\n        elseif m < k then\n            quickSelect(arr, m\
    \ + 1, r, k)\n        else\n            quickSelect(arr, l, m - 1, k)\n      \
    \  end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n    local res = {}\n \
    \   for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return\
    \ res\nend", "    local n = #arr\n    if k == 0 then return {} end\n    if k ==\
    \ n then return arr end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    for i = k + 1, n do\n        for j = 1, k do\n      \
    \      if arr[i] > res[j] then\n                for l = k, j + 1, -1 do\n    \
    \                res[l] = res[l - 1]\n                end\n                res[j]\
    \ = arr[i]\n                break\n            end\n        end\n    end\n   \
    \ return res\nend", "    local n = #arr\n    local function partition(arr, left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local i = partition(arr, left, right)\n        if i == k then\n       \
    \     return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ left, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, right,\
    \ k)\n        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n    local res\
    \ = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n\
    \    return res\nend", "    local n = #arr\n    if k == n then\n        return\
    \ arr\n    end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    for i = k / 2, 1, -1 do\n        local j = i * 2\n        while\
    \ j <= k do\n            if j + 1 <= k and heap[j] < heap[j + 1] then\n      \
    \          j = j + 1\n            end\n            if heap[i] < heap[j] then\n\
    \                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n\
    \                j = i * 2\n            else\n                break\n        \
    \    end\n        end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1]\
    \ then\n            heap[1] = arr[i]\n            local j = 1\n            while\
    \ j <= k do\n                local m = j * 2\n                if m <= k and heap[m]\
    \ < heap[m + 1] then\n                    m = m + 1\n                end\n   \
    \             if m <= k and heap[j] < heap[m] then\n                    heap[j],\
    \ heap[m] = heap[m], heap[j]\n                    j = m\n                else\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    return heap\nend", "    local function partition(arr, l, r)\n  \
    \      local pivot = arr[l]\n        local i = l\n        local j = r\n      \
    \  while i < j do\n            while i < j and arr[j] <= pivot do\n          \
    \      j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, l, r)\n        if l < r then\n\
    \            local pivot = partition(arr, l, r)\n            quickSort(arr, l,\
    \ pivot - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n\
    \    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    if\
    \ k == n then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        if arr[i] > res[1] then\n            table.remove(res,\
    \ 1)\n            table.insert(res, arr[i])\n            table.sort(res)\n   \
    \     end\n    end\n    return res\nend", "    local function partition(arr, left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    quickSelect(arr, 1, #arr, #arr\
    \ - k + 1)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            if i < j then\n     \
    \           arr[i] = arr[j]\n                i = i + 1\n            end\n    \
    \        while i < j and arr[i] >= pivot do\n                i = i + 1\n     \
    \       end\n            if i < j then\n                arr[j] = arr[i]\n    \
    \            j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local p = partition(arr, l, r)\n            quickSort(arr,\
    \ l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n \
    \       return arr\n    end\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n \
    \       if arr[i] > res[1] then\n            table.remove(res, 1)\n          \
    \  table.insert(res, arr[i])\n            table.sort(res)\n        end\n    end\n\
    \    return res\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        local j = 1\n        while j <= k do\n            if arr[i] > res[j]\
    \ then\n                table.remove(res, k)\n                table.insert(res,\
    \ j, arr[i])\n                break\n            end\n            j = j + 1\n\
    \        end\n    end\n    return res\nend", "    local n = #arr\n    if n ==\
    \ 0 then return {} end\n    if k == 0 then return {} end\n    if k >= n then return\
    \ arr end\n    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        local pivot = partition(arr, l, r)\n    \
    \    if pivot == k then\n            return\n        elseif pivot > k then\n \
    \           quickSelect(arr, l, pivot - 1, k)\n        else\n            quickSelect(arr,\
    \ pivot + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n\
    \    local res = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == n then return arr end\n\
    \    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n\
    \    for i = k, n do\n        table.sort(heap)\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n        end\n    end\n    table.sort(heap)\n  \
    \  return heap\nend", "    local n = #arr\n    if k == n then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local t = {}\n    for i = 1, k do\n        t[i]\
    \ = arr[i]\n    end\n    table.sort(t)\n    for i = k + 1, n do\n        local\
    \ j = 1\n        while j <= k and arr[i] > t[j] do\n            j = j + 1\n  \
    \      end\n        if j <= k then\n            table.insert(t, j, arr[i])\n \
    \           table.remove(t)\n        end\n    end\n    return t\nend", "    local\
    \ function partition(arr, start, stop)\n        local pivot = arr[stop]\n    \
    \    local i = start - 1\n        for j = start, stop - 1 do\n            if arr[j]\
    \ < pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[i + 1], arr[stop] = arr[stop],\
    \ arr[i + 1]\n        return i + 1\n    end\n    local function quickSelect(arr,\
    \ start, stop, k)\n        if start < stop then\n            local pivot = partition(arr,\
    \ start, stop)\n            if pivot == k then\n                return\n     \
    \       elseif pivot < k then\n                quickSelect(arr, pivot + 1, stop,\
    \ k)\n            else\n                quickSelect(arr, start, pivot - 1, k)\n\
    \            end\n        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k\
    \ + 1)\n    return arr\nend", "    local function partition(arr, l, r)\n     \
    \   local pivot = arr[l]\n        local i = l\n        local j = r\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, l, r)\n        if l < r then\n  \
    \          local m = partition(arr, l, r)\n            quick_sort(arr, l, m -\
    \ 1)\n            quick_sort(arr, m + 1, r)\n        end\n    end\n    quick_sort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[l]\n        local i = l\n        local j = r\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then\n            return arr[i]\n        elseif i >\
    \ k then\n            return quickSelect(arr, l, i - 1, k)\n        else\n   \
    \         return quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local\
    \ function quickSort(arr, l, r)\n        if l < r then\n            local i =\
    \ partition(arr, l, r)\n            quickSort(arr, l, i - 1)\n            quickSort(arr,\
    \ i + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    local function partition(l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(l, r)\n        if l < r then\n            local m\
    \ = partition(l, r)\n            if m == k then\n                return\n    \
    \        elseif m < k then\n                quickSort(m + 1, r)\n            else\n\
    \                quickSort(l, m - 1)\n            end\n        end\n    end\n\
    \    quickSort(1, n)\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    if n == 0\
    \ then return {} end\n    if k == 0 then return {} end\n    if k == n then return\
    \ arr end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    for i = k + 1, n do\n        local j = 1\n        while j <= k and\
    \ res[j] < arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n\
    \            for l = k, j + 1, -1 do\n                res[l] = res[l - 1]\n  \
    \          end\n            res[j] = arr[i]\n        end\n    end\n    return\
    \ res\nend", "    local n = #arr\n    if k == n then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local function partition(left, right)\n    \
    \    local pivot = arr[right]\n        local i = left\n        for j = left, right\
    \ - 1 do\n            if arr[j] < pivot then\n                arr[i], arr[j] =\
    \ arr[j], arr[i]\n                i = i + 1\n            end\n        end\n  \
    \      arr[i], arr[right] = arr[right], arr[i]\n        return i\n    end\n  \
    \  local function quickSelect(left, right, k)\n        if left == right then\n\
    \            return arr[left]\n        end\n        local pivot = partition(left,\
    \ right)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(left, pivot - 1, k)\n       \
    \ else\n            return quickSelect(pivot + 1, right, k)\n        end\n   \
    \ end\n    quickSelect(1, n, k)\n    return arr\nend", "    local len = #arr\n\
    \    if k == len then\n        table.sort(arr)\n        return arr\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1] then\n\
    \            table.remove(res, 1)\n            table.insert(res, arr[i])\n   \
    \         table.sort(res)\n        end\n    end\n    return res\nend", "    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local function partition(l, r)\n     \
    \   local pivot = arr[l]\n        local i = l\n        local j = r\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(l, r)\n        if l < r then\n        \
    \    local m = partition(l, r)\n            quickSort(l, m - 1)\n            quickSort(m\
    \ + 1, r)\n        end\n    end\n    quickSort(1, n)\n    local res = {}\n   \
    \ for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", " \
    \   local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[l]\n        local i = l\n        local j = r\n        while i < j do\n \
    \           while i < j and arr[j] <= pivot do\n                j = j - 1\n  \
    \          end\n            if i < j then\n                arr[i] = arr[j]\n \
    \               i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSelect(l, r, k)\n        local p = partition(l, r)\n  \
    \      if p == k then\n            return\n        elseif p > k then\n       \
    \     quickSelect(l, p - 1, k)\n        else\n            quickSelect(p + 1, r,\
    \ k)\n        end\n    end\n    quickSelect(1, n, n - k + 1)\n    local res =\
    \ {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n \
    \   return res\nend", "    local n = #arr\n    if k == n then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, n do\n  \
    \      local j = 1\n        while j <= k and res[j] < arr[i] do\n            j\
    \ = j + 1\n        end\n        if j <= k then\n            table.insert(res,\
    \ j, arr[i])\n            table.remove(res)\n        end\n    end\n    return\
    \ res\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local mid = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, mid - 1)\n            quick_sort(arr, mid + 1, right)\n        end\n \
    \   end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n\
    \    if len == 0 then return {} end\n    if len == 1 then return arr end\n   \
    \ if k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, len do\n            if arr[i] > max then\n               \
    \ max = arr[i]\n            end\n        end\n        return {max}\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   for i = k, len do\n        local j = 1\n        while j <= k and res[j] >\
    \ arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n    \
    \        for l = k, j + 1, -1 do\n                res[l] = res[l - 1]\n      \
    \      end\n            res[j] = arr[i]\n        end\n    end\n    return res\n\
    end", "    local n = #arr\n    local function partition(left, right)\n       \
    \ local pivot = arr[left]\n        local i = left\n        local j = right\n \
    \       while i < j do\n            while i < j and arr[j] <= pivot do\n     \
    \           j = j - 1\n            end\n            arr[i] = arr[j]\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n  \
    \      return i\n    end\n    local function quickSelect(left, right)\n      \
    \  if left < right then\n            local pivot = partition(left, right)\n  \
    \          if pivot == k then\n                return\n            elseif pivot\
    \ < k then\n                quickSelect(pivot + 1, right)\n            else\n\
    \                quickSelect(left, pivot - 1)\n            end\n        end\n\
    \    end\n    quickSelect(1, n)\n    local res = {}\n    for i = 1, k do\n   \
    \     res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n  \
    \  if n == k then\n        return arr\n    end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            if i < j then\n     \
    \           arr[i] = arr[j]\n                i = i + 1\n            end\n    \
    \        while i < j and arr[i] >= pivot do\n                i = i + 1\n     \
    \       end\n            if i < j then\n                arr[j] = arr[i]\n    \
    \            j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l >= r then\n            return\n        end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then\n            return\n        elseif i > k then\n\
    \            quickSelect(arr, l, i - 1, k)\n        else\n            quickSelect(arr,\
    \ i + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n\
    \    local res = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local len = #arr\n    if k == len then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local n = #arr\n    local function partition(left, right)\n       \
    \ local pivot = arr[left]\n        local i = left\n        local j = right\n \
    \       while i < j do\n            while i < j and arr[j] <= pivot do\n     \
    \           j = j - 1\n            end\n            if i < j then\n          \
    \      arr[i] = arr[j]\n                i = i + 1\n            end\n         \
    \   while i < j and arr[i] >= pivot do\n                i = i + 1\n          \
    \  end\n            if i < j then\n                arr[j] = arr[i]\n         \
    \       j = j - 1\n            end\n        end\n        arr[i] = pivot\n    \
    \    return i\n    end\n    local function quickSort(left, right)\n        if\
    \ left < right then\n            local pivot = partition(left, right)\n      \
    \      quickSort(left, pivot - 1)\n            quickSort(pivot + 1, right)\n \
    \       end\n    end\n    quickSort(1, n)\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local len\
    \ = #arr\n    if len == 0 then return {} end\n    if len == 1 then return arr\
    \ end\n    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, len)\n    local res = {}\n    for i = len, len\
    \ - k + 1, -1 do\n        table.insert(res, arr[i])\n    end\n    return res\n\
    end", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then\
    \ return {} end\n    if k >= n then return arr end\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    local heap = require(\"algo.Heap\"\
    ).new(res, function(a, b) return a > b end)\n    for i = k + 1, n do\n       \
    \ if arr[i] > heap:top() then\n            heap:pop()\n            heap:push(arr[i])\n\
    \        end\n    end\n    return heap:toArray()\nend", "    if k == 0 then return\
    \ {} end\n    local n = #arr\n    if k == n then return arr end\n    local function\
    \ partition(l, r)\n        local pivot = arr[l]\n        local i = l\n       \
    \ for j = l + 1, r do\n            if arr[j] > pivot then\n                i =\
    \ i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n  \
    \      end\n        arr[l], arr[i] = arr[i], arr[l]\n        return i\n    end\n\
    \    local l, r = 1, n\n    while true do\n        local p = partition(l, r)\n\
    \        if p == k then\n            return arr\n        elseif p < k then\n \
    \           l = p + 1\n        else\n            r = p - 1\n        end\n    end\n\
    end", "    local len = #arr\n    if k >= len then\n        table.sort(arr)\n \
    \       return arr\n    end\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n \
    \       local j = 1\n        while j <= k do\n            if arr[i] > res[j] then\n\
    \                table.remove(res, k)\n                table.insert(res, j, arr[i])\n\
    \                break\n            end\n            j = j + 1\n        end\n\
    \    end\n    return res\nend", "    local n = #arr\n    local function partition(l,\
    \ r)\n        local pivot = arr[l]\n        local i = l\n        local j = r\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local l = 1\n    local r = n\n    while l <= r\
    \ do\n        local m = partition(l, r)\n        if m == k then\n            break\n\
    \        elseif m < k then\n            l = m + 1\n        else\n            r\
    \ = m - 1\n        end\n    end\n    local res = {}\n    for i = 1, k do\n   \
    \     res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n  \
    \  if n == 0 then return {} end\n    if k == 0 then return {} end\n    if k >=\
    \ n then return arr end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    for i = k + 1, n do\n        local j = 1\n        while\
    \ j <= k and res[j] > arr[i] do\n            j = j + 1\n        end\n        if\
    \ j <= k then\n            for l = k, j + 1, -1 do\n                res[l] = res[l\
    \ - 1]\n            end\n            res[j] = arr[i]\n        end\n    end\n \
    \   return res\nend", "    local function partition(arr, left, right)\n      \
    \  local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            if i < j then\n                arr[i] = arr[j]\n          \
    \      i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l < r then\n            local pivot =\
    \ partition(arr, l, r)\n            if pivot == k then\n                return\n\
    \            elseif pivot < k then\n                quickSelect(arr, pivot + 1,\
    \ r, k)\n            else\n                quickSelect(arr, l, pivot - 1, k)\n\
    \            end\n        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k\
    \ + 1)\n    return arr\nend", "    local n = #arr\n    local function partition(l,\
    \ r)\n        local i, j = l, r\n        local pivot = arr[l]\n        while i\
    \ < j do\n            while i < j and arr[j] <= pivot do\n                j =\
    \ j - 1\n            end\n            arr[i] = arr[j]\n            while i < j\
    \ and arr[i] >= pivot do\n                i = i + 1\n            end\n       \
    \     arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSelect(l, r)\n        if l >= r then\n     \
    \       return\n        end\n        local p = partition(l, r)\n        if p ==\
    \ k - 1 then\n            return\n        elseif p > k - 1 then\n            quickSelect(l,\
    \ p - 1)\n        else\n            quickSelect(p + 1, r)\n        end\n    end\n\
    \    quickSelect(1, n)\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            if i < j then\n     \
    \           arr[i] = arr[j]\n                i = i + 1\n            end\n    \
    \        while i < j and arr[i] >= pivot do\n                i = i + 1\n     \
    \       end\n            if i < j then\n                arr[j] = arr[i]\n    \
    \            j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local p = partition(arr, l, r)\n            quickSort(arr,\
    \ l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[l]\n        local i = l\n        local j = r\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, l, r)\n        if l < r then\n\
    \            local p = partition(arr, l, r)\n            quickSort(arr, l, p -\
    \ 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    local function partition(l,\
    \ r)\n        local pivot = arr[r]\n        local i = l\n        for j = l, r\
    \ - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j] =\
    \ arr[j], arr[i]\n                i = i + 1\n            end\n        end\n  \
    \      arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function\
    \ quickSelect(l, r)\n        if l < r then\n            local p = partition(l,\
    \ r)\n            if p == k then\n                return\n            elseif p\
    \ < k then\n                quickSelect(p + 1, r)\n            else\n        \
    \        quickSelect(l, p - 1)\n            end\n        end\n    end\n    quickSelect(1,\
    \ n)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n\
    \    return res\nend", "    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSelect(arr, l, r, k)\n        if l >= r then\n\
    \            return arr[l]\n        end\n        local i = partition(arr, l, r)\n\
    \        if i == k then\n            return arr[i]\n        elseif i > k then\n\
    \            return quickSelect(arr, l, i - 1, k)\n        else\n            return\
    \ quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local function merge(arr1,\
    \ arr2)\n        local i, j = 1, 1\n        local arr = {}\n        while i <=\
    \ #arr1 and j <= #arr2 do\n            if arr1[i] > arr2[j] then\n           \
    \     arr[#arr + 1] = arr1[i]\n                i = i + 1\n            else\n \
    \               arr[#arr + 1] = arr2[j]\n                j = j + 1\n         \
    \   end\n        end\n        while i <= #arr1 do\n            arr[#arr + 1] =\
    \ arr1[i]\n            i = i + 1\n        end\n        while j <= #arr2 do\n \
    \           arr[#arr + 1] = arr2[j]\n            j = j + 1\n        end\n    \
    \    return arr\n    end\n    local function mergeSort(arr, l, r)\n        if\
    \ l >= r then\n            return {arr[l]}\n        end\n        local mid = math.floor((l\
    \ + r) / 2)\n        local arr1 = mergeSort(arr, l, mid)\n        local arr2 =\
    \ mergeSort(arr, mid + 1, r)\n        return merge(arr1, arr2)", "    local n\
    \ = #arr\n    local function partition(l, r)\n        local pivot = arr[l]\n \
    \       local i = l\n        local j = r\n        while i < j do\n           \
    \ while i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n\
    \            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(l, r)\n        if l < r then\n            local pivot = partition(l,\
    \ r)\n            if pivot == k then\n                return\n            elseif\
    \ pivot < k then\n                quickSelect(pivot + 1, r)\n            else\n\
    \                quickSelect(l, pivot - 1)\n            end\n        end\n   \
    \ end\n    quickSelect(1, n)\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n   \
    \ if len == 0 then return {} end\n    if len <= k then return arr end\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left + 1\n        local j = right\n        while true do\n    \
    \        while arr[i] < pivot and i < right do i = i + 1 end\n            while\
    \ arr[j] > pivot and j > left do j = j - 1 end\n            if i >= j then break\
    \ end\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n        arr[left],\
    \ arr[j] = arr[j], arr[left]\n        return j\n    end\n    local function quickselect(arr,\
    \ left, right, k)\n        if left == right then return arr[left] end\n      \
    \  local pivot = partition(arr, left, right)\n        if pivot == k then return\
    \ arr[pivot]\n        elseif pivot > k then return quickselect(arr, left, pivot\
    \ - 1, k)\n        else return quickselect(arr, pivot + 1, right, k) end\n   \
    \ end\n    quickselect(arr, 1, len, k)\n    return arr\nend", "    local n = #arr\n\
    \    local function partition(left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(left, right)\n        if left == right then\n \
    \           return\n        end\n        local pivot = partition(left, right)\n\
    \        if pivot == k then\n            return\n        elseif pivot > k then\n\
    \            quickSelect(left, pivot - 1)\n        else\n            quickSelect(pivot\
    \ + 1, right)\n        end\n    end\n    quickSelect(1, n)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend",
  "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return arr[pivot]\n  \
    \      elseif pivot > k then\n            return quickSelect(arr, left, pivot\
    \ - 1, k)\n        else\n            return quickSelect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    local function quickSort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n \
    \       return arr\n    end\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n \
    \       local j = 1\n        while j <= k do\n            if arr[i] > res[j] then\n\
    \                table.remove(res, j)\n                table.insert(res, j, arr[i])\n\
    \                break\n            end\n            j = j + 1\n        end\n\
    \    end\n    return res\nend", "    local len = #arr\n    if k == 0 then\n  \
    \      return {}\n    elseif k == len then\n        return arr\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    for i =\
    \ k + 1, len do\n        local j = 1\n        while j <= k and res[j] > arr[i]\
    \ do\n            j = j + 1\n        end\n        if j <= k then\n           \
    \ for l = k, j + 1, -1 do\n                res[l] = res[l - 1]\n            end\n\
    \            res[j] = arr[i]\n        end\n    end\n    return res\nend", "  \
    \  local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local mid = partition(arr,\
    \ left, right)\n        if mid == k then\n            return arr[mid]\n      \
    \  elseif mid < k then\n            return quickSelect(arr, mid + 1, right, k)\n\
    \        else\n            return quickSelect(arr, left, mid - 1, k)\n       \
    \ end\n    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    local res = {}\n\
    \    for i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n    end\n\
    \    return res\nend", "    local function partition(arr, left, right)\n     \
    \   local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    return\
    \ arr\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            table.remove(res, 1)\n         \
    \   table.insert(res, arr[i])\n            table.sort(res)\n        end\n    end\n\
    \    return res\nend", "    local n = #arr\n    local function partition(l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            if i < j then\n             \
    \   arr[i] = arr[j]\n                i = i + 1\n            end\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           if i < j then\n                arr[j] = arr[i]\n                j\
    \ = j - 1\n            end\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(l, r)\n        if l < r then\n    \
    \        local p = partition(l, r)\n            quickSort(l, p - 1)\n        \
    \    quickSort(p + 1, r)\n        end\n    end\n    quickSort(1, n)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local n = #arr\n    local function partition(l, r)\n       \
    \ local pivot = arr[l]\n        local i = l\n        local j = r\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSelect(l, r)\n        if l < r then\n      \
    \      local p = partition(l, r)\n            if p == k then\n               \
    \ return\n            elseif p < k then\n                quickSelect(p + 1, r)\n\
    \            else\n                quickSelect(l, p - 1)\n            end\n  \
    \      end\n    end\n    quickSelect(1, n)\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local n =\
    \ #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n \
    \   if k >= n then return arr end\n    local res = {}\n    for i = 1, k do\n \
    \       res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, n do\n\
    \        local j = 1\n        while j <= k and res[j] < arr[i] do\n          \
    \  j = j + 1\n        end\n        if j <= k then\n            table.insert(res,\
    \ j, arr[i])\n            table.remove(res)\n        end\n    end\n    return\
    \ res\nend", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i == k then\n\
    \            return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local function merge(arr1, arr2)\n        local i =\
    \ 1\n        local j = 1\n        local res = {}\n        while i <= #arr1 and\
    \ j <= #arr2 do\n            if arr1[i] > arr2[j] then\n                table.insert(res,\
    \ arr1[i])\n                i = i + 1\n            else\n                table.insert(res,\
    \ arr2[j])\n                j = j + 1\n            end\n        end\n        while\
    \ i <= #arr1 do\n            table.insert(res, arr1[i])\n            i = i + 1\n\
    \        end\n        while j <= #arr2 do\n            table.insert(res, arr2[j])\n\
    \            j = j + 1\n        end\n        return res\n    end\n    local function\
    \ mergeSort(arr, l, r)\n        if l == r then\n            return {arr[l]}\n\
    \        end\n        local mid = math.floor((l + r) / 2)\n        local arr1\
    \ = mergeSort(arr, l, mid)\n        local arr2 = mergeSort(arr, mid + 1, r)\n\
    \        return merge(arr1, arr2)\n    end\n    local", "    local n = #arr\n\
    \    local function partition(l, r)\n        local pivot = arr[l]\n        local\
    \ i = l\n        local j = r\n        while i < j do\n            while i < j\
    \ and arr[j] <= pivot do\n                j = j - 1\n            end\n       \
    \     arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n      \
    \          i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local l = 1\n    local\
    \ r = n\n    while l <= r do\n        local m = partition(l, r)\n        if m\
    \ == k then\n            break\n        elseif m < k then\n            l = m +\
    \ 1\n        else\n            r = m - 1\n        end\n    end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    local function partition(l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(l, r)\n        if l < r then\n            local m\
    \ = partition(l, r)\n            quickSort(l, m - 1)\n            quickSort(m\
    \ + 1, r)\n        end\n    end\n    quickSort(1, n)\n    local res = {}\n   \
    \ for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", " \
    \   local n = #arr\n    local res = {}\n    for i = 1, k do\n        res[i] =\
    \ arr[i]\n    end\n    local function sift_down(i)\n        local left = 2 * i\n\
    \        local right = 2 * i + 1\n        local largest = i\n        if left <=\
    \ k and res[left] > res[largest] then\n            largest = left\n        end\n\
    \        if right <= k and res[right] > res[largest] then\n            largest\
    \ = right\n        end\n        if largest ~= i then\n            res[i], res[largest]\
    \ = res[largest], res[i]\n            sift_down(largest)\n        end\n    end\n\
    \    for i = k // 2, 1, -1 do\n        sift_down(i)\n    end\n    for i = k +\
    \ 1, n do\n        if arr[i] > res[1] then\n            res[1] = arr[i]\n    \
    \        sift_down(1)\n        end\n    end\n    return res\nend", "    local\
    \ n = #arr\n    if k == n then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSelect(arr, left, right, k)\n        if left\
    \ == right then\n            return arr[left]\n        end\n        local pivot\
    \ = partition(arr, left, right)\n        if pivot == k then\n            return\
    \ arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ left, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot\
    \ + 1, right, k)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = quickSelect(arr, 1, n, i)\n    end\n    return res\nend", " \
    \   local len = #arr\n    if k == 0 then\n        return {}\n    elseif k == len\
    \ then\n        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    local res = {}\n    for i =\
    \ 1, k do\n        res[i] = quickSelect(arr, 1, len, i)\n    end\n    return res\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    local\
    \ function partition(l, r)\n        local pivot = arr[l]\n        local i = l\n\
    \        local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quickSort(l, r)\n   \
    \     if l < r then\n            local m = partition(l, r)\n            quickSort(l,\
    \ m - 1)\n            quickSort(m + 1, r)\n        end\n    end\n    quickSort(1,\
    \ n)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n\
    \    return res\nend", "    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSort(arr, l, r)\n        if l < r then\n      \
    \      local pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[l]\n        local i = l\n        local j = r\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, l, r)\n        if l < r then\n\
    \            local m = partition(arr, l, r)\n            quickSort(arr, l, m -\
    \ 1)\n            quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local len = #arr\n    if k == len then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, len do\n        local j = 1\n        while j <= k do\n     \
    \       if arr[i] > res[j] then\n                for l = k, j + 1, -1 do\n   \
    \                 res[l] = res[l - 1]\n                end\n                res[j]\
    \ = arr[i]\n                break\n            end\n            j = j + 1\n  \
    \      end\n    end\n    return res\nend", "    local n = #arr\n    local t =\
    \ {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n    for i = k + 1,\
    \ n do\n        local j = 1\n        while j <= k and t[j] > arr[i] do\n     \
    \       j = j + 1\n        end\n        if j <= k then\n            for l = k,\
    \ j + 1, -1 do\n                t[l] = t[l - 1]\n            end\n           \
    \ t[j] = arr[i]\n        end\n    end\n    return t\nend", "    local n = #arr\n\
    \    if n == 0 then return {} end\n    if k == 0 then return {} end\n    if k\
    \ >= n then return arr end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    for i = k + 1, n do\n        local j = 1\n        while\
    \ j <= k and res[j] > arr[i] do\n            j = j + 1\n        end\n        if\
    \ j <= k then\n            for l = k, j + 1, -1 do\n                res[l] = res[l\
    \ - 1]\n            end\n            res[j] = arr[i]\n        end\n    end\n \
    \   return res\nend", "    local n = #arr\n    local function partition(arr, l,\
    \ r)\n        local i, j = l, r\n        local x = arr[i]\n        while i < j\
    \ do\n            while i < j and arr[j] <= x do\n                j = j - 1\n\
    \            end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= x do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = x\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i == k then\n\
    \            return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n    local res =\
    \ {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n \
    \   return res\nend", "    local function partition(arr, left, right)\n      \
    \  local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quickSort(arr, left, right)\n    \
    \    if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k\
    \ == n then\n        return arr\n    end\n    local function partition(arr, l,\
    \ r)\n        local pivot = arr[r]\n        local i = l\n        for j = l, r\
    \ - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j] =\
    \ arr[j], arr[i]\n                i = i + 1\n            end\n        end\n  \
    \      arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i == k then\n\
    \            return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    quickSelect(arr, 1, n, k)\n    return arr\nend", " \
    \   local n = #arr\n    local function partition(l, r)\n        local pivot =\
    \ arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickSelect(l, r)\n  \
    \      if l < r then\n            local p = partition(l, r)\n            if p\
    \ == k then\n                return\n            elseif p < k then\n         \
    \       quickSelect(p + 1, r)\n            else\n                quickSelect(l,\
    \ p - 1)\n            end\n        end\n    end\n    quickSelect(1, n)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quickSort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local len = #arr\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, l, r)\n        if l < r then\n\
    \            local pivot = partition(arr, l, r)\n            quickSort(arr, l,\
    \ pivot - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n\
    \    quickSort(arr, 1, len)\n    local res = {}\n    for i = len, len - k + 1,\
    \ -1 do\n        table.insert(res, arr[i])\n    end\n    return res\nend", " \
    \   local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quick_sort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n\
    \    if k == len then\n        table.sort(arr)\n        return arr\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   table.sort(res)\n    for i = k + 1, len do\n        local j = 1\n        while\
    \ j <= k do\n            if arr[i] > res[j] then\n                table.remove(res,\
    \ j)\n                table.insert(res, j, arr[i])\n                break\n  \
    \          end\n            j = j + 1\n        end\n    end\n    return res\n\
    end", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n \
    \       return arr\n    end\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n \
    \       local j = 1\n        while j <= k do\n            if arr[i] > res[j] then\n\
    \                table.remove(res, j)\n                table.insert(res, j, arr[i])\n\
    \                break\n            end\n            j = j + 1\n        end\n\
    \    end\n    return res\nend", "    local n = #arr\n    if k == n then\n    \
    \    table.sort(arr)\n        return arr\n    end\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for\
    \ i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1] = arr[i]\n\
    \            table.sort(res)\n        end\n    end\n    return res\nend", "  \
    \  local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    local function heapify(arr, i, n)\n\
    \        local l = 2 * i\n        local r = 2 * i + 1\n        local largest =\
    \ i\n        if l <= n and arr[l] > arr[largest] then\n            largest = l\n\
    \        end\n        if r <= n and arr[r] > arr[largest] then\n            largest\
    \ = r\n        end\n        if largest ~= i then\n            arr[i], arr[largest]\
    \ = arr[largest], arr[i]\n            heapify(arr, largest, n)\n        end\n\
    \    end\n    local function build_heap(arr, n)\n        for i = math.floor(n\
    \ / 2), 1, -1 do\n            heapify(arr, i, n)\n        end\n    end\n    build_heap(res,\
    \ k)\n    for i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            heapify(res, 1, k)\n        end\n    end\n    return res\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            if i < j then\n                arr[i] = arr[j]\n          \
    \      i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l >= r then\n            return\n    \
    \    end\n        local pivot = partition(arr, l, r)\n        if pivot == k then\n\
    \            return\n        elseif pivot > k then\n            quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            quickSelect(arr, pivot + 1, r, k)\n\
    \        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    local\
    \ res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[l]\n        local i = l\n        local j = r\n       \
    \ while i < j do\n            while i < j and arr[j] < pivot do\n            \
    \    j = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] > pivot do\n                i = i + 1\n            end\n      \
    \      if i < j then\n                arr[j] = arr[i]\n                j = j -\
    \ 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l < r then\n   \
    \         local m = partition(arr, l, r)\n            quickSort(arr, l, m - 1)\n\
    \            quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    local function partition(l,\
    \ r)\n        local pivot = arr[l]\n        local i = l\n        local j = r\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickselect(l, r, k)\n        if\
    \ l == r then\n            return\n        end\n        local i = partition(l,\
    \ r)\n        if i == k then\n            return\n        elseif i < k then\n\
    \            quickselect(i + 1, r, k)\n        else\n            quickselect(l,\
    \ i - 1, k)\n        end\n    end\n    quickselect(1, n, n - k + 1)\n    local\
    \ res = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n\
    \    return res\nend", "    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSelect(arr, l, r, k)\n        if l == r then\n\
    \            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l < r then\n   \
    \         local pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n    local\
    \ function heapify(arr, i, n)\n        local l = 2 * i + 1\n        local r =\
    \ 2 * i + 2\n        local largest = i\n        if l <= n and arr[l] > arr[largest]\
    \ then\n            largest = l\n        end\n        if r <= n and arr[r] > arr[largest]\
    \ then\n            largest = r\n        end\n        if largest ~= i then\n \
    \           arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr,\
    \ largest, n)\n        end\n    end\n    local function buildHeap(arr, n)\n  \
    \      for i = math.floor(n / 2), 1, -1 do\n            heapify(arr, i, n)\n \
    \       end\n    end\n    local function heapSort(arr, n)\n        buildHeap(arr,\
    \ n)\n        for i = n, 2,", "    local function partition(arr, l, r)\n     \
    \   local pivot = arr[l]\n        local i = l\n        local j = r\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l < r then\n   \
    \         local m = partition(arr, l, r)\n            quickSort(arr, l, m - 1)\n\
    \            quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == n then return arr end\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then return arr[l] end\n      \
    \  local p = partition(arr, l, r)\n        if p == k then return arr[p] end\n\
    \        if p > k then\n            return quickSelect(arr, l, p - 1, k)\n   \
    \     else\n            return quickSelect(arr, p + 1, r, k)\n        end\n  \
    \  end\n    local pivot = quickSelect(arr, 1, n, k)\n    local res = {}\n    for\
    \ i = 1, n do\n        if arr[i] >= pivot then\n            res[#res + 1] = arr[i]\n\
    \        end\n    end\n    return res\nend", "    local n = #arr\n    if n ==\
    \ 0 then return {} end\n    if k == 0 then return {} end\n    if k == n then return\
    \ arr end\n    local function partition(l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local l =\
    \ 1\n    local r = n\n    local index = partition(l, r)\n    while index ~= k\
    \ - 1 do\n        if index > k - 1 then\n            r = index - 1\n         \
    \   index = partition(l, r)\n        else\n            l = index + 1\n       \
    \     index = partition(l, r)\n        end\n    end\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local i = partition(arr, l, r)\n        if i == k then\n            return\
    \ arr[i]\n        elseif i > k then\n            return quickSelect(arr, l, i\
    \ - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n  \
    \      end\n    end\n    local function quickSort(arr, l, r)\n        if l < r\
    \ then\n            local i = partition(arr, l, r)\n            quickSort(arr,\
    \ l, i - 1)\n            quickSort(arr, i + 1, r)\n        end\n    end\n    local\
    \ n = #arr\n    quickSort(arr, 1, n)\n    return arr\nend", "    local n = #arr\n\
    \    local function partition(l, r)\n        local pivot = arr[r]\n        local\
    \ i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n   \
    \             arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n   \
    \         end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quickSelect(l, r)\n        if l < r then\n  \
    \          local p = partition(l, r)\n            if p == k then\n           \
    \     return\n            elseif p < k then\n                quickSelect(p + 1,\
    \ r)\n            else\n                quickSelect(l, p - 1)\n            end\n\
    \        end\n    end\n    quickSelect(1, n)\n    return arr\nend", "    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quick_select(arr, l, r, k)\n        local i =\
    \ partition(arr, l, r)\n        if i == k then\n            return\n        elseif\
    \ i > k then\n            quick_select(arr, l, i - 1, k)\n        else\n     \
    \       quick_select(arr, i + 1, r, k)\n        end\n    end\n    quick_select(arr,\
    \ 1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1, n do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then\n            return arr[l]\n        end\n        local pivot\
    \ = partition(arr, l, r)\n        if pivot == k then\n            return arr[pivot]\n\
    \        elseif pivot > k then\n            return quickSelect(arr, l, pivot -\
    \ 1, k)\n        else\n            return quickSelect(arr, pivot + 1, r, k)\n\
    \        end\n    end\n    local function quickSort(arr, l, r)\n        if l <\
    \ r then\n            local pivot = partition(arr, l, r)\n            quickSort(arr,\
    \ l, pivot - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n\
    \    local n = #arr\n    local res = {}\n    for i = 1, k do\n        res[i] =\
    \ quickSelect(arr, 1, n, i)\n    end\n    quickSort(res, 1, k)\n    return res\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l >= r then\n            return\n    \
    \    end\n        local mid = partition(arr, l, r)\n        if mid == k then\n\
    \            return\n        elseif mid < k then\n            quickSelect(arr,\
    \ mid + 1, r, k)\n        else\n            quickSelect(arr, l, mid - 1, k)\n\
    \        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    local\
    \ res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    if k == n then\n    \
    \    table.sort(arr)\n        return arr\n    end\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for\
    \ i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1] = arr[i]\n\
    \            table.sort(res)\n        end\n    end\n    return res\nend", "  \
    \  local len = #arr\n    local heap = {}\n    for i = 1, k do\n        heap[i]\
    \ = arr[i]\n    end\n    for i = k, len do\n        local min = heap[1]\n    \
    \    if arr[i] > min then\n            heap[1] = arr[i]\n            for j = 1,\
    \ k do\n                local l = j * 2\n                local r = l + 1\n   \
    \             if l <= k then\n                    if r <= k then\n           \
    \             if heap[l] < heap[r] then\n                            if heap[l]\
    \ < heap[j] then\n                                heap[l], heap[j] = heap[j],\
    \ heap[l]\n                            end\n                        else\n   \
    \                         if heap[r] < heap[j] then\n                        \
    \        heap[r], heap[j] = heap[j], heap[r]\n                            end\n\
    \                        end\n                    else\n                     \
    \   if heap[l] < heap[j] then\n                            heap[l], heap[j] =\
    \ heap[j], heap[l]\n                        end\n                    end\n   \
    \             end\n            end\n        end\n    end\n    return heap\nend",
  "    local len = #arr\n    if k >= len then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] >\
    \ res[1] then\n            table.remove(res, 1)\n            table.insert(res,\
    \ arr[i])\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local n = #arr\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    for i = k + 1, n do\n        local j = 1\n        while\
    \ j <= k and res[j] < arr[i] do\n            j = j + 1\n        end\n        if\
    \ j <= k then\n            for l = k, j + 1, -1 do\n                res[l] = res[l\
    \ - 1]\n            end\n            res[j] = arr[i]\n        end\n    end\n \
    \   return res\nend", "    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSort(arr, l, r)\n        if l < r then\n      \
    \      local m = partition(arr, l, r)\n            quickSort(arr, l, m - 1)\n\
    \            quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k >= n then return arr end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   for i = k + 1, n do\n        local j = 1\n        while j <= k and res[j]\
    \ > arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          for l = k, j + 1, -1 do\n                res[l] = res[l - 1]\n    \
    \        end\n            res[j] = arr[i]\n        end\n    end\n    return res\n\
    end", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then\
    \ return {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ left, right, k)\n        if left == right then return arr[left] end\n      \
    \  local pivot = partition(arr, left, right)\n        if pivot == k then return\
    \ arr[pivot] end\n        if pivot > k then\n            return quickSelect(arr,\
    \ left, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot\
    \ + 1, right, k)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = quickSelect(arr, 1, n, i)\n    end\n    return res\nend", " \
    \   local n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n then\n\
    \        return arr\n    end\n    local function partition(left, right)\n    \
    \    local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local left = 1\n    local right = n\n    local\
    \ index = partition(left, right)\n    while index ~= k - 1 do\n        if index\
    \ > k - 1 then\n            right = index - 1\n            index = partition(left,\
    \ right)\n        else\n            left = index + 1\n            index = partition(left,\
    \ right)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n    \
    \    res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n \
    \   if k == len then\n        table.sort(arr)\n        return arr\n    end\n \
    \   local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n  \
    \  table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1] then\n\
    \            res[1] = arr[i]\n            table.sort(res)\n        end\n    end\n\
    \    return res\nend", "    local len = #arr\n    if k == 0 then\n        return\
    \ {}\n    elseif k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[l]\n        local i = l\n        local j = r\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, l, r)\n        if l < r then\n\
    \            local pivot = partition(arr, l, r)\n            quickSort(arr, l,\
    \ pivot - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n\
    \    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n   \
    \ if k == len then\n        table.sort(arr)\n        return arr\n    end\n   \
    \ local function partition(arr, l, r)\n        local pivot = arr[l]\n        local\
    \ i = l\n        local j = r\n        while i < j do\n            while i < j\
    \ and arr[j] <= pivot do\n                j = j - 1\n            end\n       \
    \     if i < j then\n                arr[i] = arr[j]\n                i = i +\
    \ 1\n            end\n            while i < j and arr[i] >= pivot do\n       \
    \         i = i + 1\n            end\n            if i < j then\n            \
    \    arr[j] = arr[i]\n                j = j - 1\n            end\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local pivot = partition(arr, l, r)\n\
    \            quickSort(arr, l, pivot - 1)\n            quickSort(arr, pivot +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, len)\n    local res = {}\n\
    \    for i = len, len - k + 1, -1 do\n        table.insert(res, arr[i])\n    end\n\
    \    return res\nend", "    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSort(arr, l, r)\n        if l < r then\n      \
    \      local p = partition(arr, l, r)\n            quickSort(arr, l, p - 1)\n\
    \            quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    local function partition(left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(left, right)\n    \
    \    if left == right then\n            return\n        end\n        local mid\
    \ = partition(left, right)\n        if mid == k then\n            return\n   \
    \     elseif mid < k then\n            quickSelect(mid + 1, right)\n        else\n\
    \            quickSelect(left, mid - 1)\n        end\n    end\n    quickSelect(1,\
    \ n)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n\
    \    return res\nend", "    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSelect(arr, l, r, k)\n        if l == r then\n\
    \            return arr[l]\n        end\n        local p = partition(arr, l, r)\n\
    \        if p == k then\n            return arr[p]\n        elseif p < k then\n\
    \            return quickSelect(arr, p + 1, r, k)\n        else\n            return\
    \ quickSelect(arr, l, p - 1, k)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local p = partition(arr, l, r)\n \
    \           quickSort(arr, l, p - 1)\n            quickSort(arr, p + 1, r)\n \
    \       end\n    end\n    local n = #arr\n    local res = {}\n    for i = 1, k\
    \ do\n        res[i] = quickSelect(arr, 1, n, i)\n    end\n    quickSort(res,\
    \ 1, k)\n    return res\nend", "    local function partition(arr, l, r)\n    \
    \    local pivot = arr[l]\n        local i = l\n        local j = r\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l < r then\n   \
    \         local pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    local function partition(l,\
    \ r)\n        local pivot = arr[r]\n        local i = l\n        for j = l, r\
    \ - 1 do\n            if arr[j] >= pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickselect(l, r)\n        if l >= r then\n            return\n   \
    \     end\n        local p = partition(l, r)\n        if p == k then\n       \
    \     return\n        elseif p < k then\n            quickselect(p + 1, r)\n \
    \       else\n            quickselect(l, p - 1)\n        end\n    end\n    quickselect(1,\
    \ n)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n\
    \    return res\nend", "    local n = #arr\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ left, right, k)\n        if left == right then\n            return arr[left]\n\
    \        end\n        local i = partition(arr, left, right)\n        if i == k\
    \ then\n            return arr[i]\n        elseif i > k then\n            return\
    \ quickSelect(arr, left, i - 1, k)\n        else\n            return quickSelect(arr,\
    \ i + 1, right, k)\n        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n\
    \    local res = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[l]\n        local i = l\n        local j = r\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, l, r)\n        if l < r then\n  \
    \          local m = partition(arr, l, r)\n            quick_sort(arr, l, m -\
    \ 1)\n            quick_sort(arr, m + 1, r)\n        end\n    end\n    quick_sort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[l]\n        local i = l\n        local j = r\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l < r then\n\
    \            local pivot = partition(arr, l, r)\n            if pivot == k then\n\
    \                return\n            elseif pivot > k then\n                quickSelect(arr,\
    \ l, pivot - 1, k)\n            else\n                quickSelect(arr, pivot +\
    \ 1, r, k)\n            end\n        end\n    end\n    quickSelect(arr, 1, #arr,\
    \ #arr - k + 1)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n     \
    \   res[#res + 1] = arr[i]\n    end\n    return res\nend", "    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    local\
    \ function partition(l, r)\n        local pivot = arr[r]\n        local i = l\n\
    \        for j = l, r - 1 do\n            if arr[j] > pivot then\n           \
    \     arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n           \
    \ end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return i\n\
    \    end\n    local l, r = 1, n\n    while l <= r do\n        local m = partition(l,\
    \ r)\n        if m == k then\n            break\n        elseif m < k then\n \
    \           l = m + 1\n        else\n            r = m - 1\n        end\n    end\n\
    \    return arr\nend", "    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSelect(arr, l, r, k)\n        if l == r then\n\
    \            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l < r then\n   \
    \         local pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    local function swap(i, j)\n        arr[i], arr[j] = arr[j], arr[i]\n\
    \    end\n    local function partition(l, r)\n        local pivot = arr[l]\n \
    \       local i, j = l, r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ swap(i, j)\n            while i < j and arr[i] >= pivot do\n               \
    \ i = i + 1\n            end\n            swap(i, j)\n        end\n        return\
    \ i\n    end\n    local function quick_select(l, r, k)\n        if l >= r then\
    \ return end\n        local p = partition(l, r)\n        if p == k then return\
    \ end\n        if p > k then\n            quick_select(l, p - 1, k)\n        else\n\
    \            quick_select(p + 1, r, k)\n        end\n    end\n    quick_select(1,\
    \ n, n - k + 1)\n    return arr\nend", "    local n = #arr\n    local function\
    \ swap(i, j)\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n    local function\
    \ partition(l, r)\n        local pivot = arr[r]\n        local i = l\n       \
    \ for j = l, r - 1 do\n            if arr[j] > pivot then\n                swap(i,\
    \ j)\n                i = i + 1\n            end\n        end\n        swap(i,\
    \ r)\n        return i\n    end\n    local function quickSelect(l, r, k)\n   \
    \     if l == r then\n            return arr[l]\n        end\n        local i\
    \ = partition(l, r)\n        if i == k then\n            return arr[i]\n     \
    \   elseif i > k then\n            return quickSelect(l, i - 1, k)\n        else\n\
    \            return quickSelect(i + 1, r, k)\n        end\n    end\n    return\
    \ quickSelect(1, n, k)\nend", "    local n = #arr\n    local function partition(arr,\
    \ l, r)\n        local i, j = l, r\n        local pivot = arr[l]\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSelect(arr, l, r, k)\n        if l >= r then\n\
    \            return\n        end\n        local i = partition(arr, l, r)\n   \
    \     if i == k then\n            return\n        elseif i > k then\n        \
    \    quickSelect(arr, l, i - 1, k)\n        else\n            quickSelect(arr,\
    \ i + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n\
    \    local res = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[l]\n        local i = l\n        local j = r\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l >= r\
    \ then\n            return\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return\n        elseif pivot\
    \ > k then\n            quickSelect(arr, l, pivot - 1, k)\n        else\n    \
    \        quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n    quickSelect(arr,\
    \ 1, #arr, #arr - k + 1)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n\
    \        res[#res + 1] = arr[i]\n    end\n    return res\nend", "    local n =\
    \ #arr\n    if k == n then\n        table.sort(arr)\n        return arr\n    end\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l + 1\n        for j = l + 1, r do\n            if arr[j] > pivot\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i\
    \ + 1\n            end\n        end\n        arr[l], arr[i - 1] = arr[i - 1],\
    \ arr[l]\n        return i - 1\n    end\n    local function quickSelect(arr, l,\
    \ r, k)\n        if l == r then\n            return arr[l]\n        end\n    \
    \    local pivot = partition(arr, l, r)\n        if pivot == k then\n        \
    \    return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, n, k)\n    table.sort(arr,\
    \ 1, k)\n    return arr\nend", "    local n = #arr\n    local function quickSelect(arr,\
    \ l, r, k)\n        local i, j = l, r\n        local pivot = arr[l]\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        if i ==\
    \ k then\n            return\n        elseif i > k then\n            quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            quickSelect(arr, i + 1, r, k)\n    \
    \    end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n    local res = {}\n\
    \    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return\
    \ res\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, left, right)\n        if left < right\
    \ then\n            local mid = partition(arr, left, right)\n            quickSort(arr,\
    \ left, mid - 1)\n            quickSort(arr, mid + 1, right)\n        end\n  \
    \  end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then\n            return arr[l]\n        end\n        local i\
    \ = partition(arr, l, r)\n        if i == k then\n            return arr[i]\n\
    \        elseif i > k then\n            return quickSelect(arr, l, i - 1, k)\n\
    \        else\n            return quickSelect(arr, i + 1, r, k)\n        end\n\
    \    end\n    local function merge(arr1, arr2)\n        local i = 1\n        local\
    \ j = 1\n        local arr = {}\n        while i <= #arr1 and j <= #arr2 do\n\
    \            if arr1[i] > arr2[j] then\n                arr[#arr + 1] = arr1[i]\n\
    \                i = i + 1\n            else\n                arr[#arr + 1] =\
    \ arr2[j]\n                j = j + 1\n            end\n        end\n        while\
    \ i <= #arr1 do\n            arr[#arr + 1] = arr1[i]\n            i = i + 1\n\
    \        end\n        while j <= #arr2 do\n            arr[#arr + 1] = arr2[j]\n\
    \            j = j + 1\n        end\n        return arr\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local i = partition(arr,\
    \ l, r)\n            quickSort(arr, l, i - 1)\n            quickSort(arr, i +\
    \ 1, r)\n        end\n    end\n    local function sort(arr, k)\n        local\
    \ arr1 = {}\n        local arr2 =", "    local n = #arr\n    if k == n then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local function swap(i,\
    \ j)\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n    local function partition(l,\
    \ r)\n        local pivot = arr[r]\n        local i = l\n        for j = l, r\
    \ - 1 do\n            if arr[j] < pivot then\n                swap(i, j)\n   \
    \             i = i + 1\n            end\n        end\n        swap(i, r)\n  \
    \      return i\n    end\n    local function select(l, r, k)\n        if l ==\
    \ r then\n            return arr[l]\n        end\n        local pivot = partition(l,\
    \ r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot < k then\n            return select(pivot + 1, r, k)\n        else\n \
    \           return select(l, pivot - 1, k)\n        end\n    end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = select(1, n, n - i + 1)\n    end\n\
    \    return res\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        local j = 1\n        while j <= k do\n            if arr[i] > res[j]\
    \ then\n                table.remove(res, j)\n                table.insert(res,\
    \ j, arr[i])\n                break\n            end\n            j = j + 1\n\
    \        end\n    end\n    return res\nend", "    local n = #arr\n    local function\
    \ partition(l, r)\n        local pivot = arr[l]\n        local i = l\n       \
    \ local j = r\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            if i < j then\n\
    \                arr[i] = arr[j]\n                i = i + 1\n            end\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            if i < j then\n                arr[j] = arr[i]\n\
    \                j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(l, r)\n        if l <\
    \ r then\n            local pivot = partition(l, r)\n            quickSort(l,\
    \ pivot - 1)\n            quickSort(pivot + 1, r)\n        end\n    end\n    quickSort(1,\
    \ n)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n\
    \    return res\nend", "    local n = #arr\n    if k == 0 then\n        return\
    \ {}\n    elseif k == n then\n        table.sort(arr)\n        return arr\n  \
    \  end\n    local function partition(arr, l, r)\n        local pivot = arr[r]\n\
    \        local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i\
    \ + 1\n            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n\
    \        return i\n    end\n    local function quickselect(arr, l, r, k)\n   \
    \     local p = partition(arr, l, r)\n        if p == k then\n            return\n\
    \        elseif p > k then\n            quickselect(arr, l, p - 1, k)\n      \
    \  else\n            quickselect(arr, p + 1, r, k)\n        end\n    end\n   \
    \ quickselect(arr, 1, n, k)\n    return arr\nend", "    local n = #arr\n    local\
    \ function partition(l, r)\n        local pivot = arr[l]\n        local i = l\n\
    \        local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(l,\
    \ r)\n        if l >= r then\n            return\n        end\n        local i\
    \ = partition(l, r)\n        if i == k - 1 then\n            return\n        elseif\
    \ i > k - 1 then\n            quickSelect(l, i - 1)\n        else\n          \
    \  quickSelect(i + 1, r)\n        end\n    end\n    quickSelect(1, n)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local p = partition(arr,\
    \ l, r)\n            quickSort(arr, l, p - 1)\n            quickSort(arr, p +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend",
  "    local n = #arr\n    local function partition(l, r)\n        local x = arr[l]\n\
    \        local i = l\n        for j = l + 1, r do\n            if arr[j] > x then\n\
    \                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            end\n        end\n        arr[l], arr[i] = arr[i], arr[l]\n     \
    \   return i\n    end\n    local function quickselect(l, r, k)\n        if l ==\
    \ r then\n            return\n        end\n        local i = partition(l, r)\n\
    \        if i == k then\n            return\n        elseif i > k then\n     \
    \       quickselect(l, i - 1, k)\n        else\n            quickselect(i + 1,\
    \ r, k)\n        end\n    end\n    quickselect(1, n, k)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend",
  "    local function partition(arr, l, r)\n        local pivot = arr[l]\n       \
    \ local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local mid = partition(arr,\
    \ l, r)\n            quickSort(arr, l, mid - 1)\n            quickSort(arr, mid\
    \ + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local len = #arr\n    if k == 0 then\n        return {}\n    elseif\
    \ k == len then\n        return arr\n    end\n    local res = {}\n    for i =\
    \ 1, k do\n        res[i] = arr[i]\n    end\n    for i = k + 1, len do\n     \
    \   local j = k\n        while j > 0 and res[j] < arr[i] do\n            res[j\
    \ + 1] = res[j]\n            j = j - 1\n        end\n        res[j + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quick_sort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    if k == n then\n        table.sort(arr)\n     \
    \   return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, n do\n        if\
    \ arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local i = partition(arr, l, r)\n            quickSort(arr,\
    \ l, i - 1)\n            quickSort(arr, i + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    local function partition(l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickselect(l, r, k)\n\
    \        if l == r then\n            return\n        end\n        local p = partition(l,\
    \ r)\n        if p == k then\n            return\n        elseif p < k then\n\
    \            quickselect(p + 1, r, k)\n        else\n            quickselect(l,\
    \ p - 1, k)\n        end\n    end\n    quickselect(1, n, k)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend",
  "    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1] =\
    \ arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then\
    \ return {} end\n    if k == n then return arr end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, n)\n    local\
    \ res = {}\n    for i = n, n - k + 1, -1 do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    if k == n then\n        table.sort(arr)\n     \
    \   return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, n do\n        if\
    \ arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local len = #arr\n    if k ==\
    \ len then\n        table.sort(arr)\n        return arr\n    end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local t = {}\n    for i = 1, k do\n        table.insert(t, arr[i])\n\
    \    end\n    table.sort(t)\n    for i = k + 1, #arr do\n        if arr[i] > t[1]\
    \ then\n            table.remove(t, 1)\n            table.insert(t, arr[i])\n\
    \            table.sort(t)\n        end\n    end\n    return t\nend", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] < pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local m = partition(arr, l, r)\n \
    \           quickSort(arr, l, m - 1)\n            quickSort(arr, m + 1, r)\n \
    \       end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k == n then return arr end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    for i = k + 1, n do\n        local j =\
    \ 1\n        while j <= k and res[j] > arr[i] do\n            j = j + 1\n    \
    \    end\n        if j <= k then\n            for l = k, j + 1, -1 do\n      \
    \          res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend", "    local n = #arr\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local i = partition(arr, l, r)\n        if i == k then\n            return\
    \ arr[i]\n        elseif i > k then\n            return quickSelect(arr, l, i\
    \ - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n  \
    \      end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n    local res = {}\n\
    \    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return\
    \ res\nend", "    local n = #arr\n    if k == n then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, n do\n  \
    \      if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then\n            return arr[l]\n        end\n        local i\
    \ = partition(arr, l, r)\n        if i == k then\n            return arr[i]\n\
    \        elseif i > k then\n            return quickSelect(arr, l, i - 1, k)\n\
    \        else\n            return quickSelect(arr, i + 1, r, k)\n        end\n\
    \    end\n    local function sort(arr, l, r)\n        if l < r then\n        \
    \    local i = partition(arr, l, r)\n            sort(arr, l, i - 1)\n       \
    \     sort(arr, i + 1, r)\n        end\n    end\n    local res = {}\n    local\
    \ n = #arr\n    local pivot = quickSelect(arr, 1, n, n - k + 1)\n    local j =\
    \ 1\n    for i = 1, n do\n        if arr[i] >= pivot then\n            res[j]\
    \ = arr[i]\n            j = j + 1\n        end\n    end\n    sort(res, 1, k)\n\
    \    return res\nend", "    local n = #arr\n    local function partition(l, r)\n\
    \        local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] >= pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(l,\
    \ r, k)\n        if l == r then\n            return\n        end\n        local\
    \ i = partition(l, r)\n        if i == k then\n            return\n        elseif\
    \ i > k then\n            quickSelect(l, i - 1, k)\n        else\n           \
    \ quickSelect(i + 1, r, k)\n        end\n    end\n    quickSelect(1, n, k)\n \
    \   return arr\nend", "    local n = #arr\n    if n == 0 then return {} end\n\
    \    if k == 0 then return {} end\n    if k == n then return arr end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    for i =\
    \ k + 1, n do\n        local j = 1\n        while j <= k and res[j] >= arr[i]\
    \ do\n            j = j + 1\n        end\n        if j <= k then\n           \
    \ for t = k, j + 1, -1 do\n                res[t] = res[t - 1]\n            end\n\
    \            res[j] = arr[i]\n        end\n    end\n    return res\nend", "  \
    \  local len = #arr\n    if k == len then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] >\
    \ res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n    \
    \    end\n    end\n    return res\nend", "    local len = #arr\n    if k == len\
    \ then\n        table.sort(arr)\n        return arr\n    end\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        if arr[i] > res[1] then\n            table.remove(res,\
    \ 1)\n            table.insert(res, arr[i])\n            table.sort(res)\n   \
    \     end\n    end\n    return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
