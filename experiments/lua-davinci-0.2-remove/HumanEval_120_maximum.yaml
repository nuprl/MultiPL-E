name: HumanEval_120_maximum
language: lua
prompt: "-- Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n-- Example\
  \ 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in the range\
  \ of [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
  \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
  \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
  \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1),\
  \ {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20,\
  \ 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n\
  \    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3,\
  \ 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})\n  \
  \  lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
  \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n \
  \   lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local n = #arr\n    if n == 0 then return {} end\n    if k == 0\
    \ then return {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickselect(arr, l, r, k)\n   \
    \     local p = partition(arr, l, r)\n        if p == k then\n            return\n\
    \        elseif p > k then\n            quickselect(arr, l, p - 1, k)\n      \
    \  else\n            quickselect(arr, p + 1, r, k)\n        end\n    end\n   \
    \ quickselect(arr, 1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1,\
    \ n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend", "    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            if i < j then\n             \
    \   arr[i] = arr[j]\n                i = i + 1\n            end\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           if i < j then\n                arr[j] = arr[i]\n                j\
    \ = j - 1\n            end\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, l, r)\n        if l < r then\n\
    \            local p = partition(arr, l, r)\n            quickSort(arr, l, p -\
    \ 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, n)\n    local res = {}\n    for i = n, n - k + 1, -1 do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n    if\
    \ k == len then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        local j = 1\n        while j <= k do\n   \
    \         if arr[i] > res[j] then\n                table.remove(res, j)\n    \
    \            table.insert(res, j, arr[i])\n                break\n           \
    \ end\n            j = j + 1\n        end\n    end\n    return res\nend", "  \
    \  local n = #arr\n    local function partition(l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            if i < j then\n                arr[i] = arr[j]\n          \
    \      i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(l, r)\n        if l < r then\n            local pivot = partition(l,\
    \ r)\n            quick_sort(l, pivot - 1)\n            quick_sort(pivot + 1,\
    \ r)\n        end\n    end\n    quick_sort(1, n)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n    local\
    \ function partition(left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(left, right)\n        if left < right then\n            local mid\
    \ = partition(left, right)\n            quick_sort(left, mid - 1)\n          \
    \  quick_sort(mid + 1, right)\n        end\n    end\n    quick_sort(1, len)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend", "    local n = #arr\n    if n == 0 then return {} end\n\
    \    if k == 0 then return {} end\n    if k >= n then return arr end\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 1, -1 do\n        local j = i\n        while j * 2 <= k do\n          \
    \  local l = j * 2\n            local r = l + 1\n            if r <= k and heap[r]\
    \ < heap[l] then\n                l = r\n            end\n            if heap[j]\
    \ > heap[l] then\n                heap[j], heap[l] = heap[l], heap[j]\n      \
    \          j = l\n            else\n                break\n            end\n \
    \       end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            local j = 1\n            while j *\
    \ 2 <= k do\n                local l = j * 2\n                local r = l + 1\n\
    \                if r <= k and heap[r] < heap[l] then\n                    l =\
    \ r\n                end\n                if heap[j] > heap[l] then\n        \
    \            heap[j], heap[l] = heap[l], heap[j]\n                    j = l\n\
    \                else\n                    break\n                end\n      \
    \      end\n        end\n    end\n    return heap\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            if i < j then\n     \
    \           arr[i] = arr[j]\n                i = i + 1\n            end\n    \
    \        while i < j and arr[i] >= pivot do\n                i = i + 1\n     \
    \       end\n            if i < j then\n                arr[j] = arr[i]\n    \
    \            j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local m = partition(arr, l, r)\n            quickSort(arr,\
    \ l, m - 1)\n            quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local len = #arr\n    if k == 0 then\n  \
    \      return {}\n    elseif k == len then\n        return arr\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l + 1\n        local j = r\n        while i <= j do\n            while i <=\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       while i <= j and arr[j] <= pivot do\n                j = j - 1\n     \
    \       end\n            if i < j then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n\
    \        return j\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr\n        elseif p > k then\n            return quickSelect(arr, l, p - 1,\
    \ k)\n        else\n            return quickSelect(arr, p + 1, r, k)\n       \
    \ end\n    end\n    return quickSelect(arr, 1, len, k)\nend", "    local n = #arr\n\
    \    if k == n then\n        table.sort(arr)\n        return arr\n    end\n  \
    \  local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n   \
    \ table.sort(res)\n    for i = k + 1, n do\n        if arr[i] > res[1] then\n\
    \            res[1] = arr[i]\n            table.sort(res)\n        end\n    end\n\
    \    return res\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local heap = {}\n    for i = 1, k do\n     \
    \   heap[i] = arr[i]\n    end\n    table.sort(heap)\n    for i = k + 1, len do\n\
    \        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            table.sort(heap)\n\
    \        end\n    end\n    return heap\nend", "    local n = #arr\n    local function\
    \ quickSort(arr, left, right)\n        if left >= right then return end\n    \
    \    local i, j = left, right\n        local pivot = arr[i]\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do j = j - 1 end\n       \
    \     arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do i = i +\
    \ 1 end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n  \
    \      quickSort(arr, left, i - 1)\n        quickSort(arr, i + 1, right)\n   \
    \ end\n    quickSort(arr, 1, n)\n    local res = {}\n    for i = 1, k do\n   \
    \     res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n  \
    \  if k == 0 then\n        return {}\n    elseif k == n then\n        return arr\n\
    \    end\n    local function partition(left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local left = 1\n    local right = n\n    local index = partition(left, right)\n\
    \    while index ~= k - 1 do\n        if index > k - 1 then\n            right\
    \ = index - 1\n            index = partition(left, right)\n        else\n    \
    \        left = index + 1\n            index = partition(left, right)\n      \
    \  end\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    local function partition(l,\
    \ r)\n        local pivot = arr[l]\n        local i = l\n        local j = r\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSelect(l, r)\n        if l\
    \ < r then\n            local p = partition(l, r)\n            if p == k then\n\
    \                return\n            elseif p < k then\n                quickSelect(p\
    \ + 1, r)\n            else\n                quickSelect(l, p - 1)\n         \
    \   end\n        end\n    end\n    quickSelect(1, n)\n    local res = {}\n   \
    \ for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", " \
    \   local n = #arr\n    if n == 0 then return {} end\n    local heap = {}\n  \
    \  for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n\
    \        heapify(heap, i, k)\n    end\n    for i = k + 1, n do\n        if arr[i]\
    \ > heap[1] then\n            heap[1] = arr[i]\n            heapify(heap, 1, k)\n\
    \        end\n    end\n    return heap\nend", "    local len = #arr\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, len do\n        local j = 1\n        while j <= k and heap[j] > arr[i]\
    \ do\n            j = j + 1\n        end\n        if j <= k then\n           \
    \ for l = k, j + 1, -1 do\n                heap[l] = heap[l - 1]\n           \
    \ end\n            heap[j] = arr[i]\n        end\n    end\n    return heap\nend",
  "    local len = #arr\n    if len == 0 then return {} end\n    if len == 1 then\
    \ return arr end\n    local res = {}\n    for i = 1, k do\n        local max =\
    \ arr[i]\n        local idx = i\n        for j = i + 1, len do\n            if\
    \ arr[j] > max then\n                max = arr[j]\n                idx = j\n \
    \           end\n        end\n        res[i] = max\n        arr[idx] = arr[i]\n\
    \        arr[i] = max\n    end\n    return res\nend", "    local len = #arr\n\
    \    if k == len then\n        table.sort(arr)\n        return arr\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1] then\n\
    \            table.remove(res, 1)\n            table.insert(res, arr[i])\n   \
    \         table.sort(res)\n        end\n    end\n    return res\nend", "    local\
    \ len = #arr\n    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local pivot = partition(arr,\
    \ l, r)\n            quickSort(arr, l, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, r)\n        end\n    end\n    quickSort(arr, 1, len)\n    local res\
    \ = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res, arr[i])\n\
    \    end\n    return res\nend", "    local n = #arr\n    if k == n then\n    \
    \    table.sort(arr)\n        return arr\n    end\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for\
    \ i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1] = arr[i]\n\
    \            table.sort(res)\n        end\n    end\n    return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
