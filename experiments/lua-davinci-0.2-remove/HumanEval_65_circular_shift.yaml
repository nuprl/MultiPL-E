name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local n = #tostring(x)\n    if shift >= n then\n        return\
    \ string.reverse(tostring(x))\n    end\n    local s = tostring(x)\n    local a\
    \ = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return\
    \ b .. a\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n\
    \    end\n    if shift > n then\n        shift = n\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[n - 1]\n        for j = n - 1, 1, -1 do\n     \
    \       digits[j] = digits[j - 1]\n        end\n        digits[0] = d\n    end\n\
    \    local s = \"\"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        return table.concat(digits, \"\
    \")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] =\
    \ digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\
    \")\nend", "    local s = tostring(x)\n    local n = #s\n    local r = s:sub(n\
    \ - shift + 1, n) .. s:sub(1, n - shift)\n    return r\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        digits[#digits + 1] = x %\
    \ 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift\
    \ > n then\n        return table.concat(digits, \"\")\n    end\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n +\
    \ 1]\n    end\n    return table.concat(result, \"\")\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n    \
    \    x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n then\n\
    \        shift = n\n    end\n    for i = 0, shift - 1 do\n        local d = digits[n\
    \ - 1]\n        for j = n - 1, 1, -1 do\n            digits[j] = digits[j - 1]\n\
    \        end\n        digits[0] = d\n    end\n    local s = \"\"\n    for i =\
    \ 0, n - 1 do\n        s = s .. tostring(digits[i])\n    end\n    return s\nend",
  "\tlocal s = tostring(x)\n\tlocal n = #s\n\tlocal r = ''\n\tfor i = 1, n do\n\t\t\
    local c = s:sub(i, i)\n\t\tlocal j = (i + shift - 1) % n + 1\n\t\tr = r .. s:sub(j,\
    \ j)\n\tend\n\treturn r\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        local d = digits[n]\n        for j = n, 2, -1 do\n  \
    \          digits[j] = digits[j - 1]\n        end\n        digits[1] = d\n   \
    \ end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. digits[i]\n \
    \   end\n    return s\nend", "    local digits = tostring(x)\n    local len =\
    \ #digits\n    if shift > len then\n        return string.reverse(digits)\n  \
    \  end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local digits = {}\n  \
    \  local n = 0\n    while x > 0 do\n        digits[n + 1] = x % 10\n        x\
    \ = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n then\n  \
    \      shift = n\n    end\n    for i = 1, shift do\n        digits[n + i] = digits[i]\n\
    \    end\n    local s = \"\"\n    for i = 1, n + shift do\n        s = s .. digits[i]\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n \
    \   if shift > n then\n        return s:reverse()\n    end\n    return s:sub(n-shift+1,\
    \ n) .. s:sub(1, n-shift)\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift > n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local digits\
    \ = {}\n    local n = 0\n    local x = x\n    while x > 0 do\n        local d\
    \ = x % 10\n        x = (x - d) / 10\n        n = n + 1\n        digits[n] = d\n\
    \    end\n    if shift > n then\n        for i = 1, n do\n            digits[i]\
    \ = digits[n - i + 1]\n        end\n    else\n        for i = 1, shift do\n  \
    \          local d = digits[n]\n            for j = n, 2, -1 do\n            \
    \    digits[j] = digits[j - 1]\n            end\n            digits[1] = d\n \
    \       end\n    end\n    local s = ''\n    for i = 1, n do\n        s = s ..\
    \ digits[i]\n    end\n    return s\nend", "    local digits = {}\n    local n\
    \ = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n   \
    \     x = math.floor(x / 10)\n    end\n    if shift >= n then\n        return\
    \ table.concat(digits, \"\")\n    end\n    local result = {}\n    for i = 1, n\
    \ do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return\
    \ table.concat(result, \"\")\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift >= n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "  local s = tostring(x)\n\
    \  local n = #s\n  if shift > n then\n    return string.reverse(s)\n  end\n  local\
    \ a = string.sub(s, 1, shift)\n  local b = string.sub(s, shift + 1, n)\n  return\
    \ b .. a\nend", "  local digits = {}\n  local i = 0\n  while x > 0 do\n    i =\
    \ i + 1\n    digits[i] = x % 10\n    x = math.floor(x / 10)\n  end\n  if shift\
    \ > i then\n    return table.concat(digits, \"\")\n  end\n  local j = 1\n  while\
    \ j <= shift do\n    j = j + 1\n    table.insert(digits, 1, table.remove(digits))\n\
    \  end\n  return table.concat(digits, \"\")\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    local\
    \ ndigits = n\n    if shift > ndigits then\n        shift = ndigits\n    end\n\
    \    local result = 0\n    for i = 0, ndigits - 1 do\n        local j = (i + shift)\
    \ % ndigits\n        result = result * 10 + digits[j]\n    end\n    return result\n\
    end", "    local x_str = tostring(x)\n    local x_len = #x_str\n    local shift_str\
    \ = x_str:sub(x_len - shift + 1, x_len) .. x_str:sub(1, x_len - shift)\n    return\
    \ shift_str\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
