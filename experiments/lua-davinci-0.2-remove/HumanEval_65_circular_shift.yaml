name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local digits = {}\n    local n = 0\n    while x > 0 do\n      \
    \  digits[n] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n   \
    \ end\n    if shift > n then\n        shift = n\n    end\n    for i = 0, shift\
    \ - 1 do\n        local d = digits[n - 1]\n        for j = n - 1, 1, -1 do\n \
    \           digits[j] = digits[j - 1]\n        end\n        digits[0] = d\n  \
    \  end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n \
    \   if shift >= n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "\tlocal s = tostring(x)\n\
    \tlocal n = #s\n\tif shift > n then\n\t\treturn string.reverse(s)\n\tend\n\treturn\
    \ string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local s =\
    \ tostring(x)\n    local n = #s\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > n then\n        shift = n\n  \
    \  end\n    for i = 1, shift do\n        local d = digits[1]\n        for j =\
    \ 1, n - 1 do\n            digits[j] = digits[j + 1]\n        end\n        digits[n]\
    \ = d\n    end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local result = \"\"\n\
    \    local i = 0\n    while x > 0 do\n        digits[i] = x % 10\n        x =\
    \ math.floor(x / 10)\n        i = i + 1\n    end\n    if shift > i then\n    \
    \    for j = i - 1, 0, -1 do\n            result = result .. digits[j]\n     \
    \   end\n    else\n        for j = 0, i - 1 do\n            result = result ..\
    \ digits[(j + shift) % i]\n        end\n    end\n    return result\nend", "  \
    \  local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ string.reverse(s)\n    end\n    local a = string.sub(s, 1, shift)\n    local\
    \ b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "  local digits = {}\n  local n = 0\n  while x > 0 do\n    digits[n] = x\
    \ % 10\n    x = math.floor(x / 10)\n    n = n + 1\n  end\n  if shift > n then\n\
    \    shift = n\n  end\n  for i = 1, shift do\n    table.insert(digits, 1, table.remove(digits,\
    \ n))\n  end\n  local s = \"\"\n  for i = 1, n do\n    s = s .. tostring(digits[i])\n\
    \  end\n  return s\nend", "  local digits = {}\n  local n = 0\n  while x > 0 do\n\
    \    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n  end\n  if\
    \ shift >= n then\n    return string.reverse(table.concat(digits))\n  end\n  local\
    \ result = {}\n  for i = 1, n do\n    result[i] = digits[(i + shift - 1) % n +\
    \ 1]\n  end\n  return table.concat(result)\nend", "    local s = tostring(x)\n\
    \    if shift > #s then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n\
    \ + 1] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n\
    \    if shift > n then\n        return table.concat(digits, \"\")\n    end\n \
    \   local result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift\
    \ - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n + 1] = x\
    \ % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    for i = 1, shift do\n        local\
    \ d = digits[n]\n        for j = n, 2, -1 do\n            digits[j] = digits[j\
    \ - 1]\n        end\n        digits[1] = d\n    end\n    local s = \"\"\n    for\
    \ i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n    return s\nend",
  "    local s = tostring(x)\n    local l = #s\n    if shift > l then\n        return\
    \ string.reverse(s)\n    end\n    local a = string.sub(s, 1, l - shift)\n    local\
    \ b = string.sub(s, l - shift + 1, l)\n    return b .. a\nend", "    local s =\
    \ tostring(x)\n    local n = #s\n    if shift >= n then\n        return s:reverse()\n\
    \    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return s:reverse()\n\
    \    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n\
    \        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n\
    \ then\n        shift = n\n    end\n    for i = 0, shift - 1 do\n        local\
    \ d = digits[n - 1]\n        for j = n - 1, 1, -1 do\n            digits[j] =\
    \ digits[j - 1]\n        end\n        digits[0] = d\n    end\n    local s = \"\
    \"\n    for i = 0, n - 1 do\n        s = s .. digits[i]\n    end\n    return s\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n \
    \       return string.reverse(s)\n    end\n    return string.sub(s, shift + 1,\
    \ n) .. string.sub(s, 1, shift)\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > n then\n        return table.concat(digits,\
    \ \"\")\n    end\n    local i = 1\n    local j = 1\n    local result = {}\n  \
    \  while i <= n do\n        result[j] = digits[i]\n        i = i + 1\n       \
    \ j = j + 1\n    end\n    i = 1\n    while i <= shift do\n        result[j] =\
    \ digits[i]\n        i = i + 1\n        j = j + 1\n    end\n    return table.concat(result,\
    \ \"\")\nend", "    local s = tostring(x)\n    local len = #s\n    if shift >=\
    \ len then\n        return string.reverse(s)\n    end\n    local a = string.sub(s,\
    \ 1, shift)\n    local b = string.sub(s, shift + 1, len)\n    return b .. a\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return string.reverse(s)\n    end\n    local a = string.sub(s, 1, shift)\n\
    \    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        for i = 1, n do\n            x = x * 10 + digits[i]\n\
    \        end\n        return x\n    end\n    for i = 1, shift do\n        local\
    \ d = digits[n]\n        for j = n, 2, -1 do\n            digits[j] = digits[j\
    \ - 1]\n        end\n        digits[1] = d\n    end\n    x = 0\n    for i = 1,\
    \ n do\n        x = x * 10 + digits[i]\n    end\n    return x\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift > n then\n        return s:reverse()\n    end\n    local r\
    \ = s:sub(n - shift + 1, n) .. s:sub(1, n - shift)\n    return r\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local digits = {}\n    local i = 0\n\
    \    while x > 0 do\n        i = i + 1\n        digits[i] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > i then\n        shift = i\n  \
    \  end\n    for j = 1, shift do\n        local d = digits[i]\n        for k =\
    \ i, 2, -1 do\n            digits[k] = digits[k - 1]\n        end\n        digits[1]\
    \ = d\n    end\n    local s = \"\"\n    for j = 1, i do\n        s = s .. tostring(digits[j])\n\
    \    end\n    return s\nend", "    local digits = tostring(x)\n    local len =\
    \ #digits\n    if shift > len then\n        return string.reverse(digits)\n  \
    \  end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local digits = {}\n  \
    \  local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n        n = n + 1\n    end\n    if shift > n then\n        return table.concat(digits,\
    \ \"\")\n    end\n    local result = {}\n    for i = 0, n - 1 do\n        result[i]\
    \ = digits[(i + shift) % n]\n    end\n    return table.concat(result, \"\")\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if\
    \ shift > n then\n        shift = n\n    end\n    local result = 0\n    for i\
    \ = 0, n - 1 do\n        result = result * 10 + digits[(i + shift) % n]\n    end\n\
    \    return result\nend", "    local digits = {}\n    local n = 0\n    while x\
    \ > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n       \
    \ n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n    local\
    \ result = 0\n    for i = 0, n - 1 do\n        result = result * 10 + digits[(i\
    \ + shift) % n]\n    end\n    return result\nend", "  local digits = {}\n  while\
    \ x > 0 do\n    table.insert(digits, x % 10)\n    x = math.floor(x / 10)\n  end\n\
    \  local n = #digits\n  shift = shift % n\n  local result = {}\n  for i = 1, n\
    \ do\n    result[i] = digits[(i + shift - 1) % n + 1]\n  end\n  return table.concat(result)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        shift = n\n    end\n    for i = 1, shift do\n\
    \        table.insert(digits, 1, table.remove(digits, n))\n    end\n    local\
    \ s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n\
    \    return s\nend", "    local digits = tostring(x)\n    local n = #digits\n\
    \    if shift >= n then\n        return string.reverse(digits)\n    end\n    local\
    \ left = string.sub(digits, 1, shift)\n    local right = string.sub(digits, shift\
    \ + 1, n)\n    return right .. left\nend", "    local digits = {}\n    while x\
    \ > 0 do\n        table.insert(digits, x % 10)\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > #digits then\n        return table.concat(digits, \"\"\
    )\n    end\n    for i = 1, shift do\n        table.insert(digits, 1, table.remove(digits))\n\
    \    end\n    return table.concat(digits, \"\")\nend", "    local digits = {}\n\
    \    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n        x =\
    \ math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n then\n    \
    \    shift = n\n    end\n    for i = 1, shift do\n        local d = digits[n -\
    \ 1]\n        for j = n - 1, 1, -1 do\n            digits[j] = digits[j - 1]\n\
    \        end\n        digits[0] = d\n    end\n    local s = \"\"\n    for i =\
    \ 0, n - 1 do\n        s = s .. tostring(digits[i])\n    end\n    return s\nend",
  "  local s = tostring(x)\n  local len = #s\n  if shift > len then\n    return string.reverse(s)\n\
    \  end\n  return string.sub(s, shift+1, len) .. string.sub(s, 1, shift)\nend",
  "    local digits = tostring(x)\n    local len = #digits\n    if shift >= len then\n\
    \        return string.reverse(digits)\n    end\n    return string.sub(digits,\
    \ shift + 1) .. string.sub(digits, 1, shift)\nend", "\tlocal digits = {}\n\tlocal\
    \ n = 0\n\twhile x > 0 do\n\t\tdigits[n] = x % 10\n\t\tx = math.floor(x / 10)\n\
    \t\tn = n + 1\n\tend\n\tif shift > n then\n\t\treturn table.concat(digits, \"\"\
    )\n\tend\n\tlocal i = 0\n\twhile i < shift do\n\t\tlocal d = digits[n - 1]\n\t\
    \tfor j = n - 1, 1, -1 do\n\t\t\tdigits[j] = digits[j - 1]\n\t\tend\n\t\tdigits[0]\
    \ = d\n\t\ti = i + 1\n\tend\n\treturn table.concat(digits, \"\")\nend", "    local\
    \ digits = {}\n    while x > 0 do\n        digits[#digits + 1] = x % 10\n    \
    \    x = math.floor(x / 10)\n    end\n    if shift > #digits then\n        return\
    \ table.concat(digits, \"\")\n    end\n    local result = {}\n    for i = 1, #digits\
    \ do\n        result[i] = digits[(i + shift - 1) % #digits + 1]\n    end\n   \
    \ return table.concat(result, \"\")\nend", "  local digits = {}\n  local s = tostring(x)\n\
    \  for i = 1, #s do\n    digits[i] = s:sub(i, i)\n  end\n  for i = 1, shift do\n\
    \    table.insert(digits, 1, table.remove(digits))\n  end\n  return table.concat(digits)\n\
    end", "\tlocal digits = {}\n\tlocal n = 0\n\twhile x > 0 do\n\t\tdigits[n] = x\
    \ % 10\n\t\tx = math.floor(x / 10)\n\t\tn = n + 1\n\tend\n\tlocal i = 0\n\twhile\
    \ i < shift do\n\t\tlocal digit = digits[n - 1]\n\t\tfor j = n - 1, 1, -1 do\n\
    \t\t\tdigits[j] = digits[j - 1]\n\t\tend\n\t\tdigits[0] = digit\n\t\ti = i + 1\n\
    \tend\n\tlocal s = \"\"\n\tfor i = 0, n - 1 do\n\t\ts = s .. tostring(digits[i])\n\
    \tend\n\treturn s\nend", "\tlocal digits = {}\n\tlocal n = 0\n\twhile x > 0 do\n\
    \t\tdigits[n] = x % 10\n\t\tx = math.floor(x / 10)\n\t\tn = n + 1\n\tend\n\tif\
    \ shift > n then\n\t\treturn table.concat(digits, \"\")\n\tend\n\tlocal result\
    \ = {}\n\tfor i = 1, n do\n\t\tresult[i] = digits[(i + shift - 1) % n]\n\tend\n\
    \treturn table.concat(result, \"\")\nend", "    local digits = {}\n    local n\
    \ = 0\n    while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n        n = n + 1\n    end\n    if shift > n then\n        shift = n\n\
    \    end\n    for i = 0, shift - 1 do\n        local tmp = digits[n - 1]\n   \
    \     for j = n - 1, 1, -1 do\n            digits[j] = digits[j - 1]\n       \
    \ end\n        digits[0] = tmp\n    end\n    local s = \"\"\n    for i = 0, n\
    \ - 1 do\n        s = s .. tostring(digits[i])\n    end\n    return s\nend", " \
    \   local s = tostring(x)\n    local len = #s\n    if shift >= len then\n    \
    \    return string.reverse(s)\n    end\n    return string.sub(s, shift + 1) ..\
    \ string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift >= n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local s =\
    \ tostring(x)\n    local n = #s\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        return table.concat(digits, \"\")\n    end\n \
    \   local result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift\
    \ - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        shift = n\n    end\n    for i = 1, shift do\n\
    \        local tmp = digits[1]\n        for j = 1, n - 1 do\n            digits[j]\
    \ = digits[j + 1]\n        end\n        digits[n] = tmp\n    end\n    local result\
    \ = \"\"\n    for i = 1, n do\n        result = result .. digits[i]\n    end\n\
    \    return result\nend", "    local digits = {}\n    local n = 0\n    while x\
    \ > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        return table.concat(digits, \"\
    \")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] =\
    \ digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\
    \")\nend", "    local s = tostring(x)\n    local l = #s\n    local r = s:sub(l\
    \ - shift + 1, l) .. s:sub(1, l - shift)\n    return r\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       shift = n\n    end\n    for i = 1, shift do\n        local digit = digits[n]\n\
    \        for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[1] = digit\n    end\n    local result = 0\n    for i = 1, n do\n\
    \        result = result * 10 + digits[i]\n    end\n    return result\nend", " \
    \ local digits = tostring(x)\n  local n = #digits\n  if shift >= n then\n    return\
    \ string.reverse(digits)\n  end\n  return string.sub(digits, n - shift + 1) ..\
    \ string.sub(digits, 1, n - shift)\nend", "    local digits = tostring(x)\n  \
    \  local len = #digits\n    if shift >= len then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > n then\n        return table.concat(digits,\
    \ \"\")\n    end\n    for i = 1, shift do\n        local d = digits[n]\n     \
    \   for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[1] = d\n    end\n    return table.concat(digits, \"\")\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n +\
    \ 1] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n  \
    \  if shift > n then\n        shift = n\n    end\n    for i = 1, shift do\n  \
    \      digits[n + i] = digits[i]\n    end\n    local result = {}\n    for i =\
    \ shift + 1, n + shift do\n        result[i - shift] = digits[i]\n    end\n  \
    \  return table.concat(result)\nend", "    local digits = tostring(x)\n    local\
    \ n = #digits\n    if shift > n then\n        return string.reverse(digits)\n\
    \    end\n    local a = string.sub(digits, 1, shift)\n    local b = string.sub(digits,\
    \ shift + 1, n)\n    return b .. a\nend", "  local digits = {}\n  local n = 0\n\
    \  while x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x\
    \ / 10)\n  end\n  if shift >= n then\n    return table.concat(digits, \"\")\n\
    \  end\n  local result = {}\n  for i = 1, n do\n    result[i] = digits[(i + shift\
    \ - 1) % n + 1]\n  end\n  return table.concat(result, \"\")\nend", "  local s\
    \ = tostring(x)\n  local n = #s\n  if shift > n then\n    return string.reverse(s)\n\
    \  end\n  return string.sub(s, shift+1, n) .. string.sub(s, 1, shift)\nend", " \
    \   local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ string.reverse(s)\n    end\n    return string.sub(s, n - shift + 1) .. string.sub(s,\
    \ 1, n - shift)\nend", "    local digits = {}\n    local n = 0\n    while x >\
    \ 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n        n\
    \ = n + 1\n    end\n    local i = 0\n    while i < shift do\n        local d =\
    \ digits[n - 1]\n        for j = n - 1, 1, -1 do\n            digits[j] = digits[j\
    \ - 1]\n        end\n        digits[0] = d\n        i = i + 1\n    end\n    local\
    \ s = \"\"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n  \
    \  end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        local d = digits[1]\n        for j = 1, n - 1 do\n  \
    \          digits[j] = digits[j + 1]\n        end\n        digits[n] = d\n   \
    \ end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n \
    \   if shift >= n then\n        return string.reverse(s)\n    end\n    local a\
    \ = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return\
    \ b .. a\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > n then\n        return table.concat(digits, \"\")\n \
    \   end\n    local result = {}\n    for i = 1, n do\n        result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend",
  "\tlocal s = tostring(x)\n\tlocal n = #s\n\tif shift > n then\n\t\treturn string.reverse(s)\n\
    \tend\n\treturn string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend",
  "  local digits = {}\n  local n = 0\n  while x > 0 do\n    n = n + 1\n    digits[n]\
    \ = x % 10\n    x = math.floor(x / 10)\n  end\n  if shift >= n then\n    return\
    \ table.concat(digits, \"\")\n  end\n  local result = {}\n  for i = 1, n do\n\
    \    result[i] = digits[(i + shift - 1) % n + 1]\n  end\n  return table.concat(result,\
    \ \"\")\nend", "  local digits = tostring(x)\n  local len = #digits\n  if shift\
    \ >= len then\n    return string.reverse(digits)\n  end\n  local left = string.sub(digits,\
    \ 1, shift)\n  local right = string.sub(digits, shift + 1, len)\n  return right\
    \ .. left\nend", "    local digits = tostring(x)\n    local len = #digits\n  \
    \  if shift >= len then\n        return string.reverse(digits)\n    end\n    return\
    \ string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)\nend", "  local\
    \ digits = {}\n  local n = 0\n  while x > 0 do\n    n = n + 1\n    digits[n] =\
    \ x % 10\n    x = math.floor(x / 10)\n  end\n  if shift > n then\n    return table.concat(digits,\
    \ \"\")\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n  end\n  return table.concat(result, \"\")\nend", " \
    \   local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if\
    \ shift > n then\n        for i = 0, n - 1 do\n            digits[i] = digits[n\
    \ - i - 1]\n        end\n    else\n        for i = 0, n - 1 do\n            digits[i]\
    \ = digits[(i + shift) % n]\n        end\n    end\n    local result = 0\n    for\
    \ i = 0, n - 1 do\n        result = result * 10 + digits[i]\n    end\n    return\
    \ result\nend", "    local s = tostring(x)\n    local n = #s\n    if shift > n\
    \ then\n        return s:reverse()\n    end\n    local t = {}\n    for i = 1,\
    \ n do\n        t[i] = s:sub(i, i)\n    end\n    for i = 1, shift do\n       \
    \ table.insert(t, 1, table.remove(t))\n    end\n    return table.concat(t)\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        return table.concat(digits, \"\")\n    end\n    for i = 1,\
    \ shift do\n        local d = digits[n]\n        for j = n, 2, -1 do\n       \
    \     digits[j] = digits[j - 1]\n        end\n        digits[1] = d\n    end\n\
    \    return table.concat(digits, \"\")\nend", "    local s = tostring(x)\n   \
    \ local n = #s\n    if shift > n then\n        return s:reverse()\n    end\n \
    \   local a = s:sub(1, shift)\n    local b = s:sub(shift + 1)\n    return b ..\
    \ a\nend", "    local digits = tostring(x)\n    local len = #digits\n    if shift\
    \ > len then\n        return string.reverse(digits)\n    end\n    local left =\
    \ string.sub(digits, 1, shift)\n    local right = string.sub(digits, shift + 1,\
    \ len)\n    return right .. left\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return s:reverse()\n    end\n    return\
    \ s:sub(n-shift+1, n) .. s:sub(1, n-shift)\nend", "    local n = #tostring(x)\n\
    \    local s = tostring(x)\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local n = #tostring(x)\n    local s =\
    \ tostring(x)\n    local r = s:sub(n - shift + 1, n) .. s:sub(1, n - shift)\n\
    \    return r\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ >= n then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local n = math.floor(math.log10(x))\
    \ + 1\n    local s = tostring(x)\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return s:reverse()\n\
    \    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return string.reverse(s)\n    end\n    local a = string.sub(s, 1, shift)\n\
    \    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "\tlocal\
    \ digits = {}\n\tlocal n = 0\n\twhile x > 0 do\n\t\tdigits[n] = x % 10\n\t\tx\
    \ = math.floor(x / 10)\n\t\tn = n + 1\n\tend\n\tif shift > n then\n\t\tshift =\
    \ n\n\tend\n\tfor i = 0, shift - 1 do\n\t\tdigits[n] = digits[i]\n\t\tn = n +\
    \ 1\n\tend\n\tlocal result = 0\n\tfor i = n - 1, 0, -1 do\n\t\tresult = result\
    \ * 10 + digits[i]\n\tend\n\treturn result\nend", "    local s = tostring(x)\n\
    \    local len = #s\n    if shift >= len then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, len)\n    return b .. a\nend", "    local s = tostring(x)\n    local len\
    \ = #s\n    if shift >= len then\n        return s:reverse()\n    end\n    return\
    \ s:sub(len - shift + 1) .. s:sub(1, len - shift)\nend", "    local digits = {}\n\
    \    local n = 0\n    while x > 0 do\n        digits[n + 1] = x % 10\n       \
    \ x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n then\n\
    \        shift = n\n    end\n    for i = 1, shift do\n        local d = digits[n]\n\
    \        for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[1] = d\n    end\n    local s = \"\"\n    for i = 1, n do\n   \
    \     s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    for i = 1, shift do\n\
    \        local d = digits[n]\n        for j = n, 2, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[1] = d\n    end\n    local result\
    \ = \"\"\n    for i = 1, n do\n        result = result .. tostring(digits[i])\n\
    \    end\n    return result\nend", "  local digits = {}\n  local n = 0\n  while\
    \ x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n\
    \  end\n  if shift > n then\n    return table.concat(digits, \"\")\n  end\n  local\
    \ result = {}\n  for i = 1, n do\n    result[i] = digits[(i + shift - 1) % n +\
    \ 1]\n  end\n  return table.concat(result, \"\")\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local s1 = string.sub(s, 1, shift)\n    local s2 = string.sub(s,\
    \ shift + 1, n)\n    return s2 .. s1\nend", "    local s = tostring(x)\n    local\
    \ len = #s\n    if shift >= len then\n        return string.reverse(s)\n    end\n\
    \    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1,\
    \ len)\n    return b .. a\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift >= n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \        n = n + 1\n    end\n    while shift > n do\n        shift = shift - n\n\
    \    end\n    local result = 0\n    for i = 0, n - 1 do\n        local j = (i\
    \ + shift) % n\n        result = result * 10 + digits[j]\n    end\n    return\
    \ tostring(result)\nend", "    local s = tostring(x)\n    local n = #s\n    local\
    \ result = ''\n    if shift > n then\n        for i = n, 1, -1 do\n          \
    \  result = result .. s:sub(i, i)\n        end\n    else\n        for i = 1, n\
    \ do\n            local j = (i + shift - 1) % n + 1\n            result = result\
    \ .. s:sub(j, j)\n        end\n    end\n    return result\nend", "    local s\
    \ = tostring(x)\n    local n = #s\n    local r = s:sub(n - shift + 1, n) .. s:sub(1,\
    \ n - shift)\n    return r\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift >= n then\n        return s:reverse()\n    end\n    return s:sub(n\
    \ - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n \
    \       x = math.floor(x / 10)\n    end\n    if shift > n then\n        return\
    \ table.concat(digits, \"\")\n    end\n    local result = {}\n    for i = 1, n\
    \ do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return\
    \ table.concat(result, \"\")\nend", "  local digits = {}\n  local n = 0\n  while\
    \ x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n\
    \  end\n  if shift > n then\n    return table.concat(digits)\n  end\n  local result\
    \ = {}\n  for i = 1, n do\n    result[i] = digits[(i + shift - 1) % n + 1]\n \
    \ end\n  return table.concat(result)\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return string.reverse(s)\n    end\n \
    \   return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "   \
    \ local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        return table.concat(digits, \"\")\n    end\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n +\
    \ 1]\n    end\n    return table.concat(result, \"\")\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       shift = n\n    end\n    local result = 0\n    for i = 1, n do\n      \
    \  result = result * 10 + digits[(i + shift - 1) % n + 1]\n    end\n    return\
    \ result\nend", "  local digits = {}\n  local n = 0\n  while x > 0 do\n    digits[n+1]\
    \ = x % 10\n    x = math.floor(x / 10)\n    n = n + 1\n  end\n  if shift > n then\n\
    \    return table.concat(digits, \"\")\n  end\n  local result = {}\n  for i =\
    \ 1, n do\n    result[i] = digits[(i + shift - 1) % n + 1]\n  end\n  return table.concat(result,\
    \ \"\")\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n \
    \       n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > n then\n        return table.concat(digits, \"\")\n \
    \   end\n    for i = 1, shift do\n        local d = digits[1]\n        for j =\
    \ 1, n - 1 do\n            digits[j] = digits[j + 1]\n        end\n        digits[n]\
    \ = d\n    end\n    return table.concat(digits, \"\")\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "\tlocal digits = {}\n\tlocal n = 0\n\twhile\
    \ x > 0 do\n\t\tdigits[n] = x % 10\n\t\tx = math.floor(x / 10)\n\t\tn = n + 1\n\
    \tend\n\tif shift > n then\n\t\treturn table.concat(digits, \"\")\n\tend\n\tlocal\
    \ result = {}\n\tfor i = 0, n - 1 do\n\t\tresult[i] = digits[(i + shift) % n]\n\
    \tend\n\treturn table.concat(result, \"\")\nend", "    local digits = {}\n   \
    \ local n = 0\n    while x > 0 do\n        digits[n + 1] = x % 10\n        x =\
    \ math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n then\n    \
    \    shift = n\n    end\n    for i = 1, shift do\n        digits[n + i] = digits[i]\n\
    \    end\n    local result = 0\n    for i = 1, n do\n        result = result *\
    \ 10 + digits[i + shift]\n    end\n    return result\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       shift = n\n    end\n    for i = 1, shift do\n        local d = digits[1]\n\
    \        for j = 1, n - 1 do\n            digits[j] = digits[j + 1]\n        end\n\
    \        digits[n] = d\n    end\n    local s = \"\"\n    for i = 1, n do\n   \
    \     s = s .. digits[i]\n    end\n    return s\nend", "\tlocal s = tostring(x)\n\
    \tlocal n = #s\n\tif shift >= n then\n\t\treturn string.reverse(s)\n\tend\n\t\
    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "    local n\
    \ = #tostring(x)\n    if shift > n then\n        return string.reverse(tostring(x))\n\
    \    end\n    local s = tostring(x)\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local digits = {}\n    local i = 0\n    while x > 0 do\n\
    \        i = i + 1\n        digits[i] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift >= i then\n        return table.concat(digits, \"\")\n\
    \    end\n    local j = 1\n    while j <= shift do\n        local d = digits[i]\n\
    \        for k = i, 2, -1 do\n            digits[k] = digits[k - 1]\n        end\n\
    \        digits[1] = d\n        j = j + 1\n    end\n    return table.concat(digits,\
    \ \"\")\nend", "    local s = tostring(x)\n    local n = #s\n    local r = \"\"\
    \n    if shift > n then\n        for i = n, 1, -1 do\n            r = r .. s:sub(i,\
    \ i)\n        end\n    else\n        for i = n, 1, -1 do\n            local j\
    \ = (i + shift - 1) % n + 1\n            r = r .. s:sub(j, j)\n        end\n \
    \   end\n    return r\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n     \
    \   n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n  \
    \  for i = 0, shift - 1 do\n        local d = digits[n - 1]\n        for j = n\
    \ - 1, 1, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[0]\
    \ = d\n    end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s ..\
    \ tostring(digits[i])\n    end\n    return s\nend", "    local digits = {}\n \
    \   local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x\
    \ % 10\n        x = math.floor(x / 10)\n    end\n    if shift >= n then\n    \
    \    return table.concat(digits, \"\")\n    end\n    local result = {}\n    for\
    \ i = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n\
    \    return table.concat(result, \"\")\nend", "  local s = tostring(x)\n  local\
    \ n = #s\n  if shift >= n then\n    return string.reverse(s)\n  end\n  return\
    \ string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "    local digits\
    \ = {}\n    local i = 0\n    while x > 0 do\n        i = i + 1\n        digits[i]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > i then\n \
    \       return table.concat(digits, \"\")\n    end\n    local result = {}\n  \
    \  for j = 1, i do\n        result[j] = digits[(j + shift - 1) % i + 1]\n    end\n\
    \    return table.concat(result, \"\")\nend", "    local s = tostring(x)\n   \
    \ local len = #s\n    local shift = shift % len\n    return string.sub(s, len\
    \ - shift + 1, len) .. string.sub(s, 1, len - shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local digits = tostring(x)\n    local\
    \ len = #digits\n    if shift >= len then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local digits = {}\n  \
    \  local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x %\
    \ 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n       \
    \ return table.concat(digits, \"\")\n    end\n    local result = {}\n    for i\
    \ = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n  \
    \  return table.concat(result, \"\")\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n \
    \       x = math.floor(x / 10)\n    end\n    if shift >= n then\n        for i\
    \ = 1, n / 2 do\n            digits[i], digits[n - i + 1] = digits[n - i + 1],\
    \ digits[i]\n        end\n    else\n        for i = 1, shift do\n            table.insert(digits,\
    \ 1, table.remove(digits))\n        end\n    end\n    local result = 0\n    for\
    \ i = 1, n do\n        result = result * 10 + digits[i]\n    end\n    return result\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n\
    \ + 1] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n\
    \    if shift > n then\n        return table.concat(digits, \"\")\n    end\n \
    \   local result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift\
    \ - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend", "  local\
    \ digits = {}\n  local n = 0\n  while x > 0 do\n    n = n + 1\n    digits[n] =\
    \ x % 10\n    x = math.floor(x / 10)\n  end\n  if shift > n then\n    shift =\
    \ n\n  end\n  for i = 1, shift do\n    local d = digits[1]\n    for j = 1, n -\
    \ 1 do\n      digits[j] = digits[j + 1]\n    end\n    digits[n] = d\n  end\n \
    \ local result = 0\n  for i = 1, n do\n    result = result * 10 + digits[i]\n\
    \  end\n  return result\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        local d = digits[n]\n        for j = n, 2, -1 do\n  \
    \          digits[j] = digits[j - 1]\n        end\n        digits[1] = d\n   \
    \ end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. digits[i]\n \
    \   end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n  \
    \  if shift > n then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > n then\n        shift = n\n  \
    \  end\n    local result = 0\n    for i = 1, n do\n        local j = i + shift\n\
    \        if j > n then\n            j = j - n\n        end\n        result = result\
    \ * 10 + digits[j]\n    end\n    return result\nend", "    local digits = tostring(x)\n\
    \    local len = #digits\n    if shift > len then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local digits = {}\n  \
    \  local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x %\
    \ 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n       \
    \ shift = n\n    end\n    local result = {}\n    for i = 1, n do\n        result[i]\
    \ = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result)\n\
    end", "  local digits = {}\n  local n = 0\n  while x > 0 do\n    n = n + 1\n \
    \   digits[n] = x % 10\n    x = math.floor(x / 10)\n  end\n  if shift > n then\n\
    \    return table.concat(digits, \"\")\n  end\n  local result = {}\n  for i =\
    \ 1, n do\n    result[i] = digits[(i + shift - 1) % n + 1]\n  end\n  return table.concat(result,\
    \ \"\")\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n \
    \       digits[n] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n\
    \    end\n    if shift > n then\n        shift = n\n    end\n    local result\
    \ = 0\n    for i = 1, n do\n        result = result * 10 + digits[(i + shift -\
    \ 1) % n]\n    end\n    return result\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n \
    \       x = math.floor(x / 10)\n    end\n    if shift > n then\n        return\
    \ table.concat(digits, \"\")\n    end\n    local result = {}\n    for i = 1, n\
    \ do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return\
    \ table.concat(result, \"\")\nend", "    local digits = {}\n    local i = 0\n\
    \    while x > 0 do\n        i = i + 1\n        digits[i] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > i then\n        return table.concat(digits,\
    \ \"\")\n    end\n    local j = 0\n    while j < shift do\n        j = j + 1\n\
    \        local d = digits[i]\n        for k = i, 2, -1 do\n            digits[k]\
    \ = digits[k - 1]\n        end\n        digits[1] = d\n    end\n    return table.concat(digits,\
    \ \"\")\nend", "    local digits = {}\n    local i = 0\n    while x > 0 do\n \
    \       i = i + 1\n        digits[i] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > i then\n        shift = i\n    end\n    local result\
    \ = 0\n    for j = 1, i do\n        result = result * 10 + digits[(j + shift -\
    \ 1) % i + 1]\n    end\n    return result\nend", "  local digits = {}\n  local\
    \ n = 0\n  while x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x\
    \ / 10)\n  end\n  if shift > n then\n    for i = 1, n do\n      x = x * 10 + digits[i]\n\
    \    end\n    return x\n  end\n  for i = 1, shift do\n    table.insert(digits,\
    \ 1, table.remove(digits))\n  end\n  x = 0\n  for i = 1, n do\n    x = x * 10\
    \ + digits[i]\n  end\n  return x\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    local r = s:sub(n - shift + 1, n) .. s:sub(1, n - shift)\n    return\
    \ r\nend", "    local digits = tostring(x)\n    local len = #digits\n    if shift\
    \ > len then\n        return string.reverse(digits)\n    end\n    local left =\
    \ string.sub(digits, 1, shift)\n    local right = string.sub(digits, shift + 1,\
    \ len)\n    return right .. left\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return string.reverse(s)\n    end\n \
    \   local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1,\
    \ n)\n    return b .. a\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift > n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        return table.concat(digits, \"\")\n    end\n \
    \   local result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift\
    \ - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend", "    local\
    \ digits = tostring(x)\n    local len = string.len(digits)\n    if shift >= len\
    \ then\n        return string.reverse(digits)\n    end\n    local left = string.sub(digits,\
    \ 1, shift)\n    local right = string.sub(digits, shift + 1, len)\n    return\
    \ right .. left\nend", "    local digits = {}\n    local n = 0\n    while x >\
    \ 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n        n\
    \ = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n    for\
    \ i = 1, shift do\n        local d = digits[n - 1]\n        for j = n - 1, 1,\
    \ -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[0]\
    \ = d\n    end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s ..\
    \ tostring(digits[i])\n    end\n    return s\nend", "  local s = tostring(x)\n\
    \  local n = #s\n  if shift >= n then\n    return string.reverse(s)\n  end\n \
    \ local a = string.sub(s, 1, shift)\n  local b = string.sub(s, shift + 1, n)\n\
    \  return b .. a\nend", "    local digits = {}\n    local n = 0\n    while x >\
    \ 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        return table.concat(digits, \"\
    \")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] =\
    \ digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\
    \")\nend", "    local s = tostring(x)\n    local len = #s\n    local shift = shift\
    \ % len\n    return s:sub(len-shift+1, len) .. s:sub(1, len-shift)\nend", "  \
    \  local digits = tostring(x)\n    local n = #digits\n    if shift >= n then\n\
    \        return string.reverse(digits)\n    end\n    local left = string.sub(digits,\
    \ 1, shift)\n    local right = string.sub(digits, shift + 1, n)\n    return right\
    \ .. left\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n\
    \    end\n    if shift > n then\n        shift = n\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[n - 1]\n        for j = n - 1, 1, -1 do\n     \
    \       digits[j] = digits[j - 1]\n        end\n        digits[0] = d\n    end\n\
    \    local s = \"\"\n    for i = 0, n - 1 do\n        s = s .. digits[i]\n   \
    \ end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n    if\
    \ shift >= n then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local digits = {}\n   \
    \ local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x %\
    \ 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n       \
    \ return table.concat(digits, \"\")\n    end\n    local result = {}\n    for i\
    \ = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n  \
    \  return table.concat(result, \"\")\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift >= n then\n        return string.reverse(s)\n    end\n\
    \    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1,\
    \ n)\n    return b .. a\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift > n then\n        return string.reverse(s)\n    end\n    local a\
    \ = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return\
    \ b .. a\nend", "\tlocal digits = {}\n\tlocal n = 0\n\twhile x > 0 do\n\t\tdigits[n]\
    \ = x % 10\n\t\tx = math.floor(x / 10)\n\t\tn = n + 1\n\tend\n\tif shift > n then\n\
    \t\treturn string.reverse(table.concat(digits))\n\tend\n\tlocal result = {}\n\t\
    for i = 0, n - 1 do\n\t\tresult[i] = digits[(i + shift) % n]\n\tend\n\treturn\
    \ table.concat(result)\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        return table.concat(digits, \"\
    \")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] =\
    \ digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\
    \")\nend", "    local n = math.floor(math.log10(x)) + 1\n    local s = tostring(x)\n\
    \    if shift > n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       return table.concat(digits, \"\")\n    end\n    local result = {}\n  \
    \  for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n\
    \    return table.concat(result, \"\")\nend", "    local s = tostring(x)\n   \
    \ local n = #s\n    if shift >= n then\n        return string.reverse(s)\n   \
    \ end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    for i = 1, shift do\n        table.insert(digits,\
    \ 1, table.remove(digits, n))\n    end\n    local s = \"\"\n    for i = 1, n do\n\
    \        s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n      \
    \  digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    for i = 1,\
    \ shift do\n        local d = digits[n]\n        for j = n, 2, -1 do\n       \
    \     digits[j] = digits[j - 1]\n        end\n        digits[1] = d\n    end\n\
    \    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "  local digits = {}\n  local n = 0\n  while x >\
    \ 0 do\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n    n = n + 1\n  end\n\
    \  if shift > n then\n    return table.concat(digits, \"\")\n  end\n  for i =\
    \ 0, shift - 1 do\n    local d = digits[n - 1]\n    for j = n - 1, 1, -1 do\n\
    \      digits[j] = digits[j - 1]\n    end\n    digits[0] = d\n  end\n  return\
    \ table.concat(digits, \"\")\nend", "    local digits = tostring(x)\n    local\
    \ len = #digits\n    local shift = shift % len\n    if shift == 0 then\n     \
    \   return digits\n    elseif shift > len then\n        return string.reverse(digits)\n\
    \    else\n        return string.sub(digits, shift + 1) .. string.sub(digits,\
    \ 1, shift)\n    end\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n     \
    \   n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n  \
    \  for i = 1, shift do\n        local d = digits[n - 1]\n        for j = n - 1,\
    \ 1, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[0]\
    \ = d\n    end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s ..\
    \ tostring(digits[i])\n    end\n    return s\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "  local n = math.floor(math.log10(x)) + 1\n\
    \  local s = tostring(x)\n  if shift > n then\n    return s:reverse()\n  end\n\
    \  local a = s:sub(1, n - shift)\n  local b = s:sub(n - shift + 1, n)\n  return\
    \ b .. a\nend", "    local x_str = tostring(x)\n    local x_len = #x_str\n   \
    \ local shift_str = x_str:sub(1, shift)\n    local shift_len = #shift_str\n  \
    \  local result = x_str:sub(shift_len + 1, x_len) .. shift_str\n    return result\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        return table.concat(digits, \"\")\n    end\n \
    \   local result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift\
    \ - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n      \
    \  digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift >\
    \ n then\n        return table.concat(digits, \"\")\n    end\n    for i = 1, shift\
    \ do\n        table.insert(digits, 1, table.remove(digits))\n    end\n    return\
    \ table.concat(digits, \"\")\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift > n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "  local digits\
    \ = {}\n  local n = 0\n  while x > 0 do\n    digits[n+1] = x % 10\n    x = math.floor(x\
    \ / 10)\n    n = n + 1\n  end\n  if shift >= n then\n    for i = 1, n/2 do\n \
    \     digits[i], digits[n-i+1] = digits[n-i+1], digits[i]\n    end\n  else\n \
    \   for i = 1, shift do\n      table.insert(digits, 1, table.remove(digits))\n\
    \    end\n  end\n  local s = \"\"\n  for i = 1, n do\n    s = s .. tostring(digits[i])\n\
    \  end\n  return s\nend", "    local digits = {}\n    local n = 0\n    while x\
    \ > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n       \
    \ n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n    for\
    \ i = 0, shift - 1 do\n        local d = digits[n - 1]\n        for j = n - 1,\
    \ 1, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[0]\
    \ = d\n    end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s ..\
    \ digits[i]\n    end\n    return s\nend", "    local digits = {}\n    local n\
    \ = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n   \
    \     x = math.floor(x / 10)\n    end\n    if shift > n then\n        for i =\
    \ 1, n do\n            x = x * 10 + digits[i]\n        end\n        return x\n\
    \    end\n    for i = 1, shift do\n        local d = digits[n]\n        for j\
    \ = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[1]\
    \ = d\n    end\n    x = 0\n    for i = 1, n do\n        x = x * 10 + digits[i]\n\
    \    end\n    return x\nend", "  local s = tostring(x)\n  local n = #s\n  if shift\
    \ > n then\n    return s:reverse()\n  end\n  return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local n = #tostring(x)\n    local s = tostring(x)\n \
    \   local r = string.reverse(s)\n    local l = string.sub(r, 1, shift)\n    local\
    \ r = string.sub(r, shift + 1, n)\n    local s = string.reverse(r .. l)\n    return\
    \ s\nend", "    local s = tostring(x)\n    local n = #s\n    local t = {}\n  \
    \  for i = 1, n do\n        t[i] = s:sub(i, i)\n    end\n    for i = 1, shift\
    \ do\n        local c = t[n]\n        for j = n, 2, -1 do\n            t[j] =\
    \ t[j - 1]\n        end\n        t[1] = c\n    end\n    return table.concat(t)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n \
    \       return string.reverse(s)\n    end\n    return string.sub(s, shift + 1,\
    \ n) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n    local len\
    \ = #s\n    if shift >= len then\n        return string.reverse(s)\n    end\n\
    \    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "  local digits = {}\n  local n = 0\n  while x > 0 do\n    digits[n] = x\
    \ % 10\n    x = math.floor(x / 10)\n    n = n + 1\n  end\n  while shift > n do\n\
    \    shift = shift - n\n  end\n  local result = {}\n  for i = 0, n - 1 do\n  \
    \  result[i] = digits[(i + shift) % n]\n  end\n  return table.concat(result)\n\
    end", "\tlocal digits = {}\n\tlocal n = 0\n\twhile x > 0 do\n\t\tdigits[n] = x\
    \ % 10\n\t\tx = math.floor(x / 10)\n\t\tn = n + 1\n\tend\n\tif shift > n then\n\
    \t\tshift = n\n\tend\n\tfor i = 1, shift do\n\t\tlocal digit = digits[n - 1]\n\
    \t\tfor j = n - 1, 1, -1 do\n\t\t\tdigits[j] = digits[j - 1]\n\t\tend\n\t\tdigits[0]\
    \ = digit\n\tend\n\tlocal s = \"\"\n\tfor i = 0, n - 1 do\n\t\ts = s .. tostring(digits[i])\n\
    \tend\n\treturn s\nend", "    local s = tostring(x)\n    local n = #s\n    if\
    \ shift > n then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift > n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n      \
    \  digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift >\
    \ n then\n        return table.concat(digits, \"\")\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[n]\n        for j = n, 2, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[1] = d\n    end\n    return table.concat(digits,\
    \ \"\")\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n \
    \       digits[n] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n\
    \    end\n    if shift > n then\n        shift = n\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[n - 1]\n        for j = n - 1, 1, -1 do\n     \
    \       digits[j] = digits[j - 1]\n        end\n        digits[0] = d\n    end\n\
    \    local s = ''\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n \
    \   if shift >= n then\n        return string.reverse(s)\n    end\n    local a\
    \ = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return\
    \ b .. a\nend", "    local digits = {}\n    while x > 0 do\n        table.insert(digits,\
    \ x % 10)\n        x = math.floor(x / 10)\n    end\n    if shift > #digits then\n\
    \        return table.concat(digits, \"\")\n    end\n    for i = 1, shift do\n\
    \        table.insert(digits, 1, table.remove(digits))\n    end\n    return table.concat(digits,\
    \ \"\")\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n \
    \       digits[n] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n\
    \    end\n    local result = 0\n    for i = 0, n - 1 do\n        result = result\
    \ * 10 + digits[(i + shift) % n]\n    end\n    return result\nend", "    local\
    \ digits = math.floor(math.log10(x)) + 1\n    local shift = shift % digits\n \
    \   local divisor = 10^shift\n    local remainder = x % divisor\n    local quotient\
    \ = (x - remainder) / divisor\n    return string.format(\"%d%d\", remainder, quotient)\n\
    end", "  local digits = {}\n  local n = 0\n  while x > 0 do\n    digits[n] = x\
    \ % 10\n    x = math.floor(x / 10)\n    n = n + 1\n  end\n  if shift > n then\n\
    \    for i = 1, n do\n      digits[i], digits[n - i + 1] = digits[n - i + 1],\
    \ digits[i]\n    end\n    return table.concat(digits)\n  end\n  for i = 1, shift\
    \ do\n    digits[n] = digits[n] + digits[0]\n    digits[0] = digits[n] % 10\n\
    \    digits[n] = math.floor(digits[n] / 10)\n    n = n - 1\n  end\n  return table.concat(digits)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        return table.concat(digits, \"\")\n    end\n \
    \   local result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift\
    \ - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n      \
    \  digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift >\
    \ n then\n        shift = n\n    end\n    for i = 1, shift do\n        local d\
    \ = digits[n]\n        for j = n, 2, -1 do\n            digits[j] = digits[j -\
    \ 1]\n        end\n        digits[1] = d\n    end\n    local s = \"\"\n    for\
    \ i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n    return s\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n] =\
    \ x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    for i = 0, shift - 1 do\n        local\
    \ d = digits[n - 1]\n        for j = n - 1, 1, -1 do\n            digits[j] =\
    \ digits[j - 1]\n        end\n        digits[0] = d\n    end\n    local s = \"\
    \"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n    end\n \
    \   return s\nend", "    local n = #tostring(x)\n    shift = shift % n\n    if\
    \ shift == 0 then\n        return tostring(x)\n    end\n    local s = tostring(x)\n\
    \    local s1 = s:sub(1, shift)\n    local s2 = s:sub(shift + 1)\n    return s2\
    \ .. s1\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n \
    \       digits[n + 1] = x % 10\n        x = math.floor(x / 10)\n        n = n\
    \ + 1\n    end\n    if shift > n then\n        shift = n\n    end\n    local result\
    \ = 0\n    for i = 1, n do\n        result = result * 10 + digits[(i + shift -\
    \ 1) % n + 1]\n    end\n    return result\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return s:reverse()\n    end\n\
    \    local left = s:sub(1, shift)\n    local right = s:sub(shift + 1)\n    return\
    \ right .. left\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return string.reverse(s)\n    end\n    local a = string.sub(s,\
    \ 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend",
  "    local digits = tostring(x)\n    local len = #digits\n    if shift >= len then\n\
    \        return string.reverse(digits)\n    end\n    local left = string.sub(digits,\
    \ 1, shift)\n    local right = string.sub(digits, shift + 1, len)\n    return\
    \ right .. left\nend", "    local s = tostring(x)\n    local l = #s\n    if shift\
    \ >= l then\n        return string.reverse(s)\n    end\n    local a = string.sub(s,\
    \ 1, shift)\n    local b = string.sub(s, shift + 1, l)\n    return b .. a\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
