name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local n = #tostring(x)\n    if shift >= n then\n        return\
    \ string.reverse(tostring(x))\n    end\n    local s = tostring(x)\n    local a\
    \ = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return\
    \ b .. a\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n\
    \    end\n    if shift > n then\n        shift = n\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[n - 1]\n        for j = n - 1, 1, -1 do\n     \
    \       digits[j] = digits[j - 1]\n        end\n        digits[0] = d\n    end\n\
    \    local s = \"\"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        return table.concat(digits, \"\
    \")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] =\
    \ digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\
    \")\nend", "    local s = tostring(x)\n    local n = #s\n    local r = s:sub(n\
    \ - shift + 1, n) .. s:sub(1, n - shift)\n    return r\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        digits[#digits + 1] = x %\
    \ 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift\
    \ > n then\n        return table.concat(digits, \"\")\n    end\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n +\
    \ 1]\n    end\n    return table.concat(result, \"\")\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n    \
    \    x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n then\n\
    \        shift = n\n    end\n    for i = 0, shift - 1 do\n        local d = digits[n\
    \ - 1]\n        for j = n - 1, 1, -1 do\n            digits[j] = digits[j - 1]\n\
    \        end\n        digits[0] = d\n    end\n    local s = \"\"\n    for i =\
    \ 0, n - 1 do\n        s = s .. tostring(digits[i])\n    end\n    return s\nend",
  "\tlocal s = tostring(x)\n\tlocal n = #s\n\tlocal r = ''\n\tfor i = 1, n do\n\t\t\
    local c = s:sub(i, i)\n\t\tlocal j = (i + shift - 1) % n + 1\n\t\tr = r .. s:sub(j,\
    \ j)\n\tend\n\treturn r\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        local d = digits[n]\n        for j = n, 2, -1 do\n  \
    \          digits[j] = digits[j - 1]\n        end\n        digits[1] = d\n   \
    \ end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. digits[i]\n \
    \   end\n    return s\nend", "    local digits = tostring(x)\n    local len =\
    \ #digits\n    if shift > len then\n        return string.reverse(digits)\n  \
    \  end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local digits = {}\n  \
    \  local n = 0\n    while x > 0 do\n        digits[n + 1] = x % 10\n        x\
    \ = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n then\n  \
    \      shift = n\n    end\n    for i = 1, shift do\n        digits[n + i] = digits[i]\n\
    \    end\n    local s = \"\"\n    for i = 1, n + shift do\n        s = s .. digits[i]\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n \
    \   if shift > n then\n        return s:reverse()\n    end\n    return s:sub(n-shift+1,\
    \ n) .. s:sub(1, n-shift)\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift > n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local digits\
    \ = {}\n    local n = 0\n    local x = x\n    while x > 0 do\n        local d\
    \ = x % 10\n        x = (x - d) / 10\n        n = n + 1\n        digits[n] = d\n\
    \    end\n    if shift > n then\n        for i = 1, n do\n            digits[i]\
    \ = digits[n - i + 1]\n        end\n    else\n        for i = 1, shift do\n  \
    \          local d = digits[n]\n            for j = n, 2, -1 do\n            \
    \    digits[j] = digits[j - 1]\n            end\n            digits[1] = d\n \
    \       end\n    end\n    local s = ''\n    for i = 1, n do\n        s = s ..\
    \ digits[i]\n    end\n    return s\nend", "    local digits = {}\n    local n\
    \ = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n   \
    \     x = math.floor(x / 10)\n    end\n    if shift >= n then\n        return\
    \ table.concat(digits, \"\")\n    end\n    local result = {}\n    for i = 1, n\
    \ do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return\
    \ table.concat(result, \"\")\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift >= n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "  local s = tostring(x)\n\
    \  local n = #s\n  if shift > n then\n    return string.reverse(s)\n  end\n  local\
    \ a = string.sub(s, 1, shift)\n  local b = string.sub(s, shift + 1, n)\n  return\
    \ b .. a\nend", "  local digits = {}\n  local i = 0\n  while x > 0 do\n    i =\
    \ i + 1\n    digits[i] = x % 10\n    x = math.floor(x / 10)\n  end\n  if shift\
    \ > i then\n    return table.concat(digits, \"\")\n  end\n  local j = 1\n  while\
    \ j <= shift do\n    j = j + 1\n    table.insert(digits, 1, table.remove(digits))\n\
    \  end\n  return table.concat(digits, \"\")\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    local\
    \ ndigits = n\n    if shift > ndigits then\n        shift = ndigits\n    end\n\
    \    local result = 0\n    for i = 0, ndigits - 1 do\n        local j = (i + shift)\
    \ % ndigits\n        result = result * 10 + digits[j]\n    end\n    return result\n\
    end", "    local x_str = tostring(x)\n    local x_len = #x_str\n    local shift_str\
    \ = x_str:sub(x_len - shift + 1, x_len) .. x_str:sub(1, x_len - shift)\n    return\
    \ shift_str\nend", "  local n = math.floor(math.log10(x)) + 1\n  if shift > n\
    \ then\n    return string.reverse(tostring(x))\n  end\n  local s = tostring(x)\n\
    \  local a = string.sub(s, 1, shift)\n  local b = string.sub(s, shift + 1, n)\n\
    \  return b .. a\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ >= n then\n        return string.reverse(s)\n    end\n    local a = string.sub(s,\
    \ 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ string.reverse(s)\n    end\n    return string.sub(s, n - shift + 1) .. string.sub(s,\
    \ 1, n - shift)\nend", "    local digits = {}\n    local n = 0\n    while x >\
    \ 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = (x - digits[n])\
    \ / 10\n    end\n    if shift > n then\n        for i = 1, n do\n            x\
    \ = x * 10 + digits[i]\n        end\n        return x\n    end\n    for i = 1,\
    \ shift do\n        local d = digits[n]\n        for j = n, 2, -1 do\n       \
    \     digits[j] = digits[j - 1]\n        end\n        digits[1] = d\n    end\n\
    \    x = 0\n    for i = 1, n do\n        x = x * 10 + digits[i]\n    end\n   \
    \ return x\nend", "    local s = tostring(x)\n    local n = #s\n    local r =\
    \ s:sub(n - shift + 1, n) .. s:sub(1, n - shift)\n    return r\nend", "    local\
    \ n = #tostring(x)\n    if shift > n then\n        return string.reverse(tostring(x))\n\
    \    end\n    local s = tostring(x)\n    local a = string.sub(s, 1, shift)\n \
    \   local b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n \
    \       return string.reverse(s)\n    end\n    return string.sub(s, shift + 1,\
    \ n) .. string.sub(s, 1, shift)\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \        n = n + 1\n    end\n    if shift > n then\n        for i = 0, n - 1 do\n\
    \            digits[i] = digits[n - i - 1]\n        end\n    else\n        for\
    \ i = 0, n - 1 do\n            digits[i] = digits[(i + shift) % n]\n        end\n\
    \    end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        table.insert(digits, 1, table.remove(digits, n))\n  \
    \  end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n \
    \   if shift > n then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ shift + 1, n) .. string.sub(s, 1, shift)\nend", "\tlocal s = tostring(x)\n\t\
    local len = #s\n\tif shift > len then\n\t\treturn string.reverse(s)\n\tend\n\t\
    local a = string.sub(s, 1, shift)\n\tlocal b = string.sub(s, shift + 1, len)\n\
    \treturn b .. a\nend", "    local digits = {}\n    local n = 0\n    while x >\
    \ 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n        n\
    \ = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n    for\
    \ i = 1, shift do\n        local d = digits[n - 1]\n        for j = n - 1, 1,\
    \ -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[0]\
    \ = d\n    end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s ..\
    \ tostring(digits[i])\n    end\n    return s\nend", "    local digits = {}\n \
    \   local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n        n = n + 1\n    end\n    if shift > n then\n        shift = n\n\
    \    end\n    local y = 0\n    for i = 0, n - 1 do\n        y = y * 10 + digits[(i\
    \ + shift) % n]\n    end\n    return y\nend", "  local digits = {}\n  local n\
    \ = 0\n  while x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x\
    \ / 10)\n  end\n  if shift > n then\n    for i = 1, n do\n      x = x * 10 + digits[i]\n\
    \    end\n    return x\n  end\n  for i = 1, shift do\n    local d = digits[n]\n\
    \    for j = n, 2, -1 do\n      digits[j] = digits[j - 1]\n    end\n    digits[1]\
    \ = d\n  end\n  x = 0\n  for i = 1, n do\n    x = x * 10 + digits[i]\n  end\n\
    \  return x\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > n then\n        return table.concat(digits, \"\")\n \
    \   end\n    local result = {}\n    for i = 1, n do\n        result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n] =\
    \ x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    for i = 0, shift - 1 do\n        local\
    \ d = digits[n - 1]\n        for j = n - 1, 1, -1 do\n            digits[j] =\
    \ digits[j - 1]\n        end\n        digits[0] = d\n    end\n    local s = \"\
    \"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n    end\n \
    \   return s\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > n then\n        return table.concat(digits, \"\")\n \
    \   end\n    local result = {}\n    for i = 1, n do\n        result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend",
  "    local digits = {}\n    while x > 0 do\n        table.insert(digits, x % 10)\n\
    \        x = math.floor(x / 10)\n    end\n    if shift > #digits then\n      \
    \  return table.concat(digits)\n    end\n    for i = 1, shift do\n        table.insert(digits,\
    \ 1, table.remove(digits))\n    end\n    return table.concat(digits)\nend", " \
    \   local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if\
    \ n <= shift then\n        for i = 1, n do\n            digits[n + i] = digits[i]\n\
    \        end\n        n = n + n\n    end\n    for i = 1, shift do\n        digits[n\
    \ + i] = digits[i]\n    end\n    n = n + shift\n    local s = \"\"\n    for i\
    \ = n, 1, -1 do\n        s = s .. digits[i]\n    end\n    return s\nend", "  \
    \  local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n] =\
    \ x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    for i = 0, shift - 1 do\n        x\
    \ = x * 10 + digits[i]\n    end\n    for i = shift, n - 1 do\n        x = x *\
    \ 10 + digits[i]\n    end\n    return x\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n \
    \       x = math.floor(x / 10)\n    end\n    if shift > n then\n        for i\
    \ = 1, n do\n            x = x * 10 + digits[i]\n        end\n        return x\n\
    \    end\n    for i = 1, shift do\n        local digit = digits[n]\n        for\
    \ j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n      \
    \  digits[1] = digit\n    end\n    x = 0\n    for i = 1, n do\n        x = x *\
    \ 10 + digits[i]\n    end\n    return x\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n        n = n + 1\n    end\n    if shift > n then\n        shift = n\n\
    \    end\n    for i = 0, shift - 1 do\n        local d = digits[n - 1]\n     \
    \   for j = n - 1, 1, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[0] = d\n    end\n    local s = \"\"\n    for i = 0, n - 1 do\n\
    \        s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local\
    \ s = tostring(x)\n    local len = #s\n    if shift >= len then\n        return\
    \ s:reverse()\n    end\n    local a = s:sub(1, len - shift)\n    local b = s:sub(len\
    \ - shift + 1, len)\n    return b .. a\nend", "  local digits = {}\n  local n\
    \ = 0\n  while x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x\
    \ / 10)\n  end\n  if shift > n then\n    shift = n\n  end\n  for i = 1, shift\
    \ do\n    table.insert(digits, 1, table.remove(digits, n))\n  end\n  local result\
    \ = 0\n  for i = 1, n do\n    result = result * 10 + digits[i]\n  end\n  return\
    \ result\nend", "\tlocal digits = {}\n\tlocal n = 0\n\twhile x > 0 do\n\t\tn =\
    \ n + 1\n\t\tdigits[n] = x % 10\n\t\tx = math.floor(x / 10)\n\tend\n\tif shift\
    \ > n then\n\t\treturn table.concat(digits, \"\")\n\tend\n\tlocal result = {}\n\
    \tfor i = 1, n do\n\t\tresult[i] = digits[(i + shift - 1) % n + 1]\n\tend\n\t\
    return table.concat(result, \"\")\nend", "    local digits = {}\n    local n =\
    \ 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n     \
    \   x = math.floor(x / 10)\n    end\n    if shift > n then\n        return table.concat(digits,\
    \ \"\")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i]\
    \ = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result,\
    \ \"\")\nend", "    local s = tostring(x)\n    local n = #s\n    if shift > n\
    \ then\n        return string.reverse(s)\n    end\n    local a = string.sub(s,\
    \ 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ >= n then\n        return table.concat(digits, \"\")\n    end\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n +\
    \ 1]\n    end\n    return table.concat(result, \"\")\nend", "  local s = tostring(x)\n\
    \  local len = #s\n  if shift > len then\n    return string.reverse(s)\n  end\n\
    \  return string.sub(s, len - shift + 1) .. string.sub(s, 1, len - shift)\nend",
  "    local digits = {}\n    local i = 0\n    while x > 0 do\n        digits[i] =\
    \ x % 10\n        x = math.floor(x / 10)\n        i = i + 1\n    end\n    if shift\
    \ > i then\n        return table.concat(digits, \"\")\n    end\n    local j =\
    \ 0\n    while j < shift do\n        local digit = table.remove(digits, 1)\n \
    \       table.insert(digits, digit)\n        j = j + 1\n    end\n    return table.concat(digits,\
    \ \"\")\nend", "    local s = tostring(x)\n    local n = #s\n    if shift >= n\
    \ then\n        return string.reverse(s)\n    end\n    return string.sub(s, shift\
    \ + 1, n) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    local r = s:sub(n - shift + 1, n) .. s:sub(1, n - shift)\n    return\
    \ r\nend", "\tlocal s = tostring(x)\n\tlocal len = #s\n\tif shift > len then\n\
    \t\treturn string.reverse(s)\n\tend\n\tlocal left = string.sub(s, 1, shift)\n\t\
    local right = string.sub(s, shift + 1, len)\n\treturn right .. left\nend", " \
    \   local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if\
    \ shift > n then\n        shift = n\n    end\n    local result = 0\n    for i\
    \ = 0, n - 1 do\n        result = result * 10 + digits[(i + shift) % n]\n    end\n\
    \    return result\nend", "    local digits = {}\n    local n = 0\n    while x\
    \ > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift >= n then\n        return table.concat(digits,\
    \ \"\")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i]\
    \ = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result,\
    \ \"\")\nend", "    local s = tostring(x)\n    local n = #s\n    if shift >= n\
    \ then\n        return string.reverse(s)\n    end\n    return string.sub(s, shift\
    \ + 1, n) .. string.sub(s, 1, shift)\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n \
    \       x = math.floor(x / 10)\n    end\n    if shift > n then\n        return\
    \ table.concat(digits)\n    end\n    local result = {}\n    for i = 1, n do\n\
    \        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result)\n\
    end", "\tlocal digits = {}\n\tlocal n = 0\n\twhile x > 0 do\n\t\tdigits[n] = x\
    \ % 10\n\t\tx = math.floor(x / 10)\n\t\tn = n + 1\n\tend\n\tshift = shift % n\n\
    \tlocal result = 0\n\tfor i = n - 1, 0, -1 do\n\t\tresult = result * 10 + digits[(i\
    \ + shift) % n]\n\tend\n\treturn result\nend", "    local digits = {}\n    while\
    \ x > 0 do\n        table.insert(digits, x % 10)\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > #digits then\n        return table.concat(digits, \"\"\
    )\n    end\n    for i = 1, shift do\n        table.insert(digits, 1, table.remove(digits))\n\
    \    end\n    return table.concat(digits, \"\")\nend", "    local digits = {}\n\
    \    local i = 0\n    while x > 0 do\n        digits[i] = x % 10\n        x =\
    \ math.floor(x / 10)\n        i = i + 1\n    end\n    local n = #digits\n    if\
    \ shift >= n then\n        local s = ''\n        for i = n - 1, 0, -1 do\n   \
    \         s = s .. tostring(digits[i])\n        end\n        return s\n    end\n\
    \    local s = ''\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[(i\
    \ + shift) % n])\n    end\n    return s\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        digits[n + 1] = x % 10\n        x = math.floor(x\
    \ / 10)\n        n = n + 1\n    end\n    if shift > n then\n        shift = n\n\
    \    end\n    for i = 1, shift do\n        digits[n + i] = digits[i]\n    end\n\
    \    local result = \"\"\n    for i = 1, n do\n        result = result .. tostring(digits[n\
    \ + i - shift])\n    end\n    return result\nend", "    local digits = {}\n  \
    \  local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x %\
    \ 10\n        x = math.floor(x / 10)\n    end\n    if shift >= n then\n      \
    \  return table.concat(digits, \"\")\n    end\n    local result = {}\n    for\
    \ i = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n\
    \    return table.concat(result, \"\")\nend", "    local digits = {}\n    local\
    \ i = 0\n    while x > 0 do\n        digits[i] = x % 10\n        x = math.floor(x\
    \ / 10)\n        i = i + 1\n    end\n    local n = #digits\n    if shift >= n\
    \ then\n        for i = 1, n / 2 do\n            digits[i], digits[n - i + 1]\
    \ = digits[n - i + 1], digits[i]\n        end\n    else\n        local tmp = {}\n\
    \        for i = 0, n - 1 do\n            tmp[i] = digits[(i + shift) % n]\n \
    \       end\n        for i = 0, n - 1 do\n            digits[i] = tmp[i]\n   \
    \     end\n    end\n    local result = 0\n    for i = 0, n - 1 do\n        result\
    \ = result * 10 + digits[i]\n    end\n    return result\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       return table.concat(digits, \"\")\n    end\n    local result = {}\n  \
    \  for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n\
    \    return table.concat(result, \"\")\nend", "\tlocal digits = {}\n\tlocal n\
    \ = 0\n\twhile x > 0 do\n\t\tdigits[n+1] = x % 10\n\t\tx = math.floor(x / 10)\n\
    \t\tn = n + 1\n\tend\n\tif shift > n then\n\t\treturn table.concat(digits, \"\"\
    )\n\tend\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = digits[(i +\
    \ shift - 1) % n + 1]\n\tend\n\treturn table.concat(result, \"\")\nend", "   \
    \ local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ string.reverse(s)\n    end\n    local a = string.sub(s, 1, shift)\n    local\
    \ b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n\
    \    local l = #s\n    if shift >= l then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, l - shift + 1) .. string.sub(s, 1, l - shift)\n\
    end", "    local n = #tostring(x)\n    local s = tostring(x)\n    if shift > n\
    \ then\n        return s:reverse()\n    end\n    local a = s:sub(1, n - shift)\n\
    \    local b = s:sub(n - shift + 1, n)\n    return b .. a\nend", "    local digits\
    \ = tostring(x)\n    local n = #digits\n    if shift > n then\n        return\
    \ string.reverse(digits)\n    end\n    local a = string.sub(digits, 1, shift)\n\
    \    local b = string.sub(digits, shift + 1, n)\n    return b .. a\nend", "\t\
    local s = tostring(x)\n\tlocal n = #s\n\tlocal r = string.reverse(s)\n\tlocal\
    \ r1 = string.sub(r, 1, shift)\n\tlocal r2 = string.sub(r, shift + 1, n)\n\treturn\
    \ string.reverse(r2 .. r1)\nend", "    local digits = {}\n    local n = 0\n  \
    \  while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \        n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n\
    \    for i = 1, shift do\n        local d = digits[n - 1]\n        for j = n -\
    \ 1, 1, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[0]\
    \ = d\n    end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s ..\
    \ tostring(digits[i])\n    end\n    return s\nend", "    local digits = {}\n \
    \   local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n        n = n + 1\n    end\n    if shift > n then\n        shift = n\n\
    \    end\n    local result = 0\n    for i = 0, n - 1 do\n        result = result\
    \ * 10 + digits[(i + shift) % n]\n    end\n    return result\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n\
    \        x = math.floor(x / 10)\n        n = n + 1\n    end\n    while shift >\
    \ n do\n        shift = shift - n\n    end\n    while shift > 0 do\n        local\
    \ d = digits[n - 1]\n        for i = n - 1, 1, -1 do\n            digits[i] =\
    \ digits[i - 1]\n        end\n        digits[0] = d\n        shift = shift - 1\n\
    \    end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local i = 0\n    while\
    \ x > 0 do\n        digits[i] = x % 10\n        x = math.floor(x / 10)\n     \
    \   i = i + 1\n    end\n    if shift > i then\n        return table.concat(digits,\
    \ \"\")\n    end\n    for j = 0, shift - 1 do\n        local tmp = digits[i -\
    \ 1]\n        for k = i - 1, 1, -1 do\n            digits[k] = digits[k - 1]\n\
    \        end\n        digits[0] = tmp\n    end\n    return table.concat(digits,\
    \ \"\")\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n \
    \       digits[n] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n\
    \    end\n    if shift > n then\n        shift = n\n    end\n    for i = 0, shift\
    \ - 1 do\n        local tmp = digits[n - 1]\n        for j = n - 1, 1, -1 do\n\
    \            digits[j] = digits[j - 1]\n        end\n        digits[0] = tmp\n\
    \    end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        digits[n + 1] = x % 10\n        x = math.floor(x / 10)\n \
    \       n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n\
    \    for i = 1, shift do\n        local d = digits[n]\n        for j = n, 2, -1\
    \ do\n            digits[j] = digits[j - 1]\n        end\n        digits[1] =\
    \ d\n    end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n \
    \   if shift >= n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local digits\
    \ = {}\n    while x > 0 do\n        table.insert(digits, 1, x % 10)\n        x\
    \ = math.floor(x / 10)\n    end\n    local n = #digits\n    if shift > n then\n\
    \        shift = n\n    end\n    for i = 1, shift do\n        table.insert(digits,\
    \ 1, table.remove(digits))\n    end\n    local s = \"\"\n    for i = 1, n do\n\
    \        s = s .. tostring(digits[i])\n    end\n    return s\nend", "  local digits\
    \ = {}\n  local n = 0\n  while x > 0 do\n    digits[n] = x % 10\n    x = math.floor(x\
    \ / 10)\n    n = n + 1\n  end\n  if shift > n then\n    shift = n\n  end\n  local\
    \ result = 0\n  for i = 0, n - 1 do\n    result = result * 10 + digits[(i + shift)\
    \ % n]\n  end\n  return result\nend", "    local s = tostring(x)\n    local len\
    \ = #s\n    if shift >= len then\n        return string.reverse(s)\n    end\n\
    \    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n\
    \        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n\
    \ then\n        for i = 1, n do\n            x = x * 10 + digits[i - 1]\n    \
    \    end\n        return x\n    end\n    for i = 1, shift do\n        local d\
    \ = digits[n - 1]\n        for j = n - 1, 1, -1 do\n            digits[j] = digits[j\
    \ - 1]\n        end\n        digits[0] = d\n    end\n    x = 0\n    for i = 0,\
    \ n - 1 do\n        x = x * 10 + digits[i]\n    end\n    return x\nend", "   \
    \ local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n] =\
    \ x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    for i = 1, shift do\n        digits[n]\
    \ = digits[i - 1]\n        n = n + 1\n    end\n    local s = \"\"\n    for i =\
    \ n - 1, n - shift - 1, -1 do\n        s = s .. digits[i]\n    end\n    return\
    \ s\nend", "    local s = tostring(x)\n    local n = #s\n    local shift = shift\
    \ % n\n    if shift == 0 then\n        return s\n    elseif shift > 0 then\n \
    \       return s:sub(n - shift + 1) .. s:sub(1, n - shift)\n    else\n       \
    \ return s:sub(-shift + 1) .. s:sub(1, -shift)\n    end\nend", "  local digits\
    \ = {}\n  local n = 0\n  while x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n\
    \    x = math.floor(x / 10)\n  end\n  if shift > n then\n    return table.concat(digits,\
    \ \"\")\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n  end\n  return table.concat(result, \"\")\nend", " \
    \   local x_str = tostring(x)\n    local x_len = #x_str\n    if shift >= x_len\
    \ then\n        return string.reverse(x_str)\n    end\n    local x_left = string.sub(x_str,\
    \ 1, shift)\n    local x_right = string.sub(x_str, shift + 1, x_len)\n    return\
    \ x_right .. x_left\nend", "    local s = tostring(x)\n    local l = #s\n    if\
    \ shift >= l then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ l - shift + 1) .. string.sub(s, 1, l - shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return string.reverse(s)\n    end\n    return string.sub(s, shift + 1,\
    \ n) .. string.sub(s, 1, shift)\nend", "    local n = #tostring(x)\n    if shift\
    \ > n then\n        return string.reverse(tostring(x))\n    end\n    local s =\
    \ tostring(x)\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s,\
    \ shift + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift >= n then\n        return string.reverse(s)\n    end\n\
    \    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1,\
    \ n)\n    return b .. a\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        digits[n + 1] = x % 10\n        x = math.floor(x / 10)\n \
    \       n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n\
    \    for i = 1, shift do\n        table.insert(digits, 1, table.remove(digits))\n\
    \    end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "  local digits = tostring(x)\n  local n = #digits\n\
    \  shift = shift % n\n  if shift == 0 then\n    return digits\n  elseif shift\
    \ < 0 then\n    shift = n + shift\n  end\n  return string.sub(digits, shift +\
    \ 1) .. string.sub(digits, 1, shift)\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift >= n then\n        return string.reverse(s)\n    end\n\
    \    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1,\
    \ n)\n    return b .. a\nend", "  local s = tostring(x)\n  local n = #s\n  if\
    \ shift > n then\n    return string.reverse(s)\n  end\n  return string.sub(s,\
    \ n - shift + 1) .. string.sub(s, 1, n - shift)\nend", "    local digits = {}\n\
    \    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x\
    \ % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n     \
    \   shift = n\n    end\n    for i = 1, shift do\n        local d = digits[n]\n\
    \        for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[1] = d\n    end\n    local s = \"\"\n    for i = 1, n do\n   \
    \     s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       shift = n\n    end\n    local result = 0\n    for i = 1, n do\n      \
    \  result = result * 10 + digits[(i + shift - 1) % n + 1]\n    end\n    return\
    \ result\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > n then\n        return table.concat(digits, \"\")\n \
    \   end\n    local result = {}\n    for i = 1, n do\n        result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        return table.concat(digits, \"\")\n    end\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n +\
    \ 1]\n    end\n    return table.concat(result, \"\")\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return s:reverse()\n    end\n\
    \    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local n =\
    \ math.floor(math.log10(x)) + 1\n    local s = tostring(x)\n    if shift > n then\n\
    \        return string.reverse(s)\n    end\n    return string.sub(s, shift + 1)\
    \ .. string.sub(s, 1, shift)\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \        n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n\
    \    for i = 0, shift - 1 do\n        local d = digits[n - 1]\n        for j =\
    \ n - 1, 1, -1 do\n            digits[j] = digits[j - 1]\n        end\n      \
    \  digits[0] = d\n    end\n    local s = \"\"\n    for i = 0, n - 1 do\n     \
    \   s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local digits\
    \ = {}\n    local i = 0\n    while x > 0 do\n        i = i + 1\n        digits[i]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift >= i then\n\
    \        return table.concat(digits, \"\")\n    end\n    local j = i - shift\n\
    \    local result = {}\n    for k = 1, i do\n        result[k] = digits[j]\n \
    \       j = j + 1\n        if j > i then\n            j = 1\n        end\n   \
    \ end\n    return table.concat(result, \"\")\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift >= n then\n        return string.reverse(s)\n    end\n    local\
    \ a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1, n)\n   \
    \ return b .. a\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return string.reverse(s)\n    end\n    local a = string.sub(s,\
    \ 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend",
  "  local digits = {}\n  local n = 0\n  while x > 0 do\n    n = n + 1\n    digits[n]\
    \ = x % 10\n    x = math.floor(x / 10)\n  end\n  if shift > n then\n    for i\
    \ = 1, n do\n      x = x * 10 + digits[i]\n    end\n    return x\n  end\n  for\
    \ i = 1, shift do\n    local d = digits[n]\n    for j = n, 2, -1 do\n      digits[j]\
    \ = digits[j - 1]\n    end\n    digits[1] = d\n  end\n  x = 0\n  for i = 1, n\
    \ do\n    x = x * 10 + digits[i]\n  end\n  return x\nend", "    local digits =\
    \ {}\n    local n = 0\n    while x > 0 do\n        digits[n + 1] = x % 10\n  \
    \      x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n then\n\
    \        return table.concat(digits, \"\")\n    end\n    for i = 0, shift - 1\
    \ do\n        local d = digits[n]\n        for j = n, 1, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[0] = d\n    end\n    return table.concat(digits,\
    \ \"\")\nend", "    local s = tostring(x)\n    local n = #s\n    if shift > n\
    \ then\n        return string.reverse(s)\n    end\n    local a = string.sub(s,\
    \ 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ string.reverse(s)\n    end\n    local a = string.sub(s, 1, shift)\n    local\
    \ b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n    local l =\
    \ #s\n    if shift >= l then\n        return s:reverse()\n    end\n    return\
    \ s:sub(l - shift + 1) .. s:sub(1, l - shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return s:reverse()\n    end\n\
    \    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    local m = n - shift\n\
    \    if m < 0 then\n        m = m + n\n    end\n    local result = {}\n    for\
    \ i = 1, n do\n        result[i] = digits[m]\n        m = m + 1\n        if m\
    \ > n then\n            m = 1\n        end\n    end\n    return table.concat(result)\n\
    end", "    local s = tostring(x)\n    local len = #s\n    local shift = shift\
    \ % len\n    return s:sub(len - shift + 1, len) .. s:sub(1, len - shift)\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n +\
    \ 1] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n  \
    \  if shift > n then\n        shift = n\n    end\n    for i = 1, shift do\n  \
    \      table.insert(digits, 1, table.remove(digits))\n    end\n    local s = \"\
    \"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n    return\
    \ s\nend", "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n\
    \        return string.reverse(s)\n    end\n    return string.sub(s, shift + 1,\
    \ n) .. string.sub(s, 1, shift)\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \        n = n + 1\n    end\n    if shift > n then\n        return table.concat(digits,\
    \ \"\")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i]\
    \ = digits[(i + shift - 1) % n]\n    end\n    return table.concat(result, \"\"\
    )\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n       \
    \ n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift >= n then\n        return table.concat(digits, \"\")\n    end\n\
    \    local result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift\
    \ - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n\
    \        x = math.floor(x / 10)\n        n = n + 1\n    end\n    for i = 0, shift\
    \ - 1 do\n        local d = digits[n - 1]\n        for j = n - 1, 1, -1 do\n \
    \           digits[j] = digits[j - 1]\n        end\n        digits[0] = d\n  \
    \  end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        return table.concat(digits, \"\
    \")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] =\
    \ digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\
    \")\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n     \
    \   digits[n] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n  \
    \  end\n    if shift > n then\n        return table.concat(digits, \"\")\n   \
    \ end\n    local result = {}\n    for i = 1, n do\n        result[i] = digits[(i\
    \ + shift - 1) % n]\n    end\n    return table.concat(result, \"\")\nend", " \
    \   local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ string.reverse(s)\n    end\n    return string.sub(s, n - shift + 1) .. string.sub(s,\
    \ 1, n - shift)\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return string.reverse(s)\n    end\n    local a = string.sub(s,\
    \ 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n] =\
    \ x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift\
    \ > n then\n        return table.concat(digits, \"\")\n    end\n    local result\
    \ = {}\n    for i = 0, n - 1 do\n        result[i] = digits[(i + shift) % n]\n\
    \    end\n    return table.concat(result, \"\")\nend", "    local digits = {}\n\
    \    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x\
    \ % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n     \
    \   for i = 1, n do\n            x = x * 10 + digits[i]\n        end\n       \
    \ return x\n    end\n    for i = 1, shift do\n        digits[n + i] = digits[i]\n\
    \    end\n    local x = 0\n    for i = 1, n do\n        x = x * 10 + digits[i\
    \ + shift]\n    end\n    return x\nend", "    local digits = {}\n    local n =\
    \ 0\n    while x > 0 do\n        digits[n] = x % 10\n        x = (x - digits[n])\
    \ / 10\n        n = n + 1\n    end\n    if shift > n then\n        shift = n\n\
    \    end\n    for i = 0, shift - 1 do\n        local tmp = digits[n - 1]\n   \
    \     for j = n - 1, 1, -1 do\n            digits[j] = digits[j - 1]\n       \
    \ end\n        digits[0] = tmp\n    end\n    local result = \"\"\n    for i =\
    \ 0, n - 1 do\n        result = result .. tostring(digits[i])\n    end\n    return\
    \ result\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        digits[n + 1] = x % 10\n        x = math.floor(x / 10)\n        n = n\
    \ + 1\n    end\n    if shift > n then\n        shift = n\n    end\n    for i =\
    \ 1, shift do\n        digits[n + i] = digits[i]\n    end\n    local s = {}\n\
    \    for i = 1, n + shift do\n        s[i] = digits[i]\n    end\n    return table.concat(s)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return string.reverse(s)\n    end\n    local a = string.sub(s, 1, shift)\n\
    \    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n + 1] = x\
    \ % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    for i = 1, shift do\n        digits[n\
    \ + i] = digits[i]\n    end\n    local result = 0\n    for i = n + shift, n +\
    \ 1, -1 do\n        result = result * 10 + digits[i]\n    end\n    return result\n\
    end", "  local s = tostring(x)\n  local len = #s\n  if shift >= len then\n   \
    \ return string.reverse(s)\n  end\n  local r = string.sub(s, len - shift + 1)\n\
    \  local l = string.sub(s, 1, len - shift)\n  return r .. l\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n\
    \        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n\
    \ then\n        return table.concat(digits, \"\")\n    end\n    for i = 0, shift\
    \ - 1 do\n        local d = digits[n - 1]\n        for j = n - 1, 1, -1 do\n \
    \           digits[j] = digits[j - 1]\n        end\n        digits[0] = d\n  \
    \  end\n    return table.concat(digits, \"\")\nend", "    local digits = {}\n\
    \    local result = {}\n    local i = 0\n    while x > 0 do\n        digits[i]\
    \ = x % 10\n        x = math.floor(x / 10)\n        i = i + 1\n    end\n    if\
    \ shift > i then\n        shift = shift % i\n    end\n    for j = 0, i - 1 do\n\
    \        result[j] = digits[(j + shift) % i]\n    end\n    return table.concat(result)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n\
    \ + 1] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n\
    \    if shift > n then\n        shift = n\n    end\n    for i = 1, shift do\n\
    \        digits[n + i] = digits[i]\n    end\n    local result = 0\n    for i =\
    \ 1, n do\n        result = result * 10 + digits[i + shift]\n    end\n    return\
    \ result\nend", "    local s = tostring(x)\n    local n = #s\n    if shift > n\
    \ then\n        return string.reverse(s)\n    end\n    return string.sub(s, shift\
    \ + 1, n) .. string.sub(s, 1, shift)\nend", "    local n = #tostring(x)\n    local\
    \ s = tostring(x)\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local digits = {}\n    local i = 0\n\
    \    while x > 0 do\n        i = i + 1\n        digits[i] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > i then\n        shift = i\n  \
    \  end\n    for j = 1, shift do\n        table.insert(digits, 1, table.remove(digits,\
    \ i))\n    end\n    local result = 0\n    for j = 1, i do\n        result = result\
    \ * 10 + digits[j]\n    end\n    return result\nend", "    local digits = {}\n\
    \    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x\
    \ % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n     \
    \   shift = n\n    end\n    for i = 1, shift do\n        local d = digits[n]\n\
    \        for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[1] = d\n    end\n    local s = \"\"\n    for i = 1, n do\n   \
    \     s = s .. digits[i]\n    end\n    return s\nend", "    local digits = tostring(x)\n\
    \    local len = #digits\n    if shift >= len then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local digits = {}\n  \
    \  local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n        n = n + 1\n    end\n    if shift >= n then\n        for i = 0,\
    \ n - 1 do\n            digits[i] = digits[n - i - 1]\n        end\n    else\n\
    \        for i = 0, n - 1 do\n            digits[i] = digits[(i + shift) % n]\n\
    \        end\n    end\n    local result = 0\n    for i = 0, n - 1 do\n       \
    \ result = result * 10 + digits[i]\n    end\n    return result\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n\
    \        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n\
    \ then\n        shift = n\n    end\n    for i = 1, shift do\n        local d =\
    \ digits[n - 1]\n        for j = n - 1, 1, -1 do\n            digits[j] = digits[j\
    \ - 1]\n        end\n        digits[0] = d\n    end\n    local s = \"\"\n    for\
    \ i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n    end\n    return s\n\
    end", "  local digits = {}\n  local i = 0\n  while x > 0 do\n    i = i + 1\n \
    \   digits[i] = x % 10\n    x = math.floor(x / 10)\n  end\n  if shift >= i then\n\
    \    return table.concat(digits, \"\")\n  end\n  local result = {}\n  for j =\
    \ 1, i do\n    result[j] = digits[(j + shift - 1) % i + 1]\n  end\n  return table.concat(result,\
    \ \"\")\nend", "    local s = tostring(x)\n    local n = #s\n    if shift >= n\
    \ then\n        return s:reverse()\n    end\n    local a = s:sub(1, shift)\n \
    \   local b = s:sub(shift + 1)\n    return b .. a\nend", "    local digits = {}\n\
    \    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n        x =\
    \ math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n then\n    \
    \    shift = n\n    end\n    local result = 0\n    for i = 0, n - 1 do\n     \
    \   local d = digits[(i + shift) % n]\n        result = result * 10 + d\n    end\n\
    \    return tostring(result)\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > n then\n        shift = n\n  \
    \  end\n    for i = 1, shift do\n        local d = digits[1]\n        for j =\
    \ 1, n - 1 do\n            digits[j] = digits[j + 1]\n        end\n        digits[n]\
    \ = d\n    end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n     \
    \   n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n  \
    \  for i = 0, shift - 1 do\n        digits[n] = digits[i]\n        n = n + 1\n\
    \    end\n    local result = 0\n    for i = n - 1, 0, -1 do\n        result =\
    \ result * 10 + digits[i]\n    end\n    return result\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return s:reverse()\n    end\n\
    \    local a = s:sub(1, shift)\n    local b = s:sub(shift + 1)\n    return b ..\
    \ a\nend", "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n\
    \        return string.reverse(s)\n    end\n    return string.sub(s, shift + 1,\
    \ n) .. string.sub(s, 1, shift)\nend", "  local digits = {}\n  local n = 0\n \
    \ while x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x\
    \ / 10)\n  end\n  if shift > n then\n    return table.concat(digits, \"\")\n \
    \ end\n  local result = {}\n  for i = 1, n do\n    result[i] = digits[(i + shift\
    \ - 1) % n + 1]\n  end\n  return table.concat(result, \"\")\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local digits = {}\n    local i = 0\n\
    \    while x > 0 do\n        digits[i] = x % 10\n        x = math.floor(x / 10)\n\
    \        i = i + 1\n    end\n    local n = #digits\n    if shift > n then\n  \
    \      shift = n\n    end\n    for i = 1, shift do\n        table.insert(digits,\
    \ 1, table.remove(digits, n))\n    end\n    local s = \"\"\n    for i = 1, n do\n\
    \        s = s .. digits[i]\n    end\n    return s\nend", "  local s = tostring(x)\n\
    \  local n = #s\n  if shift >= n then\n    return string.reverse(s)\n  end\n \
    \ return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "  local s\
    \ = tostring(x)\n  local n = #s\n  if shift >= n then\n    return string.reverse(s)\n\
    \  end\n  return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", " \
    \   local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ string.reverse(s)\n    end\n    local a = string.sub(s, 1, shift)\n    local\
    \ b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n    \
    \    x = math.floor(x / 10)\n        n = n + 1\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[n - 1]\n        for j = n - 1, 1, -1 do\n     \
    \       digits[j] = digits[j - 1]\n        end\n        digits[0] = d\n    end\n\
    \    local s = \"\"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n \
    \   if shift > n then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if\
    \ shift > n then\n        shift = n\n    end\n    for i = 0, shift - 1 do\n  \
    \      local tmp = digits[n - 1]\n        for j = n - 1, 1, -1 do\n          \
    \  digits[j] = digits[j - 1]\n        end\n        digits[0] = tmp\n    end\n\
    \    local s = \"\"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "  local digits = {}\n  local n = 0\n  while x >\
    \ 0 do\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n    n = n + 1\n  end\n\
    \  if shift > n then\n    shift = n\n  end\n  for i = 1, shift do\n    local d\
    \ = digits[n - 1]\n    for j = n - 1, 1, -1 do\n      digits[j] = digits[j - 1]\n\
    \    end\n    digits[0] = d\n  end\n  local s = \"\"\n  for i = 0, n - 1 do\n\
    \    s = s .. tostring(digits[i])\n  end\n  return s\nend", "  local digits =\
    \ {}\n  local n = 0\n  while x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n\
    \    x = math.floor(x / 10)\n  end\n  if shift > n then\n    return table.concat(digits,\
    \ \"\")\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n  end\n  return table.concat(result, \"\")\nend", " \
    \   local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ string.reverse(s)\n    end\n    local a = string.sub(s, 1, shift)\n    local\
    \ b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "  local digits =\
    \ {}\n  local n = 0\n  while x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n\
    \    x = math.floor(x / 10)\n  end\n  if shift > n then\n    return table.concat(digits,\
    \ \"\")\n  end\n  for i = 1, shift do\n    table.insert(digits, 1, table.remove(digits))\n\
    \  end\n  return table.concat(digits, \"\")\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local digits = tostring(x)\n    local\
    \ len = #digits\n    if shift >= len then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local digits = {}\n  \
    \  local n = 0\n    while x > 0 do\n        digits[n + 1] = x % 10\n        x\
    \ = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n then\n  \
    \      shift = n\n    end\n    for i = 1, shift do\n        digits[n + i] = digits[i]\n\
    \    end\n    local result = 0\n    for i = 1, n do\n        result = result *\
    \ 10 + digits[i + shift]\n    end\n    return result\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       return table.concat(digits, \"\")\n    end\n    local result = {}\n  \
    \  for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n\
    \    return table.concat(result, \"\")\nend", "    local s = tostring(x)\n   \
    \ local n = #s\n    if shift >= n then\n        return string.reverse(s)\n   \
    \ end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend",
  "\tlocal s = tostring(x)\n\tlocal n = #s\n\tif shift > n then\n\t\treturn s:reverse()\n\
    \tend\n\tlocal a = s:sub(1, shift)\n\tlocal b = s:sub(shift + 1)\n\treturn b ..\
    \ a\nend", "  local digits = {}\n  local n = 0\n  while x > 0 do\n    n = n +\
    \ 1\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n  end\n  if shift > n\
    \ then\n    return table.concat(digits, \"\")\n  end\n  local result = {}\n  for\
    \ i = 1, n do\n    result[i] = digits[(i + shift - 1) % n + 1]\n  end\n  return\
    \ table.concat(result, \"\")\nend", "    local s = tostring(x)\n    local l =\
    \ #s\n    if shift > l then\n        return s:reverse()\n    end\n    return s:sub(l\
    \ - shift + 1) .. s:sub(1, l - shift)\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n \
    \       x = math.floor(x / 10)\n    end\n    if shift > n then\n        return\
    \ table.concat(digits, \"\")\n    end\n    local result = {}\n    for i = 1, n\
    \ do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return\
    \ table.concat(result, \"\")\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        digits[#digits + 1] = x % 10\n        x = math.floor(x\
    \ / 10)\n        n = n + 1\n    end\n    if shift > n then\n        return table.concat(digits)\n\
    \    end\n    local result = {}\n    for i = 1, n do\n        result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n    end\n    return table.concat(result)\nend", "   \
    \ local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ string.reverse(s)\n    end\n    return string.sub(s, shift + 1, n) .. string.sub(s,\
    \ 1, shift)\nend", "  local digits = {}\n  local n = 0\n  while x > 0 do\n   \
    \ n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n  end\n  if shift\
    \ > n then\n    return table.concat(digits, \"\")\n  end\n  local result = {}\n\
    \  for i = 1, n do\n    result[i] = digits[(i + shift - 1) % n + 1]\n  end\n \
    \ return table.concat(result, \"\")\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return string.reverse(s)\n    end\n \
    \   return string.sub(s, shift+1, n) .. string.sub(s, 1, shift)\nend", "  local\
    \ digits = {}\n  local i = 0\n  while x > 0 do\n    i = i + 1\n    digits[i] =\
    \ x % 10\n    x = math.floor(x / 10)\n  end\n  if shift > i then\n    return table.concat(digits,\
    \ \"\")\n  end\n  local j = 1\n  while j <= shift do\n    local d = digits[i]\n\
    \    for k = i, 2, -1 do\n      digits[k] = digits[k - 1]\n    end\n    digits[1]\
    \ = d\n    j = j + 1\n  end\n  return table.concat(digits, \"\")\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local n = #tostring(x)\n    local s =\
    \ tostring(x)\n    if shift > n then\n        return string.reverse(s)\n    end\n\
    \    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1,\
    \ n)\n    return b .. a\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        return table.concat(digits, \"\
    \")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] =\
    \ digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\
    \")\nend", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n\
    \        return string.reverse(s)\n    end\n    local a = string.sub(s, 1, shift)\n\
    \    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n      \
    \  digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift >\
    \ n then\n        return table.concat(digits, \"\")\n    end\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n +\
    \ 1]\n    end\n    return table.concat(result, \"\")\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        digits[n + 1] = x % 10\n\
    \        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n\
    \ then\n        shift = n\n    end\n    for i = 1, shift do\n        digits[n\
    \ + i] = digits[i]\n    end\n    local s = \"\"\n    for i = 1, n + shift do\n\
    \        s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return s:reverse()\n\
    \    end\n    return s:sub(n-shift+1) .. s:sub(1, n-shift)\nend", "\tlocal digits\
    \ = {}\n\tlocal n = 0\n\twhile x > 0 do\n\t\tn = n + 1\n\t\tdigits[n] = x % 10\n\
    \t\tx = math.floor(x / 10)\n\tend\n\tif shift > n then\n\t\tfor i = 1, n do\n\t\
    \t\tx = x * 10 + digits[i]\n\t\tend\n\t\treturn x\n\tend\n\tfor i = 1, shift do\n\
    \t\tlocal d = digits[n]\n\t\tfor j = n, 2, -1 do\n\t\t\tdigits[j] = digits[j -\
    \ 1]\n\t\tend\n\t\tdigits[1] = d\n\tend\n\tx = 0\n\tfor i = 1, n do\n\t\tx = x\
    \ * 10 + digits[i]\n\tend\n\treturn x\nend", "  local digits = {}\n  local n =\
    \ 0\n  while x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x\
    \ / 10)\n  end\n  if shift > n then\n    shift = n\n  end\n  for i = 1, shift\
    \ do\n    local d = digits[n]\n    for j = n, 2, -1 do\n      digits[j] = digits[j\
    \ - 1]\n    end\n    digits[1] = d\n  end\n  local s = \"\"\n  for i = 1, n do\n\
    \    s = s .. tostring(digits[i])\n  end\n  return s\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       for i = 1, n do\n            x = x * 10 + digits[i]\n        end\n   \
    \     return x\n    end\n    for i = 1, shift do\n        table.insert(digits,\
    \ 1, table.remove(digits))\n    end\n    x = 0\n    for i = 1, n do\n        x\
    \ = x * 10 + digits[i]\n    end\n    return x\nend", "    local digits = {}\n\
    \    local n = 0\n    while x > 0 do\n        digits[n + 1] = x % 10\n       \
    \ x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n then\n\
    \        shift = n\n    end\n    local s = {}\n    for i = 1, n do\n        s[i]\
    \ = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(s)\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ string.reverse(s)\n    end\n    local a = string.sub(s, 1, shift)\n    local\
    \ b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local n = #tostring(x)\n\
    \    local s = tostring(x)\n    local r = s:sub(shift + 1, n) .. s:sub(1, shift)\n\
    \    return r\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return string.reverse(s)\n    end\n    local a = string.sub(s,\
    \ 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n +\
    \ 1] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n  \
    \  local m = n - shift\n    if m < 0 then\n        m = m + n\n    end\n    local\
    \ y = 0\n    for i = 0, n - 1 do\n        y = y * 10 + digits[(m + i) % n + 1]\n\
    \    end\n    return y\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        local d = digits[1]\n        for j = 1, n - 1 do\n  \
    \          digits[j] = digits[j + 1]\n        end\n        digits[n] = d\n   \
    \ end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        digits[n + 1] = x % 10\n        x = math.floor(x / 10)\n \
    \       n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n\
    \    for i = 1, shift do\n        digits[n + i] = digits[i]\n    end\n    local\
    \ result = 0\n    for i = 1, n do\n        result = result * 10 + digits[i + shift]\n\
    \    end\n    return result\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift >= n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local s =\
    \ tostring(x)\n    local n = #s\n    local shift = shift % n\n    return s:sub(n\
    \ - shift + 1, n) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n \
    \   local n = #s\n    if shift >= n then\n        return string.reverse(s)\n \
    \   end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ string.reverse(s)\n    end\n    local a = string.sub(s, 1, shift)\n    local\
    \ b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > n then\n        shift = n\n  \
    \  end\n    for i = 1, shift do\n        local d = digits[n]\n        for j =\
    \ n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[1]\
    \ = d\n    end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. digits[i]\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n \
    \   if shift >= n then\n        return s:reverse()\n    end\n    return s:sub(n\
    \ - shift + 1) .. s:sub(1, n - shift)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
