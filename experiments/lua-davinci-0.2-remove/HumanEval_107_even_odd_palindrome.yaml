name: HumanEval_107_even_odd_palindrome
language: lua
prompt: "-- Given a positive integer n, return a tuple that has the number of even\
  \ and odd\n-- integer palindromes that fall within the range(1, n), inclusive.\n\
  -- Example 1:\n-- Explanation:\n-- Integer palindrome are 1, 2, 3. one of them is\
  \ even, and two of them are odd.\n-- Example 2:\n-- Explanation:\n-- Integer palindrome\
  \ are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  -- Note:\n-- 1. 1 <= n <= 10^3\n-- 2. returned tuple has the number of even and\
  \ odd integer palindromes respectively.\nlocal function even_odd_palindrome(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_palindrome\n\
  \    lu.assertEquals(candidate(123), {8, 13})\n    lu.assertEquals(candidate(12),\
  \ {4, 6})\n    lu.assertEquals(candidate(3), {1, 2})\n    lu.assertEquals(candidate(63),\
  \ {6, 8})\n    lu.assertEquals(candidate(25), {5, 6})\n    lu.assertEquals(candidate(19),\
  \ {4, 6})\n    lu.assertEquals(candidate(9), {4, 5})\n    lu.assertEquals(candidate(1),\
  \ {0, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local even, odd = 0, 0\n    for i = 1, n do\n        if i < 10\
    \ then\n            odd = odd + 1\n        elseif i % 10 == 0 then\n         \
    \   even = even + 1\n        else\n            local s = tostring(i)\n       \
    \     local l, r = 1, #s\n            while l < r do\n                if s:sub(l,\
    \ l) ~= s:sub(r, r) then\n                    break\n                end\n   \
    \             l, r = l + 1, r - 1\n            end\n            if l >= r then\n\
    \                if #s % 2 == 0 then\n                    even = even + 1\n  \
    \              else\n                    odd = odd + 1\n                end\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ even, odd = 0, 0\n    for i = 1, n do\n        if i % 2 == 0 then\n        \
    \    even = even + 1\n        else\n            odd = odd + 1\n        end\n \
    \   end\n    return even, odd\nend", "    local even, odd = 0, 0\n    for i =\
    \ 1, n do\n        if i < 10 then\n            odd = odd + 1\n        elseif i\
    \ % 10 == 0 then\n            even = even + 1\n        else\n            local\
    \ s = tostring(i)\n            local l, r = 1, #s\n            while l < r do\n\
    \                if s:sub(l, l) ~= s:sub(r, r) then\n                    break\n\
    \                end\n                l, r = l + 1, r - 1\n            end\n \
    \           if l >= r then\n                if #s % 2 == 0 then\n            \
    \        even = even + 1\n                else\n                    odd = odd\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ i % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if i % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n\
    \    return even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if i < 10 then\n            odd = odd + 1\n        elseif i % 10 == 0\
    \ then\n            -- do nothing\n        else\n            local s = tostring(i)\n\
    \            local l, r = 1, #s\n            while l < r do\n                if\
    \ s:sub(l, l) ~= s:sub(r, r) then\n                    break\n               \
    \ end\n                l, r = l + 1, r - 1\n            end\n            if l\
    \ >= r then\n                if #s % 2 == 0 then\n                    even = even\
    \ + 1\n                else\n                    odd = odd + 1\n             \
    \   end\n            end\n        end\n    end\n    return even, odd\nend", " \
    \   local even, odd = 0, 0\n    for i = 1, n do\n        if i < 10 then\n    \
    \        odd = odd + 1\n        elseif i % 10 == 0 then\n            even = even\
    \ + 1\n        else\n            local s = tostring(i)\n            local l, r\
    \ = 1, #s\n            while l < r do\n                if s:sub(l, l) ~= s:sub(r,\
    \ r) then\n                    break\n                end\n                l,\
    \ r = l + 1, r - 1\n            end\n            if l >= r then\n            \
    \    if #s % 2 == 0 then\n                    even = even + 1\n              \
    \  else\n                    odd = odd + 1\n                end\n            end\n\
    \        end\n    end\n    return even, odd\nend", "    local even, odd = 0, 0\n\
    \    for i = 1, n do\n        if i < 10 then\n            odd = odd + 1\n    \
    \    elseif i % 10 == 0 then\n            even = even + 1\n        else\n    \
    \        local s = tostring(i)\n            local l, r = 1, #s\n            while\
    \ l < r do\n                if s:sub(l, l) ~= s:sub(r, r) then\n             \
    \       break\n                end\n                l, r = l + 1, r - 1\n    \
    \        end\n            if l >= r then\n                if #s % 2 == 0 then\n\
    \                    even = even + 1\n                else\n                 \
    \   odd = odd + 1\n                end\n            end\n        end\n    end\n\
    \    return even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if i % 2 == 0 then\n            even = even + 1\n        else\n     \
    \       odd = odd + 1\n        end\n    end\n    return even, odd\nend", "   \
    \ local even, odd = 0, 0\n    for i = 1, n do\n        if i % 2 == 0 then\n  \
    \          even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return even, odd\nend", "    local even, odd = 0, 0\n    for i =\
    \ 1, n do\n        if i < 10 then\n            odd = odd + 1\n        elseif i\
    \ % 11 == 0 then\n            even = even + 1\n        else\n            local\
    \ s = tostring(i)\n            local l, r = 1, #s\n            while l < r do\n\
    \                if s:sub(l, l) ~= s:sub(r, r) then\n                    break\n\
    \                end\n                l, r = l + 1, r - 1\n            end\n \
    \           if l >= r then\n                if #s % 2 == 0 then\n            \
    \        even = even + 1\n                else\n                    odd = odd\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ i < 10 then\n            odd = odd + 1\n        elseif i % 10 == 0 then\n  \
    \          -- skip\n        else\n            local s = tostring(i)\n        \
    \    local len = #s\n            local left, right = 1, len\n            local\
    \ is_palindrome = true\n            while left < right do\n                if\
    \ s:sub(left, left) ~= s:sub(right, right) then\n                    is_palindrome\
    \ = false\n                    break\n                end\n                left,\
    \ right = left + 1, right - 1\n            end\n            if is_palindrome then\n\
    \                if len % 2 == 0 then\n                    even = even + 1\n \
    \               else\n                    odd = odd + 1\n                end\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ even, odd = 0, 0\n    for i = 1, n do\n        if (i % 10 == 0) then\n     \
    \       even = even + 1\n        elseif (i % 10 == 1) then\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if i < 10 then\n            odd = odd\
    \ + 1\n        elseif i % 10 == 0 then\n            -- nothing\n        else\n\
    \            local s = tostring(i)\n            local l, r = 1, #s\n         \
    \   while l < r do\n                if s:sub(l, l) ~= s:sub(r, r) then\n     \
    \               break\n                end\n                l, r = l + 1, r -\
    \ 1\n            end\n            if l >= r then\n                if #s % 2 ==\
    \ 0 then\n                    even = even + 1\n                else\n        \
    \            odd = odd + 1\n                end\n            end\n        end\n\
    \    end\n    return even, odd\nend", "    local even, odd = 0, 0\n    for i =\
    \ 1, n do\n        if i < 10 then\n            odd = odd + 1\n        elseif i\
    \ % 10 == 0 then\n            even = even + 1\n        else\n            local\
    \ s = tostring(i)\n            local l, r = 1, #s\n            while l < r do\n\
    \                if s:sub(l, l) ~= s:sub(r, r) then\n                    break\n\
    \                end\n                l, r = l + 1, r - 1\n            end\n \
    \           if l >= r then\n                if #s % 2 == 0 then\n            \
    \        even = even + 1\n                else\n                    odd = odd\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ i % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if i < 10 then\n            odd = odd\
    \ + 1\n        elseif i % 10 == 0 then\n            even = even + 1\n        else\n\
    \            local s = tostring(i)\n            local l, r = 1, #s\n         \
    \   while l < r do\n                if s:sub(l, l) ~= s:sub(r, r) then\n     \
    \               break\n                end\n                l, r = l + 1, r -\
    \ 1\n            end\n            if l >= r then\n                if #s % 2 ==\
    \ 0 then\n                    even = even + 1\n                else\n        \
    \            odd = odd + 1\n                end\n            end\n        end\n\
    \    end\n    return even, odd\nend", "    local even, odd = 0, 0\n    for i =\
    \ 1, n do\n        if i < 10 then\n            odd = odd + 1\n        elseif i\
    \ % 10 == 0 then\n            even = even + 1\n        else\n            local\
    \ s = tostring(i)\n            local l, r = 1, #s\n            while l < r do\n\
    \                if s:sub(l, l) ~= s:sub(r, r) then\n                    break\n\
    \                end\n                l, r = l + 1, r - 1\n            end\n \
    \           if l >= r then\n                if #s % 2 == 0 then\n            \
    \        even = even + 1\n                else\n                    odd = odd\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ i < 10 then\n            odd = odd + 1\n        elseif i % 10 == 0 then\n  \
    \          even = even + 1\n        else\n            local s = tostring(i)\n\
    \            local n = #s\n            local m = math.floor(n / 2)\n         \
    \   local l, r = s:sub(1, m), s:sub(n - m + 1, n)\n            if l == r:reverse()\
    \ then\n                if n % 2 == 0 then\n                    even = even +\
    \ 1\n                else\n                    odd = odd + 1\n               \
    \ end\n            end\n        end\n    end\n    return even, odd\nend", "  \
    \  local even, odd = 0, 0\n    for i = 1, n do\n        if i < 10 then\n     \
    \       odd = odd + 1\n        elseif i % 10 == 0 then\n            even = even\
    \ + 1\n        else\n            local s = tostring(i)\n            local l, r\
    \ = 1, #s\n            while l < r do\n                if s:sub(l, l) ~= s:sub(r,\
    \ r) then\n                    break\n                end\n                l,\
    \ r = l + 1, r - 1\n            end\n            if l >= r then\n            \
    \    if #s % 2 == 0 then\n                    even = even + 1\n              \
    \  else\n                    odd = odd + 1\n                end\n            end\n\
    \        end\n    end\n    return even, odd\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
