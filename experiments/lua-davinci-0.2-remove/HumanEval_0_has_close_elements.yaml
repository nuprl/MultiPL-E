name: HumanEval_0_has_close_elements
language: lua
prompt: "-- Check if in given list of numbers, are any two numbers closer to each\
  \ other than\n-- given threshold.\nlocal function has_close_elements(numbers, threshold)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n   \
  \ lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
  \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
  \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local sorted = sort(numbers)\n    local prev = sorted[1]\n    for\
    \ i = 2, #sorted do\n        if sorted[i] - prev < threshold then\n          \
    \  return true\n        end\n        prev = sorted[i]\n    end\n    return false\n\
    end", "    local sorted = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n\
    \        if sorted[i + 1] - sorted[i] < threshold then\n            return true\n\
    \        end\n    end\n    return false\nend", "    local sorted = table.sort(numbers)\n\
    \    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    local min_diff = math.huge\n    for i = 1, #numbers do\n        for j = i +\
    \ 1, #numbers do\n            local diff = math.abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff then\n                min_diff = diff\n      \
    \      end\n        end\n    end\n    return min_diff < threshold\nend", "   \
    \ local sorted = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if\
    \ sorted[i + 1] - sorted[i] < threshold then\n            return true\n      \
    \  end\n    end\n    return false\nend", "    local sorted = table.sort(numbers)\n\
    \    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    local sorted = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n       \
    \ if sorted[i + 1] - sorted[i] < threshold then\n            return true\n   \
    \     end\n    end\n    return false\nend", "    local sorted = table.sort(numbers)\n\
    \    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    local sorted = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n       \
    \ if sorted[i + 1] - sorted[i] < threshold then\n            return true\n   \
    \     end\n    end\n    return false\nend", "  local min_diff = math.huge\n  for\
    \ i = 1, #numbers do\n    for j = i + 1, #numbers do\n      min_diff = math.min(min_diff,\
    \ math.abs(numbers[i] - numbers[j]))\n    end\n  end\n  return min_diff < threshold\n\
    end", "    local sorted = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n\
    \        if sorted[i + 1] - sorted[i] < threshold then\n            return true\n\
    \        end\n    end\n    return false\nend", "    local n = #numbers\n    for\
    \ i = 1, n - 1 do\n        for j = i + 1, n do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "    local sorted = table.sort(numbers)\n\
    \    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    local min_diff = math.huge\n    for i = 1, #numbers do\n        for j = i +\
    \ 1, #numbers do\n            local diff = math.abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff then\n                min_diff = diff\n      \
    \      end\n        end\n    end\n    return min_diff < threshold\nend", "  local\
    \ sorted = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i +\
    \ 1] - sorted[i] < threshold then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    local sorted = table.sort(numbers)\n    for i = 1, #sorted\
    \ - 1 do\n        if sorted[i + 1] - sorted[i] < threshold then\n            return\
    \ true\n        end\n    end\n    return false\nend", "    local sorted = table.sort(numbers)\n\
    \    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "\tlocal sorted = sort(numbers)\n\tfor i = 1, #sorted - 1 do\n\t\tif sorted[i +\
    \ 1] - sorted[i] < threshold then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn\
    \ false\nend", "    local sorted = table.sort(numbers)\n    for i = 1, #sorted\
    \ - 1 do\n        if sorted[i + 1] - sorted[i] < threshold then\n            return\
    \ true\n        end\n    end\n    return false\nend", "  local last_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    if last_number ~= nil and math.abs(number\
    \ - last_number) < threshold then\n      return true\n    end\n    last_number\
    \ = number\n  end\n  return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
