name: HumanEval_156_int_to_mini_roman
language: lua
prompt: "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  -- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n\
  local function int_to_mini_roman(number)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
  \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
  \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
  \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
  \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
  \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
  \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
  \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
  \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local roman = \"\"\n  local num = number\n  local numeral_map = {\n\
    \    {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n\
    \    {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"\
    v\"},\n    {4, \"iv\"}, {1, \"i\"}\n  }\n  for _, pair in ipairs(numeral_map)\
    \ do\n    local arabic, roman_string = pair[1], pair[2]\n    while num >= arabic\
    \ do\n      roman = roman .. roman_string\n      num = num - arabic\n    end\n\
    \  end\n  return roman\nend", "  local roman = \"\"\n  local num = number\n  local\
    \ digits = {\n    {1000, \"m\"},\n    {900, \"cm\"},\n    {500, \"d\"},\n    {400,\
    \ \"cd\"},\n    {100, \"c\"},\n    {90, \"xc\"},\n    {50, \"l\"},\n    {40, \"\
    xl\"},\n    {10, \"x\"},\n    {9, \"ix\"},\n    {5, \"v\"},\n    {4, \"iv\"},\n\
    \    {1, \"i\"}\n  }\n  for i = 1, #digits do\n    local digit = digits[i]\n \
    \   local value = digit[1]\n    local letter = digit[2]\n    while num >= value\
    \ do\n      roman = roman .. letter\n      num = num - value\n    end\n  end\n\
    \  return roman\nend", "    local roman_numerals = {\n        {1000, \"m\"},\n\
    \        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n     \
    \   {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"\
    xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n    \
    \    {4, \"iv\"},\n        {1, \"i\"}\n    }\n    local result = \"\"\n    for\
    \ _, pair in ipairs(roman_numerals) do\n        local arabic, roman = pair[1],\
    \ pair[2]\n        while number >= arabic do\n            number = number - arabic\n\
    \            result = result .. roman\n        end\n    end\n    return result\n\
    end", "  local roman = ''\n  local num = number\n  local numeral_map = {\n   \
    \ {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n    {400, 'cd'},\n    {100,\
    \ 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40, 'xl'},\n    {10, 'x'},\n  \
    \  {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1, 'i'},\n  }\n  for _, pair\
    \ in ipairs(numeral_map) do\n    local arabic, roman_string = pair[1], pair[2]\n\
    \    while num >= arabic do\n      roman = roman .. roman_string\n      num =\
    \ num - arabic\n    end\n  end\n  return roman\nend", "    local roman_numerals\
    \ = {\n        { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\"\
    , \"viii\", \"ix\" },\n        { \"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\",\
    \ \"lx\", \"lxx\", \"lxxx\", \"xc\" },\n        { \"\", \"c\", \"cc\", \"ccc\"\
    , \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\" },\n        { \"\", \"m\",\
    \ \"mm\", \"mmm\" }\n    }\n    local result = \"\"\n    local num = number\n\
    \    for i = 4, 1, -1 do\n        local digit = num % 10\n        result = result\
    \ .. roman_numerals[i][digit + 1]\n        num = (num - digit) / 10\n    end\n\
    \    return result\nend", "    local roman = \"\"\n    local numeral_map = {\n\
    \        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100,\
    \ \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    }\n    for _, r in ipairs(numeral_map)\
    \ do\n        while number >= r[1] do\n            roman = roman .. r[2]\n   \
    \         number = number - r[1]\n        end\n    end\n    return roman\nend",
  "\tlocal roman = \"\"\n\tlocal num = number\n\twhile num > 0 do\n\t\tif num >= 1000\
    \ then\n\t\t\troman = roman .. \"m\"\n\t\t\tnum = num - 1000\n\t\telseif num >=\
    \ 900 then\n\t\t\troman = roman .. \"cm\"\n\t\t\tnum = num - 900\n\t\telseif num\
    \ >= 500 then\n\t\t\troman = roman .. \"d\"\n\t\t\tnum = num - 500\n\t\telseif\
    \ num >= 400 then\n\t\t\troman = roman .. \"cd\"\n\t\t\tnum = num - 400\n\t\t\
    elseif num >= 100 then\n\t\t\troman = roman .. \"c\"\n\t\t\tnum = num - 100\n\t\
    \telseif num >= 90 then\n\t\t\troman = roman .. \"xc\"\n\t\t\tnum = num - 90\n\
    \t\telseif num >= 50 then\n\t\t\troman = roman .. \"l\"\n\t\t\tnum = num - 50\n\
    \t\telseif num >= 40 then\n\t\t\troman = roman .. \"xl\"\n\t\t\tnum = num - 40\n\
    \t\telseif num >= 10 then\n\t\t\troman = roman .. \"x\"\n\t\t\tnum = num - 10\n\
    \t\telseif num >= 9 then\n\t\t\troman = roman .. \"ix\"\n\t\t\tnum = num - 9\n\
    \t\telseif num >= 5 then\n\t\t\troman = roman .. \"v\"\n\t\t\tnum = num - 5\n\t\
    \telseif num >= 4 then\n\t\t\troman = roman .. \"iv\"\n\t\t\tnum = num - 4\n\t\
    \telseif num >= 1 then\n\t\t\troman = roman .. \"i\"\n\t\t\tnum = num - 1\n\t\t\
    end\n\tend\n\treturn roman\nend", "    local roman = {\n        [1] = \"i\",\n\
    \        [5] = \"v\",\n        [10] = \"x\",\n        [50] = \"l\",\n        [100]\
    \ = \"c\",\n        [500] = \"d\",\n        [1000] = \"m\",\n    }\n    local\
    \ result = \"\"\n    local num = number\n    local factor = 1\n    while num >\
    \ 0 do\n        local digit = num % 10\n        if digit == 9 then\n         \
    \   result = roman[factor] .. roman[factor * 10] .. result\n        elseif digit\
    \ >= 5 then\n            result = roman[5 * factor] .. string.rep(roman[factor],\
    \ digit - 5) .. result\n        elseif digit == 4 then\n            result = roman[factor]\
    \ .. roman[5 * factor] .. result\n        else\n            result = string.rep(roman[factor],\
    \ digit) .. result\n        end\n        num = math.floor(num / 10)\n        factor\
    \ = factor * 10\n    end\n    return result\nend", "  local roman = \"\"\n  local\
    \ numbers = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n  local letters\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"}\n  for i, num in ipairs(numbers) do\n    while number\
    \ >= num do\n      roman = roman .. letters[i]\n      number = number - num\n\
    \    end\n  end\n  return roman\nend", "  local roman = ''\n  local num = number\n\
    \  while num > 0 do\n    if num >= 1000 then\n      roman = roman .. 'm'\n   \
    \   num = num - 1000\n    elseif num >= 900 then\n      roman = roman .. 'cm'\n\
    \      num = num - 900\n    elseif num >= 500 then\n      roman = roman .. 'd'\n\
    \      num = num - 500\n    elseif num >= 400 then\n      roman = roman .. 'cd'\n\
    \      num = num - 400\n    elseif num >= 100 then\n      roman = roman .. 'c'\n\
    \      num = num - 100\n    elseif num >= 90 then\n      roman = roman .. 'xc'\n\
    \      num = num - 90\n    elseif num >= 50 then\n      roman = roman .. 'l'\n\
    \      num = num - 50\n    elseif num >= 40 then\n      roman = roman .. 'xl'\n\
    \      num = num - 40\n    elseif num >= 10 then\n      roman = roman .. 'x'\n\
    \      num = num - 10\n    elseif num >= 9 then\n      roman = roman .. 'ix'\n\
    \      num = num - 9\n    elseif num >= 5 then\n      roman = roman .. 'v'\n \
    \     num = num - 5\n    elseif num >= 4 then\n      roman = roman .. 'iv'\n \
    \     num = num - 4\n    elseif num >= 1 then\n      roman = roman .. 'i'\n  \
    \    num = num - 1\n    end\n  end\n  return roman\nend", "    local roman_numerals\
    \ = {\n        [1] = \"i\",\n        [5] = \"v\",\n        [10] = \"x\",\n   \
    \     [50] = \"l\",\n        [100] = \"c\",\n        [500] = \"d\",\n        [1000]\
    \ = \"m\",\n    }\n    local roman_numeral = \"\"\n    local digit_value = 1\n\
    \    local digit_count = 0\n    local digit_limit = 3\n    while number > 0 do\n\
    \        local digit = number % 10\n        number = math.floor(number / 10)\n\
    \        if digit == 4 then\n            roman_numeral = roman_numerals[digit_value]\
    \ .. roman_numerals[digit_value * 5] .. roman_numeral\n        elseif digit ==\
    \ 9 then\n            roman_numeral = roman_numerals[digit_value] .. roman_numerals[digit_value\
    \ * 10] .. roman_numeral\n        else\n            local digit_string = \"\"\n\
    \            for i = 1, digit do\n                digit_string = digit_string\
    \ .. roman_numerals[digit_value]\n            end\n            roman_numeral =\
    \ digit_string .. roman_numeral\n        end\n        digit_value = digit_value\
    \ * 10\n        digit_count = digit_count + 1\n        if digit_count == digit_limit\
    \ then\n            digit_value = digit_value * 10\n            digit_count =\
    \ 0\n        end\n    end\n    return roman_numeral\nend", "    local roman_numerals\
    \ = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n\
    \        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n      \
    \  {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"\
    },\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    }\n   \
    \ local result = \"\"\n    for i = 1, #roman_numerals do\n        local arabic,\
    \ roman = unpack(roman_numerals[i])\n        while number >= arabic do\n     \
    \       number = number - arabic\n            result = result .. roman\n     \
    \   end\n    end\n    return result\nend", "    local roman = \"\"\n    local\
    \ num = number\n    while num > 0 do\n        if num >= 1000 then\n          \
    \  roman = roman .. \"m\"\n            num = num - 1000\n        elseif num >=\
    \ 900 then\n            roman = roman .. \"cm\"\n            num = num - 900\n\
    \        elseif num >= 500 then\n            roman = roman .. \"d\"\n        \
    \    num = num - 500\n        elseif num >= 400 then\n            roman = roman\
    \ .. \"cd\"\n            num = num - 400\n        elseif num >= 100 then\n   \
    \         roman = roman .. \"c\"\n            num = num - 100\n        elseif\
    \ num >= 90 then\n            roman = roman .. \"xc\"\n            num = num -\
    \ 90\n        elseif num >= 50 then\n            roman = roman .. \"l\"\n    \
    \        num = num - 50\n        elseif num >= 40 then\n            roman = roman\
    \ .. \"xl\"\n            num = num - 40\n        elseif num >= 10 then\n     \
    \       roman = roman .. \"x\"\n            num = num - 10\n        elseif num\
    \ >= 9 then\n            roman = roman .. \"ix\"\n            num = num - 9\n\
    \        elseif num >= 5 then\n            roman = roman .. \"v\"\n          \
    \  num = num - 5\n        elseif num >= 4 then\n            roman = roman .. \"\
    iv\"\n            num = num - 4\n        elseif num >= 1 then\n            roman\
    \ = roman .. \"i\"\n            num = num - 1\n        end\n    end\n    return\
    \ roman\nend", "  local roman_numerals = {\n    [1] = \"i\",\n    [5] = \"v\"\
    ,\n    [10] = \"x\",\n    [50] = \"l\",\n    [100] = \"c\",\n    [500] = \"d\"\
    ,\n    [1000] = \"m\",\n  }\n  local result = \"\"\n  local num = number\n  local\
    \ factor = 1\n  while num > 0 do\n    local digit = num % 10\n    num = math.floor(num\
    \ / 10)\n    local roman_digit = \"\"\n    if digit == 9 then\n      roman_digit\
    \ = roman_numerals[factor] .. roman_numerals[factor * 10]\n    elseif digit >=\
    \ 5 then\n      roman_digit = roman_numerals[5 * factor]\n      for i = 1, digit\
    \ - 5 do\n        roman_digit = roman_digit .. roman_numerals[factor]\n      end\n\
    \    elseif digit == 4 then\n      roman_digit = roman_numerals[factor] .. roman_numerals[5\
    \ * factor]\n    else\n      for i = 1, digit do\n        roman_digit = roman_digit\
    \ .. roman_numerals[factor]\n      end\n    end\n    result = roman_digit .. result\n\
    \    factor = factor * 10\n  end\n  return result\nend", "    local roman_numerals\
    \ = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n\
    \        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n      \
    \  {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"\
    },\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    }\n   \
    \ local result = \"\"\n    for i, pair in ipairs(roman_numerals) do\n        local\
    \ arabic, roman = pair[1], pair[2]\n        while number >= arabic do\n      \
    \      number = number - arabic\n            result = result .. roman\n      \
    \  end\n    end\n    return result\nend", "    if number > 1000 then\n       \
    \ return nil\n    end\n    local roman = \"\"\n    local numeral_map = {\n   \
    \     {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n\
    \        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\n\
    \        {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    }\n    for _, numeral in ipairs(numeral_map)\
    \ do\n        local arabic, roman_string = numeral[1], numeral[2]\n        while\
    \ number >= arabic do\n            roman = roman .. roman_string\n           \
    \ number = number - arabic\n        end\n    end\n    return roman\nend", "  \
    \  local result = \"\"\n    local num = number\n    local numeral = {\n      \
    \  {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400,\
    \ \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n\
    \        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5,\
    \ \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    }\n    for i = 1, #numeral\
    \ do\n        while num >= numeral[i][1] do\n            result = result .. numeral[i][2]\n\
    \            num = num - numeral[i][1]\n        end\n    end\n    return result\n\
    end", "  local roman_numerals = {\n    [1] = 'i',\n    [5] = 'v',\n    [10] =\
    \ 'x',\n    [50] = 'l',\n    [100] = 'c',\n    [500] = 'd',\n    [1000] = 'm',\n\
    \  }\n  local roman_numeral = ''\n  local remainder = number\n  local divisor\
    \ = 1000\n  while remainder > 0 do\n    local quotient = math.floor(remainder\
    \ / divisor)\n    remainder = remainder % divisor\n    if quotient == 9 then\n\
    \      roman_numeral = roman_numeral .. roman_numerals[divisor] .. roman_numerals[divisor\
    \ * 10]\n    elseif quotient >= 5 then\n      roman_numeral = roman_numeral ..\
    \ roman_numerals[divisor * 5]\n      for i = 1, quotient - 5 do\n        roman_numeral\
    \ = roman_numeral .. roman_numerals[divisor]\n      end\n    elseif quotient ==\
    \ 4 then\n      roman_numeral = roman_numeral .. roman_numerals[divisor] .. roman_numerals[divisor\
    \ * 5]\n    else\n      for i = 1, quotient do\n        roman_numeral = roman_numeral\
    \ .. roman_numerals[divisor]\n      end\n    end\n    divisor = divisor / 10\n\
    \  end\n  return roman_numeral\nend", "    local roman = ''\n    local num = number\n\
    \    local i = 1\n    while num > 0 do\n        local digit = num % 10\n     \
    \   num = (num - digit) / 10\n        if digit == 4 then\n            roman =\
    \ roman .. 'iv'\n        elseif digit == 9 then\n            roman = roman ..\
    \ 'ix'\n        else\n            if digit >= 5 then\n                roman =\
    \ roman .. 'v'\n                digit = digit - 5\n            end\n         \
    \   for j = 1, digit do\n                roman = roman .. 'i'\n            end\n\
    \        end\n        i = i + 1\n    end\n    return roman\nend", "    local roman\
    \ = \"\"\n    local roman_numerals = {\n        {1000, \"m\"},\n        {900,\
    \ \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"\
    },\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n     \
    \   {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"\
    },\n        {1, \"i\"}\n    }\n    for _, numeral in ipairs(roman_numerals) do\n\
    \        local value, letters = numeral[1], numeral[2]\n        while number >=\
    \ value do\n            roman = roman .. letters\n            number = number\
    \ - value\n        end\n    end\n    return roman\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
