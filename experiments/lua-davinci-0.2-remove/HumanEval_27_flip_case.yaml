name: HumanEval_27_flip_case
language: lua
prompt: "-- For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\nlocal function flip_case(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'),\
  \ 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent\
  \ ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local flipped = \"\"\n  for i = 1, #string do\n    local char = string:sub(i,\
    \ i)\n    if char:match(\"%u\") then\n      flipped = flipped .. char:lower()\n\
    \    elseif char:match(\"%l\") then\n      flipped = flipped .. char:upper()\n\
    \    else\n      flipped = flipped .. char\n    end\n  end\n  return flipped\n\
    end", "    local flipped = {}\n    for i = 1, #string do\n        local char =\
    \ string:sub(i, i)\n        if char:match(\"%l\") then\n            flipped[i]\
    \ = char:upper()\n        elseif char:match(\"%u\") then\n            flipped[i]\
    \ = char:lower()\n        else\n            flipped[i] = char\n        end\n \
    \   end\n    return table.concat(flipped)\nend", "  return string:gsub(\"%a\"\
    , function(c)\n    return (c:lower() == c) and c:upper() or c:lower()\n  end)\n\
    end", "    local flipped = {}\n    for i = 1, #string do\n        local char =\
    \ string:sub(i, i)\n        if char:match(\"%u\") then\n            flipped[i]\
    \ = char:lower()\n        elseif char:match(\"%l\") then\n            flipped[i]\
    \ = char:upper()\n        else\n            flipped[i] = char\n        end\n \
    \   end\n    return table.concat(flipped)\nend", "    return string:gsub(\"%a\"\
    , function(c)\n        return c == c:lower() and c:upper() or c:lower()\n    end)\n\
    end", "    return string:gsub(\"%a\", function(char)\n        if char:match(\"\
    %u\") then\n            return char:lower()\n        else\n            return\
    \ char:upper()\n        end\n    end)\nend", "    local flipped = \"\"\n    for\
    \ i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"\
    %u\") then\n            flipped = flipped .. char:lower()\n        elseif char:match(\"\
    %l\") then\n            flipped = flipped .. char:upper()\n        else\n    \
    \        flipped = flipped .. char\n        end\n    end\n    return flipped\n\
    end", "    local flipped = {}\n    for i = 1, #string do\n        local char =\
    \ string:sub(i, i)\n        if char:match(\"%l\") then\n            flipped[i]\
    \ = char:upper()\n        elseif char:match(\"%u\") then\n            flipped[i]\
    \ = char:lower()\n        else\n            flipped[i] = char\n        end\n \
    \   end\n    return table.concat(flipped)\nend", "    local flipped = {}\n   \
    \ for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"\
    %l\") then\n            flipped[i] = char:upper()\n        elseif char:match(\"\
    %u\") then\n            flipped[i] = char:lower()\n        else\n            flipped[i]\
    \ = char\n        end\n    end\n    return table.concat(flipped)\nend", "  local\
    \ flipped = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n \
    \   if char:match(\"%u\") then\n      flipped[i] = char:lower()\n    elseif char:match(\"\
    %l\") then\n      flipped[i] = char:upper()\n    else\n      flipped[i] = char\n\
    \    end\n  end\n  return table.concat(flipped)\nend", "    local flipped = \"\
    \"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n       \
    \ if char:match(\"%u\") then\n            flipped = flipped .. char:lower()\n\
    \        elseif char:match(\"%l\") then\n            flipped = flipped .. char:upper()\n\
    \        else\n            flipped = flipped .. char\n        end\n    end\n \
    \   return flipped\nend", "    return string:gsub(\"%a\", function(char)\n   \
    \     return char == char:lower() and char:upper() or char:lower()\n    end)\n\
    end", "    local flipped = \"\"\n    for i = 1, #string do\n        local char\
    \ = string:sub(i, i)\n        if char:lower() == char then\n            flipped\
    \ = flipped .. char:upper()\n        else\n            flipped = flipped .. char:lower()\n\
    \        end\n    end\n    return flipped\nend", "    local flipped = {}\n   \
    \ for i = 1, #string do\n        local char = string:sub(i, i)\n        if char\
    \ == char:lower() then\n            flipped[i] = char:upper()\n        else\n\
    \            flipped[i] = char:lower()\n        end\n    end\n    return table.concat(flipped)\n\
    end", "    local flipped = {}\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if c:lower() == c then\n            flipped[i] = c:upper()\n   \
    \     else\n            flipped[i] = c:lower()\n        end\n    end\n    return\
    \ table.concat(flipped)\nend", "    return string:gsub(\"%a\", function(char)\n\
    \        if char:match(\"%u\") then\n            return char:lower()\n       \
    \ else\n            return char:upper()\n        end\n    end)\nend", "\tlocal\
    \ flipped = \"\"\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i, i)\n\
    \t\tif char:find(\"%l\") then\n\t\t\tflipped = flipped .. char:upper()\n\t\telseif\
    \ char:find(\"%u\") then\n\t\t\tflipped = flipped .. char:lower()\n\t\telse\n\t\
    \t\tflipped = flipped .. char\n\t\tend\n\tend\n\treturn flipped\nend", "  local\
    \ flipped = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n\
    \    if char:match(\"%u\") then\n      flipped = flipped .. char:lower()\n   \
    \ elseif char:match(\"%l\") then\n      flipped = flipped .. char:upper()\n  \
    \  else\n      flipped = flipped .. char\n    end\n  end\n  return flipped\nend",
  "  local new_string = \"\"\n  for i = 1, #string do\n    local char = string:sub(i,\
    \ i)\n    if char:match(\"%l\") then\n      new_string = new_string .. char:upper()\n\
    \    elseif char:match(\"%u\") then\n      new_string = new_string .. char:lower()\n\
    \    else\n      new_string = new_string .. char\n    end\n  end\n  return new_string\n\
    end", "  local flipped = {}\n  for i = 1, #string do\n    local char = string:sub(i,\
    \ i)\n    if char:match(\"%u\") then\n      flipped[i] = char:lower()\n    elseif\
    \ char:match(\"%l\") then\n      flipped[i] = char:upper()\n    else\n      flipped[i]\
    \ = char\n    end\n  end\n  return table.concat(flipped)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
