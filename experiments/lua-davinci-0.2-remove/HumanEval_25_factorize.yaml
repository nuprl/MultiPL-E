name: HumanEval_25_factorize
language: lua
prompt: "-- Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n-- Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n-- Input number should be equal\
  \ to the product of all factors\nlocal function factorize(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
  \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2, 2})\n\
  \    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
  \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
  \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
  \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n\
    \ % d == 0 do\n\t\t\ttable.insert(factors, d)\n\t\t\tn = n / d\n\t\tend\n\t\t\
    d = d + 1\n\tend\n\treturn factors\nend", "    local factors = {}\n    local d\
    \ = 2\n    while n > 1 do\n        while n % d == 0 do\n            table.insert(factors,\
    \ d)\n            n = n / d\n        end\n        d = d + 1\n    end\n    return\
    \ factors\nend", "\tlocal factors = {}\n\tlocal i = 2\n\twhile n > 1 do\n\t\t\
    if n % i == 0 then\n\t\t\ttable.insert(factors, i)\n\t\t\tn = n / i\n\t\telse\n\
    \t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\nend", "\tlocal factors = {}\n\
    \tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\tfactors[#factors\
    \ + 1] = d\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\n\
    end", "\tlocal factors = {}\n\tlocal i = 2\n\twhile n > 1 do\n\t\tif n % i ==\
    \ 0 then\n\t\t\ttable.insert(factors, i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti =\
    \ i + 1\n\t\tend\n\tend\n\treturn factors\nend", "\tlocal factors = {}\n\tlocal\
    \ i = 2\n\twhile n > 1 do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(factors,\
    \ i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\n\
    end", "    local factors = {}\n    local divisor = 2\n    while n > 1 do\n   \
    \     while n % divisor == 0 do\n            table.insert(factors, divisor)\n\
    \            n = n / divisor\n        end\n        divisor = divisor + 1\n   \
    \ end\n    return factors\nend", "    local factors = {}\n    local d = 2\n  \
    \  while n > 1 do\n        while n % d == 0 do\n            factors[#factors +\
    \ 1] = d\n            n = n / d\n        end\n        d = d + 1\n    end\n   \
    \ return factors\nend", "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\
    \t\twhile n % d == 0 do\n\t\t\tfactors[#factors + 1] = d\n\t\t\tn = n / d\n\t\t\
    end\n\t\td = d + 1\n\tend\n\treturn factors\nend", "\tlocal factors = {}\n\tlocal\
    \ i = 2\n\twhile n > 1 do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(factors,\
    \ i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\n\
    end", "    local factors = {}\n    local d = 2\n    while n > 1 do\n        while\
    \ n % d == 0 do\n            factors[#factors + 1] = d\n            n = n / d\n\
    \        end\n        d = d + 1\n    end\n    return factors\nend", "    local\
    \ factors = {}\n    local i = 2\n    while n > 1 do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return factors\nend", "\tlocal\
    \ factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\
    \tfactors[#factors + 1] = d\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\t\
    return factors\nend", "    local factors = {}\n    local i = 2\n    while n >\
    \ 1 do\n        while n % i == 0 do\n            n = n / i\n            table.insert(factors,\
    \ i)\n        end\n        i = i + 1\n    end\n    return factors\nend", "   \
    \ local factors = {}\n    local d = 2\n    while n > 1 do\n        while n % d\
    \ == 0 do\n            table.insert(factors, d)\n            n = n / d\n     \
    \   end\n        d = d + 1\n    end\n    return factors\nend", "    local factors\
    \ = {}\n    local d = 2\n    while n > 1 do\n        while n % d == 0 do\n   \
    \         factors[#factors + 1] = d\n            n = n / d\n        end\n    \
    \    d = d + 1\n    end\n    return factors\nend", "\tlocal factors = {}\n\tlocal\
    \ d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\ttable.insert(factors,\
    \ d)\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend",
  "  local factors = {}\n  local i = 2\n  while n > 1 do\n    if n % i == 0 then\n\
    \      table.insert(factors, i)\n      n = n / i\n    else\n      i = i + 1\n\
    \    end\n  end\n  return factors\nend", "\tlocal factors = {}\n\tlocal i = 2\n\
    \twhile n > 1 do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\t\ttable.insert(factors,\
    \ i)\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\nend", "   \
    \ local factors = {}\n    local d = 2\n    while n > 1 do\n        while n % d\
    \ == 0 do\n            table.insert(factors, d)\n            n = n / d\n     \
    \   end\n        d = d + 1\n    end\n    return factors\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
