language: lua
name: HumanEval_66_digitSum
results:
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = c:byte()\n    if n >= 65 and n <= 90 then\n      sum = sum\
    \ + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        local n = c:byte()\n        if n >= 65 and n <= 90\
    \ then\n            sum = sum + n\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = c:byte()\n    if n >= 65 and n <= 90 then\n      sum = sum\
    \ + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = c:byte()\n    if n >= 65 and n <= 90 then\n      sum = sum\
    \ + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:match('%u') then\n            sum = sum + c:byte()\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        local n = c:byte()\n        if n >= 65 and n <= 90\
    \ then\n            sum = sum + n\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = tonumber(c)\n    if n then\n      sum = sum + n\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg11ls9s.lua:21:\
    \ expected: 131, actual: 0\nstack traceback:\n\t/tmp/tmpeg11ls9s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = c:byte()\n    if n >= 65 and n <= 90 then\n      sum = sum\
    \ + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        local n = c:byte()\n        if n >= 65 and n <= 90\
    \ then\n            sum = sum + n\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:match('%u') then\n            sum = sum + c:byte()\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,\
    \ i)\n\t\tif c:byte() >= 65 and c:byte() <= 90 then\n\t\t\tsum = sum + c:byte()\n\
    \t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = c:byte()\n    if n >= 65 and n <= 90 then\n      sum = sum\
    \ + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = tonumber(c)\n    if n then\n      sum = sum + n\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg11ls9s.lua:21:\
    \ expected: 131, actual: 0\nstack traceback:\n\t/tmp/tmpeg11ls9s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:match('%u') then\n            sum = sum + c:byte()\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = tonumber(c)\n    if n then\n      sum = sum + n\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg11ls9s.lua:21:\
    \ expected: 131, actual: 0\nstack traceback:\n\t/tmp/tmpeg11ls9s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = tonumber(c)\n    if n then\n      sum = sum + n\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg11ls9s.lua:21:\
    \ expected: 131, actual: 0\nstack traceback:\n\t/tmp/tmpeg11ls9s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        local n = c:byte()\n        if n >= 65 and n <= 90\
    \ then\n            sum = sum + n\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = tonumber(c)\n    if n then\n      sum = sum + n\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg11ls9s.lua:21:\
    \ expected: 131, actual: 0\nstack traceback:\n\t/tmp/tmpeg11ls9s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = tonumber(c)\n    if n then\n      sum = sum + n\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg11ls9s.lua:21:\
    \ expected: 131, actual: 0\nstack traceback:\n\t/tmp/tmpeg11ls9s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ code = string.byte(s, i)\n        if code >= 65 and code <= 90 then\n      \
    \      sum = sum + code\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = c:byte()\n    if n >= 65 and n <= 90 then\n      sum = sum\
    \ + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        local n = c:byte()\n        if n >= 65 and n <= 90\
    \ then\n            sum = sum + n\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:match('%u') then\n            sum = sum + c:byte()\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + string.byte(c)\n    end\n \
    \ end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        local n = c:byte()\n        if n >= 65 and n <= 90\
    \ then\n            sum = sum + n\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = c:byte()\n    if n >= 65 and n <= 90 then\n      sum = sum\
    \ + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = c:byte()\n    if n >= 65 and n <= 90 then\n      sum = sum\
    \ + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = tonumber(c)\n    if n then\n      sum = sum + n\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg11ls9s.lua:21:\
    \ expected: 131, actual: 0\nstack traceback:\n\t/tmp/tmpeg11ls9s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ char = s:sub(i, i)\n        if char:match('%u') then\n            sum = sum\
    \ + string.byte(char)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local n = tonumber(c)\n    if n then\n      sum = sum + n\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg11ls9s.lua:21:\
    \ expected: 131, actual: 0\nstack traceback:\n\t/tmp/tmpeg11ls9s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        local n = c:byte()\n        if n >= 65 and n <= 90\
    \ then\n            sum = sum + n\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:byte() >= 65 and c:byte() <= 90 then\n       \
    \     sum = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\nlocal\
    \ function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%u') then\n      sum = sum + string.byte(c)\n    end\n \
    \ end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
