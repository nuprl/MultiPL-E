name: HumanEval_19_sort_numbers
language: lua
prompt: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to\
  \ largest\nlocal function sort_numbers(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
  \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
  \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five\
  \ seven eight nine')\n    lu.assertEquals(candidate('six five four three two one\
  \ zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local numeral_map = {\n    zero = 0,\n    one = 1,\n    two = 2,\n\
    \    three = 3,\n    four = 4,\n    five = 5,\n    six = 6,\n    seven = 7,\n\
    \    eight = 8,\n    nine = 9\n  }\n  local numeral_list = {}\n  for numeral in\
    \ numbers:gmatch(\"%S+\") do\n    if numeral_map[numeral] then\n      table.insert(numeral_list,\
    \ numeral_map[numeral])\n    end\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = {}\n  for _, numeral in ipairs(numeral_list) do\n    for numeral_name, numeral_value\
    \ in pairs(numeral_map) do\n      if numeral_value == numeral then\n        table.insert(sorted_numbers,\
    \ numeral_name)\n      end\n    end\n  end\n  return table.concat(sorted_numbers,\
    \ \" \")\nend", "    local nums = {}\n    for num in numbers:gmatch(\"%w+\") do\n\
    \        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return table.concat(nums,\
    \ \" \")\nend", "  local numeral_to_number = {\n    zero = 0,\n    one = 1,\n\
    \    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six = 6,\n  \
    \  seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local numbers_table = {}\n\
    \  for number in numbers:gmatch(\"%S+\") do\n    table.insert(numbers_table, numeral_to_number[number])\n\
    \  end\n  table.sort(numbers_table)\n  local numbers_sorted = {}\n  for _, number\
    \ in ipairs(numbers_table) do\n    for numeral, numeral_number in pairs(numeral_to_number)\
    \ do\n      if number == numeral_number then\n        table.insert(numbers_sorted,\
    \ numeral)\n      end\n    end\n  end\n  return table.concat(numbers_sorted, \"\
    \ \")\nend", "  local numeral_map = {\n    zero = 0,\n    one = 1,\n    two =\
    \ 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six = 6,\n    seven =\
    \ 7,\n    eight = 8,\n    nine = 9\n  }\n  local numeral_list = {}\n  for numeral\
    \ in numbers:gmatch(\"%S+\") do\n    table.insert(numeral_list, numeral_map[numeral])\n\
    \  end\n  table.sort(numeral_list)\n  local sorted_numbers = {}\n  for _, numeral\
    \ in ipairs(numeral_list) do\n    for name, value in pairs(numeral_map) do\n \
    \     if value == numeral then\n        table.insert(sorted_numbers, name)\n \
    \     end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend",
  "    local numeral_map = {\n        zero = 0,\n        one = 1,\n        two = 2,\n\
    \        three = 3,\n        four = 4,\n        five = 5,\n        six = 6,\n\
    \        seven = 7,\n        eight = 8,\n        nine = 9\n    }\n    local nums\
    \ = {}\n    for num in numbers:gmatch(\"%S+\") do\n        table.insert(nums,\
    \ numeral_map[num])\n    end\n    table.sort(nums)\n    local sorted_numbers =\
    \ {}\n    for _, num in ipairs(nums) do\n        for numeral, value in pairs(numeral_map)\
    \ do\n            if value == num then\n                table.insert(sorted_numbers,\
    \ numeral)\n                break\n            end\n        end\n    end\n   \
    \ return table.concat(sorted_numbers, \" \")\nend", "\tlocal numeral_map = {\n\
    \t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\t\
    five = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\t\
    local nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\tlocal numeral =\
    \ numeral_map[num]\n\t\tif numeral then\n\t\t\ttable.insert(nums, numeral)\n\t\
    \tend\n\tend\n\ttable.sort(nums)\n\tlocal numeral_list = {}\n\tfor _, num in ipairs(nums)\
    \ do\n\t\ttable.insert(numeral_list, num)\n\tend\n\treturn table.concat(numeral_list,\
    \ \" \")\nend", "    local numeral_map = {\n        zero = 0,\n        one = 1,\n\
    \        two = 2,\n        three = 3,\n        four = 4,\n        five = 5,\n\
    \        six = 6,\n        seven = 7,\n        eight = 8,\n        nine = 9\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch(\"%S+\"\
    ) do\n        table.insert(numbers_table, numeral_map[number])\n    end\n    table.sort(numbers_table)\n\
    \    local sorted_numbers = {}\n    for _, number in ipairs(numbers_table) do\n\
    \        for numeral, numeral_number in pairs(numeral_map) do\n            if\
    \ number == numeral_number then\n                table.insert(sorted_numbers,\
    \ numeral)\n            end\n        end\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend", "\tlocal numeral_map = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo\
    \ = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive = 5,\n\t\tsix = 6,\n\t\tseven\
    \ = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal numeral_list = {}\n\tfor numeral\
    \ in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(numeral_list, numeral_map[numeral])\n\
    \tend\n\ttable.sort(numeral_list)\n\tlocal sorted_numbers = {}\n\tfor _, numeral\
    \ in ipairs(numeral_list) do\n\t\tfor k, v in pairs(numeral_map) do\n\t\t\tif\
    \ v == numeral then\n\t\t\t\ttable.insert(sorted_numbers, k)\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn table.concat(sorted_numbers, \" \")\nend", " \
    \ local num_map = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n\
    \    four = 4,\n    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n\
    \    nine = 9\n  }\n  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n\
    \    nums[#nums + 1] = num_map[num]\n  end\n  table.sort(nums)\n  local result\
    \ = {}\n  for _, num in ipairs(nums) do\n    for num_str, num_val in pairs(num_map)\
    \ do\n      if num == num_val then\n        result[#result + 1] = num_str\n  \
    \      break\n      end\n    end\n  end\n  return table.concat(result, \" \")\n\
    end", "    local numeral_to_number = {\n        zero = 0,\n        one = 1,\n\
    \        two = 2,\n        three = 3,\n        four = 4,\n        five = 5,\n\
    \        six = 6,\n        seven = 7,\n        eight = 8,\n        nine = 9\n\
    \    }\n    local number_to_numeral = {\n        [0] = 'zero',\n        [1] =\
    \ 'one',\n        [2] = 'two',\n        [3] = 'three',\n        [4] = 'four',\n\
    \        [5] = 'five',\n        [6] = 'six',\n        [7] = 'seven',\n       \
    \ [8] = 'eight',\n        [9] = 'nine'\n    }\n    local numbers_list = {}\n \
    \   for number in numbers:gmatch('%S+') do\n        table.insert(numbers_list,\
    \ numeral_to_number[number])\n    end\n    table.sort(numbers_list)\n    local\
    \ sorted_numbers = {}\n    for _, number in ipairs(numbers_list) do\n        table.insert(sorted_numbers,\
    \ number_to_numeral[number])\n    end\n    return table.concat(sorted_numbers,\
    \ ' ')\nend", "\tlocal numeral_map = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo =\
    \ 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive = 5,\n\t\tsix = 6,\n\t\tseven =\
    \ 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal numbers_table = {}\n\tfor number\
    \ in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(numbers_table, numeral_map[number])\n\
    \tend\n\ttable.sort(numbers_table)\n\tlocal sorted_numbers = {}\n\tfor _, number\
    \ in ipairs(numbers_table) do\n\t\ttable.insert(sorted_numbers, number)\n\tend\n\
    \treturn table.concat(sorted_numbers, \" \")\nend", "  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    table.insert(numeral_list,\
    \ numeral_map[numeral])\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = {}\n  for _, numeral in ipairs(numeral_list) do\n    for name, value in pairs(numeral_map)\
    \ do\n      if value == numeral then\n        table.insert(sorted_numbers, name)\n\
    \      end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend",
  "    local numeral_map = {\n        zero = 0,\n        one = 1,\n        two = 2,\n\
    \        three = 3,\n        four = 4,\n        five = 5,\n        six = 6,\n\
    \        seven = 7,\n        eight = 8,\n        nine = 9\n    }\n    local nums\
    \ = {}\n    for num in numbers:gmatch(\"%S+\") do\n        table.insert(nums,\
    \ numeral_map[num])\n    end\n    table.sort(nums)\n    local result = {}\n  \
    \  for _, num in ipairs(nums) do\n        for numeral, value in pairs(numeral_map)\
    \ do\n            if value == num then\n                table.insert(result, numeral)\n\
    \                break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend", "  local numeral_to_number = {\n    zero = 0,\n    one = 1,\n\
    \    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six = 6,\n  \
    \  seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local number_to_numeral =\
    \ {\n    [0] = 'zero',\n    [1] = 'one',\n    [2] = 'two',\n    [3] = 'three',\n\
    \    [4] = 'four',\n    [5] = 'five',\n    [6] = 'six',\n    [7] = 'seven',\n\
    \    [8] = 'eight',\n    [9] = 'nine'\n  }\n  local numbers_table = {}\n  for\
    \ number in numbers:gmatch('%S+') do\n    table.insert(numbers_table, numeral_to_number[number])\n\
    \  end\n  table.sort(numbers_table)\n  local sorted_numbers = {}\n  for _, number\
    \ in ipairs(numbers_table) do\n    table.insert(sorted_numbers, number_to_numeral[number])\n\
    \  end\n  return table.concat(sorted_numbers, ' ')\nend", "    local numeral_map\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for\
    \ num in numbers:gmatch(\"%w+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        for numeral, value in pairs(numeral_map) do\n            if value\
    \ == num then\n                table.insert(result, numeral)\n               \
    \ break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend", "\tlocal numeral_to_number = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\
    \ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive = 5,\n\t\tsix = 6,\n\t\tseven\
    \ = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal number_to_numeral = {\n\t\t\
    [0] = 'zero',\n\t\t[1] = 'one',\n\t\t[2] = 'two',\n\t\t[3] = 'three',\n\t\t[4]\
    \ = 'four',\n\t\t[5] = 'five',\n\t\t[6] = 'six',\n\t\t[7] = 'seven',\n\t\t[8]\
    \ = 'eight',\n\t\t[9] = 'nine'\n\t}\n\tlocal numbers_table = {}\n\tfor number\
    \ in numbers:gmatch('%S+') do\n\t\ttable.insert(numbers_table, numeral_to_number[number])\n\
    \tend\n\ttable.sort(numbers_table)\n\tlocal sorted_numbers = {}\n\tfor _, number\
    \ in ipairs(numbers_table) do\n\t\ttable.insert(sorted_numbers, number_to_numeral[number])\n\
    \tend\n\treturn table.concat(sorted_numbers, ' ')\nend", "\tlocal nums = {}\n\t\
    for num in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, num)\n\tend\n\t\
    table.sort(nums)\n\treturn table.concat(nums, \" \")\nend", "\tlocal numeral_map\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums,\
    \ numeral_map[num])\n\tend\n\ttable.sort(nums)\n\tlocal sorted_numbers = {}\n\t\
    for _, num in ipairs(nums) do\n\t\tfor numeral, value in pairs(numeral_map) do\n\
    \t\t\tif value == num then\n\t\t\t\ttable.insert(sorted_numbers, numeral)\n\t\t\
    \t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn table.concat(sorted_numbers, \"\
    \ \")\nend", "  local numeral_to_number = {\n    zero = 0,\n    one = 1,\n   \
    \ two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six = 6,\n    seven\
    \ = 7,\n    eight = 8,\n    nine = 9\n  }\n  local number_to_numeral = {\n   \
    \ [0] = 'zero',\n    [1] = 'one',\n    [2] = 'two',\n    [3] = 'three',\n    [4]\
    \ = 'four',\n    [5] = 'five',\n    [6] = 'six',\n    [7] = 'seven',\n    [8]\
    \ = 'eight',\n    [9] = 'nine'\n  }\n  local numbers_table = {}\n  for numeral\
    \ in numbers:gmatch('%w+') do\n    table.insert(numbers_table, numeral_to_number[numeral])\n\
    \  end\n  table.sort(numbers_table)\n  local sorted_numbers = {}\n  for _, number\
    \ in ipairs(numbers_table) do\n    table.insert(sorted_numbers, number_to_numeral[number])\n\
    \  end\n  return table.concat(sorted_numbers, ' ')\nend", "    local numeral_map\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for\
    \ num in numbers:gmatch(\"%S+\") do\n        local n = numeral_map[num]\n    \
    \    if n then\n            table.insert(nums, n)\n        end\n    end\n    table.sort(nums)\n\
    \    local numeral_map_inv = {}\n    for k, v in pairs(numeral_map) do\n     \
    \   numeral_map_inv[v] = k\n    end\n    local sorted_numbers = {}\n    for _,\
    \ n in ipairs(nums) do\n        table.insert(sorted_numbers, numeral_map_inv[n])\n\
    \    end\n    return table.concat(sorted_numbers, \" \")\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
