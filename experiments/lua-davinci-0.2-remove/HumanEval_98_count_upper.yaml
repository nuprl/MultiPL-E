name: HumanEval_98_count_upper
language: lua
prompt: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
  -- For example:\nlocal function count_upper(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
  \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
  \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
  \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
  \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i,\
    \ i):match(\"[AEIOU]\") then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    local count = 0\n    for i = 1, #s do\n        if i % 2 ==\
    \ 0 and s:sub(i, i):match(\"[AEIOU]\") then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend", "    local count = 0\n    for i\
    \ = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match(\"[AEIOU]\") then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ count = 0\n  for i=1,#s do\n    if i%2==0 and s:sub(i,i):match(\"[AEIOU]\")\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match(\"\
    [AEIOU]\") then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    local count = 0\n    for i = 1, #s do\n        if i % 2 ==\
    \ 0 and s:sub(i, i):match('[AEIOU]') then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", "  local count = 0\n  for i = 1, #s\
    \ do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]') then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for i = 1,\
    \ #s do\n    if i % 2 == 0 and s:sub(i, i):match(\"[AEIOU]\") then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local count = 0\n  \
    \  for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match(\"[AEIOU]\")\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match(\"\
    [AEIOU]\") then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match(\"[AEIOU]\"\
    ) then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if s:sub(i, i):match('[AEIOU]') and\
    \ i % 2 == 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i,\
    \ i):match(\"[AEIOU]\") then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
