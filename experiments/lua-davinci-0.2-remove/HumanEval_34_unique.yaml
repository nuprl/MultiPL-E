name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a list\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r,\
    \ v) then\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "\tlocal\
    \ s = {}\n\tfor _, v in ipairs(l) do\n\t\ts[v] = true\n\tend\n\tlocal r = {}\n\
    \tfor k in pairs(s) do\n\t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend", "    local s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n\
    \    end\n    local r = {}\n    for k in pairs(s) do\n        r[#r+1] = k\n  \
    \  end\n    table.sort(r)\n    return r\nend", "    local r = {}\n    for _, v\
    \ in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "\tlocal r = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\tif not table.contains(r, v) then\n\t\t\ttable.insert(r, v)\n\
    \t\tend\n\tend\n\treturn r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\
    \t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\t\
    end\n\treturn r\nend", "    local s = {}\n    for _, v in ipairs(l) do\n     \
    \   s[v] = true\n    end\n    local r = {}\n    for k in pairs(s) do\n       \
    \ r[#r+1] = k\n    end\n    table.sort(r)\n    return r\nend", "    local res\
    \ = {}\n    local seen = {}\n    for _, v in ipairs(l) do\n        if not seen[v]\
    \ then\n            table.insert(res, v)\n            seen[v] = true\n       \
    \ end\n    end\n    return res\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "    local s = {}\n    for _, v in ipairs(l) do\n\
    \        s[v] = true\n    end\n    local r = {}\n    for k in pairs(s) do\n  \
    \      r[#r+1] = k\n    end\n    table.sort(r)\n    return r\nend", "\tlocal s\
    \ = {}\n\tfor _, v in ipairs(l) do\n\t\ts[v] = true\n\tend\n\tlocal r = {}\n\t\
    for k in pairs(s) do\n\t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend", "    local u = {}\n    for _, v in ipairs(l) do\n        if not contains(u,\
    \ v) then\n            table.insert(u, v)\n        end\n    end\n    return u\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n \
    \   end\n    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "  local s = {}\n  for _,\
    \ v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n  for k in pairs(s)\
    \ do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "\tlocal\
    \ r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\
    \t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "    local res = {}\n\
    \    for _, v in ipairs(l) do\n        if not contains(res, v) then\n        \
    \    table.insert(res, v)\n        end\n    end\n    return res\nend", "  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n\
    \  for k in pairs(s) do\n    r[#r+1] = k\n  end\n  table.sort(r)\n  return r\n\
    end", "\tlocal res = {}\n\tlocal seen = {}\n\tfor _,v in ipairs(l) do\n\t\tif\
    \ not seen[v] then\n\t\t\ttable.insert(res, v)\n\t\t\tseen[v] = true\n\t\tend\n\
    \tend\n\treturn res\nend", "  local res = {}\n  for _, v in ipairs(l) do\n   \
    \ if not contains(res, v) then\n      table.insert(res, v)\n    end\n  end\n \
    \ return res\nend", "    local n = {}\n    for _, v in ipairs(l) do\n        n[v]\
    \ = true\n    end\n    local r = {}\n    for k, _ in pairs(n) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
