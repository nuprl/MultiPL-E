name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a list\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local s = {}\n  for _,v in ipairs(l) do\n    s[v] = true\n  end\n\
    \  local r = {}\n  for k,_ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n\
    \  return r\nend", "  local s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n\
    \  end\n  local r = {}\n  for k in pairs(s) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "\tlocal s = {}\n\tfor _,v in ipairs(l) do\n\
    \t\ts[v] = true\n\tend\n\tlocal r = {}\n\tfor k,_ in pairs(s) do\n\t\ttable.insert(r,\
    \ k)\n\tend\n\ttable.sort(r)\n\treturn r\nend", "\tlocal s = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\ts[v] = true\n\tend\n\tlocal r = {}\n\tfor k in pairs(s) do\n\
    \t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\treturn r\nend", "  local r =\
    \ {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n\
    \        if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\t\
    if not contains(r, v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn\
    \ r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r,\
    \ v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "\tlocal\
    \ r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\
    \t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "  local s = {}\n\
    \  for _,v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n  for k,_\
    \ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\n\
    end", "    local res = {}\n    for _, v in ipairs(l) do\n        if not contains(res,\
    \ v) then\n            table.insert(res, v)\n        end\n    end\n    return\
    \ res\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local r = {}\n\
    \    for _, v in ipairs(l) do\n        if not contains(r, v) then\n          \
    \  table.insert(r, v)\n        end\n    end\n    return r\nend", "  local u =\
    \ {}\n  for _, v in ipairs(l) do\n    if not u[v] then\n      u[v] = true\n  \
    \    table.insert(u, v)\n    end\n  end\n  return u\nend", "  local r = {}\n \
    \ for _, v in ipairs(l) do\n    if not contains(r, v) then\n      r[#r+1] = v\n\
    \    end\n  end\n  return r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\
    \t\tif not contains(r, v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn\
    \ r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not table.contains(r,\
    \ v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "  local res = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(res, v) then\n      table.insert(res, v)\n    end\n\
    \  end\n  return res\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    if\
    \ not u[v] then\n      u[v] = true\n      table.insert(u, v)\n    end\n  end\n\
    \  return u\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v]\
    \ then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn\
    \ r\nend", "    local s = {}\n    for _,v in ipairs(l) do\n        s[v] = true\n\
    \    end\n    local r = {}\n    for k,_ in pairs(s) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "    local r = {}\n    for\
    \ _, v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "  local s = {}\n  for _,v in\
    \ ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n  for k,_ in pairs(s)\
    \ do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "\tlocal\
    \ s = {}\n\tfor _,v in ipairs(l) do\n\t\ts[v] = true\n\tend\n\tlocal r = {}\n\t\
    for k,_ in pairs(s) do\n\t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\
    \t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", "\t\
    local r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\
    \ttable.insert(r, v)\n\t\tend\n\tend\n\ttable.sort(r)\n\treturn r\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "\tlocal t = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tt[v] = true\n\tend\n\tlocal i = 0\n\treturn function()\n\t\ti = i +\
    \ 1\n\t\tlocal k = next(t, i)\n\t\tif k then\n\t\t\treturn k\n\t\tend\n\tend\n\
    end", "\tlocal ret = {}\n\tfor _, v in ipairs(l) do\n\t\tif not table.contains(ret,\
    \ v) then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\nend", " \
    \   local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n\
    \    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n \
    \   end\n    table.sort(r)\n    return r\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    if not t[v] then\n      t[v] = true\n      table.insert(t,\
    \ v)\n    end\n  end\n  return t\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "  local s = {}\n  for _,v in ipairs(l) do\n   \
    \ s[v] = true\n  end\n  local r = {}\n  for k,_ in pairs(s) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "    local s = {}\n    for _,\
    \ v in ipairs(l) do\n        s[v] = true\n    end\n    local r = {}\n    for k\
    \ in pairs(s) do\n        r[#r+1] = k\n    end\n    table.sort(r)\n    return\
    \ r\nend", "    local seen = {}\n    local out = {}\n    for _,v in ipairs(l)\
    \ do\n        if not seen[v] then\n            table.insert(out, v)\n        \
    \    seen[v] = true\n        end\n    end\n    return out\nend", "\tlocal r =\
    \ {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\
    \ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "    local r = {}\n  \
    \  for _, v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "  local res = {}\n  for _, v\
    \ in ipairs(l) do\n    if not contains(res, v) then\n      table.insert(res, v)\n\
    \    end\n  end\n  return res\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\t\
    if not t[v] then\n\t\t\tt[v] = true\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\
    \treturn t\nend", "    local res = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(res, v) then\n            table.insert(res, v)\n        end\n \
    \   end\n    return res\nend", "\tlocal hash = {}\n\tlocal res = {}\n\tfor _,v\
    \ in ipairs(l) do\n\t\tif not hash[v] then\n\t\t\tres[#res+1] = v\n\t\t\thash[v]\
    \ = true\n\t\tend\n\tend\n\treturn res\nend", "    local s = {}\n    for _, v\
    \ in ipairs(l) do\n        s[v] = true\n    end\n    local r = {}\n    for k in\
    \ pairs(s) do\n        r[#r+1] = k\n    end\n    table.sort(r)\n    return r\n\
    end", "  local s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local\
    \ r = {}\n  for k in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n\
    \  return r\nend", "    local res = {}\n    for _, v in ipairs(l) do\n       \
    \ if not contains(res, v) then\n            table.insert(res, v)\n        end\n\
    \    end\n    return res\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\
    \tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\
    \treturn r\nend", "\tlocal r = {}\n\tfor _,v in ipairs(l) do\n\t\tif not contains(r,\
    \ v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "\tlocal\
    \ r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\
    \treturn r\nend", "    local res = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(res, v) then\n            table.insert(res, v)\n        end\n \
    \   end\n    return res\nend", "  local r = {}\n  for _, v in ipairs(l) do\n \
    \   if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n  return\
    \ r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\
    \t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend",
  "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n  \
    \    table.insert(r, v)\n    end\n  end\n  return r\nend", "\tlocal r = {}\n\t\
    for _, v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not r[v] then\n\t\t\ttable.insert(r, v)\n\t\t\tr[v] = true\n\t\t\
    end\n\tend\n\treturn r\nend", "    local res = {}\n    for _, v in ipairs(l) do\n\
    \        if not contains(res, v) then\n            table.insert(res, v)\n    \
    \    end\n    end\n    return res\nend", "\tlocal ret = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not contains(ret, v) then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\t\
    end\n\treturn ret\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not\
    \ contains(r, v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\n\
    end", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[v] = true\n\tend\n\t\
    local r = {}\n\tfor k, _ in pairs(t) do\n\t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\
    \treturn r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r,\
    \ v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "  local\
    \ s = {}\n  for _,v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n\
    \  for k,_ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return\
    \ r\nend", "    local s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n\
    \    end\n    local r = {}\n    for k in pairs(s) do\n        r[#r+1] = k\n  \
    \  end\n    table.sort(r)\n    return r\nend", "\tlocal r = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\
    \treturn r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not r[v]\
    \ then\n      r[v] = true\n      table.insert(r, v)\n    end\n  end\n  return\
    \ r\nend", "  local res = {}\n  for _, v in ipairs(l) do\n    if not contains(res,\
    \ v) then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return\
    \ res\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\
    \t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend",
  "  local s = {}\n  for _,v in ipairs(l) do\n    s[v] = true\n  end\n  local r =\
    \ {}\n  for k,_ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n\
    \  return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r,\
    \ v) then\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "  local\
    \ r = {}\n  for _,v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend", "  local r = {}\n\
    \  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "    local res = {}\n    for _, v in ipairs(l) do\n\
    \        if not contains(res, v) then\n            table.insert(res, v)\n    \
    \    end\n    end\n    return res\nend", "  local r = {}\n  for _,v in ipairs(l)\
    \ do\n    if not r[v] then\n      r[v] = true\n      table.insert(r, v)\n    end\n\
    \  end\n  return r\nend", "    local res = {}\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if not seen[v] then\n            res[#res+1] = v\n\
    \            seen[v] = true\n        end\n    end\n    return res\nend", "\tlocal\
    \ r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend", "  local hash = {}\n  local res = {}\n\
    \  for _, v in ipairs(l) do\n    if not hash[v] then\n      res[#res+1] = v\n\
    \      hash[v] = true\n    end\n  end\n  return res\nend", "  local u = {}\n \
    \ for _, v in ipairs(l) do\n    if not u[v] then\n      u[v] = true\n      table.insert(u,\
    \ v)\n    end\n  end\n  return u\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\t\
    if not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\
    \treturn r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "  local res = {}\n  for _, v in ipairs(l) do\n    if not\
    \ contains(res, v) then\n      table.insert(res, v)\n    end\n  end\n  return\
    \ res\nend", "    local res = {}\n    for _, v in ipairs(l) do\n        if not\
    \ contains(res, v) then\n            table.insert(res, v)\n        end\n    end\n\
    \    return res\nend", "    local r = {}\n    for _, v in ipairs(l) do\n     \
    \   if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n\
    \        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n\
    \        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", " \
    \ local r = {}\n  for _,v in ipairs(l) do\n    if not contains(r, v) then\n  \
    \    table.insert(r, v)\n    end\n  end\n  return r\nend", "\tlocal r = {}\n\t\
    for _, v in ipairs(l) do\n\t\tif not table.contains(r, v) then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend", "  local s = {}\n  for _, v in ipairs(l)\
    \ do\n    s[v] = true\n  end\n  local r = {}\n  for k in pairs(s) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "\tlocal r = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n\
    \        if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n\
    \        if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "    local s = {}\n    for _, v in ipairs(l) do\n\
    \        s[v] = true\n    end\n    local r = {}\n    for k in pairs(s) do\n  \
    \      r[#r+1] = k\n    end\n    table.sort(r)\n    return r\nend", "\tlocal s\
    \ = {}\n\tfor _, v in ipairs(l) do\n\t\ts[v] = true\n\tend\n\tlocal r = {}\n\t\
    for k in pairs(s) do\n\t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend", "  local s = {}\n  for _,v in ipairs(l) do\n    s[v] = true\n  end\n\
    \  local r = {}\n  for k,_ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n\
    \  return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r,\
    \ v) then\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n\
    \  for k in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return\
    \ r\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    if not u[v] then\n\
    \      u[v] = true\n      table.insert(u, v)\n    end\n  end\n  return u\nend",
  "  local res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n\
    \      table.insert(res, v)\n    end\n  end\n  return res\nend", "\tlocal r =\
    \ {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\ttable.insert(r,\
    \ v)\n\t\t\tr[v] = true\n\t\tend\n\tend\n\treturn r\nend", "\tlocal res = {}\n\
    \tfor _, v in ipairs(l) do\n\t\tif not contains(res, v) then\n\t\t\ttable.insert(res,\
    \ v)\n\t\tend\n\tend\n\treturn res\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "\tlocal s = {}\n\tlocal n = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not s[v] then\n\t\t\tn[#n+1] = v\n\t\t\ts[v] = true\n\t\tend\n\t\
    end\n\treturn n\nend", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[v] =\
    \ true\n\tend\n\tlocal r = {}\n\tfor k, _ in pairs(t) do\n\t\ttable.insert(r,\
    \ k)\n\tend\n\ttable.sort(r)\n\treturn r\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        if not t[v] then\n            t[v] = true\n     \
    \       table.insert(t, v)\n        end\n    end\n    return t\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "\t\
    local r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\
    \t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "    local u = {}\n\
    \    for _, v in ipairs(l) do\n        if not u[v] then\n            u[v] = true\n\
    \            table.insert(u, v)\n        end\n    end\n    return u\nend", "\t\
    local r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\
    \t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "    local res = {}\n\
    \    local seen = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n\
    \            table.insert(res, v)\n            seen[v] = true\n        end\n \
    \   end\n    return res\nend", "  local s = {}\n  for _, v in ipairs(l) do\n \
    \   s[v] = true\n  end\n  local r = {}\n  for k in pairs(s) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "  local r = {}\n  for _, v in\
    \ ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r, v)\n   \
    \ end\n  end\n  return r\nend", "\tlocal s = {}\n\tfor _,v in ipairs(l) do\n\t\
    \ts[v] = true\n\tend\n\tlocal r = {}\n\tfor k,_ in pairs(s) do\n\t\ttable.insert(r,\
    \ k)\n\tend\n\ttable.sort(r)\n\treturn r\nend", "  local r = {}\n  for _, v in\
    \ ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r, v)\n   \
    \ end\n  end\n  return r\nend", "  local t = {}\n  for _, v in ipairs(l) do\n\
    \    if not t[v] then\n      t[v] = true\n      table.insert(t, v)\n    end\n\
    \  end\n  return t\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if\
    \ not r[v] then\n      r[v] = true\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "  local s = {}\n  for _,v in ipairs(l) do\n    s[v] = true\n\
    \  end\n  local r = {}\n  for k,_ in pairs(s) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "  local r = {}\n  for _, v in ipairs(l) do\n\
    \    if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n  return\
    \ r\nend", "\tlocal res = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(res,\
    \ v) then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn res\nend", "\t\
    local u = {}\n\tfor _, v in ipairs(l) do\n\t\tif not u[v] then\n\t\t\tu[v] = true\n\
    \t\t\ttable.insert(u, v)\n\t\tend\n\tend\n\treturn u\nend", "  local s = {}\n\
    \  for _,v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n  for k,_\
    \ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\n\
    end", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "\tlocal res = {}\n\tfor _, v in ipairs(l) do\n\t\tif not res[v] then\n\t\
    \t\tres[v] = true\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn res\n\
    end", "  local s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local\
    \ r = {}\n  for k in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n\
    \  return r\nend", "    local s = {}\n    for _, v in ipairs(l) do\n        s[v]\
    \ = true\n    end\n    local r = {}\n    for k in pairs(s) do\n        r[#r+1]\
    \ = k\n    end\n    table.sort(r)\n    return r\nend", "    local r = {}\n   \
    \ for _, v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local res = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(res, v) then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "    local r = {}\n    for _,v\
    \ in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "\tlocal r = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "  local r = {}\n  for _,v in ipairs(l) do\n   \
    \ if not r[v] then\n      r[v] = true\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "    local s = {}\n    for _, v in ipairs(l) do\n        s[v]\
    \ = true\n    end\n    local r = {}\n    for k in pairs(s) do\n        r[#r+1]\
    \ = k\n    end\n    table.sort(r)\n    return r\nend", "    local s = {}\n   \
    \ for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local r = {}\n \
    \   for k in pairs(s) do\n        r[#r+1] = k\n    end\n    table.sort(r)\n  \
    \  return r\nend", "  local s = {}\n  for _,v in ipairs(l) do\n    s[v] = true\n\
    \  end\n  local r = {}\n  for k,_ in pairs(s) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "  local r = {}\n  for _,v in ipairs(l)\
    \ do\n    if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v]\
    \ then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn\
    \ r\nend", "\tlocal r = {}\n\tfor _,v in ipairs(l) do\n\t\tif not r[v] then\n\t\
    \t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "\t\
    local r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\
    \t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "    local r = {}\n\
    \    for _, v in ipairs(l) do\n        if not contains(r, v) then\n          \
    \  table.insert(r, v)\n        end\n    end\n    return r\nend", "    local r\
    \ = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n   \
    \         table.insert(r, v)\n        end\n    end\n    return r\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "    local r = {}\n    for _,v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "    local res = {}\n    for _, v in ipairs(l) do\n\
    \        if not contains(res, v) then\n            table.insert(res, v)\n    \
    \    end\n    end\n    return res\nend", "  local s = {}\n  for _, v in ipairs(l)\
    \ do\n    s[v] = true\n  end\n  local r = {}\n  for k in pairs(s) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "\tlocal r = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do\n    if not u[v] then\n      u[v] = true\n      table.insert(u, v)\n    end\n\
    \  end\n  return u\nend", "    local r = {}\n    for _, v in ipairs(l) do\n  \
    \      if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\t\
    if not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\
    \treturn r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[v] = true\n\
    \tend\n\tlocal r = {}\n\tfor k, _ in pairs(t) do\n\t\ttable.insert(r, k)\n\tend\n\
    \ttable.sort(r)\n\treturn r\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        if not t[v] then\n            t[v] = true\n            table.insert(t,\
    \ v)\n        end\n    end\n    return t\nend", "  local r = {}\n  for _, v in\
    \ ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r, v)\n   \
    \ end\n  end\n  return r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\
    \tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\
    \treturn r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v]\
    \ then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn\
    \ r\nend", "  local s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n\
    \  local r = {}\n  for k in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n\
    \  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n       \
    \ t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n      \
    \  table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    if not t[v] then\n      t[v] = true\n\
    \      table.insert(t, v)\n    end\n  end\n  return t\nend", "  local s = {}\n\
    \  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n  for k in\
    \ pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend",
  "    local s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n\
    \    local r = {}\n    for k in pairs(s) do\n        r[#r+1] = k\n    end\n  \
    \  table.sort(r)\n    return r\nend", "\tlocal s = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\ts[v] = true\n\tend\n\tlocal r = {}\n\tfor k in pairs(s) do\n\t\ttable.insert(r,\
    \ k)\n\tend\n\ttable.sort(r)\n\treturn r\nend", "\tlocal res = {}\n\tfor _, v\
    \ in ipairs(l) do\n\t\tif not contains(res, v) then\n\t\t\ttable.insert(res, v)\n\
    \t\tend\n\tend\n\treturn res\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\
    \t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\t\
    end\n\treturn r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n     \
    \   if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "    local s = {}\n    for _, v in ipairs(l) do\n\
    \        s[v] = true\n    end\n    local r = {}\n    for k in pairs(s) do\n  \
    \      r[#r+1] = k\n    end\n    table.sort(r)\n    return r\nend", "    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend",
  "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] =\
    \ true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k in pairs(s) do\n        r[#r+1] = k\n    end\n    table.sort(r)\n\
    \    return r\nend", "    local seen = {}\n    local out = {}\n    for _, v in\
    \ ipairs(l) do\n        if not seen[v] then\n            table.insert(out, v)\n\
    \            seen[v] = true\n        end\n    end\n    return out\nend", "   \
    \ local s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n \
    \   local r = {}\n    for k in pairs(s) do\n        r[#r+1] = k\n    end\n   \
    \ table.sort(r)\n    return r\nend", "    local seen = {}\n    local out = {}\n\
    \    for _, v in ipairs(l) do\n        if not seen[v] then\n            table.insert(out,\
    \ v)\n            seen[v] = true\n        end\n    end\n    return out\nend",
  "    local t = {}\n    for _,v in ipairs(l) do\n        t[v] = true\n    end\n \
    \   local r = {}\n    for k,_ in pairs(t) do\n        table.insert(r, k)\n   \
    \ end\n    table.sort(r)\n    return r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "\tlocal r = {}\n\tfor _,v in ipairs(l) do\n\t\t\
    if not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\
    \treturn r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v]\
    \ then\n\t\t\ttable.insert(r, v)\n\t\t\tr[v] = true\n\t\tend\n\tend\n\treturn\
    \ r\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not table.contains(r,\
    \ v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "\tlocal\
    \ r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\
    \t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "    local res = {}\n\
    \    for _, v in ipairs(l) do\n        if not contains(res, v) then\n        \
    \    table.insert(res, v)\n        end\n    end\n    return res\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "\t\
    local t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[v] = true\n\tend\n\tlocal r =\
    \ {}\n\tfor k, _ in pairs(t) do\n\t\tr[#r+1] = k\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend", "\tlocal res = {}\n\tfor _, v in ipairs(l) do\n\t\tif not res[v] then\n\
    \t\t\tres[v] = true\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn res\n\
    end", "  local seen = {}\n  local result = {}\n  for _, v in ipairs(l) do\n  \
    \  if not seen[v] then\n      table.insert(result, v)\n      seen[v] = true\n\
    \    end\n  end\n  return result\nend", "\tlocal res = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not contains(res, v) then\n\t\t\ttable.insert(res, v)\n\t\tend\n\t\
    end\n\treturn res\nend", "  local r = {}\n  for _,v in ipairs(l) do\n    if not\
    \ contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n  return r\n\
    end", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\t\
    r[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        if not t[v] then\n            t[v] = true\n            table.insert(t,\
    \ v)\n        end\n    end\n    return t\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "  local s = {}\n  for _, v in\
    \ ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n  for k in pairs(s) do\n\
    \    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
