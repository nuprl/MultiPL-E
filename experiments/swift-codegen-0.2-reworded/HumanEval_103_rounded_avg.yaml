name: HumanEval_103_rounded_avg
language: swift
prompt: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
  \ n and m, and your task is to compute the\n/// average of the integers from n through\
  \ m (including n and m). \n/// Round the answer to the nearest integer and convert\
  \ that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>>\
  \ rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m:\
  \ 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\"\
  )\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n:\
  \ Int, m: Int) -> Result<String, Int> {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"\
  ))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
  \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
  \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
  0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
  ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
  \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
  \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
  assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
  \ == .success(\"0b101\"))"
completions: ["    if n > m {\n        return Result.failure(-1)\n    }\n    \n  \
    \  var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n\
    \    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.toBinary(n\
    \ + (m - n) / 2))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n\
    \    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))", " \
    \   if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return\
    \ Result.success(avg.toString())", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(fmt.Sprintf(\"0b%b\", n.to_i() + m.to_i()\
    \ / 2))", "    if n > m {\n        return Result.failure(-1)\n    }\n    \n  \
    \  var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n\
    \    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))", " \
    \   if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum\
    \ / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))", "    if n > m\
    \ {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n    for\
    \ i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / 2\n    \n    return Result.success(avg.toString())", "    if\
    \ n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for\
    \ i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m\
    \ - n + 1)\n    \n    return Result.success(avg.to_string())", "    if n > m {\n\
    \        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for\
    \ i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int =\
    \ sum / (m - n + 1)\n    \n    return Result.success(avg.toString())", "    if\
    \ n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int =\
    \ 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / 2\n    \n    return Result.success(avg.toString())", "    if\
    \ n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.to_string(Int.div(Int.add(n,\
    \ m), 2)))", '    return Result.success(avg(n, m))', "    if n > m {\n       \
    \ return Result.failure(-1)\n    }\n    \n    return Result.success(Int(math.Floor(float64(n\
    \ + m) / 2)))", "    if n > m {\n        return Result.failure(-1)\n    }\n  \
    \  \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return\
    \ Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))", "    if n > m {\n \
    \       return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for\
    \ i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int =\
    \ sum / (m - n + 1)\n    \n    return Result.success(avg.toString())", "    if\
    \ n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int\n \
    \   for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum\
    \ / (m - n + 1))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum +=\
    \ i\n    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n +\
    \ 1)))", "    if n > m {\n        return Result.failure(-1)\n    }\n    \n   \
    \ var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n\
    \    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i: Int = n; i <= m; i += 1 {\n        sum += i\n    }\n    \n \
    \   var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return\
    \ Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))", "    if n > m {\n \
    \       return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for\
    \ i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return\
    \ Result.success(avg.toString())", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", (n + m) / 2))", "    if n > m {\n        return Result.failure(-1)\n   \
    \ }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum\
    \ += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", n + m / 2))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return\
    \ Result.success(avg.toString())", '    return Result.success(to_bin(avg(n, m)))',
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(to_bin(n\
    \ + (m - n) / 2))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum +=\
    \ i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int(round(avg(n,\
    \ m))))", "    if n > m {\n        return Result.failure(-1)\n    }\n    \n  \
    \  var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n\
    \    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum Int\n    for i := n; i <= m; i += 1 {\n        sum +=\
    \ i\n    }\n    \n    var avg Int\n    avg = sum / (m - n + 1)\n    \n    return\
    \ Result.success(avg.to_string())", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(int(math.Floor(float64(n + m) / 2)))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.toBinary(Int.avg(n,\
    \ m)))", "    if n > m {\n        return Result.failure(-1)\n    }\n    \n   \
    \ var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n\
    \    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n.rounded_avg(m)))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return\
    \ Result.success(Int.to_string(sum / (m - n + 1)))", "    if n > m {\n       \
    \ return Result.failure(-1)\n    }\n    \n    return Result.success(Int.from_bits(Int.to_bits(n)\
    \ + Int.to_bits(m) / 2))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return\
    \ Result.success(avg.toString())", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(String(Int(n).rounded_avg(m)))", "   \
    \ if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg\
    \ = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())", "  \
    \  if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int(math.Floor(float64(n\
    \ + m) / 2)))", "    if n > m {\n        return Result.failure(-1)\n    }\n  \
    \  \n    return Result.success(Int.toBinary(Int.div(Int.add(n, m), 2)))", '    return
    Result.success(Int.toBinary(n + m) + Int.toBinary(m - n))', "    if n > m {\n\
    \        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for\
    \ i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(to_bin(n\
    \ + (m - n) / 2))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    var sum Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    var avg Int = sum / Int(m - n + 1)\n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum\
    \ / (m - n + 1)\n    \n    return Result.success(avg.to_string())", "    if n\
    \ > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum\
    \ / (m - n + 1))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum +=\
    \ i\n    }\n    \n    return Result.success(Int(sum / (m - n + 1)))", "    if\
    \ n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.toBinary(n\
    \ + (m - n) / 2))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    return Result.success(Int.toBinary(Int.avg(n, m)))", "    if n > m\
    \ {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i :=\
    \ n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m - n\
    \ + 1)\n    \n    return Result.success(avg.to_string())", "    if n > m {\n \
    \       return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", n + m - 1))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    return Result.success(fmt.Sprintf(\"%b\", n.div(m).add(1).div(2)))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg\
    \ = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())", "  \
    \  if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", n.to_i() + (m - n).to_i() / 2))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return\
    \ Result.success(avg.toString())", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum Int\n    for i := n; i <= m; i += 1 {\n        sum +=\
    \ i\n    }\n    \n    return Result.success(sum.to_string())", "    if n > m {\n\
    \        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", n + m / 2))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum +=\
    \ i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())",
  '    return Result.success(String.fromCharCode(n.to_i() + m.to_i() / 2))', "   \
    \ if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg\
    \ = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())", "   \
    \ if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", (n + m) / 2))", "    if n > m {\n        return Result.failure(-1)\n   \
    \ }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return\
    \ Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))", "    if n > m {\n \
    \       return Result.failure(-1)\n    }\n    \n    var sum = 0\n    for i :=\
    \ n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m)\
    \ + 1).to_string())", "    if n > m {\n        return Result.failure(-1)\n   \
    \ }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum\
    \ += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", n.to_i() + (m.to_i() - n.to_i()) / 2))", "    if n > m {\n        return\
    \ Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"0b%b\"\
    , n.to_int() + m.to_int() / 2))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n + m - 1))", "  \
    \  if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(String(Int(n).to_i()\
    \ + Int(m).to_i()).to_s())", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i()\
    \ / 2))", "    if n > m {\n        return Result.failure(-1)\n    }\n    \n  \
    \  return Result.success(int_to_bin(n + m) + \"0b\")", "    if n > m {\n     \
    \   return Result.failure(-1)\n    }\n    \n    var sum Int = 0\n    for i :=\
    \ n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum\
    \ / (m - n + 1))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    return Result.success(int_to_bin(n + (m - n) / 2))", '    return Result.success(String.fromCharCode(n
    + m) + String.fromCharCode(n - m))', "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", n.to_int() - m.to_int()))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / 2\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    return Result.success(fmt.Sprintf(\"\
    %b\", n.rounded_avg(m)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(Int(math.Floor(float64(n + m) / 2)))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", n.to_i() + (m.to_i() - n.to_i()) / 2))", "    if n > m {\n        return\
    \ Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i := n; i <=\
    \ m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum\
    \ / (m - n + 1))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    var sum = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n \
    \   }\n    \n    var avg = sum / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / 2\n    \n    return Result.success(avg.to_s(2))", "    if n\
    \ > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.to_string(Int.div(Int.add(n,\
    \ m), 2)))", '    return Result.success(avg(n, m))', "    if n > m {\n       \
    \ return Result.failure(-1)\n    }\n    \n    return Result.success(to_bin(n +\
    \ m) / 2)", "    if n > m {\n        return Result.failure(-1)\n    }\n    \n\
    \    return Result.success(Int(math.Floor(float64(n + m) / 2)))", "    if n >\
    \ m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for i\
    \ := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return\
    \ Result.success(avg.to_s(2))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return\
    \ Result.success(avg.toString())", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(to_bin(n\
    \ + m) / 2)", "    if n > m {\n        return Result.failure(-1)\n    }\n    \n\
    \    var sum Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n   \
    \ }\n    \n    var avg Int = sum / Int(m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    0b%b\", (n + m) / 2))", "    if n > m {\n        return Result.failure(-1)\n \
    \   }\n    \n    return Result.success(to_bin(avg(n, m)))", '    return Result.success(Int.toBinary(n
    + m / 2))', "    if n > m {\n        return Result.failure(-1)\n    }\n    \n\
    \    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n   \
    \ \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", (n + m) / 2))", "    if n > m {\n        return Result.failure(-1)\n   \
    \ }\n    \n    return Result.success(Int(math.Floor(float64(n + m) / 2)))", " \
    \   if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  '    return Result.success(avg(n, m))', "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(int_to_binary(n + m) + \"0b\")", "   \
    \ if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", n.to_i() + m.to_i() / 2))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(Int(round(avg(n, m))))", "    if n > m\
    \ {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.to_string(Int.div(Int.add(n,\
    \ m), 2)))", "    if n > m {\n        return Result.failure(-1)\n    }\n    \n\
    \    var sum Int = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n   \
    \ }\n    \n    var avg Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return\
    \ Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))", "    if n > m {\n \
    \       return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for\
    \ i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return\
    \ Result.success(avg.toString())", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(intToBinary(n\
    \ + m) + intToBinary(n - m))", '    return Result.success(avg(n, m))', "    if\
    \ n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n \
    \   for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum = 0\n    for i := n; i <= m; i += 1 {\n        sum +=\
    \ i\n    }\n    \n    var avg = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum\
    \ / (m - n + 1)\n    \n    return Result.success(avg.toString())", "    if n >\
    \ m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.to_string(Int.div(Int.add(n,\
    \ m), 2)))", '    return Result.success(Int.toBinary(Int.avg(n, m)))', "    if\
    \ n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n    for\
    \ i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum / (m\
    \ - n + 1)\n    \n    return Result.success(avg.toString())", "    if n > m {\n\
    \        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.from_big_int(Int.from_int(n).add(Int.from_int(m)).div(Int.from_int(2))))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return\
    \ Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))", "    if n > m {\n \
    \       return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for\
    \ i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int =\
    \ sum / (m - n + 1)\n    \n    return Result.success(avg.toString())", "    if\
    \ n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int\n \
    \   for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum\
    \ / (m - n + 1))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum +=\
    \ i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / 2\n    \n    return Result.success(avg.toString())", "    if\
    \ n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int\n \
    \   for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum\
    \ / (m - n + 1))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum +=\
    \ i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))",
  '    return Result.success(Int.toBinary(n + m) + Int.toBinary(m - n))', "    if\
    \ n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum = 0\n \
    \   for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return\
    \ Result.success(avg.toString())", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", (n + m) / 2))", " \
    \   if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum Int\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(sum.to_string())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    avg := sum\
    \ / (m - n + 1)\n    \n    return Result.success(avg.toString())", "    if n >\
    \ m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg:\
    \ Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())", " \
    \   if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", '    return Result.success(Int.toBinary(n + m) + Int.toBinary(m))',
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    0b%b\", n.to_i() + m.to_i() / 2))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(fmt.Sprintf(\"0b%b\", (n + m) / 2))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    sum := 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", '    return Result.success(fmt.Sprintf("%b", n.to_i()
    + m.to_i() / 2))', '    return Result.success(Int.toBinary(Int.avg(n, m)))', " \
    \   if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.from_bits(Int.to_bits(n)\
    \ + Int.to_bits(m) / 2))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return\
    \ Result.success(avg.toString())", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.to_string())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(Int.toBinary(Int.avg(n,\
    \ m)))", "    if n > m {\n        return Result.failure(-1)\n    }\n    \n   \
    \ sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n\
    \    avg := sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int\
    \ = 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var\
    \ avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.toString())",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(to_bin(n\
    \ + (m - n) / 2))", "    if n > m {\n        return Result.failure(-1)\n    }\n\
    \    \n    return Result.success(Int.from_bits(Int.to_bits(n) + Int.to_bits(m)\
    \ / 2))", "    if n > m {\n        return Result.failure(-1)\n    }\n    \n  \
    \  return Result.success(Int.from_bits(Int.bits_of_int(n) + Int.bits_of_int(m)\
    \ + 1).to_string())", "    if n > m {\n        return Result.failure(-1)\n   \
    \ }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n        sum\
    \ += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return Result.success(avg.to_s(2))",
  "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", (n + m) / 2))", "    if n > m {\n        return Result.failure(-1)\n   \
    \ }\n    \n    return Result.success(to_bin(avg(n, m)))", '    return Result.success(avg(n,
    m))', "    if n > m {\n        return Result.failure(-1)\n    }\n    \n    return\
    \ Result.success(fmt.Sprintf(\"%b\", n.to_i() + m.to_i() / 2))", "    if n > m\
    \ {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n  \
    \  for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    return Result.success(fmt.Sprintf(\"\
    %b\", sum / (m - n + 1)))", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    var sum: Int = 0\n    for i := n; i <= m; i += 1 {\n       \
    \ sum += i\n    }\n    \n    var avg: Int = sum / (m - n + 1)\n    \n    return\
    \ Result.success(avg.toString())", "    if n > m {\n        return Result.failure(-1)\n\
    \    }\n    \n    sum := 0\n    for i := n; i <= m; i += 1 {\n        sum += i\n\
    \    }\n    \n    return Result.success(fmt.Sprintf(\"%b\", sum / (m - n + 1)))",
  '    return Result.success(avg(n, m))', '    return Result.success(Int.toBinary(Int.div(Int.add(n,
    m), 2)))', "    if n > m {\n        return Result.failure(-1)\n    }\n    \n \
    \   return Result.success(fmt.Sprintf(\"%b\", n + m / 2))", "    if n > m {\n\
    \        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for\
    \ i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int =\
    \ sum / 2\n    \n    return Result.success(avg.to_s(2))", "    if n > m {\n  \
    \      return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i\
    \ := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum\
    \ / 2\n    \n    return Result.success(avg.toString())", "    if n > m {\n   \
    \     return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i\
    \ := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum\
    \ / 2\n    \n    return Result.success(avg.toString())", "    if n > m {\n   \
    \     return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n    for i\
    \ := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg: Int = sum\
    \ / (m - n + 1)\n    \n    return Result.success(avg.toString())", "    if n >\
    \ m {\n        return Result.failure(-1)\n    }\n    \n    var sum: Int = 0\n\
    \    for i := n; i <= m; i += 1 {\n        sum += i\n    }\n    \n    var avg:\
    \ Int = sum / 2\n    \n    return Result.success(avg.toString())"]
stop_tokens:
- "\n}"
