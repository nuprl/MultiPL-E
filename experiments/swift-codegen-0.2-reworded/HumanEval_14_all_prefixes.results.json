{
  "name": "HumanEval_14_all_prefixes",
  "language": "swift",
  "prompt": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9g3zbhrc.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp9g3zbhrc.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp9g3zbhrc.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp9g3zbhrc.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i])\n                               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpk4fcl56u.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpk4fcl56u.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpk4fcl56u.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpk4fcl56u.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpk4fcl56u.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpk4fcl56u.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpk4fcl56u.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpk4fcl56u.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprd8j3rb3.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmprd8j3rb3.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmprd8j3rb3.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpk4fcl56u.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpk4fcl56u.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpk4fcl56u.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpk4fcl56u.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpk4fcl56u.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpk4fcl56u.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpk4fcl56u.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpk4fcl56u.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpcnq8ubzz.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmpcnq8ubzz.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmpcnq8ubzz.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmphydrh9dz.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmphydrh9dz.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmphydrh9dz.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmphydrh9dz.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i])\n                               ^\n/tmp/tmphydrh9dz.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmphydrh9dz.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmphydrh9dz.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmphydrh9dz.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpb4pm9yuf.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String] = []\n                ^\n                ;\n/tmp/tmpb4pm9yuf.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpb4pm9yuf.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpb4pm9yuf.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpb4pm9yuf.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpb4pm9yuf.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpb4pm9yuf.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String] = []\n        ^\n/tmp/tmpb4pm9yuf.swift:6:18: error: cannot assign to immutable expression of type '[String].Type'\n    var prefixes [String] = []\n                 ^~~~~~~~\n/tmp/tmpb4pm9yuf.swift:6:29: error: cannot assign value of type '[Any]' to type '[String].Type'\n    var prefixes [String] = []\n                            ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp32747msb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String] = []\n                ^\n                ;\n/tmp/tmp32747msb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp32747msb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp32747msb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp32747msb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String] = []\n        ^\n/tmp/tmp32747msb.swift:6:18: error: cannot assign to immutable expression of type '[String].Type'\n    var prefixes [String] = []\n                 ^~~~~~~~\n/tmp/tmp32747msb.swift:6:29: error: cannot assign value of type '[Any]' to type '[String].Type'\n    var prefixes [String] = []\n                            ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprd8j3rb3.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmprd8j3rb3.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmprd8j3rb3.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprd8j3rb3.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmprd8j3rb3.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmprd8j3rb3.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp32747msb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String] = []\n                ^\n                ;\n/tmp/tmp32747msb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp32747msb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp32747msb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp32747msb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String] = []\n        ^\n/tmp/tmp32747msb.swift:6:18: error: cannot assign to immutable expression of type '[String].Type'\n    var prefixes [String] = []\n                 ^~~~~~~~\n/tmp/tmp32747msb.swift:6:29: error: cannot assign value of type '[Any]' to type '[String].Type'\n    var prefixes [String] = []\n                            ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp32747msb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String] = []\n                ^\n                ;\n/tmp/tmp32747msb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp32747msb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp32747msb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp32747msb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String] = []\n        ^\n/tmp/tmp32747msb.swift:6:18: error: cannot assign to immutable expression of type '[String].Type'\n    var prefixes [String] = []\n                 ^~~~~~~~\n/tmp/tmp32747msb.swift:6:29: error: cannot assign value of type '[Any]' to type '[String].Type'\n    var prefixes [String] = []\n                            ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpaa8it7nu.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpaa8it7nu.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpaa8it7nu.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpaa8it7nu.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i+1])\n                                ^\n                                ,\n/tmp/tmpaa8it7nu.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i+1])\n                                ^\n/tmp/tmpaa8it7nu.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpaa8it7nu.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpaa8it7nu.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpaa8it7nu.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpaa8it7nu.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpaa8it7nu.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpaa8it7nu.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpaa8it7nu.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i+1])\n                                ^\n                                ,\n/tmp/tmpaa8it7nu.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i+1])\n                                ^\n/tmp/tmpaa8it7nu.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpaa8it7nu.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpaa8it7nu.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpaa8it7nu.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpftyi52_e.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpftyi52_e.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpftyi52_e.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpcnq8ubzz.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmpcnq8ubzz.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmpcnq8ubzz.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmphydrh9dz.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmphydrh9dz.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmphydrh9dz.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmphydrh9dz.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i])\n                               ^\n/tmp/tmphydrh9dz.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmphydrh9dz.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmphydrh9dz.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmphydrh9dz.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpjtsz4pbf.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpjtsz4pbf.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpjtsz4pbf.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpjtsz4pbf.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp6n_wjg95.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmp6n_wjg95.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp6n_wjg95.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp6n_wjg95.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp6n_wjg95.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmp6n_wjg95.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmp6n_wjg95.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmp6n_wjg95.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmp6n_wjg95.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpftyi52_e.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpftyi52_e.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpftyi52_e.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9g3zbhrc.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp9g3zbhrc.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp9g3zbhrc.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp9g3zbhrc.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i])\n                               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpwgrebhrp.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpwgrebhrp.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpwgrebhrp.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpwgrebhrp.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpwgrebhrp.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpwgrebhrp.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpwgrebhrp.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpftyi52_e.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpftyi52_e.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpftyi52_e.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpb4pm9yuf.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String] = []\n                ^\n                ;\n/tmp/tmpb4pm9yuf.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpb4pm9yuf.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpb4pm9yuf.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpb4pm9yuf.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpb4pm9yuf.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpb4pm9yuf.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String] = []\n        ^\n/tmp/tmpb4pm9yuf.swift:6:18: error: cannot assign to immutable expression of type '[String].Type'\n    var prefixes [String] = []\n                 ^~~~~~~~\n/tmp/tmpb4pm9yuf.swift:6:29: error: cannot assign value of type '[Any]' to type '[String].Type'\n    var prefixes [String] = []\n                            ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpk4fcl56u.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpk4fcl56u.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpk4fcl56u.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpk4fcl56u.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpk4fcl56u.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpk4fcl56u.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpk4fcl56u.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpk4fcl56u.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprd8j3rb3.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmprd8j3rb3.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmprd8j3rb3.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpcnq8ubzz.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmpcnq8ubzz.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmpcnq8ubzz.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpftyi52_e.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpftyi52_e.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpftyi52_e.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpwgrebhrp.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpwgrebhrp.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpwgrebhrp.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpwgrebhrp.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpwgrebhrp.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpwgrebhrp.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpwgrebhrp.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp32747msb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String] = []\n                ^\n                ;\n/tmp/tmp32747msb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp32747msb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp32747msb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp32747msb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String] = []\n        ^\n/tmp/tmp32747msb.swift:6:18: error: cannot assign to immutable expression of type '[String].Type'\n    var prefixes [String] = []\n                 ^~~~~~~~\n/tmp/tmp32747msb.swift:6:29: error: cannot assign value of type '[Any]' to type '[String].Type'\n    var prefixes [String] = []\n                            ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpwgrebhrp.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpwgrebhrp.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpwgrebhrp.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpwgrebhrp.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpwgrebhrp.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpwgrebhrp.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpwgrebhrp.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp32747msb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String] = []\n                ^\n                ;\n/tmp/tmp32747msb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp32747msb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp32747msb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp32747msb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String] = []\n        ^\n/tmp/tmp32747msb.swift:6:18: error: cannot assign to immutable expression of type '[String].Type'\n    var prefixes [String] = []\n                 ^~~~~~~~\n/tmp/tmp32747msb.swift:6:29: error: cannot assign value of type '[Any]' to type '[String].Type'\n    var prefixes [String] = []\n                            ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpr519fotw.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpr519fotw.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpr519fotw.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpr519fotw.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i+1])\n                                ^\n                                ,\n/tmp/tmpr519fotw.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i+1])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp32747msb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String] = []\n                ^\n                ;\n/tmp/tmp32747msb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp32747msb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp32747msb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp32747msb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String] = []\n        ^\n/tmp/tmp32747msb.swift:6:18: error: cannot assign to immutable expression of type '[String].Type'\n    var prefixes [String] = []\n                 ^~~~~~~~\n/tmp/tmp32747msb.swift:6:29: error: cannot assign value of type '[Any]' to type '[String].Type'\n    var prefixes [String] = []\n                            ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpcnq8ubzz.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmpcnq8ubzz.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmpcnq8ubzz.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpk4fcl56u.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpk4fcl56u.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpk4fcl56u.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpk4fcl56u.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpk4fcl56u.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpk4fcl56u.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpk4fcl56u.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpk4fcl56u.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpk4fcl56u.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpk4fcl56u.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpk4fcl56u.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpk4fcl56u.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpk4fcl56u.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpk4fcl56u.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpk4fcl56u.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpk4fcl56u.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpk4fcl56u.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpk4fcl56u.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpk4fcl56u.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpk4fcl56u.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpk4fcl56u.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpk4fcl56u.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpk4fcl56u.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpk4fcl56u.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpk4fcl56u.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpk4fcl56u.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpk4fcl56u.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpk4fcl56u.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpk4fcl56u.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpk4fcl56u.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpk4fcl56u.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpk4fcl56u.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpjtsz4pbf.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpjtsz4pbf.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpjtsz4pbf.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpjtsz4pbf.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpftyi52_e.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpftyi52_e.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpftyi52_e.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpk4fcl56u.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpk4fcl56u.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpk4fcl56u.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpk4fcl56u.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpk4fcl56u.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpk4fcl56u.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpk4fcl56u.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpk4fcl56u.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpjtsz4pbf.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpjtsz4pbf.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpjtsz4pbf.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpjtsz4pbf.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpyfydzf3i.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmpyfydzf3i.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpyfydzf3i.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpyfydzf3i.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpyfydzf3i.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpyfydzf3i.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpyfydzf3i.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmpyfydzf3i.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmpyfydzf3i.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmpyfydzf3i.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp6n_wjg95.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmp6n_wjg95.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp6n_wjg95.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp6n_wjg95.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp6n_wjg95.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmp6n_wjg95.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmp6n_wjg95.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmp6n_wjg95.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmp6n_wjg95.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpcnq8ubzz.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmpcnq8ubzz.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmpcnq8ubzz.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpyfydzf3i.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmpyfydzf3i.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpyfydzf3i.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpyfydzf3i.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpyfydzf3i.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpyfydzf3i.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpyfydzf3i.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmpyfydzf3i.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmpyfydzf3i.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmpyfydzf3i.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprr1e40b1.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmprr1e40b1.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprr1e40b1.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprr1e40b1.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmprr1e40b1.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprd8j3rb3.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmprd8j3rb3.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmprd8j3rb3.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpcnq8ubzz.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmpcnq8ubzz.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmpcnq8ubzz.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpftyi52_e.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpftyi52_e.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpftyi52_e.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprr1e40b1.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmprr1e40b1.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprr1e40b1.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprr1e40b1.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmprr1e40b1.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpyfydzf3i.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmpyfydzf3i.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpyfydzf3i.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpyfydzf3i.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpyfydzf3i.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpyfydzf3i.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpyfydzf3i.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmpyfydzf3i.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmpyfydzf3i.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmpyfydzf3i.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpk4fcl56u.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpk4fcl56u.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpk4fcl56u.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpk4fcl56u.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpk4fcl56u.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpk4fcl56u.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpk4fcl56u.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpk4fcl56u.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprd8j3rb3.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmprd8j3rb3.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmprd8j3rb3.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprd8j3rb3.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmprd8j3rb3.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmprd8j3rb3.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpk4fcl56u.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpk4fcl56u.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpk4fcl56u.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpk4fcl56u.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpk4fcl56u.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpk4fcl56u.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpk4fcl56u.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpk4fcl56u.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp32747msb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String] = []\n                ^\n                ;\n/tmp/tmp32747msb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp32747msb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp32747msb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp32747msb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String] = []\n        ^\n/tmp/tmp32747msb.swift:6:18: error: cannot assign to immutable expression of type '[String].Type'\n    var prefixes [String] = []\n                 ^~~~~~~~\n/tmp/tmp32747msb.swift:6:29: error: cannot assign value of type '[Any]' to type '[String].Type'\n    var prefixes [String] = []\n                            ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpwgrebhrp.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpwgrebhrp.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpwgrebhrp.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpwgrebhrp.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpwgrebhrp.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpwgrebhrp.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpwgrebhrp.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpk4fcl56u.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpk4fcl56u.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpk4fcl56u.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpk4fcl56u.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpk4fcl56u.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpk4fcl56u.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpk4fcl56u.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpk4fcl56u.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpk4fcl56u.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9g3zbhrc.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp9g3zbhrc.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp9g3zbhrc.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp9g3zbhrc.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i])\n                               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpcnq8ubzz.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmpcnq8ubzz.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmpcnq8ubzz.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmpcnq8ubzz.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmpcnq8ubzz.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp32747msb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String] = []\n                ^\n                ;\n/tmp/tmp32747msb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp32747msb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp32747msb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp32747msb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String] = []\n        ^\n/tmp/tmp32747msb.swift:6:18: error: cannot assign to immutable expression of type '[String].Type'\n    var prefixes [String] = []\n                 ^~~~~~~~\n/tmp/tmp32747msb.swift:6:29: error: cannot assign value of type '[Any]' to type '[String].Type'\n    var prefixes [String] = []\n                            ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpwgrebhrp.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpwgrebhrp.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpwgrebhrp.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpwgrebhrp.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpwgrebhrp.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpwgrebhrp.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpwgrebhrp.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmphydrh9dz.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmphydrh9dz.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmphydrh9dz.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmphydrh9dz.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i])\n                               ^\n/tmp/tmphydrh9dz.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmphydrh9dz.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmphydrh9dz.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmphydrh9dz.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpjtsz4pbf.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpjtsz4pbf.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpjtsz4pbf.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpjtsz4pbf.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmphydrh9dz.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmphydrh9dz.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmphydrh9dz.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmphydrh9dz.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i])\n                               ^\n/tmp/tmphydrh9dz.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmphydrh9dz.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmphydrh9dz.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmphydrh9dz.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpftyi52_e.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpftyi52_e.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpftyi52_e.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpwgrebhrp.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpwgrebhrp.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpwgrebhrp.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpwgrebhrp.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpwgrebhrp.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpwgrebhrp.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpwgrebhrp.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = []String{}\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp6n_wjg95.swift:6:22: error: consecutive statements on a line must be separated by ';'\n    var prefixes = []String{}\n                     ^\n                     ;\n/tmp/tmp6n_wjg95.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp6n_wjg95.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp6n_wjg95.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp6n_wjg95.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmp6n_wjg95.swift:6:20: error: empty collection literal requires an explicit type\n    var prefixes = []String{}\n                   ^~\n/tmp/tmp6n_wjg95.swift:6:22: error: ambiguous use of 'init'\n    var prefixes = []String{}\n                     ^\nSwift.String:2:12: note: found this candidate\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:6:12: note: found this candidate\n    public init<Subject>(reflecting subject: Subject)\n           ^\n/tmp/tmp6n_wjg95.swift:10:12: error: cannot convert return expression of type '[Any]' to return type '[String]'\n    return prefixes\n           ^\n/tmp/tmp6n_wjg95.swift:10:12: note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n    return prefixes\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpef2ccewh.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpef2ccewh.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpef2ccewh.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpef2ccewh.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp50_7ptuk.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp50_7ptuk.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp50_7ptuk.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp50_7ptuk.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp50_7ptuk.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmp50_7ptuk.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmp50_7ptuk.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmp50_7ptuk.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpftyi52_e.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpftyi52_e.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpftyi52_e.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpftyi52_e.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptusnfu9c.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmptusnfu9c.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmptusnfu9c.swift:8:32: error: expected expression in list of expressions\n        prefixes.append(string[:i+1])\n                               ^\n/tmp/tmptusnfu9c.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmptusnfu9c.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmptusnfu9c.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmptusnfu9c.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes.append(string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbxn5sl97.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpbxn5sl97.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpbxn5sl97.swift:8:33: error: expected ',' separator\n        prefixes.append(string[0:i])\n                                ^\n                                ,\n/tmp/tmpbxn5sl97.swift:8:33: error: expected expression in list of expressions\n        prefixes.append(string[0:i])\n                                ^\n/tmp/tmpbxn5sl97.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpbxn5sl97.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpbxn5sl97.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpbxn5sl97.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprd8j3rb3.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmprd8j3rb3.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmprd8j3rb3.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmprd8j3rb3.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp98tavd6t.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmp98tavd6t.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp98tavd6t.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp98tavd6t.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp98tavd6t.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp98tavd6t.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmp98tavd6t.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmp98tavd6t.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmp98tavd6t.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmp98tavd6t.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpwgrebhrp.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpwgrebhrp.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpwgrebhrp.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpwgrebhrp.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpwgrebhrp.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpwgrebhrp.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpwgrebhrp.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpwgrebhrp.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp32747msb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String] = []\n                ^\n                ;\n/tmp/tmp32747msb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmp32747msb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmp32747msb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n                                            ,\n/tmp/tmp32747msb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i+1])\n                                            ^\n/tmp/tmp32747msb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String] = []\n        ^\n/tmp/tmp32747msb.swift:6:18: error: cannot assign to immutable expression of type '[String].Type'\n    var prefixes [String] = []\n                 ^~~~~~~~\n/tmp/tmp32747msb.swift:6:29: error: cannot assign value of type '[Any]' to type '[String].Type'\n    var prefixes [String] = []\n                            ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[:i+1])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm5gnbtct.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpm5gnbtct.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpm5gnbtct.swift:8:44: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[:i+1])\n                                           ^\n/tmp/tmpm5gnbtct.swift:6:20: error: expected member name or constructor call after type name\n    var prefixes = [String]\n                   ^\n/tmp/tmpm5gnbtct.swift:6:27: note: add arguments after the type to construct a value of the type\n    var prefixes = [String]\n                          ^\n                           ()\n/tmp/tmpm5gnbtct.swift:6:27: note: use '.self' to reference the type object\n    var prefixes = [String]\n                          ^\n                           .self\n/tmp/tmpm5gnbtct.swift:10:12: error: cannot convert return expression of type '[String].Type' to return type '[String]'\n    return prefixes\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String]\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpw1uo4rqb.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String]\n                ^\n                ;\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpw1uo4rqb.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpw1uo4rqb.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String]\n        ^\n/tmp/tmpw1uo4rqb.swift:6:18: error: expected member name or constructor call after type name\n    var prefixes [String]\n                 ^\n/tmp/tmpw1uo4rqb.swift:6:25: note: add arguments after the type to construct a value of the type\n    var prefixes [String]\n                        ^\n                         ()\n/tmp/tmpw1uo4rqb.swift:6:25: note: use '.self' to reference the type object\n    var prefixes [String]\n                        ^\n                         .self\n/tmp/tmpw1uo4rqb.swift:6:18: warning: expression of type '[String].Type' is unused\n    var prefixes [String]\n                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes [String] = []\n    for i := 0; i < len(string); i++ {\n        prefixes = append(prefixes, string[0:i])\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpb4pm9yuf.swift:6:17: error: consecutive statements on a line must be separated by ';'\n    var prefixes [String] = []\n                ^\n                ;\n/tmp/tmpb4pm9yuf.swift:7:12: error: expected type\n    for i := 0; i < len(string); i++ {\n           ^\n            <#type#>\n/tmp/tmpb4pm9yuf.swift:7:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpb4pm9yuf.swift:7:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(string); i++ {\n           ^\n/tmp/tmpb4pm9yuf.swift:8:45: error: expected ',' separator\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n                                            ,\n/tmp/tmpb4pm9yuf.swift:8:45: error: expected expression in list of expressions\n        prefixes = append(prefixes, string[0:i])\n                                            ^\n/tmp/tmpb4pm9yuf.swift:6:9: error: type annotation missing in pattern\n    var prefixes [String] = []\n        ^\n/tmp/tmpb4pm9yuf.swift:6:18: error: cannot assign to immutable expression of type '[String].Type'\n    var prefixes [String] = []\n                 ^~~~~~~~\n/tmp/tmpb4pm9yuf.swift:6:29: error: cannot assign value of type '[Any]' to type '[String].Type'\n    var prefixes [String] = []\n                            ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}