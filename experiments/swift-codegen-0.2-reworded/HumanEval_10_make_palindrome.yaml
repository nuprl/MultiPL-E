name: HumanEval_10_make_palindrome
language: swift
prompt: "\n/// Find the shortest palindrome that begins with a supplied string.\n\
  /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
  \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(string:\
  \ \"\")\n/// \"\"\n/// >>> make_palindrome(string: \"cat\")\n/// \"catac\"\n///\
  \ >>> make_palindrome(string: \"cata\")\n/// \"catac\"\nfunc make_palindrome(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\n\
  assert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string:\
  \ \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\n\
  assert(make_palindrome(string: \"jerry\") == \"jerryrrej\")"
completions: ["    // Find the longest palindrome that starts with a given string.\n\
    \    // The longest palindrome that starts with a given string is the longest\
    \ palindrome that\n    // is a substring of the string.\n    // The longest palindrome\
    \ that starts with a given string is the longest palindrome that\n    // is a\
    \ substring of the string.\n    // The longest palindrome that starts with a given\
    \ string is the longest palindrome that\n    // is a substring of the string.\n\
    \    // The longest palindrome that starts with a given string is the longest\
    \ palindrome that\n    // is a substring of the string.\n    // The longest palindrome\
    \ that starts with a given string is the longest palindrome that\n    // is a\
    \ substring of the string.\n    // The longest palindrome that starts with a given\
    \ string is the longest palindrome that\n    // is a substring of the string.\n\
    \    // The longest palindrome that starts with a given string is the longest\
    \ palindrome that\n    // is a substring of the string.\n    // The longest palindrome\
    \ that starts with a given string is the longest palindrome that\n    // is a\
    \ substring of the string.\n    // The longest palindrome that starts with a given\
    \ string is the longest palindrome that\n    // is a substring of the string.\n\
    \    // The longest palindrome that starts with a given string is the longest\
    \ palindrome that\n    // is a substring of the string.\n    // The longest palindrome\
    \ that starts with a given string is the longest palindrome that\n    // is a\
    \ substring of the string.\n    // The longest palindrome that starts with a given\
    \ string is the longest palindrome that\n    // is a substring of the string.\n\
    \    // The longest palindrome that starts with a given string is the longest\
    \ palindrome that\n    // is a substring of the string.\n    // The longest palindrome\
    \ that starts with a given string is the longest palindrome that\n    // is a\
    \ substring of the string.\n    // The longest palindrome that starts with a given\
    \ string is the longest palindrome that\n    // is a substring of the string.\n\
    \    // The longest palindrome that starts with a given string is the longest",
  "    if len(string) == 0 {\n        return \"\"\n    }\n    \n    // Find the longest\
    \ palindrome that begins with a string\n    var longest_palindrome_prefix = \"\
    \"\n    var longest_palindrome_suffix = \"\"\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            if len(longest_palindrome_prefix)\
    \ == 0 {\n                longest_palindrome_prefix = string[:i]\n           \
    \ }\n            \n            if len(longest_palindrome_suffix) == 0 {\n    \
    \            longest_palindrome_suffix = string[i:]\n            }\n        }\n\
    \    }\n    \n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix\n    if len(longest_palindrome_prefix)\
    \ > 0 {\n        longest_palindrome_suffix = longest_palindrome_suffix[::-1]\n\
    \        return longest_palindrome_prefix + longest_palindrome_suffix\n    }\n\
    \    \n    return \"\"", "    // Find the longest palindrome that starts with\
    \ the string\n    // and append the reverse of the string to the end of the string\n\
    \    // to create a palindrome\n    for i := len(string) - 1; i >= 0; i-- {\n\
    \        if is_palindrome(string[i:]) {\n            return string + string[i:]\n\
    \        }\n    }\n    return \"\"", "    // Find the longest palindrome that\
    \ starts with the string.\n    var longest_palindrome: String = \"\"\n    for\
    \ i := 0; i < len(string); i++ {\n        var palindrome: String = \"\"\n    \
    \    for j := i; j < len(string); j++ {\n            if string[j] == string[i]\
    \ {\n                palindrome += string[j]\n            } else {\n         \
    \       break\n            }\n        }\n        if len(palindrome) > len(longest_palindrome)\
    \ {\n            longest_palindrome = palindrome\n        }\n    }\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    for i := 0; i < len(longest_palindrome); i++ {\n        var reverse_prefix:\
    \ String = \"\"\n        for j := i; j < len(longest_palindrome); j++ {\n    \
    \        if longest_palindrome[j] == longest_palindrome[i] {\n               \
    \ reverse_prefix += longest_palindrome[j]\n            } else {\n            \
    \    break\n            }\n        }\n        longest_palindrome += reverse_prefix\n\
    \    }\n    return longest_palindrome", "    // Find the longest palindrome that\
    \ starts with a string.\n    // The longest palindrome that starts with a string\
    \ is the longest palindrome that starts with a substring of that string.\n   \
    \ // The longest palindrome that starts with a substring of that string is the\
    \ longest palindrome that starts with a substring of that substring.\n    // The\
    \ longest palindrome that starts with a substring of that substring is the longest\
    \ palindrome that starts with a substring of that substring.\n    // The longest\
    \ palindrome that starts with a substring of that substring is the longest palindrome\
    \ that starts with a substring of that substring.\n    // The longest palindrome\
    \ that starts with a substring of that substring is the longest palindrome that\
    \ starts with a substring of that substring.\n    // The longest palindrome that\
    \ starts with a substring of that substring is the longest palindrome that starts\
    \ with a substring of that substring.\n    // The longest palindrome that starts\
    \ with a substring of that substring is the longest palindrome that starts with\
    \ a substring of that substring.\n    // The longest palindrome that starts with\
    \ a substring of that substring is the longest palindrome that starts with a substring\
    \ of that substring.\n    // The longest palindrome that starts with a substring\
    \ of that substring is the longest palindrome that starts with a substring of\
    \ that substring.\n    // The longest palindrome that starts with a substring\
    \ of that substring is the longest palindrome that starts with a substring of\
    \ that substring.\n    // The longest palindrome that starts with a substring\
    \ of that substring is the longest palindrome that starts with a substring of\
    \ that substring.\n    // The longest palindrome that starts with a substring\
    \ of that substring is the longest palindrome that starts with a substring of\
    \ that substring.\n    // The longest palindrome that starts with a substring\
    \ of that substring is the longest palindrome that starts with a substring of\
    \ that substring.\n    // The longest palindrome that starts with a substring\
    \ of that substring is the longest palindrome that starts with a substring of\
    \ that substring.\n    // The longest palindrome that starts with a substring\
    \ of", "    // Find the longest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"cataa\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cataa\")\n\
    \    // \"catac\"\n    // >>> make_palindrome(string: \"cataaa\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cataaa\")\n    // \"catac\"\n    // >>>\
    \ make_palindrome(string: \"cataaaa\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"cataaaaa\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cataaaaaa\"\
    )\n    // \"catac\"\n    // >>> make_palindrome(string: \"cataaaaaaa\")\n    //\
    \ \"catac\"\n    // >>> make_palindrome(string: \"cataaaaaaaa\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cataaaaaaaaa\")\n    // \"catac\"\n   \
    \ // >>> make_palindrome(string: \"cataaaaaaaaaa\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(string: \"cataaaaaaaaaaa\")\n    // \"catac\"\n    // >>>\
    \ make_palindrome(string: \"cataaaaaaaaaaaa\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"cataaaaaaaaaaaaa\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"cataaaaaaaaaaaaaa\")\n    // \"catac\"\n    // >>>", "    // Find the longest\
    \ palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(string: \"\")\n \
    \   // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\n \
    \   // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatac\")\n   \
    \ // \"catacatac\"\n    // >>> make_palindrome(string: \"catacatacat\")\n    //\
    \ \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatac\")\n   \
    \ // \"catacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatac\"\
    )\n    // \"catacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"\
    catacat", "    // Find the longest palindrome that starts with the string\n  \
    \  var longest_palindrome: String = \"\"\n    var longest_palindrome_length: Int\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        for j := i + 1; j <= len(string);\
    \ j++ {\n            if is_palindrome(string[i:j]) {\n                if j - i\
    \ > longest_palindrome_length {\n                    longest_palindrome = string[i:j]\n\
    \                    longest_palindrome_length = j - i\n                }\n  \
    \          }\n        }\n    }\n\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix\n    var result:\
    \ String = \"\"\n    for i := 0; i < longest_palindrome_length; i++ {\n      \
    \  result += string[i]\n    }\n    for i := longest_palindrome_length - 1; i >=\
    \ 0; i-- {\n        result += string[i]\n    }\n    return result", "    // Find\
    \ the longest palindrome that starts with the string.\n    // The longest palindrome\
    \ is the longest substring that is a palindrome.\n    // The longest substring\
    \ is the longest prefix of the string that is a palindrome.\n    // The longest\
    \ prefix is the longest substring that is a prefix of the string.\n    // The\
    \ longest substring is the longest postfix of the string that is a palindrome.\n\
    \    // The longest postfix is the longest substring that is a postfix of the\
    \ string.\n    // The longest postfix is the longest suffix of the string that\
    \ is a palindrome.\n    // The longest suffix is the longest substring that is\
    \ a suffix of the string.\n    // The longest substring is the longest prefix\
    \ of the string that is a palindrome.\n    // The longest prefix is the longest\
    \ substring that is a prefix of the string.\n    // The longest prefix is the\
    \ longest substring that is a prefix of the string.\n    // The longest substring\
    \ is the longest postfix of the string that is a palindrome.\n    // The longest\
    \ postfix is the longest substring that is a postfix of the string.\n    // The\
    \ longest postfix is the longest substring that is a postfix of the string.\n\
    \    // The longest substring is the longest postfix of the string that is a palindrome.\n\
    \    // The longest postfix is the longest substring that is a postfix of the\
    \ string.\n    // The longest postfix is the longest substring that is a postfix\
    \ of the string.\n    // The longest substring is the longest postfix of the string\
    \ that is a palindrome.\n    // The longest postfix is the longest substring that\
    \ is a postfix of the string.\n    // The longest postfix is the longest substring\
    \ that is a postfix of the string.\n    // The longest substring is the longest\
    \ postfix of the string that is a palindrome.\n    // The longest postfix is the\
    \ longest substring that is a postfix of the string.\n    // The longest postfix\
    \ is the longest substring that is a postfix of the string.\n    // The longest\
    \ substring is the longest postfix of the string that is a palindrome.\n    //\
    \ The longest postfix is the longest substring that is a postfix of", "    //\
    \ Find the longest palindrome that starts with the string.\n    // Use a stack\
    \ to keep track of the longest palindrome.\n    // The stack will be popped when\
    \ the palindrome is found.\n    // The stack is used to keep track of the longest\
    \ palindrome.\n    // The stack is used to keep track of the longest palindrome.\n\
    \    // The stack is used to keep track of the longest palindrome.\n    // The\
    \ stack is used to keep track of the longest palindrome.\n    // The stack is\
    \ used to keep track of the longest palindrome.\n    // The stack is used to keep\
    \ track of the longest palindrome.\n    // The stack is used to keep track of\
    \ the longest palindrome.\n    // The stack is used to keep track of the longest\
    \ palindrome.\n    // The stack is used to keep track of the longest palindrome.\n\
    \    // The stack is used to keep track of the longest palindrome.\n    // The\
    \ stack is used to keep track of the longest palindrome.\n    // The stack is\
    \ used to keep track of the longest palindrome.\n    // The stack is used to keep\
    \ track of the longest palindrome.\n    // The stack is used to keep track of\
    \ the longest palindrome.\n    // The stack is used to keep track of the longest\
    \ palindrome.\n    // The stack is used to keep track of the longest palindrome.\n\
    \    // The stack is used to keep track of the longest palindrome.\n    // The\
    \ stack is used to keep track of the longest palindrome.\n    // The stack is\
    \ used to keep track of the longest palindrome.\n    // The stack is used to keep\
    \ track of the longest palindrome.\n    // The stack is used to keep track of\
    \ the longest palindrome.\n    // The stack is used to keep track of the longest\
    \ palindrome.\n    // The stack is used to keep track of the longest palindrome.\n\
    \    // The stack is used to keep track of the longest palindrome.\n    // The\
    \ stack is used to keep track of the longest palindrome.\n    // The stack is\
    \ used to keep track of the longest palindrome.\n    // The stack is used to keep\
    \ track of the longest palindrome.\n    // The stack is used", "    if len(string)\
    \ == 0 {\n        return \"\"\n    }\n    \n    // Find the longest palindrome\
    \ that starts with the string\n    var longest_palindrome_prefix = \"\"\n    var\
    \ longest_palindrome_suffix = \"\"\n    var longest_palindrome_length = 0\n  \
    \  for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:]) {\n\
    \            if len(string[i:]) > longest_palindrome_length {\n              \
    \  longest_palindrome_prefix = string[i:]\n                longest_palindrome_suffix\
    \ = string[:i]\n                longest_palindrome_length = len(string[i:])\n\
    \            }\n        }\n    }\n    \n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix\n    return\
    \ string + reverse(longest_palindrome_prefix)", "    // Find the longest palindrome\
    \ that begins with a supplied string.\n    // Algorithm idea is simple:\n    //\
    \ - Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    // >>> make_palindrome(string: \"\")\n    // \"\
    \"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\n    // >>>\
    \ make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatacat\")\n \
    \   // \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacat\")\n    // \"catacatacatacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacatacat\")\n\
    \    // \"catacatacatacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacatacatacat\")\n    // \"catacatacatacat", " \
    \   // Find the longest palindrome that begins with a supplied string.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatacat\")\n \
    \   // \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacat\")\n    // \"catacatacatacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacatacat\")\n\
    \    // \"catacatacatacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacatacatacat\")\n    // \"catacatacatacat", " \
    \   // Find the longest palindrome that starts with the string.\n    var longest_palindrome:\
    \ String = \"\"\n    var longest_palindrome_length: Int = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        if is_palindrome(string[i:]) {\n            if\
    \ len(string[i:]) > longest_palindrome_length {\n                longest_palindrome\
    \ = string[i:]\n                longest_palindrome_length = len(string[i:])\n\
    \            }\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    var reversed_string:\
    \ String = \"\"\n    for i := 0; i < longest_palindrome_length; i++ {\n      \
    \  reversed_string += string[len(string) - i - 1]\n    }\n    return longest_palindrome\
    \ + reversed_string", "    // Find the longest palindrome that begins with the\
    \ string.\n    var longest_palindrome: String\n    for i := 0; i < len(string);\
    \ i++ {\n        for j := i + 1; j < len(string); j++ {\n            if string[i]\
    \ == string[j] && is_palindrome(string[i:j+1]) {\n                if len(string[i:j+1])\
    \ > len(longest_palindrome) {\n                    longest_palindrome = string[i:j+1]\n\
    \                }\n            }\n        }\n    }\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    if len(longest_palindrome) > 0 {\n        return string + longest_palindrome[::-1]\n\
    \    } else {\n        return string\n    }", "    // Find the longest palindrome\
    \ that begins with a supplied string.\n    // Algorithm idea is simple:\n    //\
    \ - Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    // >>> make_palindrome(string: \"\")\n    // \"\
    \"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\n    // >>>\
    \ make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatacat\")\n \
    \   // \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacat\")\n    // \"catacatacatacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacatacat\")\n\
    \    // \"catacatacatacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacatacatacat\")\n    // \"catacatacatacat", " \
    \   if len(string) == 0 {\n        return \"\"\n    }\n    \n    // Find the longest\
    \ palindrome that starts with the string\n    longest_palindrome_start := \"\"\
    \n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_start = string[i:]\n            break\n  \
    \      }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix\n    if len(longest_palindrome_start)\
    \ > 0 {\n        return string + longest_palindrome_start[::-1]\n    }\n    \n\
    \    return \"\"", "    // Find the longest palindrome that starts with the string\n\
    \    var longest_palindrome_start_index int\n    var longest_palindrome_length\
    \ int\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            if longest_palindrome_length < len(string[i:]) {\n          \
    \      longest_palindrome_start_index = i\n                longest_palindrome_length\
    \ = len(string[i:])\n            }\n        }\n    }\n\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix\n\
    \    var reverse_string = \"\"\n    for i := 0; i < longest_palindrome_start_index;\
    \ i++ {\n        reverse_string += string[i]\n    }\n    for i := longest_palindrome_start_index\
    \ + longest_palindrome_length; i < len(string); i++ {\n        reverse_string\
    \ += string[i]\n    }\n    return reverse_string", "    // Find the longest palindrome\
    \ that starts with the string\n    var longest_palindrome: String = \"\"\n   \
    \ for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:]) {\n\
    \            longest_palindrome = string[i:]\n            break\n        }\n \
    \   }\n\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix\n    var reversed_string: String = \"\"\n\
    \    for i := 0; i < len(longest_palindrome); i++ {\n        reversed_string =\
    \ reversed_string + string[i]\n    }\n    return reversed_string", "    // Find\
    \ the longest palindrome that begins with a supplied string.\n    // Algorithm\
    \ idea is simple:\n    // - Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatac\")\n   \
    \ // \"catacatac\"\n    // >>> make_palindrome(string: \"catacatacat\")\n    //\
    \ \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatac\")\n   \
    \ // \"catacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatac\"\
    )\n    // \"catacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"\
    catacat", "    if len(string) == 0 {\n        return \"\"\n    }\n    \n    //\
    \ Find the longest palindrome that starts with the string\n    var longest_palindrome\
    \ = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome = string[i:]\n            break\n        }\n\
    \    }\n    \n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix\n    var reversed_string = \"\"\n \
    \   for i := len(longest_palindrome) - 1; i >= 0; i-- {\n        reversed_string\
    \ = string[i] + reversed_string\n    }\n    \n    return reversed_string", " \
    \   // Find the longest palindrome that begins with a string.\n    // The longest\
    \ palindrome is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest prefix of a string that is a palindrome.\n    // The\
    \ longest prefix is the longest substring that is a prefix of a string that is\
    \ a palindrome.\n    // The longest substring that is a prefix of a string that\
    \ is a palindrome is the longest substring that is a prefix of a string that is\
    \ a palindrome.\n    // The longest substring that is a prefix of a string that\
    \ is a palindrome is the longest substring that is a prefix of a string that is\
    \ a palindrome.\n    // The longest substring that is a prefix of a string that\
    \ is a palindrome is the longest substring that is a prefix of a string that is\
    \ a palindrome.\n    // The longest substring that is a prefix of a string that\
    \ is a palindrome is the longest substring that is a prefix of a string that is\
    \ a palindrome.\n    // The longest substring that is a prefix of a string that\
    \ is a palindrome is the longest substring that is a prefix of a string that is\
    \ a palindrome.\n    // The longest substring that is a prefix of a string that\
    \ is a palindrome is the longest substring that is a prefix of a string that is\
    \ a palindrome.\n    // The longest substring that is a prefix of a string that\
    \ is a palindrome is the longest substring that is a prefix of a string that is\
    \ a palindrome.\n    // The longest substring that is a prefix of a string that\
    \ is a palindrome is the longest substring that is a prefix of a string that is\
    \ a palindrome.\n    // The longest substring that is a prefix of a string that\
    \ is a palindrome is the longest substring that is a prefix of a string that is\
    \ a palindrome.\n    // The longest substring that is a prefix of a string that\
    \ is a palindrome is the longest substring that is a prefix of a string that is\
    \ a palindrome.\n    // The longest substring that is a prefix of a string that\
    \ is a palindrome is the longest substring that is a prefix of a string that is\
    \ a palindrome.\n    //", "    // Find the longest palindrome that starts with\
    \ the string.\n    var longest_palindrome: String = \"\"\n    for i := 0; i <\
    \ len(string); i++ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome\
    \ = string[i:]\n            break\n        }\n    }\n\n    // Append the reverse\
    \ of the string prefix that comes before the palindromic suffix.\n    var reversed_prefix:\
    \ String = \"\"\n    for i := len(longest_palindrome) - 1; i >= 0; i-- {\n   \
    \     reversed_prefix = string[i:] + reversed_prefix\n    }\n\n    return longest_palindrome\
    \ + reversed_prefix", "    // Find the longest palindrome that begins with a supplied\
    \ string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // - Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    // >>> make_palindrome(string: \"catac\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"catacat\")\n    // \"catacat\"\n    //\
    \ >>> make_palindrome(string: \"catacatacat\")\n    // \"catacatacat\"\n    //\
    \ >>> make_palindrome(string: \"catacatacatacat\")\n    // \"catacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacat\")\n    // \"catacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacat\")\n    // \"catacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacat\")\n    //\
    \ \"catacatacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacatacat\")\n    // \"catacatacatacatacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacat", "    if len(string) == 0 {\n        return \"\"\n\
    \    }\n    \n    // Find the longest palindrome that starts with the string\n\
    \    var longest_palindrome_start_index = 0\n    var longest_palindrome_length\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            if i - longest_palindrome_length > longest_palindrome_start_index\
    \ {\n                longest_palindrome_start_index = i - longest_palindrome_length\n\
    \                longest_palindrome_length = i - longest_palindrome_start_index\
    \ + 1\n            }\n        }\n    }\n    \n    // Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix\n\
    \    var palindrome_suffix = string[longest_palindrome_start_index:longest_palindrome_start_index\
    \ + longest_palindrome_length]\n    var reverse_prefix = reverse_string(string[0:longest_palindrome_start_index])\n\
    \    return reverse_prefix + palindrome_suffix", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    var longest_palindrome_postfix:\
    \ String = \"\"\n    var longest_palindrome_postfix_length: Int = 0\n    for i\
    \ := 0; i < len(string); i++ {\n        if is_palindrome(string[i:]) {\n     \
    \       if len(string[i:]) > longest_palindrome_postfix_length {\n           \
    \     longest_palindrome_postfix = string[i:]\n                longest_palindrome_postfix_length\
    \ = len(string[i:])\n            }\n        }\n    }\n\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    var palindrome_prefix: String = \"\"\n    var palindrome_prefix_length: Int\
    \ = 0\n    for i := 0; i < len(longest_palindrome_postfix); i++ {\n        if\
    \ is_palindrome(longest_palindrome_postfix[i:]) {\n            if len(longest_palindrome_postfix[i:])\
    \ > palindrome_prefix_length {\n                palindrome_prefix = longest_palindrome_postfix[i:]\n\
    \                palindrome_prefix_length = len(longest_palindrome_postfix[i:])\n\
    \            }\n        }\n    }\n\n    return palindrome_prefix + reverse(palindrome_prefix[:palindrome_prefix_length])",
  "    // Find the longest palindrome that starts with the string.\n    // The longest\
    \ palindrome is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    // The longest\
    \ substring is the longest substring that is a palindrome.\n    //", "    // Find\
    \ the longest palindrome that begins with a supplied string.\n    // Algorithm\
    \ idea is simple:\n    // - Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"cataa\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cataa\")\n\
    \    // \"catac\"\n    // >>> make_palindrome(string: \"cataaa\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cataaa\")\n    // \"catac\"\n    // >>>\
    \ make_palindrome(string: \"cataaaa\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"cataaaaa\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cataaaaa\"\
    )\n    // \"catac\"\n    // >>> make_palindrome(string: \"cataaaaaa\")\n    //\
    \ \"catac\"\n    // >>> make_palindrome(string: \"cataaaaaa\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cataaaaaaa\")\n    // \"catac\"\n    //\
    \ >>> make_palindrome(string: \"cataaaaaaa\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"cataaaaaaaa\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cataaaaaaaaa\"\
    )\n    // \"catac\"\n    // >>> make_palindrome(string: \"cataaaaaaaaa\")\n  \
    \  // \"catac\"\n    // >>> make_palindrome(string: \"cataaaaaaaaaa\")\n    //\
    \ \"catac\"\n    // >>> make_palindrome(", "    if len(string) == 0 {\n      \
    \  return string\n    }\n    \n    // Find the longest palindrome that begins\
    \ with the string.\n    longest_palindrome_index := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome_index\
    \ = i\n            break\n        }\n    }\n    \n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    return string[:longest_palindrome_index] + reverse(string[longest_palindrome_index:])",
  "    // Find the longest palindrome that starts with a string\n    var longest_palindrome_string:\
    \ String = \"\"\n    var longest_palindrome_length: Int = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        for j := i + 1; j <= len(string); j++ {\n    \
    \        if is_palindrome(string[i:j]) {\n                if j - i > longest_palindrome_length\
    \ {\n                    longest_palindrome_string = string[i:j]\n           \
    \         longest_palindrome_length = j - i\n                }\n            }\n\
    \        }\n    }\n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix\n    var result: String = \"\
    \"\n    for i := 0; i < longest_palindrome_length; i++ {\n        result += string[i]\n\
    \    }\n    for i := longest_palindrome_length; i < len(string); i++ {\n     \
    \   result += string[i]\n    }\n    return result", "    // Find the longest palindrome\
    \ that begins with a supplied string.\n    // Algorithm idea is simple:\n    //\
    \ - Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    // >>> make_palindrome(string: \"\")\n    // \"\
    \"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\n    // >>>\
    \ make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatac\")\n   \
    \ // \"catacatac\"\n    // >>> make_palindrome(string: \"catacatacat\")\n    //\
    \ \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatac\")\n   \
    \ // \"catacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatac\"\
    )\n    // \"catacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"\
    catacat", "    if len(string) == 0 {\n        return \"\"\n    }\n    \n    //\
    \ Find the longest palindrome that starts with the string\n    var longest_palindrome_start_index\
    \ int\n    var longest_palindrome_length int\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            if longest_palindrome_length\
    \ < len(string[i:]) {\n                longest_palindrome_start_index = i\n  \
    \              longest_palindrome_length = len(string[i:])\n            }\n  \
    \      }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix\n    var reversed_string = \"\
    \"\n    for i := 0; i < longest_palindrome_start_index; i++ {\n        reversed_string\
    \ += string[i]\n    }\n    for i := longest_palindrome_start_index + longest_palindrome_length\
    \ - 1; i >= longest_palindrome_start_index; i-- {\n        reversed_string +=\
    \ string[i]\n    }\n    \n    return reversed_string", "    // Find the longest\
    \ palindrome that starts with a string\n    // and append it to the end of the\
    \ string\n    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    var longest_palindrome = \"\"\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome\
    \ = string[i:] + longest_palindrome\n        }\n    }\n    // Append reverse of\
    \ a string prefix that comes before the palindromic suffix\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    return longest_palindrome[::-1]", "    // Find the longest\
    \ palindrome that starts with a string\n    var longest_palindrome_start_index\
    \ int\n    var longest_palindrome_length int\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            if longest_palindrome_length\
    \ < len(string[i:]) {\n                longest_palindrome_start_index = i\n  \
    \              longest_palindrome_length = len(string[i:])\n            }\n  \
    \      }\n    }\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix\n    var reversed_string = \"\"\n \
    \   for i := 0; i < longest_palindrome_start_index; i++ {\n        reversed_string\
    \ += string[i]\n    }\n    for i := longest_palindrome_start_index + longest_palindrome_length\
    \ - 1; i >= longest_palindrome_start_index; i-- {\n        reversed_string +=\
    \ string[i]\n    }\n    return reversed_string", "    // Find the longest palindrome\
    \ that starts with the string.\n    var longest_palindrome_start_index int\n \
    \   var longest_palindrome_length int\n    for i := 0; i < len(string); i++ {\n\
    \        if is_palindrome(string[i:]) {\n            if i - longest_palindrome_start_index\
    \ > longest_palindrome_length {\n                longest_palindrome_start_index\
    \ = i\n                longest_palindrome_length = i - longest_palindrome_start_index\n\
    \            }\n        }\n    }\n\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    var reverse_string_prefix\
    \ string\n    for i := 0; i < longest_palindrome_start_index; i++ {\n        reverse_string_prefix\
    \ += string[i]\n    }\n    reverse_string_prefix += string[longest_palindrome_start_index]\n\
    \    reverse_string_prefix += string[longest_palindrome_start_index + longest_palindrome_length\
    \ - 1 : len(string) - 1]\n    reverse_string_prefix += string[longest_palindrome_start_index\
    \ + longest_palindrome_length - 1 : len(string)]\n    return reverse_string_prefix",
  "    // Find the longest palindrome that starts with the string.\n    // We'll start\
    \ by finding the longest palindrome that starts with the string.\n    // We'll\
    \ start by finding the longest palindrome that starts with the string.\n    //\
    \ We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We'll start by finding the longest palindrome that starts with the string.\n\
    \    // We", "    // Find the longest palindrome that starts with the string\n\
    \    var longest_palindrome = \"\"\n    var longest_palindrome_length = 0\n  \
    \  for i := 0; i < len(string); i++ {\n        var palindrome = string[i:] + string[:i]\n\
    \        if len(palindrome) > longest_palindrome_length {\n            longest_palindrome\
    \ = palindrome\n            longest_palindrome_length = len(palindrome)\n    \
    \    }\n    }\n\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix\n    var reversed_prefix = \"\"\n \
    \   for i := 0; i < longest_palindrome_length; i++ {\n        reversed_prefix\
    \ += string[i]\n    }\n    return longest_palindrome + reversed_prefix", "   \
    \ // Find the longest palindrome that starts with the string.\n    // The longest\
    \ palindrome that starts with the string is the longest\n    // palindrome that\
    \ is a prefix of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest\n    // palindrome that is a prefix of the string.\n \
    \   // The longest palindrome that starts with the string is the longest\n   \
    \ // palindrome that is a prefix of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    // palindrome that is a prefix\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest\n    // palindrome that is a prefix of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest\n    // palindrome that\
    \ is a prefix of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest\n    // palindrome that is a prefix of the string.\n \
    \   // The longest palindrome that starts with the string is the longest\n   \
    \ // palindrome that is a prefix of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    // palindrome that is a prefix\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest\n    // palindrome that is a prefix of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest\n    // palindrome that\
    \ is a prefix of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest\n    // palindrome that is a prefix of the string.\n \
    \   // The longest palindrome that starts with the string is the longest\n   \
    \ // palindrome that is a prefix of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    // palindrome that is a prefix\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest\n    // palindrome that is a prefix of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest\n    // palindrome that\
    \ is a prefix of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest\n    ", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    var longest_palindrome_postfix: String = \"\"\n \
    \   var longest_palindrome_postfix_length: Int = 0\n    for i:=0; i<len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            if len(string[i:])\
    \ > longest_palindrome_postfix_length {\n                longest_palindrome_postfix\
    \ = string[i:]\n                longest_palindrome_postfix_length = len(string[i:])\n\
    \            }\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    var longest_palindrome_prefix:\
    \ String = \"\"\n    var longest_palindrome_prefix_length: Int = 0\n    for i:=0;\
    \ i<len(string); i++ {\n        if is_palindrome(string[:i]) {\n            if\
    \ len(string[:i]) > longest_palindrome_prefix_length {\n                longest_palindrome_prefix\
    \ = string[:i]\n                longest_palindrome_prefix_length = len(string[:i])\n\
    \            }\n        }\n    }\n    return longest_palindrome_prefix + longest_palindrome_postfix",
  "    // Find the longest palindrome that starts with the string.\n    var longest_palindrome_start_index\
    \ int\n    var longest_palindrome_length int\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            if longest_palindrome_length\
    \ < len(string[i:]) {\n                longest_palindrome_start_index = i\n  \
    \              longest_palindrome_length = len(string[i:])\n            }\n  \
    \      }\n    }\n\n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    var palindrome_string\
    \ = string[0:longest_palindrome_start_index]\n    for i := 0; i < longest_palindrome_start_index;\
    \ i++ {\n        palindrome_string += string[i]\n    }\n    for i := longest_palindrome_start_index\
    \ + longest_palindrome_length - 1; i >= 0; i-- {\n        palindrome_string +=\
    \ string[i]\n    }\n    return palindrome_string", "    // Find the longest palindrome\
    \ that starts with the string.\n    // The longest palindrome that starts with\
    \ the string is the longest palindrome that\n    // contains the string as a substring.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that\n    // contains the string as a substring.\n    // The longest palindrome\
    \ that starts with the string is the longest palindrome that\n    // contains\
    \ the string as a substring.\n    // The longest palindrome that starts with the\
    \ string is the longest palindrome that\n    // contains the string as a substring.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that\n    // contains the string as a substring.\n    // The longest palindrome\
    \ that starts with the string is the longest palindrome that\n    // contains\
    \ the string as a substring.\n    // The longest palindrome that starts with the\
    \ string is the longest palindrome that\n    // contains the string as a substring.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that\n    // contains the string as a substring.\n    // The longest palindrome\
    \ that starts with the string is the longest palindrome that\n    // contains\
    \ the string as a substring.\n    // The longest palindrome that starts with the\
    \ string is the longest palindrome that\n    // contains the string as a substring.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that\n    // contains the string as a substring.\n    // The longest palindrome\
    \ that starts with the string is the longest palindrome that\n    // contains\
    \ the string as a substring.\n    // The longest palindrome that starts with the\
    \ string is the longest palindrome that\n    // contains the string as a substring.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that\n    // contains the string as a substring.\n    // The longest palindrome\
    \ that starts with the string is the longest palindrome that\n    // contains\
    \ the string as a substring.\n    // The longest palindrome that starts with the\
    \ string is the longest palindrome that\n    // contains the string as a substring.\n\
    \    ", "    // Find the longest palindrome that starts with the string\n    var\
    \ longest_palindrome_string: String = \"\"\n    var longest_palindrome_length:\
    \ Int = 0\n    for i := 0; i < len(string); i++ {\n        for j := 0; j < len(string);\
    \ j++ {\n            if i < j {\n                if string[i] == string[j] {\n\
    \                    if len(string) > longest_palindrome_length {\n          \
    \              longest_palindrome_string = string[i] + string[j] + string[i]\n\
    \                        longest_palindrome_length = len(string)\n           \
    \         }\n                }\n            }\n        }\n    }\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix\n    for i := 0; i < longest_palindrome_length; i++ {\n        if i <\
    \ longest_palindrome_length - 1 {\n            longest_palindrome_string = longest_palindrome_string\
    \ + string[i]\n        }\n    }\n    return longest_palindrome_string", "    //\
    \ Find the longest palindrome that begins with a supplied string.\n    var longest_palindrome:\
    \ String = \"\"\n    for i := 0; i < len(string); i++ {\n        for j := 0; j\
    \ < len(string); j++ {\n            if i < j {\n                if string[i] ==\
    \ string[j] && is_palindrome(string[i:j+1]) {\n                    if len(string[i:j+1])\
    \ > len(longest_palindrome) {\n                        longest_palindrome = string[i:j+1]\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string + reverse(string[:len(longest_palindrome)])",
  "    if len(string) == 0 {\n        return \"\"\n    }\n    \n    // Find the longest\
    \ palindrome that starts with the string.\n    longest_palindrome_prefix := \"\
    \"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_prefix = string[i:]\n            break\n \
    \       }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    return string + longest_palindrome_prefix[::-1]",
  "    // Find the longest palindrome that starts with the string\n    var longest_palindrome:\
    \ String = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome = string[i:]\n        }\n    }\n\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix\n    var reversed_prefix: String = \"\"\n    for i := 0; i < len(longest_palindrome);\
    \ i++ {\n        reversed_prefix = longest_palindrome[i:] + reversed_prefix\n\
    \    }\n\n    return reversed_prefix", "    // Find the longest palindrome that\
    \ starts with the string\n    var longest_palindrome_start_index int\n    var\
    \ longest_palindrome_length int\n    for i := 0; i < len(string); i++ {\n    \
    \    if is_palindrome(string[i:]) {\n            if longest_palindrome_length\
    \ < len(string[i:]) {\n                longest_palindrome_start_index = i\n  \
    \              longest_palindrome_length = len(string[i:])\n            }\n  \
    \      }\n    }\n\n    // Append the reverse of the string prefix that comes before\
    \ the palindromic suffix\n    var reverse_string_prefix string\n    for i := 0;\
    \ i < longest_palindrome_start_index; i++ {\n        reverse_string_prefix +=\
    \ string[i]\n    }\n    reverse_string_prefix += string[longest_palindrome_start_index:longest_palindrome_start_index+longest_palindrome_length]\n\
    \    reverse_string_prefix += string[longest_palindrome_start_index+longest_palindrome_length-1:]\n\
    \    reverse_string_prefix += string[longest_palindrome_start_index+longest_palindrome_length-1:longest_palindrome_start_index]\n\
    \n    return reverse_string_prefix", "    // Find the longest palindrome that\
    \ starts with the string.\n    // This is the longest substring that is a palindrome.\n\
    \    longest_palindrome: String = \"\"\n    for i:=0; i<len(string); i++ {\n \
    \       if is_palindrome(string[i:]) {\n            longest_palindrome = string[i:]\n\
    \            break\n        }\n    }\n\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    if\
    \ len(longest_palindrome) > 0 {\n        return string + longest_palindrome[::-1]\n\
    \    } else {\n        return string\n    }", "    if len(string) == 0 {\n   \
    \     return \"\"\n    }\n\n    // Find the longest palindrome that starts with\
    \ the string.\n    longest_palindrome_start := \"\"\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome_start\
    \ = string[i:]\n            break\n        }\n    }\n\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    return string + longest_palindrome_start[::-1]", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    var longest_palindrome:\
    \ String = \"\"\n    for i := len(string) - 1; i >= 0; i-- {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome = string[i:] + longest_palindrome\n      \
    \  }\n    }\n\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    var result: String = \"\"\n \
    \   for i := len(longest_palindrome) - 1; i >= 0; i-- {\n        result = string[i:]\
    \ + result\n    }\n    return result", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    var longest_palindrome_postfix: String = \"\
    \"\n    for i := len(string) - 1; i >= 0; i-- {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_postfix = string[i:]\n            break\n\
    \        }\n    }\n\n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    var longest_palindrome_prefix:\
    \ String = \"\"\n    for i := 0; i < len(longest_palindrome_postfix); i++ {\n\
    \        if is_palindrome(longest_palindrome_postfix[i:]) {\n            longest_palindrome_prefix\
    \ = longest_palindrome_postfix[:i]\n            break\n        }\n    }\n\n  \
    \  return longest_palindrome_prefix + longest_palindrome_postfix", "    // Find\
    \ the longest palindrome that starts with the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    // palindrome that is a prefix\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest\n    // palindrome that is a prefix of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest\n    // palindrome that\
    \ is a prefix of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest\n    // palindrome that is a prefix of the string.\n \
    \   // The longest palindrome that starts with the string is the longest\n   \
    \ // palindrome that is a prefix of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    // palindrome that is a prefix\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest\n    // palindrome that is a prefix of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest\n    // palindrome that\
    \ is a prefix of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest\n    // palindrome that is a prefix of the string.\n \
    \   // The longest palindrome that starts with the string is the longest\n   \
    \ // palindrome that is a prefix of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    // palindrome that is a prefix\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest\n    // palindrome that is a prefix of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest\n    // palindrome that\
    \ is a prefix of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest\n    // palindrome that is a prefix of the string.\n \
    \   // The longest palindrome that starts with the string is the longest\n   \
    \ // palindrome that is a prefix of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    // palindrome that is a prefix\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest\n    ", "    // Find the longest palindrome that starts with the\
    \ string.\n    // We will append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // We will start with\
    \ the string itself.\n    // We will keep track of the longest palindrome that\
    \ we have found so far.\n    var longest_palindrome = string\n    for i := 0;\
    \ i < len(string); i++ {\n        // If the string is a palindrome, we are done.\n\
    \        if is_palindrome(string[:i+1]) {\n            return string\n       \
    \ }\n        // If the string is not a palindrome, we need to find the longest\
    \ palindrome that starts with the string.\n        // We will keep track of the\
    \ longest palindrome that we have found so far.\n        if len(longest_palindrome)\
    \ < len(string[:i+1]) {\n            longest_palindrome = string[:i+1]\n     \
    \   }\n    }\n    // If we have found a palindrome, we need to append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // We will start with the string itself.\n    for i := len(string) - 1; i\
    \ >= 0; i-- {\n        // If the string is a palindrome, we are done.\n      \
    \  if is_palindrome(string[i:]) {\n            return string\n        }\n    \
    \    // If the string is not a palindrome, we need to find the longest palindrome\
    \ that starts with the string.\n        // We will keep track of the longest palindrome\
    \ that we have found so far.\n        if len(longest_palindrome) < len(string[i:])\
    \ {\n            longest_palindrome = string[i:]\n        }\n    }\n    // If\
    \ we have found a palindrome, we need to append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // We will\
    \ start with the string itself.\n    for i := 0; i < len(string); i++ {\n    \
    \    // If the string is a palindrome, we are done.\n        if is_palindrome",
  "    // Find the longest palindrome that begins with a supplied string.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatac\")\n   \
    \ // \"catacatac\"\n    // >>> make_palindrome(string: \"catacatacat\")\n    //\
    \ \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatac\")\n   \
    \ // \"catacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatac\"\
    )\n    // \"catacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"\
    catacat", "    // Find the longest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatacat\")\n \
    \   // \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacat\")\n    // \"catacatacatacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacatacat\")\n\
    \    // \"catacatacatacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacatacatacat\")\n    // \"catacatacatacat", " \
    \   var longest_palindrome: String\n    var longest_palindrome_length: Int\n \
    \   var i: Int\n    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n\
    \    var n: Int\n    var o: Int\n    var p: Int\n    var q: Int\n    var r: Int\n\
    \    var s: Int\n    var t: Int\n    var u: Int\n    var v: Int\n    var w: Int\n\
    \    var x: Int\n    var y: Int\n    var z: Int\n    var z_length: Int\n    var\
    \ z_index: Int\n    var z_index_2: Int\n    var z_index_3: Int\n    var z_index_4:\
    \ Int\n    var z_index_5: Int\n    var z_index_6: Int\n    var z_index_7: Int\n\
    \    var z_index_8: Int\n    var z_index_9: Int\n    var z_index_10: Int\n   \
    \ var z_index_11: Int\n    var z_index_12: Int\n    var z_index_13: Int\n    var\
    \ z_index_14: Int\n    var z_index_15: Int\n    var z_index_16: Int\n    var z_index_17:\
    \ Int\n    var z_index_18: Int\n    var z_index_19: Int\n    var z_index_20: Int\n\
    \    var z_index_21: Int\n    var z_index_22: Int\n    var z_index_23: Int\n \
    \   var z_index_24: Int\n    var z_index_25: Int\n    var z_index_26: Int\n  \
    \  var z_index_27: Int\n    var z_index_28: Int\n    var z_index_29: Int\n   \
    \ var z_index_30: Int\n    var z_index_31: Int\n    var z_index_32: Int\n    var\
    \ z_index_33: Int\n    var z_index_34: Int\n    var z_index_35: Int\n    var z_index_36:\
    \ Int\n    var z_index_37: Int\n    var z_index_", "    // Find the longest palindrome\
    \ that starts with the string.\n    var longest_palindrome: String = \"\"\n  \
    \  for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:]) {\n\
    \            longest_palindrome = string[i:]\n            break\n        }\n \
    \   }\n\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n    for i := len(longest_palindrome) -\
    \ 1; i >= 0; i-- {\n        if longest_palindrome[i] == 'a' {\n            longest_palindrome\
    \ = longest_palindrome[:i] + string[i:] + string[i]\n            break\n     \
    \   }\n    }\n\n    return longest_palindrome", "    if len(string) == 0 {\n \
    \       return \"\"\n    }\n    \n    // Find the longest palindrome that starts\
    \ with the string\n    longest_palindrome_index := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome_index\
    \ = i\n            break\n        }\n    }\n    \n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix\n\
    \    return string[:longest_palindrome_index] + reverse(string[longest_palindrome_index:])",
  "    // Find the longest palindrome that starts with the string\n    var longest_palindrome\
    \ = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome = string[i:]\n            break\n        }\n\
    \    }\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix\n    var new_string = string\n    for i\
    \ := 0; i < len(longest_palindrome); i++ {\n        new_string = new_string +\
    \ longest_palindrome[len(longest_palindrome) - i - 1:][::-1]\n    }\n    return\
    \ new_string", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    var longest_palindrome_postfix_index int\n    var longest_palindrome_postfix_length\
    \ int\n    for i := len(string) - 1; i >= 0; i-- {\n        if is_palindrome(string[i:])\
    \ {\n            if longest_palindrome_postfix_length < len(string[i:]) {\n  \
    \              longest_palindrome_postfix_index = i\n                longest_palindrome_postfix_length\
    \ = len(string[i:])\n            }\n        }\n    }\n\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    var reversed_prefix string\n    for i := 0; i < longest_palindrome_postfix_index;\
    \ i++ {\n        reversed_prefix += string[i]\n    }\n    reversed_prefix += string[longest_palindrome_postfix_index]\n\
    \    reversed_prefix += string[longest_palindrome_postfix_index + 1 : len(string)]\n\
    \    return reversed_prefix", "    // Find the longest palindrome that begins\
    \ with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the\
    \ longest postfix of supplied string that is a palindrome.\n    // - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    var longest_palindrome_string: String = \"\"\n    var longest_palindrome_length:\
    \ Int = 0\n    for i := 0; i < len(string); i++ {\n        var palindrome_string:\
    \ String = string[i:] + string[:i]\n        if palindrome_string.length() > longest_palindrome_length\
    \ {\n            longest_palindrome_string = palindrome_string\n            longest_palindrome_length\
    \ = palindrome_string.length()\n        }\n    }\n    return longest_palindrome_string",
  "    // Find the longest palindrome that starts with the string.\n    // This is\
    \ the longest substring that is a palindrome.\n    longest_palindrome_start_index\
    \ := 0\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_start_index = i\n            break\n     \
    \   }\n    }\n\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    return string[0:longest_palindrome_start_index]\
    \ + reverse(string[longest_palindrome_start_index:])", "    var longest_palindrome:\
    \ String\n    var longest_palindrome_length: Int\n    var i: Int\n    var j: Int\n\
    \    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n    var o: Int\n\
    \    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n    var t: Int\n\
    \    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n    var y: Int\n\
    \    var z: Int\n    var zz: Int\n    var zzz: Int\n    var zzzz: Int\n    var\
    \ zzzzz: Int\n    var zzzzzz: Int\n    var zzzzzzz: Int\n    var zzzzzzzz: Int\n\
    \    var zzzzzzzzz: Int\n    var zzzzzzzzzz: Int\n    var zzzzzzzzzzz: Int\n \
    \   var zzzzzzzzzzzz: Int\n    var zzzzzzzzzzzzz: Int\n    var zzzzzzzzzzzzzz:\
    \ Int\n    var zzzzzzzzzzzzzzz: Int\n    var zzzzzzzzzzzzzzzz: Int\n    var zzzzzzzzzzzzzzzzz:\
    \ Int\n    var zzzzzzzzzzzzzzzzzz: Int\n    var zzzzzzzzzzzzzzzzzzz: Int\n   \
    \ var zzzzzzzzzzzzzzzzzzzz: Int\n    var zzzzzzzzzzzzzzzzzzzzz: Int\n    var zzzzzzzzzzzzzzzzzzzzzz:\
    \ Int\n    var zzzzzzzzzzzzzzzzzzzzzzz: Int\n    var zzzzzzzzzzzzzzzzzzzzzzzz:\
    \ Int\n    var zzzzzzzzzzzzzzzzzzzzzzzzz: Int\n    var zzzzzzzzzzzzzzzzzzzzzzzzzz:\
    \ Int\n    var zzzzzzzzzzzzzzzzzzzzzzzzzzz: Int\n    var zzzzzzzzzzzzzzzzzzzzzzzzzzzz:\
    \ Int\n    var zzzzzzzzzzzzzzzzzzzzzzzzzzzzz: Int\n    var zzz", "    // Find\
    \ the longest palindrome that begins with a string.\n    // The longest palindrome\
    \ that begins with a string is the longest palindrome that begins with the first\
    \ character of the string.\n    // The longest palindrome that begins with the\
    \ first character of the string is the longest palindrome that begins with the\
    \ first character of the string.\n    // The longest palindrome that begins with\
    \ the first character of the string is the longest palindrome that begins with\
    \ the first character of the string.\n    // The longest palindrome that begins\
    \ with the first character of the string is the longest palindrome that begins\
    \ with the first character of the string.\n    // The longest palindrome that\
    \ begins with the first character of the string is the longest palindrome that\
    \ begins with the first character of the string.\n    // The longest palindrome\
    \ that begins with the first character of the string is the longest palindrome\
    \ that begins with the first character of the string.\n    // The longest palindrome\
    \ that begins with the first character of the string is the longest palindrome\
    \ that begins with the first character of the string.\n    // The longest palindrome\
    \ that begins with the first character of the string is the longest palindrome\
    \ that begins with the first character of the string.\n    // The longest palindrome\
    \ that begins with the first character of the string is the longest palindrome\
    \ that begins with the first character of the string.\n    // The longest palindrome\
    \ that begins with the first character of the string is the longest palindrome\
    \ that begins with the first character of the string.\n    // The longest palindrome\
    \ that begins with the first character of the string is the longest palindrome\
    \ that begins with the first character of the string.\n    // The longest palindrome\
    \ that begins with the first character of the string is the longest palindrome\
    \ that begins with the first character of the string.\n    // The longest palindrome\
    \ that begins with the first character of the string is the longest palindrome\
    \ that begins with the first character of the string.\n    // The longest palindrome\
    \ that begins with the first character of the string is the longest palindrome\
    \ that begins with the first character of the string.\n    // The longest palindrome\
    \ that begins with the first character of the string is the longest palindrome\
    \ that begins with the first character of the string.\n    // The longest palind",
  "    // Find the longest palindrome that starts with the string\n    var longest_palindrome:\
    \ String = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            if len(longest_palindrome) < len(string[i:]) {\n            \
    \    longest_palindrome = string[i:]\n            }\n        }\n    }\n\n    //\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix\n    var reversed_prefix: String = \"\"\n    for i :=\
    \ 0; i < len(longest_palindrome); i++ {\n        reversed_prefix += string[len(string)\
    \ - i - 1]\n    }\n    return longest_palindrome + reversed_prefix", "    if len(string)\
    \ == 0 {\n        return \"\"\n    }\n\n    // Find the longest palindrome that\
    \ starts with the string\n    longest_palindrome_start := \"\"\n    for i := 0;\
    \ i < len(string); i++ {\n        if is_palindrome(string[i:]) {\n           \
    \ longest_palindrome_start = string[i:]\n            break\n        }\n    }\n\
    \n    // Append the reverse of the string prefix that comes before the palindromic\
    \ suffix\n    return string + longest_palindrome_start[::-1]", "    var longest_palindrome:\
    \ String\n    var longest_palindrome_index: Int\n    var i: Int\n    var j: Int\n\
    \    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n    var palindrome:\
    \ String\n    var palindrome_index: Int\n    var palindrome_length: Int\n    var\
    \ palindrome_prefix: String\n    var palindrome_suffix: String\n    var prefix:\
    \ String\n    var suffix: String\n    var temp_string: String\n    var temp_string_index:\
    \ Int\n    var temp_string_length: Int\n    var temp_string_prefix: String\n \
    \   var temp_string_suffix: String\n    var temp_string_prefix_index: Int\n  \
    \  var temp_string_suffix_index: Int\n    var temp_string_prefix_length: Int\n\
    \    var temp_string_suffix_length: Int\n    var temp_string_prefix_suffix_length:\
    \ Int\n    var temp_string_prefix_suffix_index: Int\n    var temp_string_prefix_suffix_length:\
    \ Int\n    var temp_string_prefix_suffix_index: Int\n    var temp_string_prefix_suffix_length:\
    \ Int\n    var temp_string_prefix_suffix_index: Int\n    var temp_string_prefix_suffix_length:\
    \ Int\n    var temp_string_prefix_suffix_index: Int\n    var temp_string_prefix_suffix_length:\
    \ Int\n    var temp_string_prefix_suffix_index: Int\n    var temp_string_prefix_suffix_length:\
    \ Int\n    var temp_string_prefix_suffix_index: Int\n    var temp_string_prefix_suffix_length:\
    \ Int\n    var temp_string_prefix_suffix_index: Int\n    var temp_string_prefix_suffix_length:\
    \ Int\n    var temp_string_prefix_suffix_index: Int\n    var temp_string_prefix_suffix_length:\
    \ Int\n    var temp_string_prefix_suffix_index: Int\n    var temp_string_prefix_suffix_length:\
    \ Int\n    var temp_string_prefix_suff", "    // Find the longest palindrome that\
    \ starts with the string.\n    var longest_palindrome: String = \"\"\n    for\
    \ i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:]) {\n   \
    \         if len(string[i:]) > len(longest_palindrome) {\n                longest_palindrome\
    \ = string[i:]\n            }\n        }\n    }\n\n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    var reversed_string: String = \"\"\n    for i := 0; i < len(longest_palindrome);\
    \ i++ {\n        reversed_string = reversed_string + string[i]\n    }\n    return\
    \ reversed_string", "    // Find the longest palindrome that begins with a supplied\
    \ string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // - Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    // >>> make_palindrome(string: \"catac\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"catacat\")\n    // \"catacat\"\n    //\
    \ >>> make_palindrome(string: \"catacatac\")\n    // \"catacatac\"\n    // >>>\
    \ make_palindrome(string: \"catacatacat\")\n    // \"catacatacat\"\n    // >>>\
    \ make_palindrome(string: \"catacatacatac\")\n    // \"catacatacatac\"\n    //\
    \ >>> make_palindrome(string: \"catacatacatacat\")\n    // \"catacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatac\")\n    // \"catacatacatacatac\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacat\")\n    // \"catacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatac\")\n    // \"catacatacatacatacatac\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacat\")\n    // \"catacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\")\n    // \"\
    catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacat", " \
    \   // Find the longest postfix of supplied string that is a palindrome.\n   \
    \ // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    var longest_palindrome_postfix\
    \ = \"\"\n    var longest_palindrome_prefix = \"\"\n    var palindrome_suffix\
    \ = \"\"\n    var palindrome_prefix = \"\"\n    var palindrome_length = 0\n  \
    \  for i := len(string) - 1; i >= 0; i-- {\n        if string[i] == string[i]\
    \ {\n            palindrome_suffix = string[i] + palindrome_suffix\n         \
    \   palindrome_length += 1\n        } else {\n            if palindrome_length\
    \ > longest_palindrome_length {\n                longest_palindrome_postfix =\
    \ string[i] + longest_palindrome_postfix\n                longest_palindrome_prefix\
    \ = string[i] + longest_palindrome_prefix\n                longest_palindrome_length\
    \ = palindrome_length\n            }\n            palindrome_length = 0\n    \
    \    }\n    }\n    if palindrome_length > longest_palindrome_length {\n      \
    \  longest_palindrome_postfix = string[0] + longest_palindrome_postfix\n     \
    \   longest_palindrome_prefix = string[0] + longest_palindrome_prefix\n      \
    \  longest_palindrome_length = palindrome_length\n    }\n    return longest_palindrome_prefix\
    \ + longest_palindrome_postfix", "    // Find the longest palindrome that begins\
    \ with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the\
    \ longest postfix of supplied string that is a palindrome.\n    // - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    // >>> make_palindrome(string: \"catac\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"catacat\")\n    // \"catacat\"\n    //\
    \ >>> make_palindrome(string: \"catacatac\")\n    // \"catacatac\"\n    // >>>\
    \ make_palindrome(string: \"catacatacat\")\n    // \"catacatacat\"\n    // >>>\
    \ make_palindrome(string: \"catacatacatac\")\n    // \"catacatacatac\"\n    //\
    \ >>> make_palindrome(string: \"catacatacatacat\")\n    // \"catacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatac\")\n    // \"catacatacatacatac\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacat\")\n    // \"catacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatac\")\n    // \"catacatacatacatacatac\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacat\")\n    // \"catacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\")\n    // \"\
    catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacat", " \
    \   if len(string) == 0 {\n        return \"\"\n    }\n    \n    longest_palindrome\
    \ := \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome = string[i:]\n            break\n        }\n\
    \    }\n    \n    if len(longest_palindrome) == 0 {\n        return string\n \
    \   }\n    \n    return string + reverse(string[:len(longest_palindrome)])", " \
    \   // Find the longest palindrome that starts with the string\n    var longest_palindrome\
    \ = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome = string[i:]\n            break\n        }\n\
    \    }\n\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix\n    var reversed_prefix = \"\"\n    for\
    \ i := len(longest_palindrome) - 1; i >= 0; i-- {\n        reversed_prefix = string[i]\
    \ + reversed_prefix\n    }\n\n    return reversed_prefix + longest_palindrome",
  "    // Find the longest palindrome that starts with the string\n    var longest_palindrome\
    \ = \"\"\n    var longest_palindrome_length = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        var palindrome = string[i:] + string[:i]\n        if palindrome.length()\
    \ > longest_palindrome_length {\n            longest_palindrome = palindrome\n\
    \            longest_palindrome_length = palindrome.length()\n        }\n    }\n\
    \n    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix\n    var reversed_string = \"\"\n    for i :=\
    \ 0; i < longest_palindrome_length; i++ {\n        reversed_string += string[i]\n\
    \    }\n    reversed_string += string[longest_palindrome_length:]\n    return\
    \ reversed_string", "    // Find the longest palindrome that starts with the string\n\
    \    var longest_palindrome: String = \"\"\n    for i := 0; i < len(string); i++\
    \ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome =\
    \ string[i:]\n            break\n        }\n    }\n\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix\n\
    \    var reversed_string: String = \"\"\n    for i := 0; i < len(longest_palindrome);\
    \ i++ {\n        reversed_string = reversed_string + string[i]\n    }\n\n    return\
    \ reversed_string", "    // Find the longest palindrome that starts with the string.\n\
    \    var longest_palindrome = \"\"\n    for i := 0; i < len(string); i++ {\n \
    \       if is_palindrome(string[i:]) {\n            longest_palindrome = string[i:]\n\
    \            break\n        }\n    }\n\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    var\
    \ reversed_string = \"\"\n    for i := 0; i < len(longest_palindrome); i++ {\n\
    \        reversed_string += string[i]\n    }\n    reversed_string = reverse(reversed_string)\n\
    \    return longest_palindrome + reversed_string", "    // Find the longest palindrome\
    \ that starts with the string.\n    // We will append the reverse of the string\
    \ to the end of the string.\n    // We will start at the end of the string and\
    \ work our way backwards.\n    // We will stop when we reach the beginning of\
    \ the string.\n    // We will then append the reverse of the string to the end\
    \ of the string.\n    // We will start at the beginning of the string and work\
    \ our way forwards.\n    // We will stop when we reach the end of the string.\n\
    \    // We will then append the reverse of the string to the end of the string.\n\
    \    // We will start at the beginning of the string and work our way backwards.\n\
    \    // We will stop when we reach the end of the string.\n    // We will then\
    \ append the reverse of the string to the end of the string.\n    // We will start\
    \ at the beginning of the string and work our way forwards.\n    // We will stop\
    \ when we reach the end of the string.\n    // We will then append the reverse\
    \ of the string to the end of the string.\n    // We will start at the beginning\
    \ of the string and work our way backwards.\n    // We will stop when we reach\
    \ the end of the string.\n    // We will then append the reverse of the string\
    \ to the end of the string.\n    // We will start at the beginning of the string\
    \ and work our way forwards.\n    // We will stop when we reach the end of the\
    \ string.\n    // We will then append the reverse of the string to the end of\
    \ the string.\n    // We will start at the beginning of the string and work our\
    \ way backwards.\n    // We will stop when we reach the end of the string.\n \
    \   // We will then append the reverse of the string to the end of the string.\n\
    \    // We will start at the beginning of the string and work our way forwards.\n\
    \    // We will stop when we reach the end of the string.\n    // We will then\
    \ append the reverse of the string to the end of the string.\n    // We will start\
    \ at the beginning of the string and work our way backwards.\n    // We will stop\
    \ when we reach the end of the string.\n    // We will then append the reverse\
    \ of the string to the end of the string.\n    // We will start at the beginning\
    \ of the string", "    if string == \"\" {\n        return \"\"\n    }\n    \n\
    \    longest_palindrome_postfix := longest_palindrome_postfix(string)\n    \n\
    \    return string + reverse(string[:len(string) - len(longest_palindrome_postfix)])",
  "    if len(string) == 0 {\n        return \"\"\n    }\n    \n    // Find the longest\
    \ palindrome that starts with the string\n    longest_palindrome_start := \"\"\
    \n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_start = string[i:]\n            break\n  \
    \      }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix\n    if len(longest_palindrome_start)\
    \ > 0 {\n        return string + longest_palindrome_start[::-1]\n    }\n    \n\
    \    return \"\"", "    // Find the longest palindrome that starts with the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(string: \"\")\n \
    \   // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\n \
    \   // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    var longest_palindrome_string:\
    \ String = \"\"\n    var longest_palindrome_length: Int = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        if is_palindrome(string[i:]) {\n            if\
    \ len(string[i:]) > longest_palindrome_length {\n                longest_palindrome_string\
    \ = string[i:]\n                longest_palindrome_length = len(string[i:])\n\
    \            }\n        }\n    }\n    if len(longest_palindrome_string) == 0 {\n\
    \        return string\n    }\n    var reverse_string: String = \"\"\n    for\
    \ i := 0; i < len(longest_palindrome_string); i++ {\n        reverse_string +=\
    \ longest_palindrome_string[len(longest_palindrome_string) - i - 1]\n    }\n \
    \   return string + reverse_string", "    // Find the longest palindrome that\
    \ begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    // - Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    // >>> make_palindrome(string: \"catac\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"catacat\")\n    // \"catacat\"\n    //\
    \ >>> make_palindrome(string: \"catacatacat\")\n    // \"catacatacat\"\n    //\
    \ >>> make_palindrome(string: \"catacatacatacat\")\n    // \"catacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacat\")\n    // \"catacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacat\")\n    // \"catacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacat\")\n    //\
    \ \"catacatacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacatacat\")\n    // \"catacatacatacatacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacat", "    // Find the longest palindrome that starts\
    \ with the string.\n    // We'll use this to find the shortest palindrome.\n \
    \   longest_palindrome: String = \"\"\n    for i := 0; i < len(string); i++ {\n\
    \        if is_palindrome(string[i:]) {\n            longest_palindrome = string[i:]\n\
    \            break\n        }\n    }\n\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    for\
    \ i := 0; i < len(longest_palindrome); i++ {\n        if is_palindrome(longest_palindrome[:i])\
    \ {\n            return longest_palindrome + longest_palindrome[i:]\n        }\n\
    \    }\n\n    return longest_palindrome", "    // Find the longest palindrome\
    \ that starts with the string.\n    var longest_palindrome_string: String = \"\
    \"\n    var longest_palindrome_length: Int = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        var palindrome_string: String = string[i:] + string[:i]\n   \
    \     if palindrome_string.length() > longest_palindrome_length {\n          \
    \  longest_palindrome_string = palindrome_string\n            longest_palindrome_length\
    \ = palindrome_string.length()\n        }\n    }\n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    return string + longest_palindrome_string[:longest_palindrome_length]", " \
    \   // Find the longest palindrome that starts with the string.\n    var longest_palindrome_string:\
    \ String = \"\"\n    var longest_palindrome_length: Int = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        if is_palindrome(string[i:]) {\n            if\
    \ len(string[i:]) > longest_palindrome_length {\n                longest_palindrome_string\
    \ = string[i:]\n                longest_palindrome_length = len(string[i:])\n\
    \            }\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    var palindrome_string:\
    \ String = \"\"\n    for i := 0; i < longest_palindrome_length; i++ {\n      \
    \  palindrome_string += string[i]\n    }\n    for i := longest_palindrome_length\
    \ - 1; i >= 0; i-- {\n        palindrome_string += string[i]\n    }\n    return\
    \ palindrome_string", "    if len(string) == 0 {\n        return \"\"\n    }\n\
    \    \n    // Find the longest palindrome that starts with the string\n    var\
    \ longest_palindrome_prefix = \"\"\n    var longest_palindrome_suffix = \"\"\n\
    \    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            if len(longest_palindrome_prefix) == 0 {\n                longest_palindrome_prefix\
    \ = string[:i]\n            }\n            \n            if len(longest_palindrome_suffix)\
    \ == 0 {\n                longest_palindrome_suffix = string[i:]\n           \
    \ }\n        }\n    }\n    \n    // Append the reverse of the string prefix to\
    \ the end of the string\n    return string + longest_palindrome_suffix[::-1]",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    var\
    \ longest_palindrome_postfix = \"\"\n    for i := len(string) - 1; i >= 0; i--\
    \ {\n        if string[i] == string[i] {\n            longest_palindrome_postfix\
    \ = string[i:] + longest_palindrome_postfix\n        }\n    }\n\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    var longest_palindrome_prefix = \"\"\n    for i := len(longest_palindrome_postfix)\
    \ - 1; i >= 0; i-- {\n        if longest_palindrome_postfix[i] == longest_palindrome_postfix[i]\
    \ {\n            longest_palindrome_prefix = longest_palindrome_postfix[:i] +\
    \ longest_palindrome_prefix\n        }\n    }\n\n    return longest_palindrome_prefix",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatac\")\n   \
    \ // \"catacatac\"\n    // >>> make_palindrome(string: \"catacatacat\")\n    //\
    \ \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatac\")\n   \
    \ // \"catacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatac\"\
    )\n    // \"catacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"\
    cat", "    // Find the longest palindrome that begins with the string.\n    //\
    \ The longest palindrome is the longest substring that is a palindrome.\n    //\
    \ The longest substring is the longest prefix of the string that is a palindrome.\n\
    \    // The longest prefix is the longest substring that is a prefix of the string.\n\
    \    // The longest substring is the longest prefix of the string that is a substring.\n\
    \    // The longest prefix is the longest substring that is a prefix of the string.\n\
    \    // The longest substring is the longest prefix of the string that is a substring.\n\
    \    // The longest prefix is the longest substring that is a prefix of the string.\n\
    \    // The longest substring is the longest prefix of the string that is a substring.\n\
    \    // The longest prefix is the longest substring that is a prefix of the string.\n\
    \    // The longest substring is the longest prefix of the string that is a substring.\n\
    \    // The longest prefix is the longest substring that is a prefix of the string.\n\
    \    // The longest substring is the longest prefix of the string that is a substring.\n\
    \    // The longest prefix is the longest substring that is a prefix of the string.\n\
    \    // The longest substring is the longest prefix of the string that is a substring.\n\
    \    // The longest prefix is the longest substring that is a prefix of the string.\n\
    \    // The longest substring is the longest prefix of the string that is a substring.\n\
    \    // The longest prefix is the longest substring that is a prefix of the string.\n\
    \    // The longest substring is the longest prefix of the string that is a substring.\n\
    \    // The longest prefix is the longest substring that is a prefix of the string.\n\
    \    // The longest substring is the longest prefix of the string that is a substring.\n\
    \    // The longest prefix is the longest substring that is a prefix of the string.\n\
    \    // The longest substring is the longest prefix of the string that is a substring.\n\
    \    // The longest prefix is the longest substring that is a prefix of the string.\n\
    \    // The longest substring is the longest prefix of the string that is a substring.\n\
    \    // The longest prefix is the longest substring that is a prefix of the string.\n\
    \    // The longest substring is the", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    var longest_palindrome: String = \"\"\n  \
    \  for i := len(string) - 1; i >= 0; i-- {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome = string[i:] + longest_palindrome\n      \
    \  }\n    }\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    return string + longest_palindrome[::-1]",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    var\
    \ longest_palindrome: String = \"\"\n    for i := len(string) - 1; i >= 0; i--\
    \ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome =\
    \ string[i:] + longest_palindrome\n        }\n    }\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    return string + longest_palindrome[::-1]", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    var longest_palindrome_postfix\
    \ = \"\"\n    for i := len(string) - 1; i >= 0; i-- {\n        if string[i] ==\
    \ string[i] {\n            longest_palindrome_postfix = string[i] + longest_palindrome_postfix\n\
    \        } else {\n            break\n        }\n    }\n\n    // Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    var longest_palindrome_prefix = \"\"\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == string[i] {\n            longest_palindrome_prefix\
    \ = string[i] + longest_palindrome_prefix\n        } else {\n            break\n\
    \        }\n    }\n\n    return longest_palindrome_prefix + longest_palindrome_postfix",
  "    // Find the longest palindrome that starts with the string\n    var longest_palindrome:\
    \ String = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome = string[i:]\n            break\n        }\n\
    \    }\n\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix\n    var new_string: String = \"\"\n   \
    \ for i := 0; i < len(longest_palindrome); i++ {\n        new_string = new_string\
    \ + string[i]\n    }\n    for i := len(new_string) - 1; i >= 0; i-- {\n      \
    \  new_string = string[i] + new_string\n    }\n\n    return new_string", "   \
    \ // Find the longest palindrome that begins with a string.\n    // Algorithm\
    \ idea:\n    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(string: \"\")\n \
    \   // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\n \
    \   // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatacat\")\n \
    \   // \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacat\")\n    // \"catacatacatacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacatacat\")\n\
    \    // \"catacatacatacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacatacatacat\")\n    // \"catacatacatacatacatac",
  "    if len(string) == 0 {\n        return \"\"\n    }\n    \n    // Find the longest\
    \ palindrome that starts with the string\n    longest_palindrome_start := \"\"\
    \n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_start = string[i:]\n            break\n  \
    \      }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix\n    return string + longest_palindrome_start[::-1]",
  "    if string == \"\" {\n        return \"\"\n    }\n    \n    // Find the longest\
    \ palindrome that starts with the string\n    longest_palindrome_start := \"\"\
    \n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_start = string[i:]\n            break\n  \
    \      }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix\n    if longest_palindrome_start\
    \ != \"\" {\n        return string + longest_palindrome_start[::-1]\n    }\n \
    \   \n    return \"\"", "    // Find the longest palindrome that starts with the\
    \ string\n    // and append the reverse of the string before it to the end\n \
    \   // of the string.\n    return string + reverse(string[:len(string) - len(find_palindrome(string))])",
  "    // Find the longest palindrome that starts with the string\n    var longest_palindrome_start_index\
    \ int\n    var longest_palindrome_length int\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            if longest_palindrome_length\
    \ < len(string[i:]) {\n                longest_palindrome_start_index = i\n  \
    \              longest_palindrome_length = len(string[i:])\n            }\n  \
    \      }\n    }\n\n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix\n    var palindrome_string =\
    \ string[:longest_palindrome_start_index]\n    for i := 0; i < longest_palindrome_length;\
    \ i++ {\n        palindrome_string += string[longest_palindrome_start_index +\
    \ longest_palindrome_length - i - 1 : longest_palindrome_start_index + longest_palindrome_length\
    \ - i]\n    }\n    return palindrome_string", "    // Find the longest palindrome\
    \ that starts with the string\n    var longest_palindrome: String = \"\"\n   \
    \ for i := 0; i < len(string); i++ {\n        var palindrome: String = string[i:]\n\
    \        if palindrome == palindrome[::-1] {\n            if len(palindrome) >\
    \ len(longest_palindrome) {\n                longest_palindrome = palindrome\n\
    \            }\n        }\n    }\n\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix\n    var palindrome_prefix:\
    \ String = string[:len(string) - len(longest_palindrome)]\n    if palindrome_prefix\
    \ == palindrome_prefix[::-1] {\n        return palindrome_prefix + longest_palindrome\n\
    \    } else {\n        return \"\"\n    }", "    // Find the longest palindrome\
    \ that begins with a supplied string.\n    // Algorithm idea is simple:\n    //\
    \ - Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    // >>> make_palindrome(string: \"\")\n    // \"\
    \"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\n    // >>>\
    \ make_palindrome(string: \"cata\")\n    // \"catac\"\n    var longest_palindrome:\
    \ String = \"\"\n    var longest_palindrome_length: Int = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        for j := 0; j < len(string); j++ {\n         \
    \   if i < j {\n                if string[i] == string[j] {\n                \
    \    if len(string) - i - j > longest_palindrome_length {\n                  \
    \      longest_palindrome = string[i:j]\n                        longest_palindrome_length\
    \ = len(string) - i - j\n                    }\n                }\n          \
    \  }\n        }\n    }\n    if len(longest_palindrome) > 0 {\n        return string\
    \ + longest_palindrome[::-1]\n    } else {\n        return string\n    }", " \
    \   // Find the longest palindrome that begins with a supplied string.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    var longest_palindrome_string:\
    \ String\n    var longest_palindrome_length: Int\n    for i := 0; i < len(string);\
    \ i++ {\n        for j := i + 1; j <= len(string); j++ {\n            if is_palindrome(string[i:j])\
    \ {\n                if j - i > longest_palindrome_length {\n                \
    \    longest_palindrome_string = string[i:j]\n                    longest_palindrome_length\
    \ = j - i\n                }\n            }\n        }\n    }\n    if longest_palindrome_length\
    \ == 0 {\n        return \"\"\n    }\n    return string[:longest_palindrome_length]\
    \ + reverse(string[:longest_palindrome_length])", "    if string == \"\" {\n \
    \       return \"\"\n    }\n    \n    var longest_palindrome_index int\n    var\
    \ longest_palindrome_length int\n    \n    for i := 0; i < len(string); i++ {\n\
    \        if is_palindrome(string[i:]) {\n            if longest_palindrome_length\
    \ < len(string[i:]) {\n                longest_palindrome_index = i\n        \
    \        longest_palindrome_length = len(string[i:])\n            }\n        }\n\
    \    }\n    \n    return string[:longest_palindrome_index] + string[longest_palindrome_index+longest_palindrome_length:]",
  "    var longest_palindrome: String\n    var longest_palindrome_length: Int\n  \
    \  var i: Int\n    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n\
    \    var n: Int\n    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n\
    \    var t: Int\n    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n\
    \    var y: Int\n    var z: Int\n    var result: String\n    var result_length:\
    \ Int\n    var temp: String\n    var temp_length: Int\n    var temp_string: String\n\
    \    var temp_string_length: Int\n    var temp_string_length_2: Int\n    var temp_string_length_3:\
    \ Int\n    var temp_string_length_4: Int\n    var temp_string_length_5: Int\n\
    \    var temp_string_length_6: Int\n    var temp_string_length_7: Int\n    var\
    \ temp_string_length_8: Int\n    var temp_string_length_9: Int\n    var temp_string_length_10:\
    \ Int\n    var temp_string_length_11: Int\n    var temp_string_length_12: Int\n\
    \    var temp_string_length_13: Int\n    var temp_string_length_14: Int\n    var\
    \ temp_string_length_15: Int\n    var temp_string_length_16: Int\n    var temp_string_length_17:\
    \ Int\n    var temp_string_length_18: Int\n    var temp_string_length_19: Int\n\
    \    var temp_string_length_20: Int\n    var temp_string_length_21: Int\n    var\
    \ temp_string_length_22: Int\n    var temp_string_length_23: Int\n    var temp_string_length_24:\
    \ Int\n    var temp_string_length_25: Int\n    var temp_string_length_26: Int\n\
    \    var temp_string_length_27: Int\n    var temp_string_length_28: Int\n    var\
    \ temp_string_length_29: Int\n    var temp_string_", "    if len(string) == 0\
    \ {\n        return \"\"\n    }\n    \n    // Find the longest palindrome that\
    \ starts with the string\n    var longest_palindrome_prefix = \"\"\n    var longest_palindrome_length\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            if len(string[i:]) > longest_palindrome_length {\n          \
    \      longest_palindrome_prefix = string[i:]\n                longest_palindrome_length\
    \ = len(string[i:])\n            }\n        }\n    }\n    \n    // Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix\n    var new_string = string\n    for i := 0; i < longest_palindrome_length;\
    \ i++ {\n        new_string = string[i:] + new_string[:i]\n    }\n    \n    return\
    \ new_string", "    // Find the longest palindrome that starts with a string.\n\
    \    // The longest palindrome that starts with a string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palindrome\
    \ that starts with the first character of the string is the longest palindrome\
    \ that starts with the first character of the string.\n    // The longest palind",
  "    // Find the longest palindrome that begins with a supplied string.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatacat\")\n \
    \   // \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacat\")\n    // \"catacatacatacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacatacat\")\n\
    \    // \"catacatacatacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacatacatacat\")\n    // \"catacatacatacat", " \
    \   // Find the longest palindrome that starts with the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome that\n    //\
    \ is a substring of the string.\n    // The longest palindrome that starts with\
    \ the string is the longest palindrome\n    // that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a substring of the string.\n    // The longest palindrome that\
    \ starts with the string is the longest palindrome\n    // that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome\n    // that is a substring of the string.\n    // The\
    \ longest palindrome that starts with the string is the longest palindrome\n \
    \   // that is a substring of the string.\n    // The longest palindrome that\
    \ starts with the string is the longest palindrome\n    // that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome\n    // that is a substring of the string.\n    // The\
    \ longest palindrome that starts with the string is the longest palindrome\n \
    \   // that is a substring of the string.\n    // The longest palindrome that\
    \ starts with the string is the longest palindrome\n    // that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome\n    // that is a substring of the string.\n    // The\
    \ longest palindrome that starts with the string is the longest palindrome\n \
    \   // that is a substring of the string.\n    // The longest palindrome that\
    \ starts with the string is the longest palindrome\n    // that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome\n    // that is a substring of the string.\n    // The\
    \ longest palindrome that starts with the string is the longest palindrome\n \
    \   // that is a substring of the string.\n    // The longest palindrome that\
    \ starts with the string is the longest palindrome\n    // that is a substring\
    \ of the string.\n    ", "    // Find the longest palindrome that starts with\
    \ the string\n    var longest_palindrome_prefix: String = \"\"\n    var longest_palindrome_suffix:\
    \ String = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            if len(longest_palindrome_prefix) == 0 {\n                longest_palindrome_prefix\
    \ = string[i:]\n            } else {\n                longest_palindrome_prefix\
    \ = string[i:] + longest_palindrome_prefix\n            }\n            if len(longest_palindrome_suffix)\
    \ == 0 {\n                longest_palindrome_suffix = string[:i]\n           \
    \ } else {\n                longest_palindrome_suffix = longest_palindrome_suffix\
    \ + string[i:]\n            }\n        }\n    }\n    return longest_palindrome_prefix\
    \ + longest_palindrome_suffix", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    var longest_palindrome: String = \"\"\n    for i\
    \ := len(string) - 1; i >= 0; i-- {\n        if is_palindrome(string[i:]) {\n\
    \            longest_palindrome = string[i:] + longest_palindrome\n        }\n\
    \    }\n\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n    var result: String = string + longest_palindrome[::-1]\n\
    \    return result", "    // Find the longest palindrome that starts with the\
    \ string.\n    var longest_palindrome: String = \"\"\n    var longest_palindrome_length:\
    \ Int = 0\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            if len(string[i:]) > longest_palindrome_length {\n          \
    \      longest_palindrome = string[i:]\n                longest_palindrome_length\
    \ = len(string[i:])\n            }\n        }\n    }\n\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    var reversed_string: String = \"\"\n    for i := 0; i < longest_palindrome_length;\
    \ i++ {\n        reversed_string += string[i]\n    }\n    reversed_string = reverse(reversed_string)\n\
    \    return longest_palindrome + reversed_string", "    // Find the longest palindrome\
    \ that begins with a supplied string.\n    // Algorithm idea is simple:\n    //\
    \ - Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    // >>> make_palindrome(string: \"\")\n    // \"\
    \"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\n    // >>>\
    \ make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatac\")\n   \
    \ // \"catacatac\"\n    // >>> make_palindrome(string: \"catacatacat\")\n    //\
    \ \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatac\")\n   \
    \ // \"catacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatac\"\
    )\n    // \"catacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"\
    catacat", "    if string == \"\" {\n        return \"\"\n    }\n    \n    // Find\
    \ the longest palindrome that starts with string.\n    longest_palindrome_start\
    \ := \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_start = string[i:]\n            break\n  \
    \      }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    if longest_palindrome_start\
    \ != \"\" {\n        return string + reverse(longest_palindrome_start)\n    }\n\
    \    \n    return \"\"", "    // Find the longest palindrome that starts with\
    \ the string.\n    // The longest palindrome that starts with the string is the\
    \ longest palindrome that\n    // is a prefix of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome\n    // that\
    \ is a prefix of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest palindrome\n    // that is a prefix of the string.\n \
    \   // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a prefix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that is a prefix of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a prefix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that is a prefix of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a prefix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that is a prefix of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a prefix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that is a prefix of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a prefix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that is a prefix of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a prefix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that is a prefix of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a prefix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palind", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n    \n    // Find the longest palindrome that starts with the string\n\
    \    longest_palindrome_start := \"\"\n    for i := 0; i < len(string); i++ {\n\
    \        if is_palindrome(string[i:]) {\n            longest_palindrome_start\
    \ = string[i:]\n            break\n        }\n    }\n    \n    // Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix\n    if longest_palindrome_start != \"\" {\n        return string + reverse(longest_palindrome_start)\n\
    \    }\n    \n    return \"\"", "    // Find the longest palindrome that begins\
    \ with a supplied string.\n    var longest_palindrome: String = \"\"\n    for\
    \ i := 0; i < len(string); i++ {\n        for j := 0; j < len(string); j++ {\n\
    \            if i < j {\n                if string[i] == string[j] {\n       \
    \             if len(string) - i - j > len(longest_palindrome) {\n           \
    \             longest_palindrome = string[i:j]\n                    }\n      \
    \          }\n            }\n        }\n    }\n    // Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    for i := 0; i < len(longest_palindrome); i++ {\n        for j := 0; j < len(longest_palindrome);\
    \ j++ {\n            if i < j {\n                if longest_palindrome[i] == longest_palindrome[j]\
    \ {\n                    if len(longest_palindrome) - i - j > len(longest_palindrome)\
    \ {\n                        longest_palindrome = longest_palindrome[i:j] + longest_palindrome[j:i]\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return longest_palindrome", "    // Find the longest palindrome that starts\
    \ with the string\n    var longest_palindrome: String = \"\"\n    var longest_palindrome_length:\
    \ Int = 0\n    for i := 0; i < len(string); i++ {\n        var palindrome: String\
    \ = string[i:] + string[:i]\n        if palindrome.length() > longest_palindrome_length\
    \ {\n            longest_palindrome = palindrome\n            longest_palindrome_length\
    \ = palindrome.length()\n        }\n    }\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix\n    var\
    \ reversed_string: String = \"\"\n    for i := 0; i < longest_palindrome_length;\
    \ i++ {\n        reversed_string += string[i]\n    }\n    reversed_string += string[longest_palindrome_length:]\n\
    \    return longest_palindrome + reversed_string", "    // Find the longest palindrome\
    \ that starts with the string.\n    var longest_palindrome_start_index int\n \
    \   var longest_palindrome_length int\n    for i := 0; i < len(string); i++ {\n\
    \        if is_palindrome(string[i:]) {\n            if i - longest_palindrome_start_index\
    \ > longest_palindrome_length {\n                longest_palindrome_start_index\
    \ = i\n                longest_palindrome_length = i - longest_palindrome_start_index\n\
    \            }\n        }\n    }\n\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    var reverse_string_prefix\
    \ string\n    for i := longest_palindrome_start_index - 1; i >= 0; i-- {\n   \
    \     reverse_string_prefix += string[i]\n    }\n    return string + reverse_string_prefix",
  "    // Find the longest palindrome that begins with a supplied string.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    var longest_palindrome:\
    \ String = \"\"\n    var longest_palindrome_length: Int = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        var palindrome: String = string[i:] + string[:i]\n\
    \        if palindrome.length() > longest_palindrome_length {\n            longest_palindrome\
    \ = palindrome\n            longest_palindrome_length = palindrome.length()\n\
    \        }\n    }\n    return longest_palindrome", "    // Find the longest palindrome\
    \ that begins with a string.\n    // If string is empty, return empty string.\n\
    \    if len(string) == 0 {\n        return \"\"\n    }\n    // Find the longest\
    \ palindrome that begins with a string.\n    // If string is empty, return empty\
    \ string.\n    if len(string) == 1 {\n        return string\n    }\n    // Find\
    \ the longest palindrome that begins with a string.\n    // If string is empty,\
    \ return empty string.\n    if len(string) == 2 {\n        return string\n   \
    \ }\n    // Find the longest palindrome that begins with a string.\n    // If\
    \ string is empty, return empty string.\n    if len(string) == 3 {\n        return\
    \ string\n    }\n    // Find the longest palindrome that begins with a string.\n\
    \    // If string is empty, return empty string.\n    if len(string) == 4 {\n\
    \        return string\n    }\n    // Find the longest palindrome that begins\
    \ with a string.\n    // If string is empty, return empty string.\n    if len(string)\
    \ == 5 {\n        return string\n    }\n    // Find the longest palindrome that\
    \ begins with a string.\n    // If string is empty, return empty string.\n   \
    \ if len(string) == 6 {\n        return string\n    }\n    // Find the longest\
    \ palindrome that begins with a string.\n    // If string is empty, return empty\
    \ string.\n    if len(string) == 7 {\n        return string\n    }\n    // Find\
    \ the longest palindrome that begins with a string.\n    // If string is empty,\
    \ return empty string.\n    if len(string) == 8 {\n        return string\n   \
    \ }\n    // Find the longest palindrome that begins with a string.\n    // If\
    \ string is empty, return empty string.\n    if len(string) == 9 {\n        return\
    \ string\n    }\n    // Find the longest palindrome that begins with a string.\n\
    \    // If string is empty, return empty string.\n    if len(string) == 10 {\n\
    \        return string\n    }\n    // Find the longest palindrome that begins\
    \ with a string.\n    // If string is empty, return empty string.\n    ", "  \
    \  // Find the longest palindrome that starts with a given string.\n    // This\
    \ is the longest substring that is a palindrome.\n    // We will append the reverse\
    \ of the substring to the end of the string.\n    // We will start with the longest\
    \ substring that is a palindrome.\n    // We will start with the substring that\
    \ is a palindrome.\n    // We will start with the substring that is a palindrome.\n\
    \    // We will start with the substring that is a palindrome.\n    // We will\
    \ start with the substring that is a palindrome.\n    // We will start with the\
    \ substring that is a palindrome.\n    // We will start with the substring that\
    \ is a palindrome.\n    // We will start with the substring that is a palindrome.\n\
    \    // We will start with the substring that is a palindrome.\n    // We will\
    \ start with the substring that is a palindrome.\n    // We will start with the\
    \ substring that is a palindrome.\n    // We will start with the substring that\
    \ is a palindrome.\n    // We will start with the substring that is a palindrome.\n\
    \    // We will start with the substring that is a palindrome.\n    // We will\
    \ start with the substring that is a palindrome.\n    // We will start with the\
    \ substring that is a palindrome.\n    // We will start with the substring that\
    \ is a palindrome.\n    // We will start with the substring that is a palindrome.\n\
    \    // We will start with the substring that is a palindrome.\n    // We will\
    \ start with the substring that is a palindrome.\n    // We will start with the\
    \ substring that is a palindrome.\n    // We will start with the substring that\
    \ is a palindrome.\n    // We will start with the substring that is a palindrome.\n\
    \    // We will start with the substring that is a palindrome.\n    // We will\
    \ start with the substring that is a palindrome.\n    // We will start with the\
    \ substring that is a palindrome.\n    // We will start with the substring that\
    \ is a palindrome.\n    ", "    // Find the longest palindrome that begins with\
    \ a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    // >>> make_palindrome(string: \"catac\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"catacat\")\n    // \"catacat\"\n    //\
    \ >>> make_palindrome(string: \"catacatac\")\n    // \"catacatac\"\n    // >>>\
    \ make_palindrome(string: \"catacatacat\")\n    // \"catacatacat\"\n    // >>>\
    \ make_palindrome(string: \"catacatacatac\")\n    // \"catacatacatac\"\n    //\
    \ >>> make_palindrome(string: \"catacatacatacat\")\n    // \"catacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatac\")\n    // \"catacatacatacatac\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacat\")\n    // \"catacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatac\")\n    // \"catacatacatacatacatac\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacat\")\n    // \"catacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\")\n    // \"\
    catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacat", " \
    \   var longest_palindrome: String\n    var longest_palindrome_length: Int\n \
    \   var i: Int\n    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n\
    \    var n: Int\n    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n\
    \    var t: Int\n    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n\
    \    var y: Int\n    var z: Int\n    var result: String\n    var temp: String\n\
    \    var temp_length: Int\n    var temp_length_2: Int\n    var temp_length_3:\
    \ Int\n    var temp_length_4: Int\n    var temp_length_5: Int\n    var temp_length_6:\
    \ Int\n    var temp_length_7: Int\n    var temp_length_8: Int\n    var temp_length_9:\
    \ Int\n    var temp_length_10: Int\n    var temp_length_11: Int\n    var temp_length_12:\
    \ Int\n    var temp_length_13: Int\n    var temp_length_14: Int\n    var temp_length_15:\
    \ Int\n    var temp_length_16: Int\n    var temp_length_17: Int\n    var temp_length_18:\
    \ Int\n    var temp_length_19: Int\n    var temp_length_20: Int\n    var temp_length_21:\
    \ Int\n    var temp_length_22: Int\n    var temp_length_23: Int\n    var temp_length_24:\
    \ Int\n    var temp_length_25: Int\n    var temp_length_26: Int\n    var temp_length_27:\
    \ Int\n    var temp_length_28: Int\n    var temp_length_29: Int\n    var temp_length_30:\
    \ Int\n    var temp_length_31: Int\n    var temp_length_32: Int\n    var temp_length_33:\
    \ Int\n    var temp_length_34: Int\n    var temp_length_35: Int\n    var temp_length_36:\
    \ Int\n    var temp_length_37: Int\n    var temp_length_38:", "    var longest_palindrome:\
    \ String\n    var longest_palindrome_length: Int\n    var i: Int\n    var j: Int\n\
    \    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n    var palindrome:\
    \ String\n    var palindrome_length: Int\n    var prefix: String\n    var prefix_length:\
    \ Int\n    var suffix: String\n    var suffix_length: Int\n    var temp: String\n\
    \    var temp_length: Int\n    var temp_prefix: String\n    var temp_prefix_length:\
    \ Int\n    var temp_suffix: String\n    var temp_suffix_length: Int\n    var temp_suffix_reverse:\
    \ String\n    var temp_suffix_reverse_length: Int\n    var temp_suffix_reverse_reverse:\
    \ String\n    var temp_suffix_reverse_reverse_length: Int\n    var temp_suffix_reverse_reverse_reverse:\
    \ String\n    var temp_suffix_reverse_reverse_reverse_length: Int\n    var temp_suffix_reverse_reverse_reverse_reverse:\
    \ String\n    var temp_suffix_reverse_reverse_reverse_reverse_length: Int\n  \
    \  var temp_suffix_reverse_reverse_reverse_reverse_reverse: String\n    var temp_suffix_reverse_reverse_reverse_reverse_reverse_length:\
    \ Int\n    var temp_suffix_reverse_reverse_reverse_reverse_reverse_reverse: String\n\
    \    var temp_suffix_reverse_reverse_reverse_reverse_reverse_reverse_length: Int\n\
    \    var temp_suffix_reverse_reverse_reverse_reverse_reverse_reverse_reverse:\
    \ String\n    var temp_suffix_reverse_reverse_reverse_reverse_reverse_reverse_reverse_length:\
    \ Int\n    var temp_suffix_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse:\
    \ String\n    var temp_suffix_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_length:\
    \ Int\n    var temp_suffix_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse:\
    \ String\n    var temp_suffix_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_",
  "    // Find the longest palindrome that starts with the string.\n    // This is\
    \ the longest substring that is a palindrome.\n    // We'll append the reverse\
    \ of the substring to the end of the string.\n    longest_palindrome_start: Int\
    \ = 0\n    longest_palindrome_end: Int = 0\n    for i:=0; i<len(string); i++ {\n\
    \        if is_palindrome(string[i:]) {\n            if i > longest_palindrome_start\
    \ {\n                longest_palindrome_start = i\n                longest_palindrome_end\
    \ = i + len(string[i:]) - 1\n            }\n        }\n    }\n    \n    // Append\
    \ the reverse of the substring to the end of the string.\n    string += reverse(string[longest_palindrome_start:longest_palindrome_end])\n\
    \    \n    return string", "    // Find the longest palindrome that starts with\
    \ the string\n    var longest_palindrome = \"\"\n    var longest_palindrome_length\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        var palindrome = string[i:]\
    \ + string[:i]\n        if palindrome.length() > longest_palindrome_length {\n\
    \            longest_palindrome = palindrome\n            longest_palindrome_length\
    \ = palindrome.length()\n        }\n    }\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix\n    var\
    \ reversed_string = longest_palindrome[:longest_palindrome_length/2] + longest_palindrome[longest_palindrome_length/2:]\n\
    \    return reversed_string", "    // Find the longest palindrome that starts\
    \ with the string\n    // and append it to the end of the string\n    longest_palindrome_prefix:\
    \ String = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_prefix = string[i:]\n            break\n \
    \       }\n    }\n\n    // Append reverse of the longest palindrome prefix to\
    \ the end of the string\n    return string + longest_palindrome_prefix[::-1]",
  "    // Find the longest palindrome that starts with the string.\n    var longest_palindrome:\
    \ String = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            if len(string) - i > len(longest_palindrome) {\n            \
    \    longest_palindrome = string[i:]\n            }\n        }\n    }\n\n    //\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    for i := 0; i < len(longest_palindrome); i++ {\n\
    \        if i == 0 {\n            string += longest_palindrome[len(longest_palindrome)\
    \ - 1 - i:]\n        } else {\n            string += longest_palindrome[len(longest_palindrome)\
    \ - 1 - i]\n        }\n    }\n\n    return string", "    // Find the longest palindrome\
    \ that starts with the string.\n    var longest_palindrome: String = \"\"\n  \
    \  var max_length: Int = 0\n    for i := 0; i < len(string); i++ {\n        var\
    \ palindrome: String = string[i:] + string[:i]\n        if len(palindrome) > max_length\
    \ {\n            max_length = len(palindrome)\n            longest_palindrome\
    \ = palindrome\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    var reversed_string:\
    \ String = longest_palindrome[:max_length]\n    for i := 0; i < max_length; i++\
    \ {\n        reversed_string += string[i]\n    }\n    return reversed_string",
  "    // Find the longest palindrome that begins with a string.\n    // This is a\
    \ postfix of the string.\n    // The longest palindrome is the longest palindrome\
    \ that begins with the string.\n    longest_palindrome_postfix := longest_palindrome_postfix(string)\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // The prefix is the string that comes before\
    \ the longest palindrome.\n    prefix := longest_palindrome_postfix[:len(longest_palindrome_postfix)\
    \ - len(longest_palindrome_postfix) / 2]\n    return prefix + string[len(prefix):]",
  "    if len(string) == 0 {\n        return \"\"\n    }\n    var longest_palindrome_len\
    \ = 0\n    var longest_palindrome_str = \"\"\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            if len(string[i:])\
    \ > longest_palindrome_len {\n                longest_palindrome_len = len(string[i:])\n\
    \                longest_palindrome_str = string[i:]\n            }\n        }\n\
    \    }\n    return string + longest_palindrome_str[::-1]", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    var longest_palindrome:\
    \ String = \"\"\n    for i := len(string) - 1; i >= 0; i-- {\n        if string[i]\
    \ == string[i] {\n            longest_palindrome = string[i] + longest_palindrome\n\
    \        } else {\n            break\n        }\n    }\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    var reversed_string: String = \"\"\n    for i := 0; i < len(longest_palindrome);\
    \ i++ {\n        reversed_string = string[i] + reversed_string\n    }\n    return\
    \ reversed_string", "    // Find the longest palindrome that starts with the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that\n    // is a substring of the string.\n    // The longest palindrome that\
    \ starts with the string is the longest palindrome that\n    // is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome that\n    // is a substring of the string.\n    // The\
    \ longest palindrome that starts with the string is the longest palindrome that\n\
    \    // is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that\n    // is a substring of the\
    \ string.\n    // The longest palindrome that starts with the string is the longest\
    \ palindrome that\n    // is a substring of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest palindrome that\n    // is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome that\n    // is a substring of the string.\n    // The\
    \ longest palindrome that starts with the string is the longest palindrome that\n\
    \    // is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that\n    // is a substring of the\
    \ string.\n    // The longest palindrome that starts with the string is the longest\
    \ palindrome that\n    // is a substring of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest palindrome that\n    // is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome that\n    // is a substring of the string.\n    // The\
    \ longest palindrome that starts with the string is the longest palindrome that\n\
    \    // is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that\n    // is a substring of the\
    \ string.\n    // The longest palindrome that starts with the string is the longest\
    \ palindrome that\n    // is a substring of the string.\n    ", "    var longest_palindrome:\
    \ String = \"\"\n    var longest_palindrome_length: Int = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        var palindrome: String = string[i:] + string[:i]\n\
    \        if palindrome.length() > longest_palindrome_length {\n            longest_palindrome\
    \ = palindrome\n            longest_palindrome_length = palindrome.length()\n\
    \        }\n    }\n    return longest_palindrome", "    // Find the longest palindrome\
    \ that starts with a string.\n    // The longest palindrome that starts with a\
    \ string is the longest palindrome that\n    // is a substring of the string.\n\
    \    // The longest palindrome that starts with a string is the longest palindrome\
    \ that\n    // is a substring of the string.\n    // The longest palindrome that\
    \ starts with a string is the longest palindrome that\n    // is a substring of\
    \ the string.\n    // The longest palindrome that starts with a string is the\
    \ longest palindrome that\n    // is a substring of the string.\n    // The longest\
    \ palindrome that starts with a string is the longest palindrome that\n    //\
    \ is a substring of the string.\n    // The longest palindrome that starts with\
    \ a string is the longest palindrome that\n    // is a substring of the string.\n\
    \    // The longest palindrome that starts with a string is the longest palindrome\
    \ that\n    // is a substring of the string.\n    // The longest palindrome that\
    \ starts with a string is the longest palindrome that\n    // is a substring of\
    \ the string.\n    // The longest palindrome that starts with a string is the\
    \ longest palindrome that\n    // is a substring of the string.\n    // The longest\
    \ palindrome that starts with a string is the longest palindrome that\n    //\
    \ is a substring of the string.\n    // The longest palindrome that starts with\
    \ a string is the longest palindrome that\n    // is a substring of the string.\n\
    \    // The longest palindrome that starts with a string is the longest palindrome\
    \ that\n    // is a substring of the string.\n    // The longest palindrome that\
    \ starts with a string is the longest palindrome that\n    // is a substring of\
    \ the string.\n    // The longest palindrome that starts with a string is the\
    \ longest palindrome that\n    // is a substring of the string.\n    // The longest\
    \ palindrome that starts with a string is the longest palindrome that\n    //\
    \ is a substring of the string.\n    // The longest palindrome that starts with\
    \ a string is the longest palindrome that\n    // is a substring of the string.\n\
    \    ", "    // Find the longest palindrome that starts with the string.\n   \
    \ // The longest palindrome that starts with the string is the longest\n    //\
    \ palindrome that is a prefix of the string.\n    // The longest palindrome that\
    \ starts with the string is the longest\n    // palindrome that is a prefix of\
    \ the string.\n    // The longest palindrome that starts with the string is the\
    \ longest\n    // palindrome that is a prefix of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest\n    // palindrome that\
    \ is a prefix of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest\n    // palindrome that is a prefix of the string.\n \
    \   // The longest palindrome that starts with the string is the longest\n   \
    \ // palindrome that is a prefix of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    // palindrome that is a prefix\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest\n    // palindrome that is a prefix of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest\n    // palindrome that\
    \ is a prefix of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest\n    // palindrome that is a prefix of the string.\n \
    \   // The longest palindrome that starts with the string is the longest\n   \
    \ // palindrome that is a prefix of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    // palindrome that is a prefix\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest\n    // palindrome that is a prefix of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest\n    // palindrome that\
    \ is a prefix of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest\n    // palindrome that is a prefix of the string.\n \
    \   // The longest palindrome that starts with the string is the longest\n   \
    \ // palindrome that is a prefix of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    ", "    // Find the longest\
    \ palindrome that starts with string\n    var longest_palindrome: String = \"\"\
    \n    for i := 0; i < len(string); i++ {\n        var palindrome: String = \"\"\
    \n        for j := 0; j < len(string); j++ {\n            if i < j {\n       \
    \         palindrome += string[j]\n            } else {\n                palindrome\
    \ += string[j]\n            }\n        }\n        if len(palindrome) > len(longest_palindrome)\
    \ {\n            longest_palindrome = palindrome\n        }\n    }\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix\n    for i := 0; i < len(longest_palindrome); i++ {\n        var palindrome:\
    \ String = \"\"\n        for j := 0; j < len(longest_palindrome); j++ {\n    \
    \        if i < j {\n                palindrome += longest_palindrome[j]\n   \
    \         } else {\n                palindrome += longest_palindrome[j]\n    \
    \        }\n        }\n        longest_palindrome = palindrome\n    }\n    return\
    \ longest_palindrome", "    // Find the longest palindrome that begins with the\
    \ string\n    var longest_palindrome: String = \"\"\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            if len(string) -\
    \ i > len(longest_palindrome) {\n                longest_palindrome = string[i:]\n\
    \            }\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix\n    if len(longest_palindrome)\
    \ > 0 {\n        return string + reverse(string[:len(string) - len(longest_palindrome)])\n\
    \    }\n    return \"\"", "    // Find the longest palindrome that starts with\
    \ the string\n    var longest_palindrome: String = \"\"\n    var longest_palindrome_length:\
    \ Int = 0\n    for i := 0; i < len(string); i++ {\n        var palindrome: String\
    \ = string[i:] + string[:i]\n        if palindrome.length() > longest_palindrome_length\
    \ {\n            longest_palindrome = palindrome\n            longest_palindrome_length\
    \ = palindrome.length()\n        }\n    }\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix\n    var\
    \ reversed_string: String = \"\"\n    for i := 0; i < longest_palindrome_length;\
    \ i++ {\n        reversed_string += string[i]\n    }\n    return longest_palindrome\
    \ + reversed_string", "    // Find the longest palindrome that begins with a string\n\
    \    var longest_palindrome = \"\"\n    for i := 0; i < len(string); i++ {\n \
    \       if is_palindrome(string[i:]) {\n            longest_palindrome = string[i:]\n\
    \            break\n        }\n    }\n\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix\n    var\
    \ result = string\n    for i := 0; i < len(longest_palindrome); i++ {\n      \
    \  result += longest_palindrome[len(longest_palindrome) - 1 - i]\n    }\n\n  \
    \  return result", "    if len(string) == 0 {\n        return \"\"\n    }\n  \
    \  \n    // Find the longest palindrome that starts with the string.\n    longest_palindrome_index\
    \ := 0\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_index = i\n            break\n        }\n\
    \    }\n    \n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    return string[:longest_palindrome_index]\
    \ + reverse(string[longest_palindrome_index:])", "    if string == \"\" {\n  \
    \      return \"\"\n    }\n    \n    // Find the longest palindrome that starts\
    \ with the string\n    longest_palindrome_index := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome_index\
    \ = i\n            break\n        }\n    }\n    \n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix\n\
    \    return string[:longest_palindrome_index] + reverse(string[longest_palindrome_index:])",
  "    // Find the longest palindrome that starts with the string\n    var longest_palindrome:\
    \ String = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            if len(string) - i > len(longest_palindrome) {\n            \
    \    longest_palindrome = string[i:]\n            }\n        }\n    }\n\n    //\
    \ Append reverse of string prefix to the end of the string\n    var reversed_prefix:\
    \ String = \"\"\n    for i := 0; i < len(longest_palindrome); i++ {\n        reversed_prefix\
    \ += string[i]\n    }\n    return longest_palindrome + reversed_prefix", "   \
    \ // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    var longest_palindrome:\
    \ String = \"\"\n    var longest_palindrome_index: Int = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        if is_palindrome(string[i:]) {\n            if\
    \ len(string) - i > len(longest_palindrome) {\n                longest_palindrome\
    \ = string[i:]\n                longest_palindrome_index = i\n            }\n\
    \        }\n    }\n    if len(longest_palindrome) == 0 {\n        return string\n\
    \    }\n    return string[0:longest_palindrome_index] + reverse(string[longest_palindrome_index:])",
  "    // Find the longest palindrome that starts with the string.\n    var longest_palindrome\
    \ = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome = string[i:]\n            break\n        }\n\
    \    }\n\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n    var result = string\n    for i :=\
    \ 0; i < len(longest_palindrome); i++ {\n        result += longest_palindrome[len(longest_palindrome)\
    \ - 1 - i]\n    }\n    return result", "    // Find the longest palindrome that\
    \ starts with the string.\n    // The longest palindrome that starts with the\
    \ string is the longest\n    // palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest\n  \
    \  // palindrome that is a substring of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    // palindrome that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest\n    // palindrome that is a substring of the string.\n    // The\
    \ longest palindrome that starts with the string is the longest\n    // palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest\n    // palindrome that is a substring of the\
    \ string.\n    // The longest palindrome that starts with the string is the longest\n\
    \    // palindrome that is a substring of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    // palindrome that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest\n    // palindrome that is a substring of the string.\n    // The\
    \ longest palindrome that starts with the string is the longest\n    // palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest\n    // palindrome that is a substring of the\
    \ string.\n    // The longest palindrome that starts with the string is the longest\n\
    \    // palindrome that is a substring of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest\n    // palindrome that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest\n    // palindrome that is a substring of the string.\n    // The\
    \ longest palindrome that starts with the string is the longest\n    // palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest\n    // palindrome that is a substring of the\
    \ string.\n    ", "    // Find the longest palindrome that begins with a supplied\
    \ string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // - Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    var longest_palindrome: String\n    var longest_palindrome_length:\
    \ Int\n    for i := 0; i < len(string); i++ {\n        for j := i + 1; j <= len(string);\
    \ j++ {\n            if is_palindrome(string[i:j]) {\n                if j - i\
    \ > longest_palindrome_length {\n                    longest_palindrome = string[i:j]\n\
    \                    longest_palindrome_length = j - i\n                }\n  \
    \          }\n        }\n    }\n    if longest_palindrome_length == 0 {\n    \
    \    return string\n    }\n    return string[0:longest_palindrome_length] + reverse(string[0:longest_palindrome_length])",
  "    // Find the longest palindrome that begins with a string.\n    // Algorithm\
    \ idea is simple:\n    // - Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatac\")\n   \
    \ // \"catacatac\"\n    // >>> make_palindrome(string: \"catacatacat\")\n    //\
    \ \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatac\")\n   \
    \ // \"catacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatac\"\
    )\n    // \"catacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"\
    catacatac", "    // Find the longest palindrome that starts with the string.\n\
    \    var longest_palindrome: String = \"\"\n    for i := 0; i < len(string); i++\
    \ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome =\
    \ string[i:]\n            break\n        }\n    }\n\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    var reversed_prefix: String = \"\"\n    for i := len(longest_palindrome)\
    \ - 1; i >= 0; i-- {\n        reversed_prefix = string[i:] + reversed_prefix\n\
    \    }\n\n    return reversed_prefix + longest_palindrome", "    var longest_palindrome:\
    \ String\n    var longest_palindrome_index: Int\n    var i: Int\n    var j: Int\n\
    \    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n    var palindrome:\
    \ String\n    var palindrome_index: Int\n    var prefix: String\n    var prefix_index:\
    \ Int\n    var postfix: String\n    var postfix_index: Int\n    var reverse_postfix:\
    \ String\n    var reverse_postfix_index: Int\n    var reverse_prefix: String\n\
    \    var reverse_prefix_index: Int\n    var reverse_string: String\n    var reverse_string_index:\
    \ Int\n    var string_length: Int\n    var string_index: Int\n    var string_prefix:\
    \ String\n    var string_postfix: String\n    var string_reverse: String\n   \
    \ var string_reverse_index: Int\n    var string_reverse_length: Int\n    var string_reverse_prefix:\
    \ String\n    var string_reverse_postfix: String\n    var string_reverse_string:\
    \ String\n    var string_reverse_string_index: Int\n    var string_reverse_string_length:\
    \ Int\n    var string_reverse_string_prefix: String\n    var string_reverse_string_postfix:\
    \ String\n    var string_reverse_string_reverse: String\n    var string_reverse_string_reverse_index:\
    \ Int\n    var string_reverse_string_reverse_length: Int\n    var string_reverse_string_reverse_prefix:\
    \ String\n    var string_reverse_string_reverse_postfix: String\n    var string_reverse_string_reverse_string:\
    \ String\n    var string_reverse_string_reverse_string_index: Int\n    var string_reverse_string_reverse_string_length:\
    \ Int\n    var string_reverse_string_reverse_string_prefix: String\n    var string_reverse_string_reverse_string_postfix:\
    \ String\n    var string_reverse_string_reverse_string_reverse: String\n    var\
    \ string_reverse_string_reverse_string_reverse_index: Int\n    var string_reverse_string_reverse_string_reverse_length:\
    \ Int\n    var string_reverse_string_reverse", "    if string == \"\" {\n    \
    \    return \"\"\n    }\n    \n    // Find the longest palindrome that begins\
    \ with a supplied string.\n    longest_palindrome_beginning_with_string := \"\"\
    \n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_beginning_with_string = string[i:]\n     \
    \       break\n        }\n    }\n    \n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    return\
    \ string + longest_palindrome_beginning_with_string[::-1]", "    if len(string)\
    \ == 0 {\n        return \"\"\n    }\n    \n    // Find the longest palindrome\
    \ that starts with the string\n    var longest_palindrome_prefix = \"\"\n    var\
    \ longest_palindrome_suffix = \"\"\n    for i := 0; i < len(string); i++ {\n \
    \       if is_palindrome(string[i:]) {\n            if len(longest_palindrome_prefix)\
    \ == 0 {\n                longest_palindrome_prefix = string[:i]\n           \
    \ }\n            longest_palindrome_suffix = string[i:]\n            break\n \
    \       }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix\n    if len(longest_palindrome_suffix)\
    \ > 0 {\n        return longest_palindrome_prefix + reverse(longest_palindrome_suffix)\n\
    \    }\n    \n    return longest_palindrome_prefix", "    // Find the longest\
    \ palindrome that starts with the string.\n    // The longest palindrome that\
    \ starts with the string is the longest palindrome that\n    // is a postfix of\
    \ the string.\n    // The longest palindrome that starts with the string is the\
    \ longest palindrome\n    // that is a postfix of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome\n    // that\
    \ is a postfix of the string.\n    // The longest palindrome that starts with\
    \ the string is the longest palindrome\n    // that is a postfix of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a postfix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that is a postfix of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a postfix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that is a postfix of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a postfix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that is a postfix of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a postfix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that is a postfix of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a postfix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that is a postfix of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that is a postfix of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that is a postfix of the string.\n\
    \    ", "    // Find the longest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatac\")\n   \
    \ // \"catacatac\"\n    // >>> make_palindrome(string: \"catacatacat\")\n    //\
    \ \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatac\")\n   \
    \ // \"catacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatac\"\
    )\n    // \"catacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"\
    catacat", "    if len(string) == 0 {\n        return \"\"\n    }\n    \n    //\
    \ Find the longest palindrome that starts with the string\n    longest_palindrome_start\
    \ := \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_start = string[i:]\n            break\n  \
    \      }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix\n    if len(longest_palindrome_start)\
    \ > 0 {\n        return string + longest_palindrome_start[::-1]\n    }\n    \n\
    \    return \"\"", "    // Find the longest palindrome that begins with a supplied\
    \ string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // - Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    // >>> make_palindrome(string: \"catac\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"catacat\")\n    // \"catacat\"\n    //\
    \ >>> make_palindrome(string: \"catacatac\")\n    // \"catacatac\"\n    // >>>\
    \ make_palindrome(string: \"catacatacat\")\n    // \"catacatacat\"\n    // >>>\
    \ make_palindrome(string: \"catacatacatac\")\n    // \"catacatacatac\"\n    //\
    \ >>> make_palindrome(string: \"catacatacatacat\")\n    // \"catacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatac\")\n    // \"catacatacatacatac\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacat\")\n    // \"catacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatac\")\n    // \"catacatacatacatacatac\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacat\")\n    // \"catacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\")\n    // \"\
    catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacat", " \
    \   if string == \"\" {\n        return \"\"\n    }\n    \n    // Find the longest\
    \ palindrome that starts with the string.\n    longest_palindrome_index := 0\n\
    \    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_index = i\n            break\n        }\n\
    \    }\n    \n    // Append the reverse of the string prefix that comes before\
    \ the palindromic suffix.\n    return string[:longest_palindrome_index] + reverse(string[longest_palindrome_index:])",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    var\
    \ longest_palindrome: String = \"\"\n    for i := len(string) - 1; i >= 0; i--\
    \ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome =\
    \ string[i:]\n            break\n        }\n    }\n\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    var reversed_string: String = \"\"\n    for i := len(longest_palindrome)\
    \ - 1; i >= 0; i-- {\n        reversed_string = reversed_string + string[i]\n\
    \    }\n    return reversed_string", "    if string == \"\" {\n        return\
    \ \"\"\n    }\n    \n    var longest_palindrome: String = \"\"\n    var longest_palindrome_length:\
    \ Int = 0\n    \n    for i := 0; i < len(string); i++ {\n        var palindrome:\
    \ String = string[i:] + string[:i]\n        if palindrome.length() > longest_palindrome_length\
    \ {\n            longest_palindrome = palindrome\n            longest_palindrome_length\
    \ = palindrome.length()\n        }\n    }\n    \n    return string + longest_palindrome[::-1]",
  "    if len(string) == 0 {\n        return \"\"\n    }\n    \n    // Find the longest\
    \ palindrome that starts with the string.\n    longest_palindrome_start := \"\"\
    \n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_start = string[i:]\n            break\n  \
    \      }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    if len(longest_palindrome_start)\
    \ > 0 {\n        return string + longest_palindrome_start[::-1]\n    }\n    \n\
    \    return \"\"", "    // Find the longest palindrome that starts with the string.\n\
    \    // This is the longest substring that is a palindrome.\n    // We will append\
    \ to the end of the string the reverse of the substring.\n    longest_palindrome_start:\
    \ Int = 0\n    longest_palindrome_end: Int = 0\n    for i:=0; i<len(string); i++\
    \ {\n        if is_palindrome(string[i:]) {\n            if (i-longest_palindrome_start)\
    \ > (longest_palindrome_end-i) {\n                longest_palindrome_start = i\n\
    \                longest_palindrome_end = i + len(string[i:]) - 1\n          \
    \  }\n        }\n    }\n    // Append to the end of the string the reverse of\
    \ the substring.\n    for i:=longest_palindrome_start; i<=longest_palindrome_end;\
    \ i++ {\n        string += string[i-1:i]\n    }\n    return string", "    if string\
    \ == \"\" {\n        return \"\"\n    }\n    \n    // Find the longest palindrome\
    \ that begins with the string\n    longest_palindrome := \"\"\n    for i := 0;\
    \ i < len(string); i++ {\n        if is_palindrome(string[i:]) {\n           \
    \ longest_palindrome = string[i:]\n            break\n        }\n    }\n    \n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix\n    for i := len(longest_palindrome) - 1; i >=\
    \ 0; i-- {\n        string += string[i]\n    }\n    \n    return string", "  \
    \  if len(string) == 0 {\n        return \"\"\n    }\n    \n    // Find the longest\
    \ palindrome that begins with a supplied string.\n    longest_palindrome_index\
    \ := 0\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_index = i\n            break\n        }\n\
    \    }\n    \n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    return string[:longest_palindrome_index]\
    \ + reverse(string[longest_palindrome_index:])", "    // Find the longest palindrome\
    \ that starts with the string.\n    var longest_palindrome: String = \"\"\n  \
    \  for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:]) {\n\
    \            if len(string) - i > len(longest_palindrome) {\n                longest_palindrome\
    \ = string[i:]\n            }\n        }\n    }\n    \n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    if len(longest_palindrome) > 0 {\n        return string + longest_palindrome[::-1]\n\
    \    }\n    return string", "    // Find the longest palindrome that begins with\
    \ a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    if len(string) == 0 {\n        return \"\"\n    }\n    //\
    \ Find the longest postfix of supplied string that is a palindrome.\n    // Algorithm\
    \ idea is simple:\n    // - Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    var longest_palindrome_postfix\
    \ = \"\"\n    var longest_palindrome_prefix = \"\"\n    for i := len(string) -\
    \ 1; i >= 0; i-- {\n        if is_palindrome(string[i:]) {\n            longest_palindrome_postfix\
    \ = string[i:]\n            break\n        }\n    }\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome_prefix\
    \ = string[:i]\n            break\n        }\n    }\n    return longest_palindrome_prefix\
    \ + longest_palindrome_postfix[::-1]", "    // Find the longest palindrome that\
    \ starts with the string.\n    var longest_palindrome_string: String = \"\"\n\
    \    var longest_palindrome_length: Int = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        var palindrome_string: String = string[i:] + string[:i]\n   \
    \     if palindrome_string.length() > longest_palindrome_length {\n          \
    \  longest_palindrome_string = palindrome_string\n            longest_palindrome_length\
    \ = palindrome_string.length()\n        }\n    }\n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    var reversed_string: String = longest_palindrome_string[:longest_palindrome_length/2]\
    \ + longest_palindrome_string[longest_palindrome_length/2:]\n    return reversed_string",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatacat\")\n \
    \   // \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacat\")\n    // \"catacatacatacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacatacat\")\n\
    \    // \"catacatacatacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacatacatacat\")\n    // \"catacatacat", "    if\
    \ len(string) == 0 {\n        return \"\"\n    }\n    \n    // Find the longest\
    \ palindrome that starts with the string\n    longest_palindrome_prefix := \"\"\
    \n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_prefix = string[i:]\n            break\n \
    \       }\n    }\n    \n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix\n    return string + longest_palindrome_prefix[::-1]",
  "    // Find the longest palindrome that starts with the string.\n    var longest_palindrome\
    \ = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome = string[i:]\n            break\n        }\n\
    \    }\n\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n    var result = \"\"\n    for i := 0;\
    \ i < len(longest_palindrome); i++ {\n        result += string[i]\n    }\n   \
    \ for i := len(longest_palindrome) - 1; i >= 0; i-- {\n        result += string[i]\n\
    \    }\n    return result", "    // Find the longest palindrome that starts with\
    \ the string.\n    // This is the longest substring that is a palindrome.\n  \
    \  longest_palindrome: String = \"\"\n    for i := 0; i < len(string); i++ {\n\
    \        if is_palindrome(string[i:]) {\n            longest_palindrome = string[i:]\n\
    \            break\n        }\n    }\n\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    //\
    \ This is the string that comes before the palindromic suffix.\n    previous_string:\
    \ String = \"\"\n    for i := len(longest_palindrome) - 1; i >= 0; i-- {\n   \
    \     if is_palindrome(longest_palindrome[i:]) {\n            previous_string\
    \ = longest_palindrome[i:]\n            break\n        }\n    }\n\n    return\
    \ previous_string + longest_palindrome", "    if len(string) == 0 {\n        return\
    \ \"\"\n    }\n    \n    longest_palindrome := \"\"\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome\
    \ = string[i:]\n            break\n        }\n    }\n    \n    if len(longest_palindrome)\
    \ == 0 {\n        return string\n    }\n    \n    return string + reverse(string[:len(longest_palindrome)])",
  "    // Find the longest palindrome that starts with the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome that is a substring of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome that is a substring of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome that is a substring of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome that is a substring of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome that is a substring of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome that is a substring of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome that is a substring of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome that is a substring of the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome that is a substring\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome that is a", "    // Find the longest palindrome that\
    \ starts with the string\n    var longest_palindrome_string: String = \"\"\n \
    \   var longest_palindrome_length: Int = 0\n    for i := 0; i < len(string); i++\
    \ {\n        var palindrome_string: String = \"\"\n        for j := i; j < len(string);\
    \ j++ {\n            if string[j] == string[i] {\n                palindrome_string\
    \ += string[j]\n            } else {\n                break\n            }\n \
    \       }\n        if len(palindrome_string) > longest_palindrome_length {\n \
    \           longest_palindrome_string = palindrome_string\n            longest_palindrome_length\
    \ = len(palindrome_string)\n        }\n    }\n    // Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix\n\
    \    for i := 0; i < longest_palindrome_length; i++ {\n        var reverse_string:\
    \ String = \"\"\n        for j := len(string) - 1; j >= i; j-- {\n           \
    \ reverse_string += string[j]\n        }\n        string += reverse_string\n \
    \   }\n    return string", "    // Find the longest palindrome that begins with\
    \ a string\n    var longest_palindrome: String = \"\"\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome\
    \ = string[i:]\n            break\n        }\n    }\n\n    // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix\n\
    \    var reversed_string: String = \"\"\n    for i := 0; i < len(longest_palindrome);\
    \ i++ {\n        reversed_string += longest_palindrome[len(longest_palindrome)\
    \ - i - 1]\n    }\n\n    return reversed_string", "    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    var longest_palindrome: String\
    \ = \"\"\n    for i := len(string) - 1; i >= 0; i-- {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome = string[i:] + longest_palindrome\n      \
    \  }\n    }\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    return longest_palindrome + reverse(string[:len(longest_palindrome)])",
  "    if string == \"\" {\n        return \"\"\n    }\n    \n    // Find the longest\
    \ palindrome that starts with the string\n    longest_palindrome_index := 0\n\
    \    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_index = i\n            break\n        }\n\
    \    }\n    \n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix\n    return string[0:longest_palindrome_index]\
    \ + reverse(string[longest_palindrome_index:])", "    // Find the longest palindrome\
    \ that begins with a string\n    var longest_palindrome: String = \"\"\n    var\
    \ longest_palindrome_length: Int = 0\n    for i := 0; i < len(string); i++ {\n\
    \        for j := i + 1; j < len(string); j++ {\n            if string[i] == string[j]\
    \ {\n                if j - i > longest_palindrome_length {\n                \
    \    longest_palindrome = string[i:j]\n                    longest_palindrome_length\
    \ = j - i\n                }\n            }\n        }\n    }\n    // Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix\n    if longest_palindrome_length > 0 {\n        return string + reverse(string[0:longest_palindrome_length])\n\
    \    }\n    return \"\"", "    // Find the longest palindrome that begins with\
    \ a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    // >>> make_palindrome(string: \"catac\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"catacat\")\n    // \"catacat\"\n    //\
    \ >>> make_palindrome(string: \"catacatac\")\n    // \"catacatac\"\n    // >>>\
    \ make_palindrome(string: \"catacatacat\")\n    // \"catacatacat\"\n    // >>>\
    \ make_palindrome(string: \"catacatacatac\")\n    // \"catacatacatac\"\n    //\
    \ >>> make_palindrome(string: \"catacatacatacat\")\n    // \"catacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatac\")\n    // \"catacatacatacatac\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacat\")\n    // \"catacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatac\")\n    // \"catacatacatacatacatac\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacat\")\n    // \"catacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\")\n    // \"\
    catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacat", " \
    \   // Find the longest palindrome that starts with the string\n    var longest_palindrome\
    \ = \"\"\n    var longest_palindrome_length = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        var palindrome = string[i:] + string[:i]\n        if palindrome.length()\
    \ > longest_palindrome_length {\n            longest_palindrome = palindrome\n\
    \            longest_palindrome_length = palindrome.length()\n        }\n    }\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix\n    var reversed_string = longest_palindrome[:longest_palindrome_length/2]\
    \ + longest_palindrome[longest_palindrome_length/2:]\n    return reversed_string",
  "    // Find the longest palindrome that starts with the string.\n    // The longest\
    \ palindrome that starts with the string is the longest palindrome that\n    //\
    \ ends with the reverse of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome\n    // that ends with the reverse\
    \ of the string.\n    // The longest palindrome that starts with the string is\
    \ the longest palindrome\n    // that ends with the reverse of the string.\n \
    \   // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that ends with the reverse of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest palindrome\n    // that ends with\
    \ the reverse of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest palindrome\n    // that ends with the reverse of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that ends with the reverse of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest palindrome\n    // that ends with\
    \ the reverse of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest palindrome\n    // that ends with the reverse of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that ends with the reverse of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest palindrome\n    // that ends with\
    \ the reverse of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest palindrome\n    // that ends with the reverse of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that ends with the reverse of the string.\n    // The longest palindrome\
    \ that starts with the string is the longest palindrome\n    // that ends with\
    \ the reverse of the string.\n    // The longest palindrome that starts with the\
    \ string is the longest palindrome\n    // that ends with the reverse of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\n\
    \    // that ends with the reverse of the string.\n    ", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(string: \"\")\n \
    \   // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\n \
    \   // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    var longest_palindrome_string:\
    \ String = \"\"\n    var longest_palindrome_length: Int = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        for j := i + 1; j < len(string); j++ {\n     \
    \       if is_palindrome(string[i:j]) {\n                if j - i > longest_palindrome_length\
    \ {\n                    longest_palindrome_string = string[i:j]\n           \
    \         longest_palindrome_length = j - i\n                }\n            }\n\
    \        }\n    }\n    if longest_palindrome_length == 0 {\n        return string\n\
    \    }\n    return string[0:len(string) - longest_palindrome_length] + reverse(string[len(string)\
    \ - longest_palindrome_length:])", "    if string == \"\" {\n        return \"\
    \"\n    }\n    \n    // Find the longest palindrome that begins with the string.\n\
    \    longest_palindrome_index := find_longest_palindrome(string)\n    \n    //\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string[0:longest_palindrome_index] + reverse_string(string[longest_palindrome_index:])",
  "    // Find the longest palindrome that starts with the string.\n    var longest_palindrome:\
    \ String = \"\"\n    var longest_palindrome_length: Int = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        if is_palindrome(string[i:]) {\n            if\
    \ len(string[i:]) > longest_palindrome_length {\n                longest_palindrome\
    \ = string[i:]\n                longest_palindrome_length = len(string[i:])\n\
    \            }\n        }\n    }\n\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    var reverse_string:\
    \ String = \"\"\n    for i := 0; i < longest_palindrome_length; i++ {\n      \
    \  reverse_string += string[len(string) - i - 1]\n    }\n\n    return longest_palindrome\
    \ + reverse_string", "    if string == \"\" {\n        return \"\"\n    }\n  \
    \  \n    // Find the longest palindrome that starts with a string.\n    var longest_palindrome:\
    \ String = \"\"\n    for i := 0; i < len(string); i++ {\n        var palindrome:\
    \ String = string[i:] + string[:i]\n        if palindrome.length() > longest_palindrome.length()\
    \ {\n            longest_palindrome = palindrome\n        }\n    }\n    \n   \
    \ // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    var reversed_prefix: String = \"\"\n    for i :=\
    \ 0; i < len(longest_palindrome); i++ {\n        reversed_prefix = longest_palindrome[i:]\
    \ + reversed_prefix\n    }\n    \n    return reversed_prefix", "    // Find the\
    \ longest palindrome that starts with the string\n    var longest_palindrome:\
    \ String = \"\"\n    var longest_palindrome_length: Int = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        for j := 0; j < len(string); j++ {\n         \
    \   if i < j {\n                if string[i] == string[j] && is_palindrome(string[i:j])\
    \ {\n                    if len(string[i:j]) > longest_palindrome_length {\n \
    \                       longest_palindrome = string[i:j]\n                   \
    \     longest_palindrome_length = len(string[i:j])\n                    }\n  \
    \              }\n            }\n        }\n    }\n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix\n\
    \    if longest_palindrome_length > 0 {\n        var reversed_string: String =\
    \ \"\"\n        for i := 0; i < longest_palindrome_length; i++ {\n           \
    \ reversed_string += string[len(string) - i - 1]\n        }\n        return string\
    \ + reversed_string\n    }\n    return \"\"", "    var longest_palindrome: String\n\
    \    var longest_palindrome_length: Int\n    var i: Int\n    var j: Int\n    var\
    \ k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n    var palindrome:\
    \ String\n    var palindrome_length: Int\n    var prefix: String\n    var prefix_length:\
    \ Int\n    var suffix: String\n    var suffix_length: Int\n    var temp: String\n\
    \    var temp_length: Int\n    var temp_prefix: String\n    var temp_prefix_length:\
    \ Int\n    var temp_suffix: String\n    var temp_suffix_length: Int\n    var temp_suffix_length_2:\
    \ Int\n    var temp_suffix_length_3: Int\n    var temp_suffix_length_4: Int\n\
    \    var temp_suffix_length_5: Int\n    var temp_suffix_length_6: Int\n    var\
    \ temp_suffix_length_7: Int\n    var temp_suffix_length_8: Int\n    var temp_suffix_length_9:\
    \ Int\n    var temp_suffix_length_10: Int\n    var temp_suffix_length_11: Int\n\
    \    var temp_suffix_length_12: Int\n    var temp_suffix_length_13: Int\n    var\
    \ temp_suffix_length_14: Int\n    var temp_suffix_length_15: Int\n    var temp_suffix_length_16:\
    \ Int\n    var temp_suffix_length_17: Int\n    var temp_suffix_length_18: Int\n\
    \    var temp_suffix_length_19: Int\n    var temp_suffix_length_20: Int\n    var\
    \ temp_suffix_length_21: Int\n    var temp_suffix_length_22: Int\n    var temp_suffix_length_23:\
    \ Int\n    var temp_suffix_length_24: Int\n    var temp_suffix_length_25: Int\n\
    \    var temp_suffix_length_26: Int\n    var temp_suffix_length_27: Int\n    var\
    \ temp_suffix_length_28: Int\n    var temp_suff", "    var longest_palindrome:\
    \ String\n    var longest_palindrome_length: Int\n    var i: Int\n    var j: Int\n\
    \    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n    var palindrome:\
    \ String\n    var palindrome_length: Int\n    var palindrome_prefix: String\n\
    \    var palindrome_suffix: String\n    var prefix: String\n    var suffix: String\n\
    \    var temp: String\n    var temp_length: Int\n    var temp_prefix: String\n\
    \    var temp_suffix: String\n    var temp_suffix_length: Int\n    var temp_suffix_prefix:\
    \ String\n    var temp_suffix_prefix_length: Int\n    var temp_suffix_suffix:\
    \ String\n    var temp_suffix_suffix_length: Int\n    var temp_suffix_suffix_prefix:\
    \ String\n    var temp_suffix_suffix_prefix_length: Int\n    var temp_suffix_suffix_suffix:\
    \ String\n    var temp_suffix_suffix_suffix_length: Int\n    var temp_suffix_suffix_suffix_prefix:\
    \ String\n    var temp_suffix_suffix_suffix_prefix_length: Int\n    var temp_suffix_suffix_suffix_suffix:\
    \ String\n    var temp_suffix_suffix_suffix_suffix_length: Int\n    var temp_suffix_suffix_suffix_suffix_prefix:\
    \ String\n    var temp_suffix_suffix_suffix_suffix_prefix_length: Int\n    var\
    \ temp_suffix_suffix_suffix_suffix_suffix: String\n    var temp_suffix_suffix_suffix_suffix_suffix_length:\
    \ Int\n    var temp_suffix_suffix_suffix_suffix_suffix_prefix: String\n    var\
    \ temp_suffix_suffix_suffix_suffix_suffix_prefix_length: Int\n    var temp_suffix_suffix_suffix_suffix_suffix_suffix:\
    \ String\n    var temp_suffix_suffix_suffix_suffix_suff", "    // Find the longest\
    \ palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n\
    \    // - Find the longest postfix of supplied string that is a palindrome.\n\
    \    // - Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    // >>> make_palindrome(string: \"\")\n \
    \   // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\n \
    \   // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatacat\")\n \
    \   // \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacat\")\n    // \"catacatacatacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacatacat\")\n\
    \    // \"catacatacatacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacatacatacat\")\n    // \"catacatacatacat", " \
    \   // Find the longest palindrome that begins with a supplied string.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    return string\
    \ + string[::-1]", "    // Find the longest postfix of supplied string that is\
    \ a palindrome.\n    // Algorithm idea is simple:\n    // - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // - Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    // >>> make_palindrome(string: \"catac\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"catacat\")\n    // \"catacat\"\n    //\
    \ >>> make_palindrome(string: \"catacatacat\")\n    // \"catacatacat\"\n    //\
    \ >>> make_palindrome(string: \"catacatacatacat\")\n    // \"catacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacat\")\n    // \"catacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacat\")\n    // \"catacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacat\")\n    //\
    \ \"catacatacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacatacatacat\"\n    // >>> make_palindrome(string:\
    \ \"catacatacatacatacatacatacatacatacat\")\n    // \"catacatacatacatacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatacatacatacatacat\"\
    )\n    // \"catacatacat", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    var longest_palindrome_postfix: String = \"\"\n \
    \   for i := len(string) - 1; i >= 0; i-- {\n        if string[i] == string[i]\
    \ {\n            longest_palindrome_postfix = string[i] + longest_palindrome_postfix\n\
    \        } else {\n            break\n        }\n    }\n\n    // Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    var longest_palindrome_prefix: String = \"\"\n    for i := 0; i\
    \ < len(longest_palindrome_postfix); i++ {\n        if string[i] == longest_palindrome_postfix[i]\
    \ {\n            longest_palindrome_prefix = string[i] + longest_palindrome_prefix\n\
    \        } else {\n            break\n        }\n    }\n\n    return longest_palindrome_prefix",
  "    // Find the longest palindrome that starts with the string.\n    // This is\
    \ the longest substring that is a palindrome.\n    // We'll use this to find the\
    \ palindrome that starts with the string.\n    longest_palindrome_start_with_string\
    \ := \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            longest_palindrome_start_with_string = string[i:]\n         \
    \   break\n        }\n    }\n\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // This is\
    \ the string that comes before the palindromic suffix.\n    // We'll use this\
    \ to find the palindrome that starts with the string.\n    longest_palindrome_start_with_string_prefix\
    \ := \"\"\n    for i := 0; i < len(longest_palindrome_start_with_string); i++\
    \ {\n        if is_palindrome(longest_palindrome_start_with_string[:i]) {\n  \
    \          longest_palindrome_start_with_string_prefix = longest_palindrome_start_with_string[:i]\n\
    \            break\n        }\n    }\n\n    return longest_palindrome_start_with_string_prefix\
    \ + longest_palindrome_start_with_string", "    if len(string) == 0 {\n      \
    \  return \"\"\n    }\n    \n    // Find the longest palindrome that starts with\
    \ a string\n    var longest_palindrome_prefix = \"\"\n    var longest_palindrome_suffix\
    \ = \"\"\n    var longest_palindrome_length = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            if len(string[i:])\
    \ > longest_palindrome_length {\n                longest_palindrome_prefix = string[:i]\n\
    \                longest_palindrome_suffix = string[i:]\n                longest_palindrome_length\
    \ = len(string[i:])\n            }\n        }\n    }\n    \n    // Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix\n    var new_string = string\n    for i := 0; i < len(longest_palindrome_prefix);\
    \ i++ {\n        new_string = append(new_string, longest_palindrome_prefix[len(longest_palindrome_prefix)\
    \ - i - 1])\n    }\n    \n    return new_string", "    // Find the longest palindrome\
    \ that starts with the string.\n    // The longest palindrome that starts with\
    \ the string is the longest palindrome that is a substring of the string.\n  \
    \  // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a substring of the string.\n    // The longest palindrome that starts\
    \ with the string is the longest palindrome that is a substring of the string.\n\
    \    // The longest palindrome that starts with the string is the longest palindrome\
    \ that is a", "    // Find the longest palindrome that begins with a supplied\
    \ string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // - Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    // >>> make_palindrome(string: \"\")\n    // \"\"\n    // >>> make_palindrome(string:\
    \ \"cat\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"cata\")\n \
    \   // \"catac\"\n    // >>> make_palindrome(string: \"catac\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"catacat\")\n    // \"catacat\"\n    //\
    \ >>> make_palindrome(string: \"catacatac\")\n    // \"catacatac\"\n    // >>>\
    \ make_palindrome(string: \"catacatacat\")\n    // \"catacatacat\"\n    // >>>\
    \ make_palindrome(string: \"catacatacatac\")\n    // \"catacatacatac\"\n    //\
    \ >>> make_palindrome(string: \"catacatacatacat\")\n    // \"catacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatac\")\n    // \"catacatacatacatac\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacat\")\n    // \"catacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatac\")\n    // \"catacatacatacatacatac\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacat\")\n    // \"catacatacatacatacatacat\"\
    \n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\")\n    // \"\
    catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacat", " \
    \   // Find the longest palindrome that starts with the string\n    var longest_palindrome:\
    \ String = \"\"\n    for i := 0; i < len(string); i++ {\n        var palindrome:\
    \ String = string[i:] + string[:i]\n        if palindrome.length() > longest_palindrome.length()\
    \ {\n            longest_palindrome = palindrome\n        }\n    }\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix\n    return string + longest_palindrome[::-1]", "    var longest_palindrome:\
    \ String\n    var longest_palindrome_length: Int\n    var i: Int\n    var j: Int\n\
    \    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n    var palindrome:\
    \ String\n    var palindrome_length: Int\n    var prefix: String\n    var prefix_length:\
    \ Int\n    var suffix: String\n    var suffix_length: Int\n    var temp: String\n\
    \    var temp_length: Int\n    var temp_prefix: String\n    var temp_prefix_length:\
    \ Int\n    var temp_suffix: String\n    var temp_suffix_length: Int\n    var temp_suffix_length_2:\
    \ Int\n    var temp_suffix_length_3: Int\n    var temp_suffix_length_4: Int\n\
    \    var temp_suffix_length_5: Int\n    var temp_suffix_length_6: Int\n    var\
    \ temp_suffix_length_7: Int\n    var temp_suffix_length_8: Int\n    var temp_suffix_length_9:\
    \ Int\n    var temp_suffix_length_10: Int\n    var temp_suffix_length_11: Int\n\
    \    var temp_suffix_length_12: Int\n    var temp_suffix_length_13: Int\n    var\
    \ temp_suffix_length_14: Int\n    var temp_suffix_length_15: Int\n    var temp_suffix_length_16:\
    \ Int\n    var temp_suffix_length_17: Int\n    var temp_suffix_length_18: Int\n\
    \    var temp_suffix_length_19: Int\n    var temp_suffix_length_20: Int\n    var\
    \ temp_suffix_length_21: Int\n    var temp_suffix_length_22: Int\n    var temp_suffix_length_23:\
    \ Int\n    var temp_suffix_length_24: Int\n    var temp_suffix_length_25: Int\n\
    \    var temp_suffix_length_26: Int\n    var temp_suffix_length_27: Int\n    var\
    \ temp_suffix_length_28: Int\n    var temp_suff", "    if len(string) == 0 {\n\
    \        return \"\"\n    }\n    \n    // Find the longest palindrome that starts\
    \ with string\n    longest_palindrome_index := 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            longest_palindrome_index\
    \ = i\n            break\n        }\n    }\n    \n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix\n\
    \    return string[:longest_palindrome_index] + reverse(string[longest_palindrome_index:])",
  "    // Find the longest palindrome that begins with a supplied string.\n    //\
    \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    // - Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome(string:\
    \ \"\")\n    // \"\"\n    // >>> make_palindrome(string: \"cat\")\n    // \"catac\"\
    \n    // >>> make_palindrome(string: \"cata\")\n    // \"catac\"\n    // >>> make_palindrome(string:\
    \ \"catac\")\n    // \"catac\"\n    // >>> make_palindrome(string: \"catacat\"\
    )\n    // \"catacat\"\n    // >>> make_palindrome(string: \"catacatac\")\n   \
    \ // \"catacatac\"\n    // >>> make_palindrome(string: \"catacatacat\")\n    //\
    \ \"catacatacat\"\n    // >>> make_palindrome(string: \"catacatacatac\")\n   \
    \ // \"catacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacat\"\
    )\n    // \"catacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatac\"\
    )\n    // \"catacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacat\"\
    )\n    // \"catacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatac\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacat\"\
    )\n    // \"catacatacatacatacatacat\"\n    // >>> make_palindrome(string: \"catacatacatacatacatacatac\"\
    )\n    // \"catacatacatacatacatacatac\"\n    // >>> make_palindrome(string: \"\
    catacat", "    if len(string) == 0 {\n        return \"\"\n    }\n    \n    //\
    \ Find the longest palindrome that starts with the string\n    var longest_palindrome_start_index\
    \ int\n    var longest_palindrome_length int\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            if longest_palindrome_length\
    \ == 0 {\n                longest_palindrome_start_index = i\n               \
    \ longest_palindrome_length = len(string) - i\n            } else {\n        \
    \        if len(string) - i > longest_palindrome_length {\n                  \
    \  longest_palindrome_start_index = i\n                    longest_palindrome_length\
    \ = len(string) - i\n                }\n            }\n        }\n    }\n    \n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix\n    var reverse_string_prefix string\n    for\
    \ i := longest_palindrome_start_index - 1; i >= 0; i-- {\n        reverse_string_prefix\
    \ += string[i]\n    }\n    return string + reverse_string_prefix", "    // Find\
    \ the longest palindrome that starts with string.\n    var longest_palindrome_start_index\
    \ int\n    var longest_palindrome_length int\n    for i := 0; i < len(string);\
    \ i++ {\n        if is_palindrome(string[i:]) {\n            if longest_palindrome_length\
    \ < len(string[i:]) {\n                longest_palindrome_start_index = i\n  \
    \              longest_palindrome_length = len(string[i:])\n            }\n  \
    \      }\n    }\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    var reverse_string_prefix string\n\
    \    for i := longest_palindrome_start_index - 1; i >= 0; i-- {\n        reverse_string_prefix\
    \ += string[i]\n    }\n    return string + reverse_string_prefix", "    // Find\
    \ the longest palindrome that starts with the string.\n    var longest_palindrome:\
    \ String = \"\"\n    for i := 0; i < len(string); i++ {\n        if is_palindrome(string[i:])\
    \ {\n            if len(string[i:]) > len(longest_palindrome) {\n            \
    \    longest_palindrome = string[i:]\n            }\n        }\n    }\n    //\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    for i := 0; i < len(longest_palindrome); i++ {\n\
    \        if is_palindrome(longest_palindrome[i:]) {\n            longest_palindrome\
    \ = longest_palindrome[:i] + reverse(longest_palindrome[i:]) + longest_palindrome[i:]\n\
    \        }\n    }\n    return longest_palindrome"]
stop_tokens:
- "\n}"
