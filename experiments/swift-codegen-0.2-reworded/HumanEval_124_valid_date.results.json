{
  "name": "HumanEval_124_valid_date",
  "language": "swift",
  "prompt": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[4] == '-' && date[7] == '-' {\n        return true\n    }\n    if date[6] == '-' && date[9] == '-' {\n        return true\n    }\n    if date[0] == '0' && date[2] == '0' {\n        return true\n    }\n    if date[1] == '0' && date[3] == '0' {\n        return true\n    }\n    if date[2] == '0' && date[5] == '0' {\n        return true\n    }\n    if date[3] == '0' && date[5] == '0' {\n        return true\n    }\n    if date[4] == '0' && date[6] == '0' {\n        return true\n    }\n    if date[5] == '0' && date[7] == '0' {\n        return true\n    }\n    if date[6] == '0' && date[9] == '0' {\n        return true\n    }\n    if date[7] == '0' && date[9] == '0' {\n        return true\n    }\n    if date[8] == '0' && date[9] == '0' {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp3ks4xu7u.swift:26:19: error: single-quoted string literal found, use '\"'\n    if date[4] == '-' && date[7] == '-' {\n                  ^~~\n                  \"-\"\n/tmp/tmp3ks4xu7u.swift:26:37: error: single-quoted string literal found, use '\"'\n    if date[4] == '-' && date[7] == '-' {\n                                    ^~~\n                                    \"-\"\n/tmp/tmp3ks4xu7u.swift:29:19: error: single-quoted string literal found, use '\"'\n    if date[6] == '-' && date[9] == '-' {\n                  ^~~\n                  \"-\"\n/tmp/tmp3ks4xu7u.swift:29:37: error: single-quoted string literal found, use '\"'\n    if date[6] == '-' && date[9] == '-' {\n                                    ^~~\n                                    \"-\"\n/tmp/tmp3ks4xu7u.swift:32:19: error: single-quoted string literal found, use '\"'\n    if date[0] == '0' && date[2] == '0' {\n                  ^~~\n                  \"0\"\n/tmp/tmp3ks4xu7u.swift:32:37: error: single-quoted string literal found, use '\"'\n    if date[0] == '0' && date[2] == '0' {\n                                    ^~~\n                                    \"0\"\n/tmp/tmp3ks4xu7u.swift:35:19: error: single-quoted string literal found, use '\"'\n    if date[1] == '0' && date[3] == '0' {\n                  ^~~\n                  \"0\"\n/tmp/tmp3ks4xu7u.swift:35:37: error: single-quoted string literal found, use '\"'\n    if date[1] == '0' && date[3] == '0' {\n                                    ^~~\n                                    \"0\"\n/tmp/tmp3ks4xu7u.swift:38:19: error: single-quoted string literal found, use '\"'\n    if date[2] == '0' && date[5] == '0' {\n                  ^~~\n                  \"0\"\n/tmp/tmp3ks4xu7u.swift:38:37: error: single-quoted string literal found, use '\"'\n    if date[2] == '0' && date[5] == '0' {\n                                    ^~~\n                                    \"0\"\n/tmp/tmp3ks4xu7u.swift:41:19: error: single-quoted string literal found, use '\"'\n    if date[3] == '0' && date[5] == '0' {\n                  ^~~\n                  \"0\"\n/tmp/tmp3ks4xu7u.swift:41:37: e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    if month < 1 || month > 12 {\n        return false\n    }\n    day, _ := strconv.Atoi(date_arr[1])\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    year, _ := strconv.Atoi(date_arr[2])\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpwx_h6sir.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpwx_h6sir.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpwx_h6sir.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpwx_h6sir.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpwx_h6sir.swift:31:8: error: consecutive statements on a line must be separated by ';'\n    day, _ := strconv.Atoi(date_arr[1])\n       ^\n       ;\n/tmp/tmpwx_h6sir.swift:31:8: error: expected expression\n    day, _ := strconv.Atoi(date_arr[1])\n       ^\n/tmp/tmpwx_h6sir.swift:44:9: error: consecutive statements on a line must be separated by ';'\n    year, _ := strconv.Atoi(date_arr[2])\n        ^\n        ;\n/tmp/tmpwx_h6sir.swift:44:9: error: expected expression\n    year, _ := strconv.Atoi(date_arr[2])\n        ^\n/tmp/tmpwx_h6sir.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpwx_h6sir.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpwx_h6sir.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpwx_h6sir.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpwx_h6sir.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpwx_h6sir.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpwx_h6sir.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpwx_h6sir.swift:31:5: error: cannot find 'day' in scope\n    day, _ := strconv.Atoi(date_arr[1])\n    ^~~\n/tmp/tmpwx_h6sir.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 ||",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    date = date.toLower()\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' {\n        return false\n    }\n    if date[2] != '0' && date[2] != '1' && date[2] != '2' && date[2] != '3' && date[2] != '4' && date[2] != '5' && date[2] != '6' && date[2] != '7' && date[2] != '8' && date[2] != '9' {\n        return false\n    }\n    if date[4] != '0' && date[4] != '1' && date[4] != '2' && date[4] != '3' && date[4] != '4' && date[4] != '5' && date[4] != '6' && date[4] != '7' && date[4] != '8' && date[4] != '9' {\n        return false\n    }\n    if date[6] != '0' && date[6] != '1' && date[6] != '2' && date[6] != '3' && date[6] != '4' && date[6] != '5' && date[6] != '6' && date[6] != '7' && date[6] != '8' && date[6] != '9' {\n        return false\n    }\n    if date[8] != '0' && date[8] != '1' && date[8] != '2' && date[8] != '3' && date[8] != '4' && date[8] != '5' && date[8] != '6' && date[8]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpre3esk5w.swift:27:19: error: single-quoted string literal found, use '\"'\n    if date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' {\n                  ^~~\n                  \"0\"\n/tmp/tmpre3esk5w.swift:27:37: error: single-quoted string literal found, use '\"'\n    if date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' {\n                                    ^~~\n                                    \"1\"\n/tmp/tmpre3esk5w.swift:27:55: error: single-quoted string literal found, use '\"'\n    if date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' {\n                                                      ^~~\n                                                      \"2\"\n/tmp/tmpre3esk5w.swift:27:73: error: single-quoted string literal found, use '\"'\n    if date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' {\n                                                                        ^~~\n                                                                        \"3\"\n/tmp/tmpre3esk5w.swift:27:91: error: single-quoted string literal found, use '\"'\n    if date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9' {\n                                                                                          ^~~\n                                                                                          \"4\"\n/tmp/tmpre3esk5w.swift:27:109: error: single-quoted string literal found, use '\"'\n    if date[0] != '0' && date[0] != '1' && date[0] ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        return false\n    }\n    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpgzaestdu.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpgzaestdu.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpgzaestdu.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpgzaestdu.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpgzaestdu.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpgzaestdu.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpgzaestdu.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpgzaestdu.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpgzaestdu.swift:36:8: error: cannot find 'month' in scope\n    if month == 2 {\n       ^~~~~\n/tmp/tmpgzaestdu.swift:37:12: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n           ^~~\n/tmp/tmpgzaestdu.swift:37:23: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n                      ^~~\n/tmp/tmpgzaestdu.swift:40:15: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n              ^~~~~\n/tmp/tmpgzaestdu.swift:40:29: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                            ^~~~~\n/tmp/tmpgzaestdu.swift:40:43: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                          ^~~~~\n/tmp/tmpgzaestdu.swift:40:57: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month ==",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var valid_month, valid_day, valid_year bool\n    var valid_date = true\n    var date_array = strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        valid_date = false\n    }\n    month, _ = strconv.Atoi(date_array[0])\n    day, _ = strconv.Atoi(date_array[1])\n    year, _ = strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        valid_month = false\n    }\n    if day < 1 || day > 31 {\n        valid_day = false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            valid_day = false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            valid_day = false\n        }\n    }\n    if year < 1 || year > 9999 {\n        valid_year = false\n    }\n    if !valid_month {\n        valid_date = false\n    }\n    if !valid_day {\n        valid_date = false\n    }\n    if !valid_year {\n        valid_date = false\n    }\n    return valid_date\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp_ha_ldgl.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmp_ha_ldgl.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmp_ha_ldgl.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmp_ha_ldgl.swift:24:44: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_month, valid_day, valid_year bool\n                                           ^\n/tmp/tmp_ha_ldgl.swift:24:44: note: join the identifiers together\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearbool\n/tmp/tmp_ha_ldgl.swift:24:44: note: join the identifiers together with camel-case\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearBool\n/tmp/tmp_ha_ldgl.swift:30:10: error: consecutive statements on a line must be separated by ';'\n    month, _ = strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmp_ha_ldgl.swift:30:10: error: expected expression\n    month, _ = strconv.Atoi(date_array[0])\n         ^\n/tmp/tmp_ha_ldgl.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp_ha_ldgl.swift:23:9: error: type annotation missing in pattern\n    var month, day, year int\n        ^\n/tmp/tmp_ha_ldgl.swift:23:16: error: type annotation missing in pattern\n    var month, day, year int\n               ^\n/tmp/tmp_ha_ldgl.swift:23:21: error: type annotation missing in pattern\n    var month, day, year int\n                    ^\n/tmp/tmp_ha_ldgl.swift:24:9: error: type annotation missing in pattern\n    var valid_month, valid_day, valid_year bool\n        ^\n/tmp/tmp_ha_ldgl.swift:24:22: error:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpe6cbqg3p.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpe6cbqg3p.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpe6cbqg3p.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpe6cbqg3p.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpe6cbqg3p.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpe6cbqg3p.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpe6cbqg3p.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpe6cbqg3p.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpe6cbqg3p.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpe6cbqg3p.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpe6cbqg3p.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpe6cbqg3p.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpe6cbqg3p.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpe6cbqg3p.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpe6cbqg3p.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpe6cbqg3p.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpe6cbqg3p.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpe6cbqg3p.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpe6cbqg3p.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpe6cbqg3p.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpe6cbqg3p.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpe6cbqg3p.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpe6cbqg3p.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpe6cbqg3p.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpe6cbqg3p.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpe6cbqg3p.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpe6cbqg3p.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpe6cbqg3p.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpe6cbqg3p.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpe6cbqg3p.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpe6cbqg3p.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpe6cbqg3p.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpe6cbqg3p.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpe6cbqg3p.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[2] != '-' {\n        return false\n    }\n    if date[5] != '-' {\n        return false\n    }\n    if date[8] != '-' {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[10] < '0' || date[10] > '9' {\n        return false\n    }\n    if date[0] > '2' {\n        return false\n    }\n    if date[1] > '9' {\n        return false\n    }\n    if date[3] > '9' {\n        return false\n    }\n    if date[4] > '9' {\n        return false\n    }\n    if date[6] > '9' {\n        return false\n    }\n    if date[7] > '9' {\n        return false\n    }\n    if date[9] > '9' {\n        return false\n    }\n    if date[10] > '9' {\n        return false\n    }\n    if date[2] > '9' {\n        return false\n    }\n    if date[5] > '9' {\n        return false\n    }\n    if date[8] > '9'\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp86l6b0__.swift:26:19: error: single-quoted string literal found, use '\"'\n    if date[2] != '-' {\n                  ^~~\n                  \"-\"\n/tmp/tmp86l6b0__.swift:29:19: error: single-quoted string literal found, use '\"'\n    if date[5] != '-' {\n                  ^~~\n                  \"-\"\n/tmp/tmp86l6b0__.swift:32:19: error: single-quoted string literal found, use '\"'\n    if date[8] != '-' {\n                  ^~~\n                  \"-\"\n/tmp/tmp86l6b0__.swift:35:18: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmp86l6b0__.swift:35:35: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmp86l6b0__.swift:38:18: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmp86l6b0__.swift:38:35: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmp86l6b0__.swift:41:18: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmp86l6b0__.swift:41:35: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmp86l6b0__.swift:44:18: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmp86l6b0__.swift:44:35: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmp86l6b0__.swift:47:18: error: single-quoted string literal found, use '\"'\n    if date[6] < '0' || date[6] > '9' {\n                 ^~~\n                 \"0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month int\n    var day int\n    var year int\n    var month_str string\n    var day_str string\n    var year_str string\n    var valid_month int\n    var valid_day int\n    var valid_year int\n    var valid_date bool\n    var date_str string\n    date_str = date\n    if len(date_str) == 0 {\n        return false\n    }\n    if len(date_str) != 10 {\n        return false\n    }\n    if date_str[0] != '0' && date_str[0] != '1' && date_str[0] != '2' && date_str[0] != '3' && date_str[0] != '4' && date_str[0] != '5' && date_str[0] != '6' && date_str[0] != '7' && date_str[0] != '8' && date_str[0] != '9' {\n        return false\n    }\n    if date_str[1] != '0' && date_str[1] != '1' && date_str[1] != '2' && date_str[1] != '3' && date_str[1] != '4' && date_str[1] != '5' && date_str[1] != '6' && date_str[1] != '7' && date_str[1] != '8' && date_str[1] != '9' {\n        return false\n    }\n    if date_str[2] != '0' && date_str[2] != '1' && date_str[2] != '2' && date_str[2] != '3' && date_str[2] != '4' && date_str[2] != '5' && date_str[2] != '6' && date_str[2] != '7' && date_str[2] != '8' && date_str[2] != '9' {\n        return false\n    }\n    if date_str[3] != '0' && date_str[3] != '1' && date_str[3] != '2' && date\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp4xcdwvjw.swift:20:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month int\n              ^\n/tmp/tmp4xcdwvjw.swift:20:15: note: join the identifiers together\n    var month int\n        ~~~~~~^~~\n        monthint\n/tmp/tmp4xcdwvjw.swift:20:15: note: join the identifiers together with camel-case\n    var month int\n        ~~~~~~^~~\n        monthInt\n/tmp/tmp4xcdwvjw.swift:21:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var day int\n            ^\n/tmp/tmp4xcdwvjw.swift:21:13: note: join the identifiers together\n    var day int\n        ~~~~^~~\n        dayint\n/tmp/tmp4xcdwvjw.swift:21:13: note: join the identifiers together with camel-case\n    var day int\n        ~~~~^~~\n        dayInt\n/tmp/tmp4xcdwvjw.swift:22:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var year int\n             ^\n/tmp/tmp4xcdwvjw.swift:22:14: note: join the identifiers together\n    var year int\n        ~~~~~^~~\n        yearint\n/tmp/tmp4xcdwvjw.swift:22:14: note: join the identifiers together with camel-case\n    var year int\n        ~~~~~^~~\n        yearInt\n/tmp/tmp4xcdwvjw.swift:23:19: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_str string\n                  ^\n/tmp/tmp4xcdwvjw.swift:23:19: note: join the identifiers together\n    var month_str string\n        ~~~~~~~~~~^~~~~~\n        month_strstring\n/tmp/tmp4xcdwvjw.swift:23:19: note: join the identifiers together with camel-case\n    var month_str string\n        ~~~~~~~~~~^~~~~~\n        month_strString\n/tmp/tmp4xcdwvjw.swift:24:17: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var day_str string\n                ^\n/tmp/tmp4xcdwvjw.swift:24:17: note: join the identifiers together\n    var day_str string\n        ~~~~~~~~^~~~~~\n        day_strstring\n/tmp/tmp4xcdwvjw.swift:24:17: note: join t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpnawe277v.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpnawe277v.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpnawe277v.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpnawe277v.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpnawe277v.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpnawe277v.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpnawe277v.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpnawe277v.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpnawe277v.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpnawe277v.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpnawe277v.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpnawe277v.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpnawe277v.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpnawe277v.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpnawe277v.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpnawe277v.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpnawe277v.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "tmpurcr8my_/tmpurcr8my_.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7530b9ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7530895b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7530895988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75308947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpurcr8my_                        0x000055f583bf72fb <unavailable> + 4859\n5    libc.so.6                          0x00002b7530d8a460 __libc_start_main + 245\n6    tmpurcr8my_                        0x000055f583bf6ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpbjjavcy5.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpbjjavcy5.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpbjjavcy5.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpbjjavcy5.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpbjjavcy5.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpbjjavcy5.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpbjjavcy5.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpbjjavcy5.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpbjjavcy5.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpbjjavcy5.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpbjjavcy5.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date.split(\"-\")\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    month_num := month_to_num(month)\n    day_num := day_to_num(day)\n    year_num := year_to_num(year)\n    \n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    \n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmproppg3ql.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, day, year := date.split(\"-\")\n         ^\n         ;\n/tmp/tmproppg3ql.swift:24:10: error: expected expression\n    month, day, year := date.split(\"-\")\n         ^\n/tmp/tmproppg3ql.swift:30:14: error: consecutive statements on a line must be separated by ';'\n    month_num := month_to_num(month)\n             ^\n             ;\n/tmp/tmproppg3ql.swift:30:15: error: expected expression\n    month_num := month_to_num(month)\n              ^\n/tmp/tmproppg3ql.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmproppg3ql.swift:24:5: error: cannot find 'month' in scope\n    month, day, year := date.split(\"-\")\n    ^~~~~\n/tmp/tmproppg3ql.swift:26:8: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n       ^~~\n/tmp/tmproppg3ql.swift:26:12: error: cannot find 'month' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n           ^~~~~\n/tmp/tmproppg3ql.swift:26:27: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                          ^~~\n/tmp/tmproppg3ql.swift:26:31: error: cannot find 'day' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                              ^~~\n/tmp/tmproppg3ql.swift:26:44: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                           ^~~\n/tmp/tmproppg3ql.swift:26:48: error: cannot find 'year' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                               ^~~~\n/tmp/tmproppg3ql.swift:30:5: error: cannot find 'month_num' in scope\n    month_num := month_to_num(month)\n    ^~~~~~~~~\n/tmp/tmproppg3ql.swift:34:8: error: cannot find 'month_num' in scope\n    if month_num < 1 || month_num > 12 {\n       ^~~~~~~~~\n/tmp/tmproppg3ql.swift:34:25: error: cannot find 'month_num' in scope\n    if month_num < 1 || month_num > 12 {\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var valid_month, valid_day, valid_year bool\n    var err error\n    var date_str = strings.Replace(date, \"-\", \"\", -1)\n    var date_arr = strings.Split(date_str, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, err = strconv.Atoi(date_arr[0])\n    if err != nil {\n        return false\n    }\n    day, err = strconv.Atoi(date_arr[1])\n    if err != nil {\n        return false\n    }\n    year, err = strconv.Atoi(date_arr[2])\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    valid_month = (month >= 1 && month <= 12)\n    valid_day = (day >= 1 && day <= 31)\n    valid_year = (year >= 1900 && year <= 2100)\n    return valid_month && valid_day && valid_year\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp5rtod3rf.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmp5rtod3rf.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmp5rtod3rf.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmp5rtod3rf.swift:24:44: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_month, valid_day, valid_year bool\n                                           ^\n/tmp/tmp5rtod3rf.swift:24:44: note: join the identifiers together\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearbool\n/tmp/tmp5rtod3rf.swift:24:44: note: join the identifiers together with camel-case\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearBool\n/tmp/tmp5rtod3rf.swift:25:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmp5rtod3rf.swift:25:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmp5rtod3rf.swift:25:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmp5rtod3rf.swift:31:10: error: consecutive statements on a line must be separated by ';'\n    month, err = strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmp5rtod3rf.swift:31:10: error: expected expression\n    month, err = strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmp5rtod3rf.swift:35:8: error: consecutive statements on a line must be separated by ';'\n    day, err = strconv.Atoi(date_arr[1])\n       ^\n       ;\n/tmp/tmp5rtod3rf.swift:35:8: error: expected ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Your code here\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "tmpfoz2vl8s/tmpfoz2vl8s.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a6b84fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a6b546b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a6b546988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a6b5457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfoz2vl8s                        0x000055b8046102fb <unavailable> + 4859\n5    libc.so.6                          0x00002b2a6ba3b460 __libc_start_main + 245\n6    tmpfoz2vl8s                        0x000055b80460fee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month: Int = 0\n    var day: Int = 0\n    var year: Int = 0\n    var valid: Bool = true\n    var date_str: String = date\n    var date_arr: [4]String = date_str.split(\"-\")\n    if len(date_arr) != 3 {\n        valid = false\n    } else {\n        month = Int(date_arr[0])\n        day = Int(date_arr[1])\n        year = Int(date_arr[2])\n        if month < 1 || month > 12 {\n            valid = false\n        } else if day < 1 || day > 31 {\n            if month == 2 {\n                if day < 1 || day > 29 {\n                    valid = false\n                }\n            } else if month == 4 || month == 6 || month == 9 || month == 11 {\n                if day < 1 || day > 30 {\n                    valid = false\n                }\n            } else {\n                if day < 1 || day > 31 {\n                    valid = false\n                }\n            }\n        }\n    }\n    return valid\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp9sz9aex_.swift:25:20: error: expected element type\n    var date_arr: [4]String = date_str.split(\"-\")\n                   ^\n/tmp/tmp9sz9aex_.swift:25:20: error: expected ']' in array type\n    var date_arr: [4]String = date_str.split(\"-\")\n                   ^\n/tmp/tmp9sz9aex_.swift:25:19: note: to match this opening '['\n    var date_arr: [4]String = date_str.split(\"-\")\n                  ^\n/tmp/tmp9sz9aex_.swift:25:20: error: consecutive statements on a line must be separated by ';'\n    var date_arr: [4]String = date_str.split(\"-\")\n                   ^\n                   ;\n/tmp/tmp9sz9aex_.swift:25:21: error: consecutive statements on a line must be separated by ';'\n    var date_arr: [4]String = date_str.split(\"-\")\n                    ^\n                    ;\n/tmp/tmp9sz9aex_.swift:25:21: error: expected expression\n    var date_arr: [4]String = date_str.split(\"-\")\n                    ^\n/tmp/tmp9sz9aex_.swift:25:20: warning: integer literal is unused\n    var date_arr: [4]String = date_str.split(\"-\")\n                   ^\n/tmp/tmp9sz9aex_.swift:26:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date.split(\"-\")\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpvuznotdu.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, day, year := date.split(\"-\")\n         ^\n         ;\n/tmp/tmpvuznotdu.swift:24:10: error: expected expression\n    month, day, year := date.split(\"-\")\n         ^\n/tmp/tmpvuznotdu.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpvuznotdu.swift:24:5: error: cannot find 'month' in scope\n    month, day, year := date.split(\"-\")\n    ^~~~~\n/tmp/tmpvuznotdu.swift:26:8: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n       ^~~\n/tmp/tmpvuznotdu.swift:26:12: error: cannot find 'month' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n           ^~~~~\n/tmp/tmpvuznotdu.swift:26:27: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                          ^~~\n/tmp/tmpvuznotdu.swift:26:31: error: cannot find 'day' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                              ^~~\n/tmp/tmpvuznotdu.swift:26:44: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                           ^~~\n/tmp/tmpvuznotdu.swift:26:48: error: cannot find 'year' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                               ^~~~\n/tmp/tmpvuznotdu.swift:30:9: error: cannot find 'is_valid_month' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n        ^~~~~~~~~~~~~~\n/tmp/tmpvuznotdu.swift:30:24: error: cannot find 'month' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n                       ^~~~~\n/tmp/tmpvuznotdu.swift:30:35: error: cannot find 'is_valid_day' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n                                  ^~~~~~~~~~~~\n/tmp/tmpvuznotdu.swift:30:48: error: cannot find 'day' in scope\n    if !is_valid_month(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var valid_month, valid_day, valid_year bool\n    var valid_date = true\n    var month_list = []string{\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"}\n    var day_list = []string{\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"}\n    var year_list = []string{\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"}\n    var month_list_len = len(month_list)\n    var day_list_len = len(day_list)\n    var year_list_len = len(year_list)\n    var month_str, day_str, year_str = date.split(\"-\")\n    month, _ = strconv.Atoi(month_str)\n    day, _ = strconv.Atoi(day_str)\n    year, _ = strconv.Atoi(year_str)\n    if month < 1 || month > 12 {\n        valid_month = false\n    }\n    if day < 1 || day > 31 {\n        valid_day = false\n    }\n    if month == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp_973a_8b.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmp_973a_8b.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmp_973a_8b.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmp_973a_8b.swift:24:44: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_month, valid_day, valid_year bool\n                                           ^\n/tmp/tmp_973a_8b.swift:24:44: note: join the identifiers together\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearbool\n/tmp/tmp_973a_8b.swift:24:44: note: join the identifiers together with camel-case\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearBool\n/tmp/tmp_973a_8b.swift:26:24: error: consecutive statements on a line must be separated by ';'\n    var month_list = []string{\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"}\n                       ^\n                       ;\n/tmp/tmp_973a_8b.swift:26:35: error: consecutive statements on a line must be separated by ';'\n    var month_list = []string{\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"}\n                                  ^\n                                  ;\n/tmp/tmp_973a_8b.swift:26:35: error: expected expression\n    var month_list = []string{\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"}\n                                  ^\n/tmp/tmp_973a_8b.swift:27:22: error: consecutive statements on a line must be separated by ';'\n    var day_list = []string{\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp65zg4lu_.swift:24:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmp65zg4lu_.swift:24:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmp65zg4lu_.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmp65zg4lu_.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmp65zg4lu_.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp65zg4lu_.swift:24:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmp65zg4lu_.swift:25:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmp65zg4lu_.swift:25:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmp65zg4lu_.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmp65zg4lu_.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmp65zg4lu_.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmp65zg4lu_.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmp65zg4lu_.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmp65zg4lu_.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmp65zg4lu_.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmp65zg4lu_.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmp65zg4lu_.swift:47:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[4] != '-' {\n        return false\n    }\n    if date[7] != '-' {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[1] > '2' {\n        return false\n    }\n    if date[3] > '5' {\n        return false\n    }\n    if date[5] > '9' {\n        return false\n    }\n    if date[7] > '9' {\n        return false\n    }\n    if date[9] > '9' {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpi850y5zv.swift:26:19: error: single-quoted string literal found, use '\"'\n    if date[4] != '-' {\n                  ^~~\n                  \"-\"\n/tmp/tmpi850y5zv.swift:29:19: error: single-quoted string literal found, use '\"'\n    if date[7] != '-' {\n                  ^~~\n                  \"-\"\n/tmp/tmpi850y5zv.swift:32:18: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpi850y5zv.swift:32:35: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpi850y5zv.swift:35:18: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpi850y5zv.swift:35:35: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpi850y5zv.swift:38:18: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpi850y5zv.swift:38:35: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpi850y5zv.swift:41:18: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpi850y5zv.swift:41:35: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpi850y5zv.swift:44:18: error: single-quoted string literal found, use '\"'\n    if date[5] < '0' || date[5] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpi850y5zv.swift:44:35: error: single-quoted string literal found, use '\"'\n    if date[5] < '0' || date[5] > '9' {\n                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else if month == 4 || month == 6 || month == 9 || month == 11 {\n            if day < 1 || day > 30 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp025ivzyv.swift:24:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmp025ivzyv.swift:24:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmp025ivzyv.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmp025ivzyv.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmp025ivzyv.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp025ivzyv.swift:24:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmp025ivzyv.swift:25:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmp025ivzyv.swift:25:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmp025ivzyv.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmp025ivzyv.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmp025ivzyv.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmp025ivzyv.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmp025ivzyv.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmp025ivzyv.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmp025ivzyv.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmp025ivzyv.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmp025ivzyv.swift:42:19: error: cannot find 'month' in scope\n        } else if month == 4 || month == 6 || month == 9 || month ==",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month int\n    var day int\n    var year int\n\n    if len(date) == 0 {\n        return false\n    }\n\n    month = int(date[0] - '0')\n    day = int(date[2] - '0')\n    year = int(date[4] - '0')\n\n    if month < 1 || month > 12 {\n        return false\n    }\n\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpwr19pdho.swift:20:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month int\n              ^\n/tmp/tmpwr19pdho.swift:20:15: note: join the identifiers together\n    var month int\n        ~~~~~~^~~\n        monthint\n/tmp/tmpwr19pdho.swift:20:15: note: join the identifiers together with camel-case\n    var month int\n        ~~~~~~^~~\n        monthInt\n/tmp/tmpwr19pdho.swift:21:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var day int\n            ^\n/tmp/tmpwr19pdho.swift:21:13: note: join the identifiers together\n    var day int\n        ~~~~^~~\n        dayint\n/tmp/tmpwr19pdho.swift:21:13: note: join the identifiers together with camel-case\n    var day int\n        ~~~~^~~\n        dayInt\n/tmp/tmpwr19pdho.swift:22:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var year int\n             ^\n/tmp/tmpwr19pdho.swift:22:14: note: join the identifiers together\n    var year int\n        ~~~~~^~~\n        yearint\n/tmp/tmpwr19pdho.swift:22:14: note: join the identifiers together with camel-case\n    var year int\n        ~~~~~^~~\n        yearInt\n/tmp/tmpwr19pdho.swift:28:27: error: single-quoted string literal found, use '\"'\n    month = int(date[0] - '0')\n                          ^~~\n                          \"0\"\n/tmp/tmpwr19pdho.swift:29:25: error: single-quoted string literal found, use '\"'\n    day = int(date[2] - '0')\n                        ^~~\n                        \"0\"\n/tmp/tmpwr19pdho.swift:30:26: error: single-quoted string literal found, use '\"'\n    year = int(date[4] - '0')\n                         ^~~\n                         \"0\"\n/tmp/tmpwr19pdho.swift:20:9: error: type annotation missing in pattern\n    var month int\n        ^\n/tmp/tmpwr19pdho.swift:21:9: error: type annotation missing in pattern\n    var day int\n        ^\n/tmp/tmpwr19pdho.swift:22:9: error: type annotation missing in pattern\n    var year int\n        ^\n/tmp/tmpwr19pdho.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] != \"0\" {\n        return false\n    }\n    if date[2] != \"-\" {\n        return false\n    }\n    if date[5] != \"-\" {\n        return false\n    }\n    if date[8] != \"-\" {\n        return false\n    }\n    if date[1] < 1 || date[1] > 12 {\n        return false\n    }\n    if date[3] < 1 || date[3] > 31 {\n        return false\n    }\n    if date[4] < 1 || date[4] > 30 {\n        return false\n    }\n    if date[6] < 1 || date[6] > 29 {\n        return false\n    }\n    if date[7] < 1 || date[7] > 12 {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpiyg_iar7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpiyg_iar7.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpiyg_iar7.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] != \"0\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiyg_iar7.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiyg_iar7.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[5] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiyg_iar7.swift:35:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[8] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiyg_iar7.swift:38:16: error: binary operator '<' cannot be applied to operands of type 'Character' and 'Int'\n    if date[1] < 1 || date[1] > 12 {\n       ~~~~~~~ ^ ~\n/tmp/tmpiyg_iar7.swift:38:16: note: overloads for '<' exist with these partially matching parameter lists: (Character, Character), (Int, Int)\n    if date[1] < 1 || date[1] > 12 {\n               ^\n/tmp/tmpiyg_iar7.swift:38:27: error: cannot convert value of type 'Character' to expected argument type 'Int'\n    if date[1] < 1 || date[1] > 12 {\n                          ^\n/tmp/tmpiyg_iar7.swift:41:1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpmj9jea9k.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpmj9jea9k.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpmj9jea9k.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpmj9jea9k.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpmj9jea9k.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpmj9jea9k.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpmj9jea9k.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpmj9jea9k.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpmj9jea9k.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpmj9jea9k.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpmj9jea9k.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpnawe277v.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpnawe277v.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpnawe277v.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpnawe277v.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpnawe277v.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpnawe277v.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpnawe277v.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpnawe277v.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpnawe277v.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpnawe277v.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpnawe277v.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpnawe277v.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpnawe277v.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpnawe277v.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpnawe277v.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpnawe277v.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpnawe277v.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpfvam1_qe.swift:24:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpfvam1_qe.swift:24:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpfvam1_qe.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpfvam1_qe.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpfvam1_qe.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpfvam1_qe.swift:24:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpfvam1_qe.swift:25:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpfvam1_qe.swift:25:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpfvam1_qe.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpfvam1_qe.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpfvam1_qe.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpfvam1_qe.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpfvam1_qe.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpfvam1_qe.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpfvam1_qe.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpfvam1_qe.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpfvam1_qe.swift:47:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpm8_45q_3.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpm8_45q_3.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpm8_45q_3.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpm8_45q_3.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpm8_45q_3.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpm8_45q_3.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpm8_45q_3.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpm8_45q_3.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpm8_45q_3.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpm8_45q_3.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpm8_45q_3.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpm8_45q_3.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpm8_45q_3.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpm8_45q_3.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpm8_45q_3.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpm8_45q_3.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpm8_45q_3.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month: Int\n    var day: Int\n    var year: Int\n    var valid: Bool\n\n    if len(date) == 0 {\n        return false\n    }\n\n    month = date[0:2]\n    day = date[3:5]\n    year = date[6:10]\n\n    if len(month) != 2 {\n        return false\n    }\n\n    if len(day) != 2 {\n        return false\n    }\n\n    if len(year) != 4 {\n        return false\n    }\n\n    if month < 1 || month > 12 {\n        return false\n    }\n\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n\n    valid = true\n    return valid\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp7f869nb9.swift:29:19: error: expected ',' separator\n    month = date[0:2]\n                  ^\n                  ,\n/tmp/tmp7f869nb9.swift:29:19: error: expected expression in list of expressions\n    month = date[0:2]\n                  ^\n/tmp/tmp7f869nb9.swift:30:17: error: expected ',' separator\n    day = date[3:5]\n                ^\n                ,\n/tmp/tmp7f869nb9.swift:30:17: error: expected expression in list of expressions\n    day = date[3:5]\n                ^\n/tmp/tmp7f869nb9.swift:31:18: error: expected ',' separator\n    year = date[6:10]\n                 ^\n                 ,\n/tmp/tmp7f869nb9.swift:31:18: error: expected expression in list of expressions\n    year = date[6:10]\n                 ^\n/tmp/tmp7f869nb9.swift:25:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp7f869nb9.swift:29:17: error: cannot assign value of type 'Character' to type 'Int'\n    month = date[0:2]\n            ~~~~^~~~~\n/tmp/tmp7f869nb9.swift:30:15: error: cannot assign value of type 'Character' to type 'Int'\n    day = date[3:5]\n          ~~~~^~~~~\n/tmp/tmp7f869nb9.swift:31:16: error: cannot assign value of type 'Character' to type 'Int'\n    year = date[6:10]\n           ~~~~^~~~~~\n/tmp/tmp7f869nb9.swift:33:8: error: cannot find 'len' in scope\n    if len(month) != 2 {\n       ^~~\n/tmp/tmp7f869nb9.swift:37:8: error: cannot find 'len' in scope\n    if len(day) != 2 {\n       ^~~\n/tmp/tmp7f869nb9.swift:41:8: error: cannot find 'len' in scope\n    if len(year) != 4 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[1] < \"1\" || date[1] > \"12\" {\n        return false\n    }\n    if date[3] < \"1\" || date[3] > \"31\" {\n        return false\n    }\n    if date[5] < \"1\" || date[5] > \"30\" {\n        return false\n    }\n    if date[7] < \"1\" || date[7] > \"29\" {\n        return false\n    }\n    if date[9] < \"1\" || date[9] > \"12\" {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdp36_md7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpdp36_md7.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpdp36_md7.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[4] < \"0\" || date[4] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    \n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else if month == 4 || month == 6 || month == 9 || month == 11 {\n            if day < 1 || day > 30 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpjlesvnum.swift:24:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpjlesvnum.swift:24:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpjlesvnum.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpjlesvnum.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpjlesvnum.swift:24:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpjlesvnum.swift:25:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpjlesvnum.swift:25:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpjlesvnum.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpjlesvnum.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpjlesvnum.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpjlesvnum.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpjlesvnum.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpjlesvnum.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpjlesvnum.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpjlesvnum.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpjlesvnum.swift:42:19: error: cannot find 'month' in scope\n        } else if month == 4 || month == 6 || month == 9 || month == 11 {\n                  ^~~~~\n/tmp/tmpjlesvnum.swift:42:33: error: c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Write your code here\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "tmpf3p1yk7_/tmpf3p1yk7_.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af2fcc91c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af2fc988b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af2fc988988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af2fc9877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf3p1yk7_                        0x000055ac41c642fb <unavailable> + 4859\n5    libc.so.6                          0x00002af2fce7d460 __libc_start_main + 245\n6    tmpf3p1yk7_                        0x000055ac41c63ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpnawe277v.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpnawe277v.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpnawe277v.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpnawe277v.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpnawe277v.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpnawe277v.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpnawe277v.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpnawe277v.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpnawe277v.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpnawe277v.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpnawe277v.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpnawe277v.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpnawe277v.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpnawe277v.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpnawe277v.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpnawe277v.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpnawe277v.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    var valid bool\n    var month_str, day_str, year_str string\n    month_str, day_str, year_str = date.split(\"-\")\n    month, err = strconv.Atoi(month_str)\n    if err != nil {\n        return false\n    }\n    day, err = strconv.Atoi(day_str)\n    if err != nil {\n        return false\n    }\n    year, err = strconv.Atoi(year_str)\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    valid = true\n    return valid\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp_j55913_.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmp_j55913_.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmp_j55913_.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmp_j55913_.swift:24:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmp_j55913_.swift:24:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmp_j55913_.swift:24:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmp_j55913_.swift:25:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid bool\n              ^\n/tmp/tmp_j55913_.swift:25:15: note: join the identifiers together\n    var valid bool\n        ~~~~~~^~~~\n        validbool\n/tmp/tmp_j55913_.swift:25:15: note: join the identifiers together with camel-case\n    var valid bool\n        ~~~~~~^~~~\n        validBool\n/tmp/tmp_j55913_.swift:26:38: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_str, day_str, year_str string\n                                     ^\n/tmp/tmp_j55913_.swift:26:38: note: join the identifiers together\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strstring\n/tmp/tmp_j55913_.swift:26:38: note: join the identifiers together with camel-case\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strString\n/tmp/tmp_j55913_.swift:27:14: error: consecutive statements on a line must be ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date.split(\"-\")\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpvuznotdu.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, day, year := date.split(\"-\")\n         ^\n         ;\n/tmp/tmpvuznotdu.swift:24:10: error: expected expression\n    month, day, year := date.split(\"-\")\n         ^\n/tmp/tmpvuznotdu.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpvuznotdu.swift:24:5: error: cannot find 'month' in scope\n    month, day, year := date.split(\"-\")\n    ^~~~~\n/tmp/tmpvuznotdu.swift:26:8: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n       ^~~\n/tmp/tmpvuznotdu.swift:26:12: error: cannot find 'month' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n           ^~~~~\n/tmp/tmpvuznotdu.swift:26:27: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                          ^~~\n/tmp/tmpvuznotdu.swift:26:31: error: cannot find 'day' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                              ^~~\n/tmp/tmpvuznotdu.swift:26:44: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                           ^~~\n/tmp/tmpvuznotdu.swift:26:48: error: cannot find 'year' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                               ^~~~\n/tmp/tmpvuznotdu.swift:30:9: error: cannot find 'is_valid_month' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n        ^~~~~~~~~~~~~~\n/tmp/tmpvuznotdu.swift:30:24: error: cannot find 'month' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n                       ^~~~~\n/tmp/tmpvuznotdu.swift:30:35: error: cannot find 'is_valid_day' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n                                  ^~~~~~~~~~~~\n/tmp/tmpvuznotdu.swift:30:48: error: cannot find 'day' in scope\n    if !is_valid_month(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpegvo6iis.swift:20:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\"-\", \"\")\n    ^~~~\n/tmp/tmpegvo6iis.swift:20:17: error: cannot assign value of type '()' to type 'String'\n    date = date.replace(\"-\", \"\")\n           ~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpegvo6iis.swift:20:24: error: missing argument label 'with:' in call\n    date = date.replace(\"-\", \"\")\n                       ^\n                             with: \n/tmp/tmpegvo6iis.swift:20:17: error: cannot use mutating member on immutable value: 'date' is a 'let' constant\n    date = date.replace(\"-\", \"\")\n           ~~~~ ^\n/tmp/tmpegvo6iis.swift:21:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\"/\", \"\")\n    ^~~~\n/tmp/tmpegvo6iis.swift:21:17: error: cannot assign value of type '()' to type 'String'\n    date = date.replace(\"/\", \"\")\n           ~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpegvo6iis.swift:21:17: error: cannot use mutating member on immutable value: 'date' is a 'let' constant\n    date = date.replace(\"/\", \"\")\n           ~~~~ ^\n/tmp/tmpegvo6iis.swift:21:24: error: missing argument label 'with:' in call\n    date = date.replace(\"/\", \"\")\n                       ^\n                             with: \n/tmp/tmpegvo6iis.swift:22:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\" \", \"\")\n    ^~~~\n/tmp/tmpegvo6iis.swift:22:17: error: cannot assign value of type '()' to type 'String'\n    date = date.replace(\" \", \"\")\n           ~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpegvo6iis.swift:22:24: error: missing argument label 'with:' in call\n    date = date.replace(\" \", \"\")\n                       ^\n                             with: \n/tmp/tmpegvo6iis.swift:22:17: error: cannot use mutating member on immutable value: 'date' is a 'let' constant\n    date = date.replace(\" \", \"\")\n           ~~~~ ^\n/tmp/tmpegvo6iis.swift:23:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\".\", \"\")\n    ^~~~\n/tmp/tmpegvo6iis.swift:23:17: error: cannot assign value of type '()' to type",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Your code here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "tmpzh3i13wy/tmpzh3i13wy.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0261b52c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0261849b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0261849988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02618487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzh3i13wy                        0x000055c141e3f25b <unavailable> + 4699\n5    libc.so.6                          0x00002b0261d3e460 __libc_start_main + 245\n6    tmpzh3i13wy                        0x000055c141e3eee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[1] < \"1\" || date[1] > \"12\" {\n        return false\n    }\n    if date[3] < \"1\" || date[3] > \"31\" {\n        return false\n    }\n    if date[5] < \"1\" || date[5] > \"30\" {\n        return false\n    }\n    if date[7] < \"1\" || date[7] > \"29\" {\n        return false\n    }\n    if date[9] < \"1\" || date[9] > \"12\" {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdp36_md7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpdp36_md7.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpdp36_md7.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[4] < \"0\" || date[4] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var valid_month = false\n    var valid_day = false\n    var valid_year = false\n    var valid_date = false\n    var valid_date_string = \"\"\n    var date_string = date\n    var date_string_split = strings.Split(date_string, \"-\")\n    if len(date_string_split) != 3 {\n        return false\n    }\n    month, _ = strconv.Atoi(date_string_split[0])\n    day, _ = strconv.Atoi(date_string_split[1])\n    year, _ = strconv.Atoi(date_string_split[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    valid_month = true\n    valid_day = true\n    valid_year = true\n    return valid_month && valid_day && valid_year\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp6c17q8hj.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmp6c17q8hj.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmp6c17q8hj.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmp6c17q8hj.swift:34:10: error: consecutive statements on a line must be separated by ';'\n    month, _ = strconv.Atoi(date_string_split[0])\n         ^\n         ;\n/tmp/tmp6c17q8hj.swift:34:10: error: expected expression\n    month, _ = strconv.Atoi(date_string_split[0])\n         ^\n/tmp/tmp6c17q8hj.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp6c17q8hj.swift:23:9: error: type annotation missing in pattern\n    var month, day, year int\n        ^\n/tmp/tmp6c17q8hj.swift:23:16: error: type annotation missing in pattern\n    var month, day, year int\n               ^\n/tmp/tmp6c17q8hj.swift:23:21: error: type annotation missing in pattern\n    var month, day, year int\n                    ^\n/tmp/tmp6c17q8hj.swift:30:29: error: cannot find 'strings' in scope\n    var date_string_split = strings.Split(date_string, \"-\")\n                            ^~~~~~~\n/tmp/tmp6c17q8hj.swift:31:8: error: cannot find 'len' in scope\n    if len(date_string_split) != 3 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpnkd7hfv8.swift:24:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpnkd7hfv8.swift:24:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpnkd7hfv8.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpnkd7hfv8.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpnkd7hfv8.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpnkd7hfv8.swift:24:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpnkd7hfv8.swift:25:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpnkd7hfv8.swift:25:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpnkd7hfv8.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpnkd7hfv8.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpnkd7hfv8.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpnkd7hfv8.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpnkd7hfv8.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpnkd7hfv8.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpnkd7hfv8.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpnkd7hfv8.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpnkd7hfv8.swift:47:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Your code here\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "tmpfoz2vl8s/tmpfoz2vl8s.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a6b84fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a6b546b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a6b546988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a6b5457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfoz2vl8s                        0x000055b8046102fb <unavailable> + 4859\n5    libc.so.6                          0x00002b2a6ba3b460 __libc_start_main + 245\n6    tmpfoz2vl8s                        0x000055b80460fee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    \n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if year < 1000 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp51hk15d2.swift:24:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmp51hk15d2.swift:24:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmp51hk15d2.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmp51hk15d2.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmp51hk15d2.swift:24:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmp51hk15d2.swift:25:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmp51hk15d2.swift:25:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmp51hk15d2.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmp51hk15d2.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmp51hk15d2.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmp51hk15d2.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmp51hk15d2.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmp51hk15d2.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmp51hk15d2.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmp51hk15d2.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmp51hk15d2.swift:47:8: error: cannot find 'year' in scope\n    if year < 1000 || year > 9999 {\n       ^~~~\n/tmp/tmp51hk15d2.swift:47:23: error: cannot find 'year' in scope\n    if year < 1000 || yea",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    \n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp722h_ohb.swift:24:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmp722h_ohb.swift:24:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmp722h_ohb.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmp722h_ohb.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmp722h_ohb.swift:24:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmp722h_ohb.swift:25:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmp722h_ohb.swift:25:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmp722h_ohb.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmp722h_ohb.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmp722h_ohb.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmp722h_ohb.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmp722h_ohb.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmp722h_ohb.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmp722h_ohb.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmp722h_ohb.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmp722h_ohb.swift:47:8: error: cannot find 'year' in scope\n    if year < 1900 || year > 2100 {\n       ^~~~\n/tmp/tmp722h_ohb.swift:47:23: error: cannot find 'year' in scope\n    if year < 1900 || yea",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpm8_45q_3.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpm8_45q_3.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpm8_45q_3.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpm8_45q_3.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpm8_45q_3.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpm8_45q_3.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpm8_45q_3.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpm8_45q_3.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpm8_45q_3.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpm8_45q_3.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpm8_45q_3.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpm8_45q_3.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpm8_45q_3.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpm8_45q_3.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpm8_45q_3.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpm8_45q_3.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpm8_45q_3.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmps4ji8vh3.swift:97:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmps4ji8vh3.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmps4ji8vh3.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Write your code here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "tmp6tmdtlck/tmp6tmdtlck.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4587366c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b458705db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b458705d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b458705c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6tmdtlck                        0x000055aaa127a25b <unavailable> + 4699\n5    libc.so.6                          0x00002b4587552460 __libc_start_main + 245\n6    tmp6tmdtlck                        0x000055aaa1279ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpewu554f9.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpewu554f9.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpewu554f9.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpewu554f9.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpewu554f9.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpewu554f9.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpewu554f9.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpewu554f9.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpewu554f9.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpewu554f9.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpewu554f9.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpewu554f9.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpewu554f9.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpewu554f9.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpewu554f9.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpewu554f9.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpewu554f9.swift:42:22: error: cannot find",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' && date[8] == '0' {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpmzhwe1s6.swift:26:18: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:26:35: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:29:18: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:29:35: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:32:18: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:32:35: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:35:18: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:35:35: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:38:18: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:38:35: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:41:18: error: single-quoted string literal found, use '\"'\n    if date[5] < '0' || date[5] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:41:35: error: single-quoted string literal found, use '\"'\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    }\n    \n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpi9usmmz7.swift:24:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpi9usmmz7.swift:24:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpi9usmmz7.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpi9usmmz7.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpi9usmmz7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpi9usmmz7.swift:24:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpi9usmmz7.swift:25:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpi9usmmz7.swift:25:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpi9usmmz7.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpi9usmmz7.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpi9usmmz7.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpi9usmmz7.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpi9usmmz7.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpi9usmmz7.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpi9usmmz7.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpi9usmmz7.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpi9usmmz7.swift:47:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:3])\n    day, _ := strconv.Atoi(date[3:6])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpxubh0lmh.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:3])\n         ^\n         ;\n/tmp/tmpxubh0lmh.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:3])\n         ^\n/tmp/tmpxubh0lmh.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpxubh0lmh.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:3])\n    ^~~~~\n/tmp/tmpxubh0lmh.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpxubh0lmh.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpxubh0lmh.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpxubh0lmh.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpxubh0lmh.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpxubh0lmh.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpxubh0lmh.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpxubh0lmh.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpxubh0lmh.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpxubh0lmh.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpxubh0lmh.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp3rbg8cy2.swift:23:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmp3rbg8cy2.swift:23:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmp3rbg8cy2.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp3rbg8cy2.swift:23:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmp3rbg8cy2.swift:26:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmp3rbg8cy2.swift:26:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmp3rbg8cy2.swift:29:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmp3rbg8cy2.swift:29:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmp3rbg8cy2.swift:30:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmp3rbg8cy2.swift:31:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmp3rbg8cy2.swift:31:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmp3rbg8cy2.swift:38:8: error: cannot find 'year' in scope\n    if year < 1900 || year > 2100 {\n       ^~~~\n/tmp/tmp3rbg8cy2.swift:38:23: error: cannot find 'year' in scope\n    if year < 1900 || year > 2100 {\n                      ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdtie2vdy.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpdtie2vdy.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpdtie2vdy.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpdtie2vdy.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpdtie2vdy.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpdtie2vdy.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpdtie2vdy.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpdtie2vdy.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpdtie2vdy.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpdtie2vdy.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpdtie2vdy.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpdtie2vdy.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpdtie2vdy.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpdtie2vdy.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpdtie2vdy.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpdtie2vdy.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpdtie2vdy.swift:42:22: error: cannot find",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpblonxke9.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpblonxke9.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpblonxke9.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpblonxke9.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpblonxke9.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpblonxke9.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpblonxke9.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpblonxke9.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpblonxke9.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpblonxke9.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpblonxke9.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpblonxke9.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpblonxke9.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpblonxke9.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpblonxke9.s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    if month, err = strconv.Atoi(date[0:2]); err != nil {\n        return false\n    }\n    if day, err = strconv.Atoi(date[3:5]); err != nil {\n        return false\n    }\n    if year, err = strconv.Atoi(date[6:10]); err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp1iiytx0m.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmp1iiytx0m.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmp1iiytx0m.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmp1iiytx0m.swift:24:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmp1iiytx0m.swift:24:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmp1iiytx0m.swift:24:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmp1iiytx0m.swift:25:40: error: expected ',' separator\n    if month, err = strconv.Atoi(date[0:2]); err != nil {\n                                       ^\n                                       ,\n/tmp/tmp1iiytx0m.swift:25:40: error: expected expression in list of expressions\n    if month, err = strconv.Atoi(date[0:2]); err != nil {\n                                       ^\n/tmp/tmp1iiytx0m.swift:25:44: error: expected '{' after 'if' condition\n    if month, err = strconv.Atoi(date[0:2]); err != nil {\n                                           ^\n/tmp/tmp1iiytx0m.swift:28:38: error: expected ',' separator\n    if day, err = strconv.Atoi(date[3:5]); err != nil {\n                                     ^\n                                     ,\n/tmp/tmp1iiytx0m.swift:28:38: error: expected expression in list of expressions\n    if day, err = strconv.Atoi(date[3:5]); err != nil {\n                                     ^\n/tmp/tmp1iiytx0m.swift:28:42: error: expected '{' after 'if' condition\n    if day, err = strconv.Atoi(date[3:5]); err != nil {\n                                         ^\n/tmp/tmp1iiytx0m.swift:31:39: erro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" && date[9] == \"0\" {\n        return false\n    }\n    if date[3] == \"1\" && date[4] == \"1\" && date[5] == \"1\" && date[6] == \"1\" && date[7] == \"1\" && date[8] == \"1\" && date[9] == \"1\" {\n        return false\n    }\n    if date[3] == \"2\" && date[4] == \"2\" && date[5] == \"2\" && date[6] == \"2\" && date[7] == \"2\" && date[8] ==\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpc260es2n.swift:63:1: error: expected expression after operator\n}\n^\n/tmp/tmpc260es2n.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpc260es2n.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpc260es2n.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc260es2n.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc260es2n.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc260es2n.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc260es2n.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc260es2n.swift:32:25: error: 'subscript(_:)' is unav",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    if len(date) != 10 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[2:4])\n    year, _ := strconv.Atoi(date[4:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpkv7b6e58.swift:28:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpkv7b6e58.swift:28:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpkv7b6e58.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpkv7b6e58.swift:24:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpkv7b6e58.swift:28:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpkv7b6e58.swift:32:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpkv7b6e58.swift:32:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpkv7b6e58.swift:36:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpkv7b6e58.swift:36:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpkv7b6e58.swift:37:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpkv7b6e58.swift:38:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpkv7b6e58.swift:38:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpkv7b6e58.swift:46:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpkv7b6e58.swift:46:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpkv7b6e58.swift:46:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpkv7b6e58.swift:46:50: error: cannot find 'month' in sco",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "tmpurcr8my_/tmpurcr8my_.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7530b9ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7530895b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7530895988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75308947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpurcr8my_                        0x000055f583bf72fb <unavailable> + 4859\n5    libc.so.6                          0x00002b7530d8a460 __libc_start_main + 245\n6    tmpurcr8my_                        0x000055f583bf6ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[1] > \"2\" {\n        return false\n    }\n    if date[3] > \"5\" {\n        return false\n    }\n    if date[5] > \"9\" {\n        return false\n    }\n    if date[7] > \"9\" {\n        return false\n    }\n    if date[9] > \"9\" {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpaldmwmk6.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpaldmwmk6.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpaldmwmk6.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpaldmwmk6.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpaldmwmk6.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpaldmwmk6.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpaldmwmk6.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[4] < \"0\" || date[4] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpaldmwmk6.swift:32:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    \n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if year < 1000 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp51hk15d2.swift:24:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmp51hk15d2.swift:24:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmp51hk15d2.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmp51hk15d2.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmp51hk15d2.swift:24:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmp51hk15d2.swift:25:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmp51hk15d2.swift:25:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmp51hk15d2.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmp51hk15d2.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmp51hk15d2.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmp51hk15d2.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmp51hk15d2.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmp51hk15d2.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmp51hk15d2.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmp51hk15d2.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmp51hk15d2.swift:47:8: error: cannot find 'year' in scope\n    if year < 1000 || year > 9999 {\n       ^~~~\n/tmp/tmp51hk15d2.swift:47:23: error: cannot find 'year' in scope\n    if year < 1000 || yea",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] != \"0\" && date[0] != \"1\" && date[0] != \"2\" && date[0] != \"3\" && date[0] != \"4\" && date[0] != \"5\" && date[0] != \"6\" && date[0] != \"7\" && date[0] != \"8\" && date[0] != \"9\" {\n        return false\n    }\n    if date[1] != \"0\" && date[1] != \"1\" && date[1] != \"2\" && date[1] != \"3\" && date[1] != \"4\" && date[1] != \"5\" && date[1] != \"6\" && date[1] != \"7\" && date[1] != \"8\" && date[1] != \"9\" {\n        return false\n    }\n    if date[2] != \"0\" && date[2] != \"1\" && date[2] != \"2\" && date[2] != \"3\" && date[2] != \"4\" && date[2] != \"5\" && date[2] != \"6\" && date[2] != \"7\" && date[2] != \"8\" && date[2] != \"9\" {\n        return false\n    }\n    if date[3] != \"0\" && date[3] != \"1\" && date[3] != \"2\" && date[3] != \"3\" && date[3] != \"4\" && date[3] != \"5\" && date[3] != \"6\" && date[3] != \"7\" && date[3] != \"8\" && date[3] != \"9\" {\n        return false\n    }\n    if date[4] != \"0\" && date[4] != \"1\" && date[4] != \"2\" && date[4] != \"3\" && date[4] != \"4\" && date[4] != \"5\" && date[4] != \"6\" && date[4] != \"7\" && date[4]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpaq6fuohr.swift:38:159: error: expected '{' after 'if' condition\n    if date[4] != \"0\" && date[4] != \"1\" && date[4] != \"2\" && date[4] != \"3\" && date[4] != \"4\" && date[4] != \"5\" && date[4] != \"6\" && date[4] != \"7\" && date[4]\n                                                                                                                                                              ^\n/tmp/tmpaq6fuohr.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpaq6fuohr.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpaq6fuohr.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] != \"0\" && date[0] != \"1\" && date[0] != \"2\" && date[0] != \"3\" && date[0] != \"4\" && date[0] != \"5\" && date[0] != \"6\" && date[0] != \"7\" && date[0] != \"8\" && date[0] != \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpaq6fuohr.swift:26:26: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] != \"0\" && date[0] != \"1\" && date[0] != \"2\" && date[0] != \"3\" && date[0] != \"4\" && date[0] != \"5\" && date[0] != \"6\" && date[0] != \"7\" && date[0] != \"8\" && date[0] != \"9\" {\n                         ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpaq6fuohr.swift:26:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] != \"0\" && date[0] != \"1\" && date[0] != \"2\" && date[0] != \"3\" && date[0] != \"4\" && date[0] != \"5\" && date[0] != \"6\" && date[0] != \"7\" && date[0] != \"8\" && date[0] != \"9\" {\n                                           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    date = date.toLower()\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[1] > '2' {\n        return false\n    }\n    if date[4] > '9' {\n        return false\n    }\n    if date[6] > '9' {\n        return false\n    }\n    if date[0] > '2' {\n        return false\n    }\n    if date[3] > '9' {\n        return false\n    }\n    if date[5] > '9' {\n        return false\n    }\n    if date[7] > '9' {\n        return false\n    }\n    if date[8] > '9' {\n        return false\n    }\n    if date[9] > '9' {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpmltoal8s.swift:27:18: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmltoal8s.swift:27:35: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmltoal8s.swift:30:18: error: single-quoted string literal found, use '\"'\n    if date[5] < '0' || date[5] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmltoal8s.swift:30:35: error: single-quoted string literal found, use '\"'\n    if date[5] < '0' || date[5] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmltoal8s.swift:33:18: error: single-quoted string literal found, use '\"'\n    if date[8] < '0' || date[8] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmltoal8s.swift:33:35: error: single-quoted string literal found, use '\"'\n    if date[8] < '0' || date[8] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmltoal8s.swift:36:18: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmltoal8s.swift:36:35: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmltoal8s.swift:39:18: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmltoal8s.swift:39:35: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmltoal8s.swift:42:18: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmltoal8s.swift:42:35: error: single-quoted string literal found, use '\"'\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date.split(\"-\")\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpn4nc0xpj.swift:23:10: error: consecutive statements on a line must be separated by ';'\n    month, day, year := date.split(\"-\")\n         ^\n         ;\n/tmp/tmpn4nc0xpj.swift:23:10: error: expected expression\n    month, day, year := date.split(\"-\")\n         ^\n/tmp/tmpn4nc0xpj.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpn4nc0xpj.swift:23:5: error: cannot find 'month' in scope\n    month, day, year := date.split(\"-\")\n    ^~~~~\n/tmp/tmpn4nc0xpj.swift:24:8: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n       ^~~\n/tmp/tmpn4nc0xpj.swift:24:12: error: cannot find 'month' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n           ^~~~~\n/tmp/tmpn4nc0xpj.swift:24:27: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                          ^~~\n/tmp/tmpn4nc0xpj.swift:24:31: error: cannot find 'day' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                              ^~~\n/tmp/tmpn4nc0xpj.swift:24:44: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                           ^~~\n/tmp/tmpn4nc0xpj.swift:24:48: error: cannot find 'year' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                               ^~~~\n/tmp/tmpn4nc0xpj.swift:27:9: error: cannot find 'is_valid_month' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n        ^~~~~~~~~~~~~~\n/tmp/tmpn4nc0xpj.swift:27:24: error: cannot find 'month' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n                       ^~~~~\n/tmp/tmpn4nc0xpj.swift:27:35: error: cannot find 'is_valid_day' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n                                  ^~~~~~~~~~~~\n/tmp/tmpn4nc0xpj.swift:27:48: error: cannot find 'day' in scope\n    if !is_valid_month(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpwd5dpxm8.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpwd5dpxm8.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpwd5dpxm8.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpwd5dpxm8.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpwd5dpxm8.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpwd5dpxm8.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpwd5dpxm8.swift:32:8: error: cannot find 'month' in scope\n    if month == 2 {\n       ^~~~~\n/tmp/tmpwd5dpxm8.swift:33:12: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n           ^~~\n/tmp/tmpwd5dpxm8.swift:33:23: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n                      ^~~\n/tmp/tmpwd5dpxm8.swift:36:15: error: cannot find 'month' in scope\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n              ^~~~~\n/tmp/tmpwd5dpxm8.swift:36:29: error: cannot find 'month' in scope\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n                            ^~~~~\n/tmp/tmpwd5dpxm8.swift:36:43: error: cannot find 'month' in scope\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n                                          ^~~~~\n/tmp/tmpwd5dpxm8.swift:36:57: error: cannot find 'month' in scope\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n                                                        ^~~~~\n/tmp/tmpwd5dpxm8.swift:37:12: error: cannot find 'day' in scope\n        if day < 1 || day > 30 {\n           ^~~\n/tmp/tmpwd5dpxm8.swift:37:23: error: cannot find 'day' in scope\n        if day < 1 || day > 30 {\n                      ^~~\n/tmp/tmpwd5dpxm8.swift:40:15: error: cannot find 'month' i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpe6cbqg3p.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpe6cbqg3p.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpe6cbqg3p.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpe6cbqg3p.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpe6cbqg3p.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpe6cbqg3p.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpe6cbqg3p.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpe6cbqg3p.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpe6cbqg3p.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpe6cbqg3p.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpe6cbqg3p.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpe6cbqg3p.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpe6cbqg3p.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpe6cbqg3p.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpe6cbqg3p.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpe6cbqg3p.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpe6cbqg3p.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    var month_str, day_str, year_str string\n    month_str, day_str, year_str = date.split(\"-\")\n    month, err = strconv.Atoi(month_str)\n    if err != nil {\n        return false\n    }\n    day, err = strconv.Atoi(day_str)\n    if err != nil {\n        return false\n    }\n    year, err = strconv.Atoi(year_str)\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp354t4nf7.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmp354t4nf7.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmp354t4nf7.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmp354t4nf7.swift:24:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmp354t4nf7.swift:24:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmp354t4nf7.swift:24:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmp354t4nf7.swift:25:38: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_str, day_str, year_str string\n                                     ^\n/tmp/tmp354t4nf7.swift:25:38: note: join the identifiers together\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strstring\n/tmp/tmp354t4nf7.swift:25:38: note: join the identifiers together with camel-case\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strString\n/tmp/tmp354t4nf7.swift:26:14: error: consecutive statements on a line must be separated by ';'\n    month_str, day_str, year_str = date.split(\"-\")\n             ^\n             ;\n/tmp/tmp354t4nf7.swift:26:14: error: expected expression\n    month_str, day_str, year_str = date.split(\"-\")\n             ^\n/tmp/tmp354t4nf7.swift:31:8: error: consecutive statements on a line must be separated by ';'\n    day, err = strconv.Atoi(day_str)\n       ^\n       ;\n/tmp/tmp354t4nf7.swift:31:8: error: expected expression",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1000 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmph6i3ikw9.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmph6i3ikw9.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmph6i3ikw9.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmph6i3ikw9.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmph6i3ikw9.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmph6i3ikw9.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmph6i3ikw9.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmph6i3ikw9.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmph6i3ikw9.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmph6i3ikw9.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmph6i3ikw9.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmph6i3ikw9.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmph6i3ikw9.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmph6i3ikw9.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmph6i3ikw9.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpbjjavcy5.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpbjjavcy5.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpbjjavcy5.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpbjjavcy5.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpbjjavcy5.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpbjjavcy5.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpbjjavcy5.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpbjjavcy5.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpbjjavcy5.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpbjjavcy5.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpbjjavcy5.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpewu554f9.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpewu554f9.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpewu554f9.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpewu554f9.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpewu554f9.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpewu554f9.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpewu554f9.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpewu554f9.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpewu554f9.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpewu554f9.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpewu554f9.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpewu554f9.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpewu554f9.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpewu554f9.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpewu554f9.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpewu554f9.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpewu554f9.swift:42:22: error: cannot find",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var valid_month, valid_day, valid_year bool\n    var valid_date = true\n    var date_array = strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ = strconv.Atoi(date_array[0])\n    day, _ = strconv.Atoi(date_array[1])\n    year, _ = strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        valid_month = false\n    }\n    if day < 1 || day > 31 {\n        valid_day = false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            valid_day = false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            valid_day = false\n        }\n    }\n    if year < 1 || year > 9999 {\n        valid_year = false\n    }\n    if !valid_month && !valid_day && !valid_year {\n        valid_date = false\n    }\n    return valid_date\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpit532ifw.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmpit532ifw.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmpit532ifw.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmpit532ifw.swift:24:44: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_month, valid_day, valid_year bool\n                                           ^\n/tmp/tmpit532ifw.swift:24:44: note: join the identifiers together\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearbool\n/tmp/tmpit532ifw.swift:24:44: note: join the identifiers together with camel-case\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearBool\n/tmp/tmpit532ifw.swift:30:10: error: consecutive statements on a line must be separated by ';'\n    month, _ = strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpit532ifw.swift:30:10: error: expected expression\n    month, _ = strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpit532ifw.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpit532ifw.swift:23:9: error: type annotation missing in pattern\n    var month, day, year int\n        ^\n/tmp/tmpit532ifw.swift:23:16: error: type annotation missing in pattern\n    var month, day, year int\n               ^\n/tmp/tmpit532ifw.swift:23:21: error: type annotation missing in pattern\n    var month, day, year int\n                    ^\n/tmp/tmpit532ifw.swift:24:9: error: type annotation missing in pattern\n    var valid_month, valid_day, valid_year bool\n        ^\n/tmp/tmpit532ifw.swift:24:22: error:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month int\n    var day int\n    var year int\n    var valid_date bool\n    var date_string string\n    var date_array []string\n    var date_array_len int\n    var month_array []string\n    var month_array_len int\n    var day_array []string\n    var day_array_len int\n    var year_array []string\n    var year_array_len int\n    var month_array_len int\n    var month_array_len_int int\n    var day_array_len_int int\n    var year_array_len_int int\n    var month_array_len_int_int int\n    var month_array_len_int_int_int int\n    var day_array_len_int_int int\n    var day_array_len_int_int_int int\n    var year_array_len_int_int int\n    var year_array_len_int_int_int int\n    var month_array_len_int_int int\n    var month_array_len_int_int_int int\n    var day_array_len_int_int int\n    var day_array_len_int_int_int int\n    var year_array_len_int_int int\n    var year_array_len_int_int_int int\n    var month_array_len_int_int int\n    var month_array_len_int_int_int int\n    var day_array_len_int_int int\n    var day_array_len_int_int_int int\n    var year_array_len_int_int int\n    var year_array_len_int_int_int int\n    var month_array_len_int_int int\n    var month_array_len_int_int_int int\n    var day_array_len_int_int int\n    var day_array_len_int_int_int int\n    var year_array_len_int_int int\n    var year_array_len_int_int_int int\n    var month_array_len_int_int int\n    var month_array_len_int_int_int int\n    var day_array_len_int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp4e1_qprk.swift:20:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month int\n              ^\n/tmp/tmp4e1_qprk.swift:20:15: note: join the identifiers together\n    var month int\n        ~~~~~~^~~\n        monthint\n/tmp/tmp4e1_qprk.swift:20:15: note: join the identifiers together with camel-case\n    var month int\n        ~~~~~~^~~\n        monthInt\n/tmp/tmp4e1_qprk.swift:21:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var day int\n            ^\n/tmp/tmp4e1_qprk.swift:21:13: note: join the identifiers together\n    var day int\n        ~~~~^~~\n        dayint\n/tmp/tmp4e1_qprk.swift:21:13: note: join the identifiers together with camel-case\n    var day int\n        ~~~~^~~\n        dayInt\n/tmp/tmp4e1_qprk.swift:22:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var year int\n             ^\n/tmp/tmp4e1_qprk.swift:22:14: note: join the identifiers together\n    var year int\n        ~~~~~^~~\n        yearint\n/tmp/tmp4e1_qprk.swift:22:14: note: join the identifiers together with camel-case\n    var year int\n        ~~~~~^~~\n        yearInt\n/tmp/tmp4e1_qprk.swift:23:20: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_date bool\n                   ^\n/tmp/tmp4e1_qprk.swift:23:20: note: join the identifiers together\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_datebool\n/tmp/tmp4e1_qprk.swift:23:20: note: join the identifiers together with camel-case\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_dateBool\n/tmp/tmp4e1_qprk.swift:24:21: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var date_string string\n                    ^\n/tmp/tmp4e1_qprk.swift:24:21: note: join the identifiers together\n    var date_string string\n        ~~~~~~~~~~~~^~~~~~\n        date_stringstring\n/tmp/tmp4e1_qprk.swift:24:21",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Your code here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "tmpzh3i13wy/tmpzh3i13wy.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0261b52c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0261849b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0261849988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02618487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzh3i13wy                        0x000055c141e3f25b <unavailable> + 4699\n5    libc.so.6                          0x00002b0261d3e460 __libc_start_main + 245\n6    tmpzh3i13wy                        0x000055c141e3eee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpnawe277v.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpnawe277v.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpnawe277v.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpnawe277v.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpnawe277v.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpnawe277v.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpnawe277v.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpnawe277v.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpnawe277v.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpnawe277v.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpnawe277v.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpnawe277v.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpnawe277v.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpnawe277v.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpnawe277v.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpnawe277v.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpnawe277v.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmps4ji8vh3.swift:97:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmps4ji8vh3.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmps4ji8vh3.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[4] != '-' {\n        return false\n    }\n    if date[7] != '-' {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[1] > '2' {\n        return false\n    }\n    if date[3] > '5' {\n        return false\n    }\n    if date[5] > '9' {\n        return false\n    }\n    if date[7] > '9' {\n        return false\n    }\n    if date[9] > '9' {\n        return false\n    }\n    if date[0] > '2' {\n        return false\n    }\n    if date[2] > '5' {\n        return false\n    }\n    if date[4] > '9' {\n        return false\n    }\n    if date[6] > '9' {\n        return false\n    }\n    if date[8] > '9' {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpy0sw0fwd.swift:26:19: error: single-quoted string literal found, use '\"'\n    if date[4] != '-' {\n                  ^~~\n                  \"-\"\n/tmp/tmpy0sw0fwd.swift:29:19: error: single-quoted string literal found, use '\"'\n    if date[7] != '-' {\n                  ^~~\n                  \"-\"\n/tmp/tmpy0sw0fwd.swift:32:18: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpy0sw0fwd.swift:32:35: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpy0sw0fwd.swift:35:18: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpy0sw0fwd.swift:35:35: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpy0sw0fwd.swift:38:18: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpy0sw0fwd.swift:38:35: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpy0sw0fwd.swift:41:18: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpy0sw0fwd.swift:41:35: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpy0sw0fwd.swift:44:18: error: single-quoted string literal found, use '\"'\n    if date[5] < '0' || date[5] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpy0sw0fwd.swift:44:35: error: single-quoted string literal found, use '\"'\n    if date[5] < '0' || date[5] > '9' {\n                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    if month, err = strconv.Atoi(date[0:2]); err != nil {\n        return false\n    }\n    if day, err = strconv.Atoi(date[3:5]); err != nil {\n        return false\n    }\n    if year, err = strconv.Atoi(date[6:10]); err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpky76jlbe.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmpky76jlbe.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmpky76jlbe.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmpky76jlbe.swift:24:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmpky76jlbe.swift:24:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmpky76jlbe.swift:24:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmpky76jlbe.swift:25:40: error: expected ',' separator\n    if month, err = strconv.Atoi(date[0:2]); err != nil {\n                                       ^\n                                       ,\n/tmp/tmpky76jlbe.swift:25:40: error: expected expression in list of expressions\n    if month, err = strconv.Atoi(date[0:2]); err != nil {\n                                       ^\n/tmp/tmpky76jlbe.swift:25:44: error: expected '{' after 'if' condition\n    if month, err = strconv.Atoi(date[0:2]); err != nil {\n                                           ^\n/tmp/tmpky76jlbe.swift:28:38: error: expected ',' separator\n    if day, err = strconv.Atoi(date[3:5]); err != nil {\n                                     ^\n                                     ,\n/tmp/tmpky76jlbe.swift:28:38: error: expected expression in list of expressions\n    if day, err = strconv.Atoi(date[3:5]); err != nil {\n                                     ^\n/tmp/tmpky76jlbe.swift:28:42: error: expected '{' after 'if' condition\n    if day, err = strconv.Atoi(date[3:5]); err != nil {\n                                         ^\n/tmp/tmpky76jlbe.swift:31:39: erro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' && date[8] == '0' {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpmzhwe1s6.swift:26:18: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:26:35: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:29:18: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:29:35: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:32:18: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:32:35: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:35:18: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:35:35: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:38:18: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:38:35: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:41:18: error: single-quoted string literal found, use '\"'\n    if date[5] < '0' || date[5] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:41:35: error: single-quoted string literal found, use '\"'\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdtie2vdy.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpdtie2vdy.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpdtie2vdy.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpdtie2vdy.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpdtie2vdy.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpdtie2vdy.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpdtie2vdy.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpdtie2vdy.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpdtie2vdy.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpdtie2vdy.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpdtie2vdy.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpdtie2vdy.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpdtie2vdy.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpdtie2vdy.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpdtie2vdy.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpdtie2vdy.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpdtie2vdy.swift:42:22: error: cannot find",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        return false\n    }\n    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpsplobzot.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpsplobzot.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpsplobzot.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpsplobzot.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpsplobzot.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpsplobzot.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpsplobzot.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpsplobzot.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpsplobzot.swift:36:8: error: cannot find 'month' in scope\n    if month == 2 {\n       ^~~~~\n/tmp/tmpsplobzot.swift:37:12: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n           ^~~\n/tmp/tmpsplobzot.swift:37:23: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n                      ^~~\n/tmp/tmpsplobzot.swift:40:15: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n              ^~~~~\n/tmp/tmpsplobzot.swift:40:29: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                            ^~~~~\n/tmp/tmpsplobzot.swift:40:43: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                          ^~~~~\n/tmp/tmpsplobzot.swift:40:57: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month ==",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month int\n    var day int\n    var year int\n    var err error\n    var valid bool\n    var valid_month bool\n    var valid_day bool\n    var valid_year bool\n    var valid_month_day bool\n    var valid_month_day_year bool\n    var valid_month_day_year_day bool\n    var valid_month_day_year_day_month bool\n    var valid_month_day_year_day_month_day bool\n    var valid_month_day_year_day_month_day_year bool\n    var valid_month_day_year_day_month_day_year_day bool\n    var valid_month_day_year_day_month_day_year_day_month bool\n    var valid_month_day_year_day_month_day_year_day_month_day bool\n    var valid_month_day_year_day_month_day_year_day_month_day_year bool\n    var valid_month_day_year_day_month_day_year_day_month_day_year_day bool\n    var valid_month_day_year_day_month_day_year_day_month_day_year_day_month bool\n    var valid_month_day_year_day_month_day_year_day_month_day_year_day_month_day bool\n    var valid_month_day_year_day_month_day_year_day_month_day_year_day_month_day_year bool\n    var valid_month_day_year_day_month_day_year_day_month_day_year_day_month_day_year_day bool\n    var valid_month_day_year_day_month_day_year_day_month_day_year_day_month_day_year_day_month bool\n    var valid_month_day_year_day_month_day_year_day_month_day_year_day_month_day_year_day_month_day bool\n    var valid_month_day_year_day_month_day_year_day_month_day_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpurgjqpow.swift:23:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month int\n              ^\n/tmp/tmpurgjqpow.swift:23:15: note: join the identifiers together\n    var month int\n        ~~~~~~^~~\n        monthint\n/tmp/tmpurgjqpow.swift:23:15: note: join the identifiers together with camel-case\n    var month int\n        ~~~~~~^~~\n        monthInt\n/tmp/tmpurgjqpow.swift:24:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var day int\n            ^\n/tmp/tmpurgjqpow.swift:24:13: note: join the identifiers together\n    var day int\n        ~~~~^~~\n        dayint\n/tmp/tmpurgjqpow.swift:24:13: note: join the identifiers together with camel-case\n    var day int\n        ~~~~^~~\n        dayInt\n/tmp/tmpurgjqpow.swift:25:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var year int\n             ^\n/tmp/tmpurgjqpow.swift:25:14: note: join the identifiers together\n    var year int\n        ~~~~~^~~\n        yearint\n/tmp/tmpurgjqpow.swift:25:14: note: join the identifiers together with camel-case\n    var year int\n        ~~~~~^~~\n        yearInt\n/tmp/tmpurgjqpow.swift:26:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmpurgjqpow.swift:26:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmpurgjqpow.swift:26:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmpurgjqpow.swift:27:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid bool\n              ^\n/tmp/tmpurgjqpow.swift:27:15: note: join the identifiers together\n    var valid bool\n        ~~~~~~^~~~\n        validbool\n/tmp/tmpurgjqpow.swift:27:15: note: join the identifiers together with camel-case\n    var valid bool\n        ~~~~~~",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpegvo6iis.swift:20:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\"-\", \"\")\n    ^~~~\n/tmp/tmpegvo6iis.swift:20:17: error: cannot assign value of type '()' to type 'String'\n    date = date.replace(\"-\", \"\")\n           ~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpegvo6iis.swift:20:24: error: missing argument label 'with:' in call\n    date = date.replace(\"-\", \"\")\n                       ^\n                             with: \n/tmp/tmpegvo6iis.swift:20:17: error: cannot use mutating member on immutable value: 'date' is a 'let' constant\n    date = date.replace(\"-\", \"\")\n           ~~~~ ^\n/tmp/tmpegvo6iis.swift:21:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\"/\", \"\")\n    ^~~~\n/tmp/tmpegvo6iis.swift:21:17: error: cannot assign value of type '()' to type 'String'\n    date = date.replace(\"/\", \"\")\n           ~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpegvo6iis.swift:21:17: error: cannot use mutating member on immutable value: 'date' is a 'let' constant\n    date = date.replace(\"/\", \"\")\n           ~~~~ ^\n/tmp/tmpegvo6iis.swift:21:24: error: missing argument label 'with:' in call\n    date = date.replace(\"/\", \"\")\n                       ^\n                             with: \n/tmp/tmpegvo6iis.swift:22:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\" \", \"\")\n    ^~~~\n/tmp/tmpegvo6iis.swift:22:17: error: cannot assign value of type '()' to type 'String'\n    date = date.replace(\" \", \"\")\n           ~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpegvo6iis.swift:22:24: error: missing argument label 'with:' in call\n    date = date.replace(\" \", \"\")\n                       ^\n                             with: \n/tmp/tmpegvo6iis.swift:22:17: error: cannot use mutating member on immutable value: 'date' is a 'let' constant\n    date = date.replace(\" \", \"\")\n           ~~~~ ^\n/tmp/tmpegvo6iis.swift:23:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\".\", \"\")\n    ^~~~\n/tmp/tmpegvo6iis.swift:23:17: error: cannot assign value of type '()' to type",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[0] == \"0\" && date[1] == \"0\" && date[2] == \"0\" && date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" && date[9] == \"0\" {\n        return false\n    }\n    if date[0] == \"1\" && date[1] == \"1\" && date[2] == \"1\" && date[3] == \"1\" && date[4] == \"1\" && date[5] == \"1\" && date[6] == \"1\" && date[7] == \"1\" && date[8] == \"1\" && date[9] == \"1\" {\n        return false\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpuiyeeswa.swift:92:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmpuiyeeswa.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmpuiyeeswa.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpuiyeeswa.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpuiyeeswa.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month: Int\n    var day: Int\n    var year: Int\n    var valid: Bool\n\n    if len(date) == 0 {\n        return false\n    }\n\n    month, _ = strconv.Atoi(date[0:2])\n    day, _ = strconv.Atoi(date[3:5])\n    year, _ = strconv.Atoi(date[6:10])\n\n    if month < 1 || month > 12 {\n        return false\n    }\n\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n\n    if year < 1000 || year > 9999 {\n        return false\n    }\n\n    valid = true\n    return valid\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp4z42zm8q.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ = strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmp4z42zm8q.swift:29:10: error: expected expression\n    month, _ = strconv.Atoi(date[0:2])\n         ^\n/tmp/tmp4z42zm8q.swift:25:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp4z42zm8q.swift:29:5: warning: variable is unused\n    month, _ = strconv.Atoi(date[0:2])\n    ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var valid_month, valid_day, valid_year bool\n    var valid_date bool\n    var month_str, day_str, year_str string\n    var month_int, day_int, year_int int\n    var month_int_str, day_int_str, year_int_str string\n    var month_str_int, day_str_int, year_str_int string\n    var month_str_int_str, day_str_int_str, year_str_int_str string\n    var month_str_int_str_str, day_str_int_str_str, year_str_int_str_str string\n    var month_str_int_str_str_str, day_str_int_str_str_str, year_str_int_str_str_str string\n    var month_str_int_str_str_str_str, day_str_int_str_str_str_str, year_str_int_str_str_str_str string\n    var month_str_int_str_str_str_str_str, day_str_int_str_str_str_str_str, year_str_int_str_str_str_str_str string\n    var month_str_int_str_str_str_str_str_str, day_str_int_str_str_str_str_str_str, year_str_int_str_str_str_str_str_str string\n    var month_str_int_str_str_str_str_str_str_str, day_str_int_str_str_str_str_str_str_str, year_str_int_str_str_str_str_str_str_str string\n    var month_str_int_str_str_str_str_str_str_str_str, day_str_int_str_str_str_str_str_str_str_str, year_str_int_str_str_str_str_str_str_str_str string\n    var month_str_int_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmprmc4v7op.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmprmc4v7op.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmprmc4v7op.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmprmc4v7op.swift:24:44: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_month, valid_day, valid_year bool\n                                           ^\n/tmp/tmprmc4v7op.swift:24:44: note: join the identifiers together\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearbool\n/tmp/tmprmc4v7op.swift:24:44: note: join the identifiers together with camel-case\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearBool\n/tmp/tmprmc4v7op.swift:25:20: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_date bool\n                   ^\n/tmp/tmprmc4v7op.swift:25:20: note: join the identifiers together\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_datebool\n/tmp/tmprmc4v7op.swift:25:20: note: join the identifiers together with camel-case\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_dateBool\n/tmp/tmprmc4v7op.swift:26:38: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_str, day_str, year_str string\n                                     ^\n/tmp/tmprmc4v7op.swift:26:38: note: join the identifiers together\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strstring\n/tmp/tmprm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpaon9s3t_.swift:24:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpaon9s3t_.swift:24:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpaon9s3t_.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpaon9s3t_.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpaon9s3t_.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpaon9s3t_.swift:24:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpaon9s3t_.swift:25:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpaon9s3t_.swift:25:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpaon9s3t_.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpaon9s3t_.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpaon9s3t_.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpaon9s3t_.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpaon9s3t_.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpaon9s3t_.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpaon9s3t_.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpaon9s3t_.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpaon9s3t_.swift:47:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmps4ji8vh3.swift:97:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmps4ji8vh3.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmps4ji8vh3.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    var month_str, day_str, year_str string\n    var valid_month, valid_day, valid_year bool\n    var valid_month_str, valid_day_str, valid_year_str bool\n    var valid_date bool\n    \n    month_str, day_str, year_str = date.split(\"-\")\n    month, err = strconv.Atoi(month_str)\n    if err != nil {\n        return false\n    }\n    day, err = strconv.Atoi(day_str)\n    if err != nil {\n        return false\n    }\n    year, err = strconv.Atoi(year_str)\n    if err != nil {\n        return false\n    }\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    valid_month = true\n    for i := 1; i <= 12; i++ {\n        if i == month {\n            valid_month = true\n            break\n        } else {\n            valid_month = false\n        }\n    }\n    if !valid_month {\n        return false\n    }\n    \n    valid_day = true\n    for i := 1; i <= 31; i++ {\n        if i == day {\n            valid_day = true\n            break\n        } else {\n            valid_day = false\n        }\n    }\n    if !valid_day {\n        return false\n    }\n    \n    valid_year = true\n    for i := 1; i <= 9999; i++ {\n        if i == year {\n            valid_year = true\n            break\n        } else {\n            valid_year = false\n        }\n    }\n    if !valid_year {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp_v23b8vd.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmp_v23b8vd.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmp_v23b8vd.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmp_v23b8vd.swift:24:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmp_v23b8vd.swift:24:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmp_v23b8vd.swift:24:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmp_v23b8vd.swift:25:38: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_str, day_str, year_str string\n                                     ^\n/tmp/tmp_v23b8vd.swift:25:38: note: join the identifiers together\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strstring\n/tmp/tmp_v23b8vd.swift:25:38: note: join the identifiers together with camel-case\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strString\n/tmp/tmp_v23b8vd.swift:26:44: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_month, valid_day, valid_year bool\n                                           ^\n/tmp/tmp_v23b8vd.swift:26:44: note: join the identifiers together\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearbool\n/tmp/tmp_v23b8vd.swift:26:44: note: join the identifiers together with ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month int\n    var day int\n    var year int\n    var err error\n    var valid bool\n    var date_str string\n    var date_arr []string\n    var date_arr_len int\n\n    date_str = date\n    date_arr = strings.Split(date_str, \"-\")\n    date_arr_len = len(date_arr)\n\n    if date_arr_len != 3 {\n        return false\n    }\n\n    month, err = strconv.Atoi(date_arr[0])\n    if err != nil {\n        return false\n    }\n\n    day, err = strconv.Atoi(date_arr[1])\n    if err != nil {\n        return false\n    }\n\n    year, err = strconv.Atoi(date_arr[2])\n    if err != nil {\n        return false\n    }\n\n    if month < 1 || month > 12 {\n        return false\n    }\n\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else if month == 4 || month == 6 || month == 9 || month == 11 {\n            if day < 1 || day > 30 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n\n    valid = true\n    return valid\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp56grejtq.swift:20:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month int\n              ^\n/tmp/tmp56grejtq.swift:20:15: note: join the identifiers together\n    var month int\n        ~~~~~~^~~\n        monthint\n/tmp/tmp56grejtq.swift:20:15: note: join the identifiers together with camel-case\n    var month int\n        ~~~~~~^~~\n        monthInt\n/tmp/tmp56grejtq.swift:21:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var day int\n            ^\n/tmp/tmp56grejtq.swift:21:13: note: join the identifiers together\n    var day int\n        ~~~~^~~\n        dayint\n/tmp/tmp56grejtq.swift:21:13: note: join the identifiers together with camel-case\n    var day int\n        ~~~~^~~\n        dayInt\n/tmp/tmp56grejtq.swift:22:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var year int\n             ^\n/tmp/tmp56grejtq.swift:22:14: note: join the identifiers together\n    var year int\n        ~~~~~^~~\n        yearint\n/tmp/tmp56grejtq.swift:22:14: note: join the identifiers together with camel-case\n    var year int\n        ~~~~~^~~\n        yearInt\n/tmp/tmp56grejtq.swift:23:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmp56grejtq.swift:23:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmp56grejtq.swift:23:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmp56grejtq.swift:24:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid bool\n              ^\n/tmp/tmp56grejtq.swift:24:15: note: join the identifiers together\n    var valid bool\n        ~~~~~~^~~~\n        validbool\n/tmp/tmp56grejtq.swift:24:15: note: join the identifiers together with camel-case\n    var valid bool\n        ~~~~~~",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Your code here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "tmpzh3i13wy/tmpzh3i13wy.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0261b52c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0261849b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0261849988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02618487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzh3i13wy                        0x000055c141e3f25b <unavailable> + 4699\n5    libc.so.6                          0x00002b0261d3e460 __libc_start_main + 245\n6    tmpzh3i13wy                        0x000055c141e3eee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp4uc3uo7h.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmp4uc3uo7h.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmp4uc3uo7h.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmp4uc3uo7h.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmp4uc3uo7h.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmp4uc3uo7h.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmp4uc3uo7h.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmp4uc3uo7h.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmp4uc3uo7h.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmp4uc3uo7h.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmp4uc3uo7h.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmp4uc3uo7h.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmp4uc3uo7h.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmp4uc3uo7h.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmp4uc3uo7h.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmp4uc3uo7h.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmp4uc3uo7h.swift:42:22: error: cannot find",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpmj9jea9k.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpmj9jea9k.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpmj9jea9k.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpmj9jea9k.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpmj9jea9k.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpmj9jea9k.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpmj9jea9k.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpmj9jea9k.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpmj9jea9k.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpmj9jea9k.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpmj9jea9k.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var valid_month, valid_day, valid_year bool\n    var valid_date bool\n    var month_str, day_str, year_str string\n    var month_int, day_int, year_int int\n    var month_int_str, day_int_str, year_int_str string\n    var month_int_str_len, day_int_str_len, year_int_str_len int\n    var month_str_len, day_str_len, year_str_len int\n    var month_str_len_int, day_str_len_int, year_str_len_int int\n    var month_str_int, day_str_int, year_str_int int\n    var month_str_int_len, day_str_int_len, year_str_int_len int\n    var month_str_int_str, day_str_int_str, year_str_int_str string\n    var month_str_int_str_len, day_str_int_str_len, year_str_int_str_len int\n    var month_str_int_str_int, day_str_int_str_int, year_str_int_str_int int\n    var month_str_int_str_int_len, day_str_int_str_int_len, year_str_int_str_int_len int\n    var month_str_int_str_int_str, day_str_int_str_int_str, year_str_int_str_int_str string\n    var month_str_int_str_int_str_len, day_str_int_str_int_str_len, year_str_int_str_int_str_len int\n    var month_str_int_str_int_str_int, day_str_int_str_int_str_int, year_str_int_str_int_str_int int\n    var month_str_int_str_int_str_int_len, day_str_int_str_int_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp3pfqf7gz.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmp3pfqf7gz.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmp3pfqf7gz.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmp3pfqf7gz.swift:24:44: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_month, valid_day, valid_year bool\n                                           ^\n/tmp/tmp3pfqf7gz.swift:24:44: note: join the identifiers together\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearbool\n/tmp/tmp3pfqf7gz.swift:24:44: note: join the identifiers together with camel-case\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearBool\n/tmp/tmp3pfqf7gz.swift:25:20: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_date bool\n                   ^\n/tmp/tmp3pfqf7gz.swift:25:20: note: join the identifiers together\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_datebool\n/tmp/tmp3pfqf7gz.swift:25:20: note: join the identifiers together with camel-case\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_dateBool\n/tmp/tmp3pfqf7gz.swift:26:38: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_str, day_str, year_str string\n                                     ^\n/tmp/tmp3pfqf7gz.swift:26:38: note: join the identifiers together\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strstring\n/tmp/tmp3p",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmps4ji8vh3.swift:97:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmps4ji8vh3.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmps4ji8vh3.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date.split(\"-\")\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    month = int(month[0]) - 1\n    day = int(day[0]) - 1\n    year = int(year[0:4])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp0y5zzwn0.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, day, year := date.split(\"-\")\n         ^\n         ;\n/tmp/tmp0y5zzwn0.swift:24:10: error: expected expression\n    month, day, year := date.split(\"-\")\n         ^\n/tmp/tmp0y5zzwn0.swift:32:22: error: expected ',' separator\n    year = int(year[0:4])\n                     ^\n                     ,\n/tmp/tmp0y5zzwn0.swift:32:22: error: expected expression in list of expressions\n    year = int(year[0:4])\n                     ^\n/tmp/tmp0y5zzwn0.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp0y5zzwn0.swift:24:5: error: cannot find 'month' in scope\n    month, day, year := date.split(\"-\")\n    ^~~~~\n/tmp/tmp0y5zzwn0.swift:26:8: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n       ^~~\n/tmp/tmp0y5zzwn0.swift:26:12: error: cannot find 'month' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n           ^~~~~\n/tmp/tmp0y5zzwn0.swift:26:27: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                          ^~~\n/tmp/tmp0y5zzwn0.swift:26:31: error: cannot find 'day' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                              ^~~\n/tmp/tmp0y5zzwn0.swift:26:44: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                           ^~~\n/tmp/tmp0y5zzwn0.swift:26:48: error: cannot find 'year' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                               ^~~~\n/tmp/tmp0y5zzwn0.swift:30:5: error: cannot find 'month' in scope\n    month = int(month[0]) - 1\n    ^~~~~\n/tmp/tmp0y5zzwn0.swift:30:13: error: cannot find 'int' in scope\n    month = int(month[0]) - 1\n            ^~~\n/tmp/tmp0y5zzwn0.swift:30:17: error: cannot find 'month' in scope\n    month = int(month[0]) - 1\n                ^~~~~\n/tmp/tmp0y5zzwn0.swift:31:5: error: can",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpblonxke9.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpblonxke9.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpblonxke9.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpblonxke9.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpblonxke9.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpblonxke9.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpblonxke9.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpblonxke9.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpblonxke9.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpblonxke9.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpblonxke9.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpblonxke9.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpblonxke9.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpblonxke9.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpblonxke9.s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "tmpurcr8my_/tmpurcr8my_.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7530b9ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7530895b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7530895988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75308947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpurcr8my_                        0x000055f583bf72fb <unavailable> + 4859\n5    libc.so.6                          0x00002b7530d8a460 __libc_start_main + 245\n6    tmpurcr8my_                        0x000055f583bf6ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month int\n    var day int\n    var year int\n    var valid_date bool\n    var date_array []string\n    var date_string string\n    var date_array_len int\n    var month_len int\n    var day_len int\n    var year_len int\n    var month_len_min int\n    var month_len_max int\n    var day_len_min int\n    var day_len_max int\n    var year_len_min int\n    var year_len_max int\n    var month_len_min_max_check bool\n    var month_len_max_check bool\n    var day_len_min_max_check bool\n    var day_len_max_check bool\n    var year_len_min_max_check bool\n    var year_len_max_check bool\n    var month_len_min_max_check bool\n    var month_len_max_check bool\n    var day_len_min_max_check bool\n    var day_len_max_check bool\n    var year_len_min_max_check bool\n    var year_len_max_check bool\n    var month_len_min_max_check bool\n    var month_len_max_check bool\n    var day_len_min_max_check bool\n    var day_len_max_check bool\n    var year_len_min_max_check bool\n    var year_len_max_check bool\n    var month_len_min_max_check bool\n    var month_len_max_check bool\n    var day_len_min_max_check bool\n    var day_len_max_check bool\n    var year_len_min_max_check bool\n    var year_len_max_check bool\n    var month_len_min_max_check bool\n    var month_len_max_check bool\n    var day_len_min_max_check bool\n    var day_len_max_check bool\n    var year_len_min_max_check bool\n    var year_len_max_check bool\n    var month_len_min_max_check bool\n    var month_len_max_check bool\n    var day_len_min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmphsfn1a2v.swift:20:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month int\n              ^\n/tmp/tmphsfn1a2v.swift:20:15: note: join the identifiers together\n    var month int\n        ~~~~~~^~~\n        monthint\n/tmp/tmphsfn1a2v.swift:20:15: note: join the identifiers together with camel-case\n    var month int\n        ~~~~~~^~~\n        monthInt\n/tmp/tmphsfn1a2v.swift:21:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var day int\n            ^\n/tmp/tmphsfn1a2v.swift:21:13: note: join the identifiers together\n    var day int\n        ~~~~^~~\n        dayint\n/tmp/tmphsfn1a2v.swift:21:13: note: join the identifiers together with camel-case\n    var day int\n        ~~~~^~~\n        dayInt\n/tmp/tmphsfn1a2v.swift:22:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var year int\n             ^\n/tmp/tmphsfn1a2v.swift:22:14: note: join the identifiers together\n    var year int\n        ~~~~~^~~\n        yearint\n/tmp/tmphsfn1a2v.swift:22:14: note: join the identifiers together with camel-case\n    var year int\n        ~~~~~^~~\n        yearInt\n/tmp/tmphsfn1a2v.swift:23:20: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_date bool\n                   ^\n/tmp/tmphsfn1a2v.swift:23:20: note: join the identifiers together\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_datebool\n/tmp/tmphsfn1a2v.swift:23:20: note: join the identifiers together with camel-case\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_dateBool\n/tmp/tmphsfn1a2v.swift:24:19: error: consecutive statements on a line must be separated by ';'\n    var date_array []string\n                  ^\n                  ;\n/tmp/tmphsfn1a2v.swift:24:22: error: consecutive statements on a line must be separated by ';'\n    var date_array []string\n                     ^\n                     ;\n/tmp/tmphsfn1a2v.swif",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var valid_month, valid_day, valid_year bool\n    var valid_date bool\n    var date_arr = strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ = strconv.Atoi(date_arr[0])\n    day, _ = strconv.Atoi(date_arr[1])\n    year, _ = strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    valid_month = true\n    valid_day = true\n    valid_year = true\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            valid_month = false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            valid_day = false\n        }\n    } else if month == 2 {\n        if day < 1 || day > 29 {\n            valid_day = false\n        }\n    }\n    if year < 1000 || year > 9999 {\n        valid_year = false\n    }\n    if !valid_month || !valid_day || !valid_year {\n        return false\n    }\n    valid_date = true\n    return valid_date\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpgb1goiyj.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmpgb1goiyj.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmpgb1goiyj.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmpgb1goiyj.swift:24:44: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_month, valid_day, valid_year bool\n                                           ^\n/tmp/tmpgb1goiyj.swift:24:44: note: join the identifiers together\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearbool\n/tmp/tmpgb1goiyj.swift:24:44: note: join the identifiers together with camel-case\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearBool\n/tmp/tmpgb1goiyj.swift:25:20: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_date bool\n                   ^\n/tmp/tmpgb1goiyj.swift:25:20: note: join the identifiers together\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_datebool\n/tmp/tmpgb1goiyj.swift:25:20: note: join the identifiers together with camel-case\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_dateBool\n/tmp/tmpgb1goiyj.swift:30:10: error: consecutive statements on a line must be separated by ';'\n    month, _ = strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpgb1goiyj.swift:30:10: error: expected expression\n    month, _ = strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpgb1goiyj.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpgb1goiyj.swift:23:9: error: type annotation mis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    \n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp3uo3vd2u.swift:24:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmp3uo3vd2u.swift:24:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmp3uo3vd2u.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmp3uo3vd2u.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmp3uo3vd2u.swift:24:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmp3uo3vd2u.swift:25:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmp3uo3vd2u.swift:25:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmp3uo3vd2u.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmp3uo3vd2u.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmp3uo3vd2u.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmp3uo3vd2u.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmp3uo3vd2u.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmp3uo3vd2u.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmp3uo3vd2u.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmp3uo3vd2u.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmp3uo3vd2u.swift:47:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmp3uo3vd2u.s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month, day, year int\n    var valid = true\n    var date_str = date.split(\"-\")\n    if len(date_str) != 3 {\n        valid = false\n    } else {\n        month, _ = strconv.Atoi(date_str[0])\n        day, _ = strconv.Atoi(date_str[1])\n        year, _ = strconv.Atoi(date_str[2])\n        if month < 1 || month > 12 {\n            valid = false\n        } else if month == 2 {\n            if day < 1 || day > 29 {\n                valid = false\n            }\n        } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n            if day < 1 || day > 31 {\n                valid = false\n            }\n        } else if month == 4 || month == 6 || month == 9 || month == 11 {\n            if day < 1 || day > 30 {\n                valid = false\n            }\n        }\n    }\n    return valid\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp9eip8xlt.swift:20:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmp9eip8xlt.swift:20:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmp9eip8xlt.swift:20:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmp9eip8xlt.swift:26:14: error: consecutive statements on a line must be separated by ';'\n        month, _ = strconv.Atoi(date_str[0])\n             ^\n             ;\n/tmp/tmp9eip8xlt.swift:26:14: error: expected expression\n        month, _ = strconv.Atoi(date_str[0])\n             ^\n/tmp/tmp9eip8xlt.swift:20:9: error: type annotation missing in pattern\n    var month, day, year int\n        ^\n/tmp/tmp9eip8xlt.swift:20:16: error: type annotation missing in pattern\n    var month, day, year int\n               ^\n/tmp/tmp9eip8xlt.swift:20:21: error: type annotation missing in pattern\n    var month, day, year int\n                    ^\n/tmp/tmp9eip8xlt.swift:22:25: error: no exact matches in call to instance method 'split'\n    var date_str = date.split(\"-\")\n                        ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n                                       ^\n/tmp/tmp9eip8xlt.swift:23:8: error: cannot find 'len' in scope\n    if len(date_str) != 3 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpfht17pms.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpfht17pms.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpfht17pms.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpfht17pms.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpfht17pms.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpfht17pms.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpfht17pms.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpfht17pms.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpfht17pms.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpfht17pms.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpfht17pms.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpfht17pms.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpfht17pms.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpfht17pms.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpfht17pms.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpfht17pms.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpfht17pms.swift:42:22: error: cannot find",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Your code here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "tmpzh3i13wy/tmpzh3i13wy.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0261b52c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0261849b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0261849988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02618487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzh3i13wy                        0x000055c141e3f25b <unavailable> + 4699\n5    libc.so.6                          0x00002b0261d3e460 __libc_start_main + 245\n6    tmpzh3i13wy                        0x000055c141e3eee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpbjjavcy5.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpbjjavcy5.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpbjjavcy5.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpbjjavcy5.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpbjjavcy5.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpbjjavcy5.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpbjjavcy5.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpbjjavcy5.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpbjjavcy5.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpbjjavcy5.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpbjjavcy5.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpbjjavcy5.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpbjjavcy5.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpbjjavcy5.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpbjjavcy5.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpbjjavcy5.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpbjjavcy5.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpbjjavcy5.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpbjjavcy5.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpbjjavcy5.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpbjjavcy5.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpbjjavcy5.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Your code here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "tmpzh3i13wy/tmpzh3i13wy.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0261b52c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0261849b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0261849988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02618487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzh3i13wy                        0x000055c141e3f25b <unavailable> + 4699\n5    libc.so.6                          0x00002b0261d3e460 __libc_start_main + 245\n6    tmpzh3i13wy                        0x000055c141e3eee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1000 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpn37vqfoc.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpn37vqfoc.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpn37vqfoc.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpn37vqfoc.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpn37vqfoc.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpn37vqfoc.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpn37vqfoc.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpn37vqfoc.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpn37vqfoc.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpn37vqfoc.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpn37vqfoc.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpn37vqfoc.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpn37vqfoc.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpn37vqfoc.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpn37vqfoc.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] != \"0\" {\n        return false\n    }\n    if date[2] != \"-\" {\n        return false\n    }\n    if date[5] != \"-\" {\n        return false\n    }\n    if date[8] != \"-\" {\n        return false\n    }\n    if date[0] == \"0\" && date[1] == \"0\" && date[2] == \"0\" && date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" {\n        return false\n    }\n    if date[1] < \"1\" || date[1] > \"12\" {\n        return false\n    }\n    if date[3] < \"1\" || date[3] > \"31\" {\n        return false\n    }\n    if date[5] < \"1\" || date[5] > \"30\" {\n        return false\n    }\n    if date[7] < \"1\" || date[7] > \"29\" {\n        return false\n    }\n    if date[1] == \"2\" {\n        if date[3] < \"1\" || date[3] > \"29\" {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpnvfka010.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpnvfka010.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpnvfka010.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] != \"0\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnvfka010.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnvfka010.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[5] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnvfka010.swift:35:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[8] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnvfka010.swift:38:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] == \"0\" && date[1] == \"0\" && date[2] == \"0\" && date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnvfka010.swift:38:26: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[0] == \"0\" && date[1] == \"0\" && date[2] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" {\n        return false\n    }\n    if date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" {\n        return false\n    }\n    if date[9] == \"0\" && date[0] == \"0\" && date[1] == \"0\" {\n        return false\n    }\n    if date[0] == \"0\" && date[1] == \"0\" && date[2] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpnu051s21.swift:72:1: error: expected expression in list of expressions\n}\n^\n/tmp/tmpnu051s21.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpnu051s21.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpnu051s21.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnu051s21.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnu051s21.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnu051s21.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnu051s21.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnu051s21.swift:32:25: error: 'subscript(_:)'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdtie2vdy.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpdtie2vdy.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpdtie2vdy.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpdtie2vdy.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpdtie2vdy.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpdtie2vdy.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpdtie2vdy.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpdtie2vdy.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpdtie2vdy.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpdtie2vdy.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpdtie2vdy.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpdtie2vdy.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpdtie2vdy.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpdtie2vdy.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpdtie2vdy.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpdtie2vdy.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpdtie2vdy.swift:42:22: error: cannot find",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpm8_45q_3.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpm8_45q_3.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpm8_45q_3.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpm8_45q_3.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpm8_45q_3.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpm8_45q_3.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpm8_45q_3.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpm8_45q_3.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpm8_45q_3.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpm8_45q_3.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpm8_45q_3.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpm8_45q_3.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpm8_45q_3.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpm8_45q_3.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpm8_45q_3.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpm8_45q_3.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpm8_45q_3.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpegvo6iis.swift:20:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\"-\", \"\")\n    ^~~~\n/tmp/tmpegvo6iis.swift:20:17: error: cannot assign value of type '()' to type 'String'\n    date = date.replace(\"-\", \"\")\n           ~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpegvo6iis.swift:20:24: error: missing argument label 'with:' in call\n    date = date.replace(\"-\", \"\")\n                       ^\n                             with: \n/tmp/tmpegvo6iis.swift:20:17: error: cannot use mutating member on immutable value: 'date' is a 'let' constant\n    date = date.replace(\"-\", \"\")\n           ~~~~ ^\n/tmp/tmpegvo6iis.swift:21:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\"/\", \"\")\n    ^~~~\n/tmp/tmpegvo6iis.swift:21:17: error: cannot assign value of type '()' to type 'String'\n    date = date.replace(\"/\", \"\")\n           ~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpegvo6iis.swift:21:17: error: cannot use mutating member on immutable value: 'date' is a 'let' constant\n    date = date.replace(\"/\", \"\")\n           ~~~~ ^\n/tmp/tmpegvo6iis.swift:21:24: error: missing argument label 'with:' in call\n    date = date.replace(\"/\", \"\")\n                       ^\n                             with: \n/tmp/tmpegvo6iis.swift:22:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\" \", \"\")\n    ^~~~\n/tmp/tmpegvo6iis.swift:22:17: error: cannot assign value of type '()' to type 'String'\n    date = date.replace(\" \", \"\")\n           ~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpegvo6iis.swift:22:24: error: missing argument label 'with:' in call\n    date = date.replace(\" \", \"\")\n                       ^\n                             with: \n/tmp/tmpegvo6iis.swift:22:17: error: cannot use mutating member on immutable value: 'date' is a 'let' constant\n    date = date.replace(\" \", \"\")\n           ~~~~ ^\n/tmp/tmpegvo6iis.swift:23:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\".\", \"\")\n    ^~~~\n/tmp/tmpegvo6iis.swift:23:17: error: cannot assign value of type '()' to type",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpblonxke9.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpblonxke9.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpblonxke9.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpblonxke9.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpblonxke9.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpblonxke9.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpblonxke9.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpblonxke9.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpblonxke9.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpblonxke9.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpblonxke9.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpblonxke9.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpblonxke9.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpblonxke9.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpblonxke9.s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if year < 1000 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp86d49rit.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmp86d49rit.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmp86d49rit.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp86d49rit.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmp86d49rit.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmp86d49rit.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmp86d49rit.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmp86d49rit.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmp86d49rit.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmp86d49rit.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmp86d49rit.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmp86d49rit.swift:42:8: error: cannot find 'year' in scope\n    if year < 1000 || year > 9999 {\n       ^~~~\n/tmp/tmp86d49rit.swift:42:23: error: cannot find 'year' in scope\n    if year < 1000 || year > 9999 {\n                      ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[1] < \"1\" || date[1] > \"12\" {\n        return false\n    }\n    if date[3] < \"1\" || date[3] > \"31\" {\n        return false\n    }\n    if date[5] < \"1\" || date[5] > \"30\" {\n        return false\n    }\n    if date[7] < \"1\" || date[7] > \"29\" {\n        return false\n    }\n    if date[9] < \"1\" || date[9] > \"12\" {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdp36_md7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpdp36_md7.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpdp36_md7.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[4] < \"0\" || date[4] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] != \"0\" {\n        return false\n    }\n    if date[2] != \"-\" {\n        return false\n    }\n    if date[5] != \"-\" {\n        return false\n    }\n    if date[8] != \"-\" {\n        return false\n    }\n    if date[0] == \"0\" && date[2] == \"-\" && date[5] == \"-\" && date[8] == \"-\" {\n        return false\n    }\n    if date[1] < \"1\" || date[1] > \"12\" {\n        return false\n    }\n    if date[3] < \"1\" || date[3] > \"31\" {\n        return false\n    }\n    if date[4] < \"1\" || date[4] > \"30\" {\n        return false\n    }\n    if date[6] < \"1\" || date[6] > \"29\" {\n        return false\n    }\n    if date[7] < \"1\" || date[7] > \"12\" {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpiy4rsupj.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpiy4rsupj.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpiy4rsupj.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] != \"0\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiy4rsupj.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiy4rsupj.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[5] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiy4rsupj.swift:35:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[8] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiy4rsupj.swift:38:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] == \"0\" && date[2] == \"-\" && date[5] == \"-\" && date[8] == \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiy4rsupj.swift:38:26: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] == \"0\" && date[2] == \"-\" && date[5] == \"-\" && da",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp8bo8fk20.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmp8bo8fk20.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmp8bo8fk20.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp8bo8fk20.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmp8bo8fk20.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmp8bo8fk20.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmp8bo8fk20.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmp8bo8fk20.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmp8bo8fk20.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmp8bo8fk20.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmp8bo8fk20.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmp8bo8fk20.swift:42:8: error: cannot find 'year' in scope\n    if year < 1900 || year > 2100 {\n       ^~~~\n/tmp/tmp8bo8fk20.swift:42:23: error: cannot find 'year' in scope\n    if year < 1900 || year > 2100 {\n                      ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[1] < \"1\" || date[1] > \"12\" {\n        return false\n    }\n    if date[3] < \"1\" || date[3] > \"31\" {\n        return false\n    }\n    if date[5] < \"1\" || date[5] > \"30\" {\n        return false\n    }\n    if date[7] < \"1\" || date[7] > \"29\" {\n        return false\n    }\n    if date[9] < \"1\" || date[9] > \"12\" {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdp36_md7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpdp36_md7.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpdp36_md7.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[4] < \"0\" || date[4] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp8bo8fk20.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmp8bo8fk20.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmp8bo8fk20.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp8bo8fk20.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmp8bo8fk20.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmp8bo8fk20.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmp8bo8fk20.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmp8bo8fk20.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmp8bo8fk20.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmp8bo8fk20.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmp8bo8fk20.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmp8bo8fk20.swift:42:8: error: cannot find 'year' in scope\n    if year < 1900 || year > 2100 {\n       ^~~~\n/tmp/tmp8bo8fk20.swift:42:23: error: cannot find 'year' in scope\n    if year < 1900 || year > 2100 {\n                      ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1000 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmph6i3ikw9.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmph6i3ikw9.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmph6i3ikw9.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmph6i3ikw9.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmph6i3ikw9.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmph6i3ikw9.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmph6i3ikw9.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmph6i3ikw9.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmph6i3ikw9.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmph6i3ikw9.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmph6i3ikw9.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmph6i3ikw9.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmph6i3ikw9.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmph6i3ikw9.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmph6i3ikw9.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date.split(\"-\")\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpn4nc0xpj.swift:23:10: error: consecutive statements on a line must be separated by ';'\n    month, day, year := date.split(\"-\")\n         ^\n         ;\n/tmp/tmpn4nc0xpj.swift:23:10: error: expected expression\n    month, day, year := date.split(\"-\")\n         ^\n/tmp/tmpn4nc0xpj.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpn4nc0xpj.swift:23:5: error: cannot find 'month' in scope\n    month, day, year := date.split(\"-\")\n    ^~~~~\n/tmp/tmpn4nc0xpj.swift:24:8: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n       ^~~\n/tmp/tmpn4nc0xpj.swift:24:12: error: cannot find 'month' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n           ^~~~~\n/tmp/tmpn4nc0xpj.swift:24:27: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                          ^~~\n/tmp/tmpn4nc0xpj.swift:24:31: error: cannot find 'day' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                              ^~~\n/tmp/tmpn4nc0xpj.swift:24:44: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                           ^~~\n/tmp/tmpn4nc0xpj.swift:24:48: error: cannot find 'year' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                               ^~~~\n/tmp/tmpn4nc0xpj.swift:27:9: error: cannot find 'is_valid_month' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n        ^~~~~~~~~~~~~~\n/tmp/tmpn4nc0xpj.swift:27:24: error: cannot find 'month' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n                       ^~~~~\n/tmp/tmpn4nc0xpj.swift:27:35: error: cannot find 'is_valid_day' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n                                  ^~~~~~~~~~~~\n/tmp/tmpn4nc0xpj.swift:27:48: error: cannot find 'day' in scope\n    if !is_valid_month(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpmj9jea9k.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpmj9jea9k.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpmj9jea9k.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpmj9jea9k.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpmj9jea9k.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpmj9jea9k.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpmj9jea9k.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpmj9jea9k.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpmj9jea9k.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpmj9jea9k.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpmj9jea9k.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[0] == \"0\" && date[1] == \"0\" && date[2] == \"0\" && date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" && date[9] == \"0\" {\n        return false\n    }\n    if date[0] == \"1\" && date[1] == \"1\" && date[2] == \"1\" && date[3] == \"1\" && date[4] == \"1\" && date[5] == \"1\" && date[6] == \"1\" && date[7] == \"1\" && date[8] == \"1\" && date[9] == \"1\" {\n        return false\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpuiyeeswa.swift:92:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmpuiyeeswa.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmpuiyeeswa.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpuiyeeswa.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpuiyeeswa.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        return false\n    }\n    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 31 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpgjkrrd5b.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpgjkrrd5b.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpgjkrrd5b.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpgjkrrd5b.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpgjkrrd5b.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpgjkrrd5b.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpgjkrrd5b.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpgjkrrd5b.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpgjkrrd5b.swift:36:8: error: cannot find 'month' in scope\n    if month == 2 {\n       ^~~~~\n/tmp/tmpgjkrrd5b.swift:37:12: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n           ^~~\n/tmp/tmpgjkrrd5b.swift:37:23: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n                      ^~~\n/tmp/tmpgjkrrd5b.swift:40:15: error: cannot find 'month' in scope\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n              ^~~~~\n/tmp/tmpgjkrrd5b.swift:40:29: error: cannot find 'month' in scope\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n                            ^~~~~\n/tmp/tmpgjkrrd5b.swift:40:43: error: cannot find 'month' in scope\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n                                          ^~~~~\n/tmp/tmpgjkrrd5b.swift:40:57: error: cannot find 'month' in scope\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n                                                        ^~~~~\n/tmp/tmpgjkrrd5b.swift:41:12: error: cannot find 'day' in scope\n        if ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    var month_str, day_str, year_str string\n    month_str, day_str, year_str = date.split(\"-\")\n    month, err = strconv.Atoi(month_str)\n    if err != nil {\n        return false\n    }\n    day, err = strconv.Atoi(day_str)\n    if err != nil {\n        return false\n    }\n    year, err = strconv.Atoi(year_str)\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp354t4nf7.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmp354t4nf7.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmp354t4nf7.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmp354t4nf7.swift:24:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmp354t4nf7.swift:24:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmp354t4nf7.swift:24:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmp354t4nf7.swift:25:38: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_str, day_str, year_str string\n                                     ^\n/tmp/tmp354t4nf7.swift:25:38: note: join the identifiers together\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strstring\n/tmp/tmp354t4nf7.swift:25:38: note: join the identifiers together with camel-case\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strString\n/tmp/tmp354t4nf7.swift:26:14: error: consecutive statements on a line must be separated by ';'\n    month_str, day_str, year_str = date.split(\"-\")\n             ^\n             ;\n/tmp/tmp354t4nf7.swift:26:14: error: expected expression\n    month_str, day_str, year_str = date.split(\"-\")\n             ^\n/tmp/tmp354t4nf7.swift:31:8: error: consecutive statements on a line must be separated by ';'\n    day, err = strconv.Atoi(day_str)\n       ^\n       ;\n/tmp/tmp354t4nf7.swift:31:8: error: expected expression",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_arr = date.split(\"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    if month < 1 || month > 12 {\n        return false\n    }\n    day, _ := strconv.Atoi(date_arr[1])\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    year, _ := strconv.Atoi(date_arr[2])\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmprs281uru.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmprs281uru.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmprs281uru.swift:31:8: error: consecutive statements on a line must be separated by ';'\n    day, _ := strconv.Atoi(date_arr[1])\n       ^\n       ;\n/tmp/tmprs281uru.swift:31:8: error: expected expression\n    day, _ := strconv.Atoi(date_arr[1])\n       ^\n/tmp/tmprs281uru.swift:44:9: error: consecutive statements on a line must be separated by ';'\n    year, _ := strconv.Atoi(date_arr[2])\n        ^\n        ;\n/tmp/tmprs281uru.swift:44:9: error: expected expression\n    year, _ := strconv.Atoi(date_arr[2])\n        ^\n/tmp/tmprs281uru.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr = date.split(\"-\")\n    ^~~~~~~~\n/tmp/tmprs281uru.swift:23:21: error: no exact matches in call to instance method 'split'\n    date_arr = date.split(\"-\")\n                    ^\n/tmp/tmprs281uru.swift:23:21: note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    date_arr = date.split(\"-\")\n                    ^\n/tmp/tmprs281uru.swift:23:21: note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n    date_arr = date.split(\"-\")\n                    ^\n/tmp/tmprs281uru.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmprs281uru.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmprs281uru.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmprs281uru.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmprs281uru.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    if len(date) != 10 {\n        return false\n    }\n    \n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    \n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    \n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    \n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    \n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    \n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    \n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    \n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    \n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    \n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    \n    if date[1] == \"0\" && date[3] == \"0\" && date[5] == \"0\" && date[7] == \"0\" && date[9] == \"0\" {\n        return false\n    }\n    \n    if date[1] == \"1\" && date[3] == \"1\" && date[5] == \"1\" && date[7] == \"1\" && date[9] == \"1\" {\n        return false\n    }\n    \n    if date[1] == \"2\" && date[3] == \"2\" && date[5] == \"2\" && date[7] == \"2\" && date[9] == \"2\" {\n        return false\n    }\n    \n    if date\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpnp5pl0uj.swift:80:12: error: expected '{' after 'if' condition\n    if date\n           ^\n/tmp/tmpnp5pl0uj.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpnp5pl0uj.swift:24:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpnp5pl0uj.swift:28:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnp5pl0uj.swift:28:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnp5pl0uj.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnp5pl0uj.swift:32:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnp5pl0uj.swift:36:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[4] < \"0\" || date[4] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnp5pl0uj.swift:36:25: error: 's",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[0] > \"2\" {\n        if date[1] > \"0\" || date[1] < \"1\" {\n            return false\n        }\n        if date[2] > \"0\" || date[2] < \"1\" {\n            return false\n        }\n        if date[3] > \"0\" || date[3] < \"1\" {\n            return false\n        }\n        if date[4] > \"0\" || date[4] < \"1\" {\n            return false\n        }\n        if date[5] > \"0\" || date[5] < \"1\" {\n            return false\n        }\n        if date[6] > \"0\" || date[6] < \"1\" {\n            return false\n        }\n        if date[7] > \"0\" || date[7] < \"1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpth0f434w.swift:75:39: error: unterminated string literal\n        if date[7] > \"0\" || date[7] < \"1\n                                      ^\n/tmp/tmpth0f434w.swift:106:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmpth0f434w.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmpth0f434w.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpth0f434w.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpth0f434w.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpth0f434w.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpth0f434w.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpth0f434w.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpth0f434",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpjqhz_sro.swift:20:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpjqhz_sro.swift:20:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpjqhz_sro.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpjqhz_sro.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpjqhz_sro.swift:20:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpjqhz_sro.swift:21:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpjqhz_sro.swift:21:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpjqhz_sro.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpjqhz_sro.swift:27:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpjqhz_sro.swift:27:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpjqhz_sro.swift:30:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpjqhz_sro.swift:30:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpjqhz_sro.swift:33:8: error: cannot find 'month' in scope\n    if month == 2 {\n       ^~~~~\n/tmp/tmpjqhz_sro.swift:34:12: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n           ^~~\n/tmp/tmpjqhz_sro.swift:34:23: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n                      ^~~\n/tmp/tmpjqhz_sro.swift:37:15: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n              ^~~~~\n/tmp/tmpjqhz_sro.swift:37:29: error: cannot find 'month' i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' {\n        return false\n    }\n    if date[3] == '0' && date[4] == '0' && date[5] == '0' && date[6] == '0' && date[7] == '0' && date[8] == '0' {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpmzhwe1s6.swift:26:18: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:26:35: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:29:18: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:29:35: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:32:18: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:32:35: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:35:18: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:35:35: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:38:18: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:38:35: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpmzhwe1s6.swift:41:18: error: single-quoted string literal found, use '\"'\n    if date[5] < '0' || date[5] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpmzhwe1s6.swift:41:35: error: single-quoted string literal found, use '\"'\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[1] > '2' {\n        return false\n    }\n    if date[3] > '5' {\n        return false\n    }\n    if date[5] > '9' {\n        return false\n    }\n    if date[7] > '9' {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpoo3kr_82.swift:26:18: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpoo3kr_82.swift:26:35: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpoo3kr_82.swift:29:18: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpoo3kr_82.swift:29:35: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpoo3kr_82.swift:32:18: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpoo3kr_82.swift:32:35: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpoo3kr_82.swift:35:18: error: single-quoted string literal found, use '\"'\n    if date[6] < '0' || date[6] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpoo3kr_82.swift:35:35: error: single-quoted string literal found, use '\"'\n    if date[6] < '0' || date[6] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpoo3kr_82.swift:38:18: error: single-quoted string literal found, use '\"'\n    if date[8] < '0' || date[8] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpoo3kr_82.swift:38:35: error: single-quoted string literal found, use '\"'\n    if date[8] < '0' || date[8] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpoo3kr_82.swift:41:18: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpoo3kr_82.swift:41:35: error: single-quoted string literal found, use '\"'\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    var valid bool\n    var month_str, day_str, year_str string\n    month_str, day_str, year_str, err = split_date(date)\n    if err != nil {\n        return false\n    }\n    month, err = strconv.Atoi(month_str)\n    if err != nil {\n        return false\n    }\n    day, err = strconv.Atoi(day_str)\n    if err != nil {\n        return false\n    }\n    year, err = strconv.Atoi(year_str)\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if year < 1 || year > 9999 {\n        return false\n    }\n    valid = true\n    return valid\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpa13aihh8.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmpa13aihh8.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmpa13aihh8.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmpa13aihh8.swift:24:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmpa13aihh8.swift:24:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmpa13aihh8.swift:24:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmpa13aihh8.swift:25:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid bool\n              ^\n/tmp/tmpa13aihh8.swift:25:15: note: join the identifiers together\n    var valid bool\n        ~~~~~~^~~~\n        validbool\n/tmp/tmpa13aihh8.swift:25:15: note: join the identifiers together with camel-case\n    var valid bool\n        ~~~~~~^~~~\n        validBool\n/tmp/tmpa13aihh8.swift:26:38: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_str, day_str, year_str string\n                                     ^\n/tmp/tmpa13aihh8.swift:26:38: note: join the identifiers together\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strstring\n/tmp/tmpa13aihh8.swift:26:38: note: join the identifiers together with camel-case\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strString\n/tmp/tmpa13aihh8.swift:27:14: error: consecutive statements on a line must be ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[1] < \"1\" || date[1] > \"12\" {\n        return false\n    }\n    if date[3] < \"1\" || date[3] > \"31\" {\n        return false\n    }\n    if date[5] < \"1\" || date[5] > \"30\" {\n        return false\n    }\n    if date[7] < \"1\" || date[7] > \"29\" {\n        return false\n    }\n    if date[9] < \"1\" || date[9] > \"12\" {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdp36_md7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpdp36_md7.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpdp36_md7.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[4] < \"0\" || date[4] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    var month int\n    var day int\n    var year int\n    var err error\n    var valid bool\n    var month_str string\n    var day_str string\n    var year_str string\n    var _ = err\n    var _ = month_str\n    var _ = day_str\n    var _ = year_str\n    var _ = valid\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var _ = date\n    var _ = month\n    var _ = day\n    var _ = year\n    var _ = err\n    var\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp6fvgpr79.swift:23:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month int\n              ^\n/tmp/tmp6fvgpr79.swift:23:15: note: join the identifiers together\n    var month int\n        ~~~~~~^~~\n        monthint\n/tmp/tmp6fvgpr79.swift:23:15: note: join the identifiers together with camel-case\n    var month int\n        ~~~~~~^~~\n        monthInt\n/tmp/tmp6fvgpr79.swift:24:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var day int\n            ^\n/tmp/tmp6fvgpr79.swift:24:13: note: join the identifiers together\n    var day int\n        ~~~~^~~\n        dayint\n/tmp/tmp6fvgpr79.swift:24:13: note: join the identifiers together with camel-case\n    var day int\n        ~~~~^~~\n        dayInt\n/tmp/tmp6fvgpr79.swift:25:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var year int\n             ^\n/tmp/tmp6fvgpr79.swift:25:14: note: join the identifiers together\n    var year int\n        ~~~~~^~~\n        yearint\n/tmp/tmp6fvgpr79.swift:25:14: note: join the identifiers together with camel-case\n    var year int\n        ~~~~~^~~\n        yearInt\n/tmp/tmp6fvgpr79.swift:26:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmp6fvgpr79.swift:26:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmp6fvgpr79.swift:26:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmp6fvgpr79.swift:27:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid bool\n              ^\n/tmp/tmp6fvgpr79.swift:27:15: note: join the identifiers together\n    var valid bool\n        ~~~~~~^~~~\n        validbool\n/tmp/tmp6fvgpr79.swift:27:15: note: join the identifiers together with camel-case\n    var valid bool\n        ~~~~~~",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    var month, day, year int\n    \n    var month_str, day_str, year_str string\n    \n    var month_int, day_int, year_int int\n    \n    var month_int_valid, day_int_valid, year_int_valid bool\n    \n    var month_int_valid_check, day_int_valid_check, year_int_valid_check bool\n    \n    var month_int_valid_check_check, day_int_valid_check_check, year_int_valid_check_check bool\n    \n    var month_int_valid_check_check_check, day_int_valid_check_check_check, year_int_valid_check_check_check bool\n    \n    var month_int_valid_check_check_check_check, day_int_valid_check_check_check_check, year_int_valid_check_check_check_check bool\n    \n    var month_int_valid_check_check_check_check_check, day_int_valid_check_check_check_check_check, year_int_valid_check_check_check_check_check bool\n    \n    var month_int_valid_check_check_check_check_check_check, day_int_valid_check_check_check_check_check_check, year_int_valid_check_check_check_check_check_check bool\n    \n    var month_int_valid_check_check_check_check_check_check_check, day_int_valid_check_check_check_check_check_check_check, year_int_valid_check_check_check_check_check_check_check bool\n    \n    var month_int_valid_check_check_check_check_check_check_check_check, day_int_valid_check_check_check_check_check_check_check_check, year_int_valid_check_check_check_check_check_check_check_check bool\n    \n    var month_int_valid_check_check_check_check_check_check_check_check_check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpno94n9bj.swift:24:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmpno94n9bj.swift:24:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmpno94n9bj.swift:24:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmpno94n9bj.swift:26:38: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_str, day_str, year_str string\n                                     ^\n/tmp/tmpno94n9bj.swift:26:38: note: join the identifiers together\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strstring\n/tmp/tmpno94n9bj.swift:26:38: note: join the identifiers together with camel-case\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strString\n/tmp/tmpno94n9bj.swift:28:38: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_int, day_int, year_int int\n                                     ^\n/tmp/tmpno94n9bj.swift:28:38: note: join the identifiers together\n    var month_int, day_int, year_int int\n                            ~~~~~~~~~^~~\n                            year_intint\n/tmp/tmpno94n9bj.swift:28:38: note: join the identifiers together with camel-case\n    var month_int, day_int, year_int int\n                            ~~~~~~~~~^~~\n                            year_intInt\n/tmp/tmpno94n9bj.swift:30:56: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_int_valid, day_int_valid, year_int_valid bool\n                                                       ^\n/tmp/tmpno94n9bj.swift:30:56: note: join the identifiers together\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month, day, year int\n    var err error\n    var valid bool\n    \n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year, err = parse_date(date)\n    if err != nil {\n        return false\n    }\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmprpk82owz.swift:20:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmprpk82owz.swift:20:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmprpk82owz.swift:20:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmprpk82owz.swift:21:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmprpk82owz.swift:21:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmprpk82owz.swift:21:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmprpk82owz.swift:22:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid bool\n              ^\n/tmp/tmprpk82owz.swift:22:15: note: join the identifiers together\n    var valid bool\n        ~~~~~~^~~~\n        validbool\n/tmp/tmprpk82owz.swift:22:15: note: join the identifiers together with camel-case\n    var valid bool\n        ~~~~~~^~~~\n        validBool\n/tmp/tmprpk82owz.swift:28:10: error: consecutive statements on a line must be separated by ';'\n    month, day, year, err = parse_date(date)\n         ^\n         ;\n/tmp/tmprpk82owz.swift:28:10: error: expected expression\n    month, day, year, err = parse_date(date)\n         ^\n/tmp/tmprpk82owz.swift:20:9: error: type annotation missing in pattern\n    var month, day, year int\n        ^\n/tmp/tmprpk82owz.swift:20:16: error: type annotation missing in pattern\n    var month, day, year int\n               ^\n/tmp/tmprpk82owz.swift:20:21: error: type annotation missing in pattern\n    var month, day, year int\n                    ^\n/tmp/tmprpk82owz.swift:21:9: error: type annotation missing in pattern\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month int\n    var day int\n    var year int\n    var valid_date bool\n    var date_array []string\n    var date_array_len int\n    var month_len int\n    var day_len int\n    var year_len int\n    var month_str string\n    var day_str string\n    var year_str string\n    var date_str string\n    var date_str_len int\n    var month_str_len int\n    var day_str_len int\n    var year_str_len int\n    var month_int int\n    var day_int int\n    var year_int int\n    var month_int_len int\n    var day_int_len int\n    var year_int_len int\n    var month_int_str string\n    var day_int_str string\n    var year_int_str string\n    var month_int_str_len int\n    var day_int_str_len int\n    var year_int_str_len int\n    var month_int_str_len int\n    var day_int_str_len int\n    var year_int_str_len int\n    var month_int_str_len int\n    var day_int_str_len int\n    var year_int_str_len int\n    var month_int_str_len int\n    var day_int_str_len int\n    var year_int_str_len int\n    var month_int_str_len int\n    var day_int_str_len int\n    var year_int_str_len int\n    var month_int_str_len int\n    var day_int_str_len int\n    var year_int_str_len int\n    var month_int_str_len int\n    var day_int_str_len int\n    var year_int_str_len int\n    var month_int_str_len int\n    var day_int_str_len int\n    var year_int_str_len int\n    var month_int_str_len int\n    var day_int_str_len int\n    var year_int_str_len int\n    var month_int_str_len int\n    var day_int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpn9_jeasw.swift:20:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month int\n              ^\n/tmp/tmpn9_jeasw.swift:20:15: note: join the identifiers together\n    var month int\n        ~~~~~~^~~\n        monthint\n/tmp/tmpn9_jeasw.swift:20:15: note: join the identifiers together with camel-case\n    var month int\n        ~~~~~~^~~\n        monthInt\n/tmp/tmpn9_jeasw.swift:21:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var day int\n            ^\n/tmp/tmpn9_jeasw.swift:21:13: note: join the identifiers together\n    var day int\n        ~~~~^~~\n        dayint\n/tmp/tmpn9_jeasw.swift:21:13: note: join the identifiers together with camel-case\n    var day int\n        ~~~~^~~\n        dayInt\n/tmp/tmpn9_jeasw.swift:22:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var year int\n             ^\n/tmp/tmpn9_jeasw.swift:22:14: note: join the identifiers together\n    var year int\n        ~~~~~^~~\n        yearint\n/tmp/tmpn9_jeasw.swift:22:14: note: join the identifiers together with camel-case\n    var year int\n        ~~~~~^~~\n        yearInt\n/tmp/tmpn9_jeasw.swift:23:20: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_date bool\n                   ^\n/tmp/tmpn9_jeasw.swift:23:20: note: join the identifiers together\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_datebool\n/tmp/tmpn9_jeasw.swift:23:20: note: join the identifiers together with camel-case\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_dateBool\n/tmp/tmpn9_jeasw.swift:24:19: error: consecutive statements on a line must be separated by ';'\n    var date_array []string\n                  ^\n                  ;\n/tmp/tmpn9_jeasw.swift:24:22: error: consecutive statements on a line must be separated by ';'\n    var date_array []string\n                     ^\n                     ;\n/tmp/tmpn9_jeasw.swif",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpbjjavcy5.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpbjjavcy5.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpbjjavcy5.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpbjjavcy5.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpbjjavcy5.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpbjjavcy5.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpbjjavcy5.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpbjjavcy5.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpbjjavcy5.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpbjjavcy5.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpbjjavcy5.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[1] < \"1\" || date[1] > \"12\" {\n        return false\n    }\n    if date[3] < \"1\" || date[3] > \"31\" {\n        return false\n    }\n    if date[5] < \"1\" || date[5] > \"30\" {\n        return false\n    }\n    if date[7] < \"1\" || date[7] > \"29\" {\n        return false\n    }\n    if date[9] < \"1\" || date[9] > \"12\" {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdp36_md7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpdp36_md7.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpdp36_md7.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[4] < \"0\" || date[4] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    \n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    }\n    \n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmptefpirzy.swift:24:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmptefpirzy.swift:24:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmptefpirzy.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmptefpirzy.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmptefpirzy.swift:24:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmptefpirzy.swift:25:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmptefpirzy.swift:25:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmptefpirzy.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmptefpirzy.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmptefpirzy.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmptefpirzy.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmptefpirzy.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmptefpirzy.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmptefpirzy.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmptefpirzy.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmptefpirzy.swift:47:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmptefpirzy.s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Write your code here\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "tmpf3p1yk7_/tmpf3p1yk7_.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af2fcc91c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af2fc988b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af2fc988988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af2fc9877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf3p1yk7_                        0x000055ac41c642fb <unavailable> + 4859\n5    libc.so.6                          0x00002af2fce7d460 __libc_start_main + 245\n6    tmpf3p1yk7_                        0x000055ac41c63ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Your code here\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "tmpfoz2vl8s/tmpfoz2vl8s.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a6b84fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a6b546b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a6b546988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a6b5457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfoz2vl8s                        0x000055b8046102fb <unavailable> + 4859\n5    libc.so.6                          0x00002b2a6ba3b460 __libc_start_main + 245\n6    tmpfoz2vl8s                        0x000055b80460fee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    date = date.trim()\n    if len(date) == 0 {\n        return false\n    }\n    date_arr = date.split(\"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    if month < 1 || month > 12 {\n        return false\n    }\n    day, _ := strconv.Atoi(date_arr[1])\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    year, _ := strconv.Atoi(date_arr[2])\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpxrv6yfms.swift:28:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpxrv6yfms.swift:28:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpxrv6yfms.swift:32:8: error: consecutive statements on a line must be separated by ';'\n    day, _ := strconv.Atoi(date_arr[1])\n       ^\n       ;\n/tmp/tmpxrv6yfms.swift:32:8: error: expected expression\n    day, _ := strconv.Atoi(date_arr[1])\n       ^\n/tmp/tmpxrv6yfms.swift:45:9: error: consecutive statements on a line must be separated by ';'\n    year, _ := strconv.Atoi(date_arr[2])\n        ^\n        ;\n/tmp/tmpxrv6yfms.swift:45:9: error: expected expression\n    year, _ := strconv.Atoi(date_arr[2])\n        ^\n/tmp/tmpxrv6yfms.swift:20:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.trim()\n    ^~~~\n/tmp/tmpxrv6yfms.swift:20:17: error: value of type 'String' has no member 'trim'\n    date = date.trim()\n           ~~~~ ^~~~\n/tmp/tmpxrv6yfms.swift:21:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpxrv6yfms.swift:24:5: error: cannot find 'date_arr' in scope\n    date_arr = date.split(\"-\")\n    ^~~~~~~~\n/tmp/tmpxrv6yfms.swift:24:21: error: no exact matches in call to instance method 'split'\n    date_arr = date.split(\"-\")\n                    ^\n/tmp/tmpxrv6yfms.swift:24:21: note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    date_arr = date.split(\"-\")\n                    ^\n/tmp/tmpxrv6yfms.swift:24:21: note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n    date_arr = date.split(\"-\")\n                    ^\n/tmp/tmpxrv6yfms.swift:25:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpxrv6yfms.swift:25:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpblonxke9.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpblonxke9.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpblonxke9.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpblonxke9.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpblonxke9.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpblonxke9.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpblonxke9.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpblonxke9.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpblonxke9.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpblonxke9.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpblonxke9.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpblonxke9.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpblonxke9.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpblonxke9.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpblonxke9.s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month int\n    var day int\n    var year int\n    var valid bool\n    var date_str string\n    var date_arr []string\n    var date_arr_len int\n    var month_arr []string\n    var month_arr_len int\n    var day_arr []string\n    var day_arr_len int\n    var year_arr []string\n    var year_arr_len int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var month_str string\n    var day_str string\n    var year_str string\n    var month_arr_len_str string\n    var day_arr_len_str string\n    var year_arr_len_str string\n    var month_arr_str string\n    var day_arr_str string\n    var year_arr_str string\n    var month_str_len int\n    var day_str_len int\n    var year_str_len int\n    var month_arr_len_str_len int\n    var day_arr_len_str_len int\n    var year_arr_len_str_len int\n    var month_arr_str_len int\n    var day_arr_str_len int\n    var year_arr_str_len int\n    var month_str_arr []string\n    var day_str_arr []string\n    var year_str_arr []string\n    var month_str_arr_len int\n    var day_str_arr_len int\n    var year_str_arr_len int\n    var month_str_arr_str string\n    var day_str_arr_str string\n    var year_str_arr_str string\n    var month_str_arr_len_str string\n    var day_str_arr_len_str string\n    var year_str_arr_len_str string\n    var month_str_arr_str_len int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpsty5cr7t.swift:20:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month int\n              ^\n/tmp/tmpsty5cr7t.swift:20:15: note: join the identifiers together\n    var month int\n        ~~~~~~^~~\n        monthint\n/tmp/tmpsty5cr7t.swift:20:15: note: join the identifiers together with camel-case\n    var month int\n        ~~~~~~^~~\n        monthInt\n/tmp/tmpsty5cr7t.swift:21:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var day int\n            ^\n/tmp/tmpsty5cr7t.swift:21:13: note: join the identifiers together\n    var day int\n        ~~~~^~~\n        dayint\n/tmp/tmpsty5cr7t.swift:21:13: note: join the identifiers together with camel-case\n    var day int\n        ~~~~^~~\n        dayInt\n/tmp/tmpsty5cr7t.swift:22:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var year int\n             ^\n/tmp/tmpsty5cr7t.swift:22:14: note: join the identifiers together\n    var year int\n        ~~~~~^~~\n        yearint\n/tmp/tmpsty5cr7t.swift:22:14: note: join the identifiers together with camel-case\n    var year int\n        ~~~~~^~~\n        yearInt\n/tmp/tmpsty5cr7t.swift:23:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid bool\n              ^\n/tmp/tmpsty5cr7t.swift:23:15: note: join the identifiers together\n    var valid bool\n        ~~~~~~^~~~\n        validbool\n/tmp/tmpsty5cr7t.swift:23:15: note: join the identifiers together with camel-case\n    var valid bool\n        ~~~~~~^~~~\n        validBool\n/tmp/tmpsty5cr7t.swift:24:18: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var date_str string\n                 ^\n/tmp/tmpsty5cr7t.swift:24:18: note: join the identifiers together\n    var date_str string\n        ~~~~~~~~~^~~~~~\n        date_strstring\n/tmp/tmpsty5cr7t.swift:24:18: note: join the identifiers together with camel-case\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[0] == '0' && date[2] == '0' && date[4] == '0' && date[6] == '0' && date[8] == '0' {\n        return false\n    }\n    if date[1] < '1' || date[1] > '12' {\n        return false\n    }\n    if date[3] < '1' || date[3] > '31' {\n        return false\n    }\n    if date[5] < '1' || date[5] > '30' {\n        return false\n    }\n    if date[7] < '1' || date[7] > '29' {\n        return false\n    }\n    if date[1] == '2' {\n        if date[3] < '1' || date[3] > '29' {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpriqs9ov2.swift:26:18: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpriqs9ov2.swift:26:35: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpriqs9ov2.swift:29:18: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpriqs9ov2.swift:29:35: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpriqs9ov2.swift:32:18: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpriqs9ov2.swift:32:35: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpriqs9ov2.swift:35:18: error: single-quoted string literal found, use '\"'\n    if date[6] < '0' || date[6] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpriqs9ov2.swift:35:35: error: single-quoted string literal found, use '\"'\n    if date[6] < '0' || date[6] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpriqs9ov2.swift:38:18: error: single-quoted string literal found, use '\"'\n    if date[8] < '0' || date[8] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpriqs9ov2.swift:38:35: error: single-quoted string literal found, use '\"'\n    if date[8] < '0' || date[8] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpriqs9ov2.swift:41:19: error: single-quoted string literal found, use '\"'\n    if date[0] == '0' && date[2] == '0' && date[4] == '0' && date[6] == '0' && date[8] == '0' {\n                  ^~~\n                  \"0\"\n/tmp/tmpriqs9ov2.swift:41:3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Your code here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "tmpzh3i13wy/tmpzh3i13wy.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0261b52c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0261849b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0261849988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02618487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzh3i13wy                        0x000055c141e3f25b <unavailable> + 4699\n5    libc.so.6                          0x00002b0261d3e460 __libc_start_main + 245\n6    tmpzh3i13wy                        0x000055c141e3eee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "tmpurcr8my_/tmpurcr8my_.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7530b9ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7530895b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7530895988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75308947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpurcr8my_                        0x000055f583bf72fb <unavailable> + 4859\n5    libc.so.6                          0x00002b7530d8a460 __libc_start_main + 245\n6    tmpurcr8my_                        0x000055f583bf6ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpblonxke9.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpblonxke9.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpblonxke9.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpblonxke9.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpblonxke9.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpblonxke9.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpblonxke9.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpblonxke9.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpblonxke9.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpblonxke9.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpblonxke9.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpblonxke9.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpblonxke9.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpblonxke9.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpblonxke9.s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    date_arr:= date.split(\"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month:= date_arr[0]\n    day:= date_arr[1]\n    year:= date_arr[2]\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    if !(1 <= int(month) && int(month) <= 12) {\n        return false\n    }\n    if !(1 <= int(day) && int(day) <= 31) {\n        return false\n    }\n    if !(1 <= int(year) && int(year) <= 9999) {\n        return false\n    }\n    if int(month) == 2 {\n        if !(1 <= int(day) && int(day) <= 29) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpfrhmpwhs.swift:20:13: error: consecutive statements on a line must be separated by ';'\n    date_arr:= date.split(\"-\")\n            ^\n            ;\n/tmp/tmpfrhmpwhs.swift:20:13: error: expected expression\n    date_arr:= date.split(\"-\")\n            ^\n/tmp/tmpfrhmpwhs.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month:= date_arr[0]\n         ^\n         ;\n/tmp/tmpfrhmpwhs.swift:24:10: error: expected expression\n    month:= date_arr[0]\n         ^\n/tmp/tmpfrhmpwhs.swift:20:5: error: cannot find 'date_arr' in scope\n    date_arr:= date.split(\"-\")\n    ^~~~~~~~\n/tmp/tmpfrhmpwhs.swift:21:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpfrhmpwhs.swift:21:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpfrhmpwhs.swift:24:5: error: cannot find 'month' in scope\n    month:= date_arr[0]\n    ^~~~~\n/tmp/tmpfrhmpwhs.swift:27:8: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n       ^~~\n/tmp/tmpfrhmpwhs.swift:27:12: error: cannot find 'month' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n           ^~~~~\n/tmp/tmpfrhmpwhs.swift:27:27: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                          ^~~\n/tmp/tmpfrhmpwhs.swift:27:31: error: cannot find 'day' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                              ^~~\n/tmp/tmpfrhmpwhs.swift:27:44: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                           ^~~\n/tmp/tmpfrhmpwhs.swift:27:48: error: cannot find 'year' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                               ^~~~\n/tmp/tmpfrhmpwhs.swift:30:15: error: cannot find 'int' in scope\n    if !(1 <= int(month) && int(month) <= 12) {\n              ^~~\n/tmp/tmpfrhmpwhs.swift:30:19: error: cannot find 'month' in sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpbjjavcy5.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpbjjavcy5.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpbjjavcy5.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpbjjavcy5.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpbjjavcy5.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpbjjavcy5.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpbjjavcy5.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpbjjavcy5.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpbjjavcy5.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpbjjavcy5.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpbjjavcy5.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[0] == \"0\" && date[1] == \"0\" && date[2] == \"0\" && date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" && date[9] == \"0\" {\n        return false\n    }\n    if date[0] == \"1\" && date[1] == \"1\" && date[2] == \"1\" && date[3] == \"1\" && date[4] == \"1\" && date[5] == \"1\" && date[6] == \"1\" && date[7] == \"1\" && date[8] == \"1\" && date[9] == \"1\" {\n        return false\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpuiyeeswa.swift:92:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmpuiyeeswa.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmpuiyeeswa.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpuiyeeswa.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpuiyeeswa.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp4uc3uo7h.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmp4uc3uo7h.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmp4uc3uo7h.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmp4uc3uo7h.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmp4uc3uo7h.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmp4uc3uo7h.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmp4uc3uo7h.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmp4uc3uo7h.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmp4uc3uo7h.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmp4uc3uo7h.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmp4uc3uo7h.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmp4uc3uo7h.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmp4uc3uo7h.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmp4uc3uo7h.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmp4uc3uo7h.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmp4uc3uo7h.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmp4uc3uo7h.swift:42:22: error: cannot find",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date.split(\"-\")\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    month_num, _ := strconv.Atoi(month)\n    day_num, _ := strconv.Atoi(day)\n    year_num, _ := strconv.Atoi(year)\n    \n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    \n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n        if day_num < 1 || day_num > 31 {\n            return false\n        }\n    } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp23c9hei4.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, day, year := date.split(\"-\")\n         ^\n         ;\n/tmp/tmp23c9hei4.swift:24:10: error: expected expression\n    month, day, year := date.split(\"-\")\n         ^\n/tmp/tmp23c9hei4.swift:29:14: error: consecutive statements on a line must be separated by ';'\n    month_num, _ := strconv.Atoi(month)\n             ^\n             ;\n/tmp/tmp23c9hei4.swift:29:14: error: expected expression\n    month_num, _ := strconv.Atoi(month)\n             ^\n/tmp/tmp23c9hei4.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp23c9hei4.swift:24:5: error: cannot find 'month' in scope\n    month, day, year := date.split(\"-\")\n    ^~~~~\n/tmp/tmp23c9hei4.swift:25:8: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n       ^~~\n/tmp/tmp23c9hei4.swift:25:12: error: cannot find 'month' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n           ^~~~~\n/tmp/tmp23c9hei4.swift:25:27: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                          ^~~\n/tmp/tmp23c9hei4.swift:25:31: error: cannot find 'day' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                              ^~~\n/tmp/tmp23c9hei4.swift:25:44: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                           ^~~\n/tmp/tmp23c9hei4.swift:25:48: error: cannot find 'year' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                               ^~~~\n/tmp/tmp23c9hei4.swift:29:5: error: cannot find 'month_num' in scope\n    month_num, _ := strconv.Atoi(month)\n    ^~~~~~~~~\n/tmp/tmp23c9hei4.swift:33:8: error: cannot find 'month_num' in scope\n    if month_num < 1 || month_num > 12 {\n       ^~~~~~~~~\n/tmp/tmp23c9hei4.swift:33:25: error: cannot find 'month_num' in scope\n    if month_num < 1 || month_num > ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        if day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpti9hmas7.swift:24:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpti9hmas7.swift:24:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpti9hmas7.swift:29:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpti9hmas7.swift:29:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpti9hmas7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpti9hmas7.swift:24:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpti9hmas7.swift:25:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpti9hmas7.swift:25:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpti9hmas7.swift:29:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpti9hmas7.swift:33:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpti9hmas7.swift:33:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpti9hmas7.swift:37:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpti9hmas7.swift:37:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpti9hmas7.swift:38:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpti9hmas7.swift:39:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpti9hmas7.swift:39:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpti9hmas7.swift:47:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] != \"0\" {\n        return false\n    }\n    if date[2] != \"-\" {\n        return false\n    }\n    if date[5] != \"-\" {\n        return false\n    }\n    if date[8] != \"-\" {\n        return false\n    }\n    if date[0] == \"0\" {\n        return false\n    }\n    if date[1] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" {\n        return false\n    }\n    if date[4] == \"0\" {\n        return false\n    }\n    if date[6] == \"0\" {\n        return false\n    }\n    if date[7] == \"0\" {\n        return false\n    }\n    if date[9] == \"0\" {\n        return false\n    }\n    if date[1] < \"1\" || date[1] > \"12\" {\n        return false\n    }\n    if date[3] < \"1\" || date[3] > \"31\" {\n        return false\n    }\n    if date[5] < \"1\" || date[5] > \"31\" {\n        return false\n    }\n    if date[7] < \"1\" || date[7] > \"30\" {\n        return false\n    }\n    if date[9] < \"1\" || date[9] > \"29\" {\n        return false\n    }\n    if date[4] < \"1\" || date[4] > \"12\" {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp19slnmlb.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp19slnmlb.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmp19slnmlb.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] != \"0\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp19slnmlb.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp19slnmlb.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[5] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp19slnmlb.swift:35:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[8] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp19slnmlb.swift:38:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] == \"0\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp19slnmlb.swift:41:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] == \"0\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[1] < \"1\" || date[1] > \"12\" {\n        return false\n    }\n    if date[3] < \"1\" || date[3] > \"31\" {\n        return false\n    }\n    if date[5] < \"1\" || date[5] > \"30\" {\n        return false\n    }\n    if date[7] < \"1\" || date[7] > \"29\" {\n        return false\n    }\n    if date[9] < \"1\" || date[9] > \"12\" {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdp36_md7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpdp36_md7.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpdp36_md7.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[4] < \"0\" || date[4] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdp36_md7.swift:32:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpblonxke9.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpblonxke9.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpblonxke9.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpblonxke9.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpblonxke9.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpblonxke9.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpblonxke9.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpblonxke9.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpblonxke9.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpblonxke9.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpblonxke9.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpblonxke9.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpblonxke9.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpblonxke9.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpblonxke9.s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    date = date.toLower()\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[0] == \"0\" && date[2] == \"0\" && date[5] == \"0\" && date[8] == \"0\" {\n        return false\n    }\n    if date[1] < \"1\" || date[1] > \"12\" {\n        return false\n    }\n    if date[3] < \"1\" || date[3] > \"31\" {\n        return false\n    }\n    if date[4] < \"1\" || date[4] > \"30\" {\n        return false\n    }\n    if date[6] < \"1\" || date[6] > \"29\" {\n        return false\n    }\n    if date[7] < \"1\" || date[7] > \"12\" {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp4svva84f.swift:20:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.toLower()\n    ^~~~\n/tmp/tmp4svva84f.swift:20:17: error: value of type 'String' has no member 'toLower'\n    date = date.toLower()\n           ~~~~ ^~~~~~~\n/tmp/tmp4svva84f.swift:21:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp4svva84f.swift:24:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmp4svva84f.swift:27:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4svva84f.swift:27:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4svva84f.swift:30:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4svva84f.swift:30:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4svva84f.swift:33:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[5] < \"0\" || date[5] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 's",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpmj9jea9k.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpmj9jea9k.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpmj9jea9k.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpmj9jea9k.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpmj9jea9k.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpmj9jea9k.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpmj9jea9k.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpmj9jea9k.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpmj9jea9k.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpmj9jea9k.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpmj9jea9k.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1000 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpobiygxu5.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpobiygxu5.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpobiygxu5.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpobiygxu5.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpobiygxu5.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpobiygxu5.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpobiygxu5.swift:32:8: error: cannot find 'month' in scope\n    if month == 2 {\n       ^~~~~\n/tmp/tmpobiygxu5.swift:33:12: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n           ^~~\n/tmp/tmpobiygxu5.swift:33:23: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n                      ^~~\n/tmp/tmpobiygxu5.swift:36:15: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n              ^~~~~\n/tmp/tmpobiygxu5.swift:36:29: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                            ^~~~~\n/tmp/tmpobiygxu5.swift:36:43: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                          ^~~~~\n/tmp/tmpobiygxu5.swift:36:57: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                                        ^~~~~\n/tmp/tmpobiygxu5.swift:36:71: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 ||",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpbjjavcy5.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpbjjavcy5.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpbjjavcy5.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpbjjavcy5.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpbjjavcy5.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpbjjavcy5.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpbjjavcy5.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpbjjavcy5.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpbjjavcy5.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpbjjavcy5.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpbjjavcy5.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpbjjavcy5.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpbjjavcy5.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmps4ji8vh3.swift:97:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmps4ji8vh3.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmps4ji8vh3.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpn0dtfmb0.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpn0dtfmb0.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpn0dtfmb0.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpn0dtfmb0.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpn0dtfmb0.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpn0dtfmb0.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpn0dtfmb0.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpn0dtfmb0.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpn0dtfmb0.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpn0dtfmb0.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpn0dtfmb0.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpn0dtfmb0.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpn0dtfmb0.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpn0dtfmb0.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpn0dtfmb0.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpn0dtfmb0.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpn0dtfmb0.s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[1] > '2' {\n        return false\n    }\n    if date[3] > '5' {\n        return false\n    }\n    if date[5] > '9' {\n        return false\n    }\n    if date[7] > '9' {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpoo3kr_82.swift:26:18: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpoo3kr_82.swift:26:35: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpoo3kr_82.swift:29:18: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpoo3kr_82.swift:29:35: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpoo3kr_82.swift:32:18: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpoo3kr_82.swift:32:35: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpoo3kr_82.swift:35:18: error: single-quoted string literal found, use '\"'\n    if date[6] < '0' || date[6] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpoo3kr_82.swift:35:35: error: single-quoted string literal found, use '\"'\n    if date[6] < '0' || date[6] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpoo3kr_82.swift:38:18: error: single-quoted string literal found, use '\"'\n    if date[8] < '0' || date[8] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpoo3kr_82.swift:38:35: error: single-quoted string literal found, use '\"'\n    if date[8] < '0' || date[8] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpoo3kr_82.swift:41:18: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpoo3kr_82.swift:41:35: error: single-quoted string literal found, use '\"'\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    var month_str, day_str, year_str string\n    month_str, day_str, year_str, err = split_date(date)\n    if err != nil {\n        return false\n    }\n    month, err = to_int(month_str)\n    if err != nil {\n        return false\n    }\n    day, err = to_int(day_str)\n    if err != nil {\n        return false\n    }\n    year, err = to_int(year_str)\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpclslbn1u.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmpclslbn1u.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmpclslbn1u.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmpclslbn1u.swift:24:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmpclslbn1u.swift:24:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmpclslbn1u.swift:24:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmpclslbn1u.swift:25:38: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_str, day_str, year_str string\n                                     ^\n/tmp/tmpclslbn1u.swift:25:38: note: join the identifiers together\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strstring\n/tmp/tmpclslbn1u.swift:25:38: note: join the identifiers together with camel-case\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strString\n/tmp/tmpclslbn1u.swift:26:14: error: consecutive statements on a line must be separated by ';'\n    month_str, day_str, year_str, err = split_date(date)\n             ^\n             ;\n/tmp/tmpclslbn1u.swift:26:14: error: expected expression\n    month_str, day_str, year_str, err = split_date(date)\n             ^\n/tmp/tmpclslbn1u.swift:30:10: error: consecutive statements on a line must be separated by ';'\n    month, err = to_int(month_str)\n         ^\n         ;\n/tmp/tmpclslbn1u.swift:30:10: error: exp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var err error\n    month, day, year, err = parse_date(date)\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpo5my2lmp.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmpo5my2lmp.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmpo5my2lmp.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmpo5my2lmp.swift:24:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmpo5my2lmp.swift:24:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmpo5my2lmp.swift:24:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmpo5my2lmp.swift:25:10: error: consecutive statements on a line must be separated by ';'\n    month, day, year, err = parse_date(date)\n         ^\n         ;\n/tmp/tmpo5my2lmp.swift:25:10: error: expected expression\n    month, day, year, err = parse_date(date)\n         ^\n/tmp/tmpo5my2lmp.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpo5my2lmp.swift:23:9: error: type annotation missing in pattern\n    var month, day, year int\n        ^\n/tmp/tmpo5my2lmp.swift:23:16: error: type annotation missing in pattern\n    var month, day, year int\n               ^\n/tmp/tmpo5my2lmp.swift:23:21: error: type annotation missing in pattern\n    var month, day, year int\n                    ^\n/tmp/tmpo5my2lmp.swift:24:9: error: type annotation missing in pattern\n    var err error\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"/\", \"\")\n    date = date.replace(\" \", \"\")\n    date = date.replace(\".\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\")\n    date = date.replace(\"-\", \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpie_bnc9l.swift:62:30: error: unterminated string literal\n    date = date.replace(\"-\", \"\n                             ^\n/tmp/tmpie_bnc9l.swift:20:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\"-\", \"\")\n    ^~~~\n/tmp/tmpie_bnc9l.swift:20:17: error: cannot assign value of type '()' to type 'String'\n    date = date.replace(\"-\", \"\")\n           ~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpie_bnc9l.swift:20:24: error: missing argument label 'with:' in call\n    date = date.replace(\"-\", \"\")\n                       ^\n                             with: \n/tmp/tmpie_bnc9l.swift:20:17: error: cannot use mutating member on immutable value: 'date' is a 'let' constant\n    date = date.replace(\"-\", \"\")\n           ~~~~ ^\n/tmp/tmpie_bnc9l.swift:21:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\"/\", \"\")\n    ^~~~\n/tmp/tmpie_bnc9l.swift:21:17: error: cannot assign value of type '()' to type 'String'\n    date = date.replace(\"/\", \"\")\n           ~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpie_bnc9l.swift:21:17: error: cannot use mutating member on immutable value: 'date' is a 'let' constant\n    date = date.replace(\"/\", \"\")\n           ~~~~ ^\n/tmp/tmpie_bnc9l.swift:21:24: error: missing argument label 'with:' in call\n    date = date.replace(\"/\", \"\")\n                       ^\n                             with: \n/tmp/tmpie_bnc9l.swift:22:5: error: cannot assign to value: 'date' is a 'let' constant\n    date = date.replace(\" \", \"\")\n    ^~~~\n/tmp/tmpie_bnc9l.swift:22:17: error: cannot assign value of type '()' to type 'String'\n    date = date.replace(\" \", \"\")\n           ~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpie_bnc9l.swift:22:24: error: missing argument label 'with:' in call\n    date = date.replace(\" \", \"\")\n                       ^\n                             with: \n/tmp/tmpie_bnc9l.swift:22:17: error: cannot use mutating member on immutable value: 'date' is a 'let' constant\n    date = date.replace(\" \", \"\")\n           ~~~~ ^\n/tmp/tmpie_bnc9l.swift:23:5: error: cannot assign to value: 'date' is a 'let' c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month: Int\n    var day: Int\n    var year: Int\n    var valid: Bool\n    var date_str: String\n    var i: Int\n    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n    var o: Int\n    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n    var t: Int\n    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n    var y: Int\n    var z: Int\n    var _: Int\n    var _1: Int\n    var _2: Int\n    var _3: Int\n    var _4: Int\n    var _5: Int\n    var _6: Int\n    var _7: Int\n    var _8: Int\n    var _9: Int\n    var _10: Int\n    var _11: Int\n    var _12: Int\n    var _13: Int\n    var _14: Int\n    var _15: Int\n    var _16: Int\n    var _17: Int\n    var _18: Int\n    var _19: Int\n    var _20: Int\n    var _21: Int\n    var _22: Int\n    var _23: Int\n    var _24: Int\n    var _25: Int\n    var _26: Int\n    var _27: Int\n    var _28: Int\n    var _29: Int\n    var _30: Int\n    var _31: Int\n    var _32: Int\n    var _33: Int\n    var _34: Int\n    var _35: Int\n    var _36: Int\n    var _37: Int\n    var _38: Int\n    var _39: Int\n    var _40: Int\n    var _41: Int\n    var _42: Int\n    var _43: Int\n    var _44: Int\n    var _45: Int\n    var _46: Int\n    var _47: Int\n    var _48: Int\n    var _49: Int\n    var _50: Int\n    var _51: Int\n    var _52: Int\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmptb5qz_88.swift:20:9: warning: variable 'month' was never used; consider replacing with '_' or removing it\n    var month: Int\n        ^~~~~\n        _\n/tmp/tmptb5qz_88.swift:21:9: warning: variable 'day' was never used; consider replacing with '_' or removing it\n    var day: Int\n        ^~~\n        _\n/tmp/tmptb5qz_88.swift:22:9: warning: variable 'year' was never used; consider replacing with '_' or removing it\n    var year: Int\n        ^~~~\n        _\n/tmp/tmptb5qz_88.swift:23:9: warning: variable 'valid' was never used; consider replacing with '_' or removing it\n    var valid: Bool\n        ^~~~~\n        _\n/tmp/tmptb5qz_88.swift:24:9: warning: variable 'date_str' was never used; consider replacing with '_' or removing it\n    var date_str: String\n        ^~~~~~~~\n        _\n/tmp/tmptb5qz_88.swift:25:9: warning: variable 'i' was never used; consider replacing with '_' or removing it\n    var i: Int\n        ^\n        _\n/tmp/tmptb5qz_88.swift:26:9: warning: variable 'j' was never used; consider replacing with '_' or removing it\n    var j: Int\n        ^\n        _\n/tmp/tmptb5qz_88.swift:27:9: warning: variable 'k' was never used; consider replacing with '_' or removing it\n    var k: Int\n        ^\n        _\n/tmp/tmptb5qz_88.swift:28:9: warning: variable 'l' was never used; consider replacing with '_' or removing it\n    var l: Int\n        ^\n        _\n/tmp/tmptb5qz_88.swift:29:9: warning: variable 'm' was never used; consider replacing with '_' or removing it\n    var m: Int\n        ^\n        _\n/tmp/tmptb5qz_88.swift:30:9: warning: variable 'n' was never used; consider replacing with '_' or removing it\n    var n: Int\n        ^\n        _\n/tmp/tmptb5qz_88.swift:31:9: warning: variable 'o' was never used; consider replacing with '_' or removing it\n    var o: Int\n        ^\n        _\n/tmp/tmptb5qz_88.swift:32:9: warning: variable 'p' was never used; consider replacing with '_' or removing it\n    var p: Int\n        ^\n        _\n/tmp/tmptb5qz_88.swift:33:9: warning: variable 'q' was never used; consider replacing with '_' or r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] != \"0\" {\n        return false\n    }\n    if date[2] != \"-\" {\n        return false\n    }\n    if date[5] != \"-\" {\n        return false\n    }\n    if date[8] != \"-\" {\n        return false\n    }\n    if date[1] < 1 || date[1] > 12 {\n        return false\n    }\n    if date[3] < 1 || date[3] > 31 {\n        return false\n    }\n    if date[4] < 1 || date[4] > 30 {\n        return false\n    }\n    if date[6] < 1 || date[6] > 29 {\n        return false\n    }\n    if date[7] < 1 || date[7] > 12 {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpiyg_iar7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpiyg_iar7.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpiyg_iar7.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] != \"0\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiyg_iar7.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiyg_iar7.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[5] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiyg_iar7.swift:35:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[8] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiyg_iar7.swift:38:16: error: binary operator '<' cannot be applied to operands of type 'Character' and 'Int'\n    if date[1] < 1 || date[1] > 12 {\n       ~~~~~~~ ^ ~\n/tmp/tmpiyg_iar7.swift:38:16: note: overloads for '<' exist with these partially matching parameter lists: (Character, Character), (Int, Int)\n    if date[1] < 1 || date[1] > 12 {\n               ^\n/tmp/tmpiyg_iar7.swift:38:27: error: cannot convert value of type 'Character' to expected argument type 'Int'\n    if date[1] < 1 || date[1] > 12 {\n                          ^\n/tmp/tmpiyg_iar7.swift:41:1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpwjteuybr.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpwjteuybr.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpwjteuybr.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpwjteuybr.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpwjteuybr.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpwjteuybr.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpwjteuybr.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpwjteuybr.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpwjteuybr.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpwjteuybr.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpwjteuybr.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpwjteuybr.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpwjteuybr.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpwjteuybr.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpwjteuybr.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpwjteuybr.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpwjteuybr.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_arr := strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_arr[0])\n    day, _ := strconv.Atoi(date_arr[1])\n    year, _ := strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdtie2vdy.swift:23:13: error: consecutive statements on a line must be separated by ';'\n    date_arr := strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpdtie2vdy.swift:23:14: error: expected expression\n    date_arr := strings.Split(date, \"-\")\n             ^\n/tmp/tmpdtie2vdy.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpdtie2vdy.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpdtie2vdy.swift:23:5: error: cannot find 'date_arr' in scope\n    date_arr := strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpdtie2vdy.swift:24:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpdtie2vdy.swift:24:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpdtie2vdy.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_arr[0])\n    ^~~~~\n/tmp/tmpdtie2vdy.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpdtie2vdy.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpdtie2vdy.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpdtie2vdy.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpdtie2vdy.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpdtie2vdy.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpdtie2vdy.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpdtie2vdy.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpdtie2vdy.swift:42:22: error: cannot find",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpmj9jea9k.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpmj9jea9k.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpmj9jea9k.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpmj9jea9k.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpmj9jea9k.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpmj9jea9k.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpmj9jea9k.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpmj9jea9k.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpmj9jea9k.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpmj9jea9k.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpmj9jea9k.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    date_arr:=strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month:=strings.ToInt(date_arr[0])\n    day:=strings.ToInt(date_arr[1])\n    year:=strings.ToInt(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 31 {\n            return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpe8wme4d3.swift:20:13: error: consecutive statements on a line must be separated by ';'\n    date_arr:=strings.Split(date, \"-\")\n            ^\n            ;\n/tmp/tmpe8wme4d3.swift:20:13: error: expected expression\n    date_arr:=strings.Split(date, \"-\")\n            ^\n/tmp/tmpe8wme4d3.swift:20:14: error: '=' must have consistent whitespace on both sides\n    date_arr:=strings.Split(date, \"-\")\n             ^\n               \n/tmp/tmpe8wme4d3.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month:=strings.ToInt(date_arr[0])\n         ^\n         ;\n/tmp/tmpe8wme4d3.swift:24:10: error: expected expression\n    month:=strings.ToInt(date_arr[0])\n         ^\n/tmp/tmpe8wme4d3.swift:24:11: error: '=' must have consistent whitespace on both sides\n    month:=strings.ToInt(date_arr[0])\n          ^\n            \n/tmp/tmpe8wme4d3.swift:25:9: error: '=' must have consistent whitespace on both sides\n    day:=strings.ToInt(date_arr[1])\n        ^\n          \n/tmp/tmpe8wme4d3.swift:26:10: error: '=' must have consistent whitespace on both sides\n    year:=strings.ToInt(date_arr[2])\n         ^\n           \n/tmp/tmpe8wme4d3.swift:20:5: error: cannot find 'date_arr' in scope\n    date_arr:=strings.Split(date, \"-\")\n    ^~~~~~~~\n/tmp/tmpe8wme4d3.swift:21:8: error: cannot find 'len' in scope\n    if len(date_arr) != 3 {\n       ^~~\n/tmp/tmpe8wme4d3.swift:21:12: error: cannot find 'date_arr' in scope\n    if len(date_arr) != 3 {\n           ^~~~~~~~\n/tmp/tmpe8wme4d3.swift:24:5: error: cannot find 'month' in scope\n    month:=strings.ToInt(date_arr[0])\n    ^~~~~\n/tmp/tmpe8wme4d3.swift:27:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpe8wme4d3.swift:27:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpe8wme4d3.swift:30:8: error: cannot find 'month' in scope\n    if month == 2 {\n       ^~~~~\n/tmp/tmpe8wme4d3.swift:31:12: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n           ^~~\n/tmp/tmpe8wme4d3.swi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, day, year := date.split(\"-\")\n    \n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    \n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpvuznotdu.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, day, year := date.split(\"-\")\n         ^\n         ;\n/tmp/tmpvuznotdu.swift:24:10: error: expected expression\n    month, day, year := date.split(\"-\")\n         ^\n/tmp/tmpvuznotdu.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpvuznotdu.swift:24:5: error: cannot find 'month' in scope\n    month, day, year := date.split(\"-\")\n    ^~~~~\n/tmp/tmpvuznotdu.swift:26:8: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n       ^~~\n/tmp/tmpvuznotdu.swift:26:12: error: cannot find 'month' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n           ^~~~~\n/tmp/tmpvuznotdu.swift:26:27: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                          ^~~\n/tmp/tmpvuznotdu.swift:26:31: error: cannot find 'day' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                              ^~~\n/tmp/tmpvuznotdu.swift:26:44: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                           ^~~\n/tmp/tmpvuznotdu.swift:26:48: error: cannot find 'year' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                               ^~~~\n/tmp/tmpvuznotdu.swift:30:9: error: cannot find 'is_valid_month' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n        ^~~~~~~~~~~~~~\n/tmp/tmpvuznotdu.swift:30:24: error: cannot find 'month' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n                       ^~~~~\n/tmp/tmpvuznotdu.swift:30:35: error: cannot find 'is_valid_day' in scope\n    if !is_valid_month(month) || !is_valid_day(day) || !is_valid_year(year) {\n                                  ^~~~~~~~~~~~\n/tmp/tmpvuznotdu.swift:30:48: error: cannot find 'day' in scope\n    if !is_valid_month(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    var month, day, year int\n    var valid_month, valid_day, valid_year bool\n    var valid_date bool\n    var date_arr = strings.Split(date, \"-\")\n    if len(date_arr) != 3 {\n        return false\n    }\n    month, _ = strconv.Atoi(date_arr[0])\n    day, _ = strconv.Atoi(date_arr[1])\n    year, _ = strconv.Atoi(date_arr[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    valid_month = (month >= 1 && month <= 12)\n    valid_day = (day >= 1 && day <= 31)\n    valid_year = (year >= 1900 && year <= 2099)\n    valid_date = valid_month && valid_day && valid_year\n    return valid_date\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpu_le8x06.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmpu_le8x06.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmpu_le8x06.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmpu_le8x06.swift:24:44: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_month, valid_day, valid_year bool\n                                           ^\n/tmp/tmpu_le8x06.swift:24:44: note: join the identifiers together\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearbool\n/tmp/tmpu_le8x06.swift:24:44: note: join the identifiers together with camel-case\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearBool\n/tmp/tmpu_le8x06.swift:25:20: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_date bool\n                   ^\n/tmp/tmpu_le8x06.swift:25:20: note: join the identifiers together\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_datebool\n/tmp/tmpu_le8x06.swift:25:20: note: join the identifiers together with camel-case\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_dateBool\n/tmp/tmpu_le8x06.swift:30:10: error: consecutive statements on a line must be separated by ';'\n    month, _ = strconv.Atoi(date_arr[0])\n         ^\n         ;\n/tmp/tmpu_le8x06.swift:30:10: error: expected expression\n    month, _ = strconv.Atoi(date_arr[0])\n         ^\n/tmp/tmpu_le8x06.swift:23:9: error: type annotation missing in pattern\n    var month, day, year int\n        ^\n/tmp/tmpu_le8x06.swift:23:16: error: type a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpmj9jea9k.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpmj9jea9k.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpmj9jea9k.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpmj9jea9k.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpmj9jea9k.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpmj9jea9k.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpmj9jea9k.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpmj9jea9k.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpmj9jea9k.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpmj9jea9k.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpmj9jea9k.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpi_hqcke0.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpi_hqcke0.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpi_hqcke0.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpi_hqcke0.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpi_hqcke0.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpi_hqcke0.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpi_hqcke0.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpi_hqcke0.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpi_hqcke0.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpi_hqcke0.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpi_hqcke0.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpi_hqcke0.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpi_hqcke0.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpi_hqcke0.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpi_hqcke0.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpm8_45q_3.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpm8_45q_3.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpm8_45q_3.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpm8_45q_3.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpm8_45q_3.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpm8_45q_3.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpm8_45q_3.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpm8_45q_3.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpm8_45q_3.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpm8_45q_3.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpm8_45q_3.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpm8_45q_3.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpm8_45q_3.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpm8_45q_3.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpm8_45q_3.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpm8_45q_3.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpm8_45q_3.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var valid_month, valid_day, valid_year bool\n    var valid_date = true\n    var date_array = strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ = strconv.Atoi(date_array[0])\n    day, _ = strconv.Atoi(date_array[1])\n    year, _ = strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        valid_month = false\n    }\n    if day < 1 || day > 31 {\n        valid_day = false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            valid_day = false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 30 {\n            valid_day = false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 29 {\n            valid_day = false\n        }\n    }\n    if year < 1000 || year > 9999 {\n        valid_year = false\n    }\n    if !valid_month || !valid_day || !valid_year {\n        valid_date = false\n    }\n    return valid_date\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp86vxw5ad.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmp86vxw5ad.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmp86vxw5ad.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmp86vxw5ad.swift:24:44: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_month, valid_day, valid_year bool\n                                           ^\n/tmp/tmp86vxw5ad.swift:24:44: note: join the identifiers together\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearbool\n/tmp/tmp86vxw5ad.swift:24:44: note: join the identifiers together with camel-case\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearBool\n/tmp/tmp86vxw5ad.swift:30:10: error: consecutive statements on a line must be separated by ';'\n    month, _ = strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmp86vxw5ad.swift:30:10: error: expected expression\n    month, _ = strconv.Atoi(date_array[0])\n         ^\n/tmp/tmp86vxw5ad.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmp86vxw5ad.swift:23:9: error: type annotation missing in pattern\n    var month, day, year int\n        ^\n/tmp/tmp86vxw5ad.swift:23:16: error: type annotation missing in pattern\n    var month, day, year int\n               ^\n/tmp/tmp86vxw5ad.swift:23:21: error: type annotation missing in pattern\n    var month, day, year int\n                    ^\n/tmp/tmp86vxw5ad.swift:24:9: error: type annotation missing in pattern\n    var valid_month, valid_day, valid_year bool\n        ^\n/tmp/tmp86vxw5ad.swift:24:22: error:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date.split(\"-\")\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month = int(month[0]) - 1\n    day = int(day[0]) - 1\n    year = int(year[0:4])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpg0fymxb2.swift:23:10: error: consecutive statements on a line must be separated by ';'\n    month, day, year := date.split(\"-\")\n         ^\n         ;\n/tmp/tmpg0fymxb2.swift:23:10: error: expected expression\n    month, day, year := date.split(\"-\")\n         ^\n/tmp/tmpg0fymxb2.swift:29:22: error: expected ',' separator\n    year = int(year[0:4])\n                     ^\n                     ,\n/tmp/tmpg0fymxb2.swift:29:22: error: expected expression in list of expressions\n    year = int(year[0:4])\n                     ^\n/tmp/tmpg0fymxb2.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpg0fymxb2.swift:23:5: error: cannot find 'month' in scope\n    month, day, year := date.split(\"-\")\n    ^~~~~\n/tmp/tmpg0fymxb2.swift:24:8: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n       ^~~\n/tmp/tmpg0fymxb2.swift:24:12: error: cannot find 'month' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n           ^~~~~\n/tmp/tmpg0fymxb2.swift:24:27: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                          ^~~\n/tmp/tmpg0fymxb2.swift:24:31: error: cannot find 'day' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                              ^~~\n/tmp/tmpg0fymxb2.swift:24:44: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                           ^~~\n/tmp/tmpg0fymxb2.swift:24:48: error: cannot find 'year' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                               ^~~~\n/tmp/tmpg0fymxb2.swift:27:5: error: cannot find 'month' in scope\n    month = int(month[0]) - 1\n    ^~~~~\n/tmp/tmpg0fymxb2.swift:27:13: error: cannot find 'int' in scope\n    month = int(month[0]) - 1\n            ^~~\n/tmp/tmpg0fymxb2.swift:27:17: error: cannot find 'month' in scope\n    month = int(month[0]) - 1\n                ^~~~~\n/tmp/tmpg0fymxb2.swift:28:5: error: can",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpblonxke9.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpblonxke9.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpblonxke9.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpblonxke9.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpblonxke9.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpblonxke9.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpblonxke9.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpblonxke9.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpblonxke9.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpblonxke9.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpblonxke9.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpblonxke9.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpblonxke9.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpblonxke9.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpblonxke9.s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if date == \"\" {\n        return false\n    }\n    date_array := strings.Split(date, \"-\")\n    if len(date_array) != 3 {\n        return false\n    }\n    month, _ := strconv.Atoi(date_array[0])\n    day, _ := strconv.Atoi(date_array[1])\n    year, _ := strconv.Atoi(date_array[2])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpblonxke9.swift:23:15: error: consecutive statements on a line must be separated by ';'\n    date_array := strings.Split(date, \"-\")\n              ^\n              ;\n/tmp/tmpblonxke9.swift:23:16: error: expected expression\n    date_array := strings.Split(date, \"-\")\n               ^\n/tmp/tmpblonxke9.swift:27:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n         ;\n/tmp/tmpblonxke9.swift:27:10: error: expected expression\n    month, _ := strconv.Atoi(date_array[0])\n         ^\n/tmp/tmpblonxke9.swift:23:5: error: cannot find 'date_array' in scope\n    date_array := strings.Split(date, \"-\")\n    ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:24:8: error: cannot find 'len' in scope\n    if len(date_array) != 3 {\n       ^~~\n/tmp/tmpblonxke9.swift:24:12: error: cannot find 'date_array' in scope\n    if len(date_array) != 3 {\n           ^~~~~~~~~~\n/tmp/tmpblonxke9.swift:27:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date_array[0])\n    ^~~~~\n/tmp/tmpblonxke9.swift:30:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpblonxke9.swift:30:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpblonxke9.swift:33:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpblonxke9.swift:33:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpblonxke9.swift:34:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpblonxke9.swift:35:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpblonxke9.swift:35:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpblonxke9.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpblonxke9.s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmps4ji8vh3.swift:97:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmps4ji8vh3.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmps4ji8vh3.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month: Int = 0\n    var day: Int = 0\n    var year: Int = 0\n    var valid: Bool = true\n\n    if len(date) == 0 {\n        valid = false\n    } else {\n        var date_array: [4]String = date.split(\"-\")\n\n        if len(date_array) != 3 {\n            valid = false\n        } else {\n            month = toInt(date_array[0])\n            day = toInt(date_array[1])\n            year = toInt(date_array[2])\n\n            if month < 1 || month > 12 {\n                valid = false\n            } else if month == 2 {\n                if day < 1 || day > 29 {\n                    valid = false\n                }\n            } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                if day < 1 || day > 31 {\n                    valid = false\n                }\n            } else if month == 4 || month == 6 || month == 9 || month == 11 {\n                if day < 1 || day > 30 {\n                    valid = false\n                }\n            }\n        }\n    }\n\n    return valid\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpo8s7aw1e.swift:28:26: error: expected element type\n        var date_array: [4]String = date.split(\"-\")\n                         ^\n/tmp/tmpo8s7aw1e.swift:28:26: error: expected ']' in array type\n        var date_array: [4]String = date.split(\"-\")\n                         ^\n/tmp/tmpo8s7aw1e.swift:28:25: note: to match this opening '['\n        var date_array: [4]String = date.split(\"-\")\n                        ^\n/tmp/tmpo8s7aw1e.swift:28:26: error: consecutive statements on a line must be separated by ';'\n        var date_array: [4]String = date.split(\"-\")\n                         ^\n                         ;\n/tmp/tmpo8s7aw1e.swift:28:27: error: consecutive statements on a line must be separated by ';'\n        var date_array: [4]String = date.split(\"-\")\n                          ^\n                          ;\n/tmp/tmpo8s7aw1e.swift:28:27: error: expected expression\n        var date_array: [4]String = date.split(\"-\")\n                          ^\n/tmp/tmpo8s7aw1e.swift:25:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpo8s7aw1e.swift:28:26: warning: integer literal is unused\n        var date_array: [4]String = date.split(\"-\")\n                         ^\n/tmp/tmpo8s7aw1e.swift:30:12: error: cannot find 'len' in scope\n        if len(date_array) != 3 {\n           ^~~\n/tmp/tmpo8s7aw1e.swift:33:21: error: cannot find 'toInt' in scope\n            month = toInt(date_array[0])\n                    ^~~~~\n/tmp/tmpo8s7aw1e.swift:34:19: error: cannot find 'toInt' in scope\n            day = toInt(date_array[1])\n                  ^~~~~\n/tmp/tmpo8s7aw1e.swift:35:20: error: cannot find 'toInt' in scope\n            year = toInt(date_array[2])\n                   ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Your code here\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "tmpfoz2vl8s/tmpfoz2vl8s.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a6b84fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a6b546b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a6b546988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a6b5457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfoz2vl8s                        0x000055b8046102fb <unavailable> + 4859\n5    libc.so.6                          0x00002b2a6ba3b460 __libc_start_main + 245\n6    tmpfoz2vl8s                        0x000055b80460fee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "tmpurcr8my_/tmpurcr8my_.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7530b9ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7530895b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7530895988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75308947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpurcr8my_                        0x000055f583bf72fb <unavailable> + 4859\n5    libc.so.6                          0x00002b7530d8a460 __libc_start_main + 245\n6    tmpurcr8my_                        0x000055f583bf6ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmps4ji8vh3.swift:97:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmps4ji8vh3.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmps4ji8vh3.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] != \"0\" {\n        return false\n    }\n    if date[2] != \"-\" {\n        return false\n    }\n    if date[5] != \"-\" {\n        return false\n    }\n    if date[8] != \"-\" {\n        return false\n    }\n    if date[1] < \"1\" || date[1] > \"12\" {\n        return false\n    }\n    if date[3] < \"1\" || date[3] > \"31\" {\n        return false\n    }\n    if date[4] < \"1\" || date[4] > \"30\" {\n        return false\n    }\n    if date[6] < \"1\" || date[6] > \"29\" {\n        return false\n    }\n    if date[7] < \"1\" || date[7] > \"31\" {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpedj_rue9.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpedj_rue9.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpedj_rue9.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] != \"0\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpedj_rue9.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpedj_rue9.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[5] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpedj_rue9.swift:35:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[8] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpedj_rue9.swift:38:30: error: cannot convert value of type 'Int' to expected argument type 'Range<String.Index>'\n    if date[1] < \"1\" || date[1] > \"12\" {\n                             ^\n/tmp/tmpedj_rue9.swift:41:30: error: cannot convert value of type 'Int' to expected argument type 'Range<String.Index>'\n    if date[3] < \"1\" || date[3] > \"31\" {\n                             ^\n/tmp/tmpedj_rue9.swift:44:30: error: cannot convert value of type 'Int' to expected argument type 'Range<String.Index>'\n    if date[4] < \"1\" || date[4] > \"30\" {\n                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:3])\n    day, _ := strconv.Atoi(date[3:6])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1000 || year > 9999 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpmz77rgpm.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:3])\n         ^\n         ;\n/tmp/tmpmz77rgpm.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:3])\n         ^\n/tmp/tmpmz77rgpm.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpmz77rgpm.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:3])\n    ^~~~~\n/tmp/tmpmz77rgpm.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpmz77rgpm.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpmz77rgpm.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpmz77rgpm.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpmz77rgpm.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpmz77rgpm.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpmz77rgpm.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpmz77rgpm.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpmz77rgpm.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpmz77rgpm.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpmz77rgpm.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] != \"0\" {\n        return false\n    }\n    if date[2] != \"-\" {\n        return false\n    }\n    if date[5] != \"-\" {\n        return false\n    }\n    if date[8] != \"-\" {\n        return false\n    }\n    if date[1] < 1 || date[1] > 12 {\n        return false\n    }\n    if date[3] < 1 || date[3] > 31 {\n        return false\n    }\n    if date[4] < 1 || date[4] > 30 {\n        return false\n    }\n    if date[6] < 1 || date[6] > 29 {\n        return false\n    }\n    if date[7] < 1 || date[7] > 12 {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpiyg_iar7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpiyg_iar7.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpiyg_iar7.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] != \"0\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiyg_iar7.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiyg_iar7.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[5] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiyg_iar7.swift:35:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[8] != \"-\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiyg_iar7.swift:38:16: error: binary operator '<' cannot be applied to operands of type 'Character' and 'Int'\n    if date[1] < 1 || date[1] > 12 {\n       ~~~~~~~ ^ ~\n/tmp/tmpiyg_iar7.swift:38:16: note: overloads for '<' exist with these partially matching parameter lists: (Character, Character), (Int, Int)\n    if date[1] < 1 || date[1] > 12 {\n               ^\n/tmp/tmpiyg_iar7.swift:38:27: error: cannot convert value of type 'Character' to expected argument type 'Int'\n    if date[1] < 1 || date[1] > 12 {\n                          ^\n/tmp/tmpiyg_iar7.swift:41:1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" && date[9] == \"0\" {\n        return false\n    }\n    if date[3] == \"1\" && date[4] == \"1\" && date[5] == \"1\" && date[6] == \"1\" && date[7] == \"1\" && date[8] == \"1\" && date[9] == \"1\" {\n        return false\n    }\n    if date[3] == \"2\" && date[4] == \"2\" && date[5] == \"2\" && date[6] == \"2\" && date[7] == \"2\" && date[8] ==\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpc260es2n.swift:63:1: error: expected expression after operator\n}\n^\n/tmp/tmpc260es2n.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpc260es2n.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpc260es2n.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc260es2n.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc260es2n.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc260es2n.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc260es2n.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc260es2n.swift:32:25: error: 'subscript(_:)' is unav",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[0] > \"2\" {\n        if date[1] > \"0\" || date[1] < \"1\" {\n            return false\n        }\n        if date[2] > \"0\" || date[2] < \"1\" {\n            return false\n        }\n        if date[3] > \"0\" || date[3] < \"1\" {\n            return false\n        }\n        if date[4] > \"0\" || date[4] < \"1\" {\n            return false\n        }\n        if date[5] > \"0\" || date[5] < \"1\" {\n            return false\n        }\n        if date[6] > \"0\" || date[6] < \"1\" {\n            return false\n        }\n        if date[7] > \"0\" || date[7] < \"1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpth0f434w.swift:75:39: error: unterminated string literal\n        if date[7] > \"0\" || date[7] < \"1\n                                      ^\n/tmp/tmpth0f434w.swift:106:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmpth0f434w.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmpth0f434w.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpth0f434w.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpth0f434w.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpth0f434w.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpth0f434w.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpth0f434w.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpth0f434",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" {\n        return false\n    }\n    if date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmps4ji8vh3.swift:97:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmps4ji8vh3.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmps4ji8vh3.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmps4ji8vh3.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps4ji8vh3.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    date = date.toLower()\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[4] != '-' {\n        return false\n    }\n    if date[7] != '-' {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[10] < '0' || date[10] > '9' {\n        return false\n    }\n    if date[0] > '2' {\n        return false\n    }\n    if date[1] > '9' {\n        return false\n    }\n    if date[2] > '9' {\n        return false\n    }\n    if date[3] > '9' {\n        return false\n    }\n    if date[5] > '9' {\n        return false\n    }\n    if date[6] > '9' {\n        return false\n    }\n    if date[8] > '9' {\n        return false\n    }\n    if date[9] > '9' {\n        return false\n    }\n    if date[10] > '9' {\n        return false\n    }\n    if date[1] > '2'\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmpl5_yknek.swift:27:19: error: single-quoted string literal found, use '\"'\n    if date[4] != '-' {\n                  ^~~\n                  \"-\"\n/tmp/tmpl5_yknek.swift:30:19: error: single-quoted string literal found, use '\"'\n    if date[7] != '-' {\n                  ^~~\n                  \"-\"\n/tmp/tmpl5_yknek.swift:33:18: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpl5_yknek.swift:33:35: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpl5_yknek.swift:36:18: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpl5_yknek.swift:36:35: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpl5_yknek.swift:39:18: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpl5_yknek.swift:39:35: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpl5_yknek.swift:42:18: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpl5_yknek.swift:42:35: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpl5_yknek.swift:45:18: error: single-quoted string literal found, use '\"'\n    if date[5] < '0' || date[5] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpl5_yknek.swift:45:35: error: single-quoted string literal found, use '\"'\n    if date[5] < '0' || date[5] > '9' {\n                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if day < 1 || day > 31 {\n        if month == 2 {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    \n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpmj9jea9k.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpmj9jea9k.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpmj9jea9k.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpmj9jea9k.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpmj9jea9k.swift:32:8: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n       ^~~\n/tmp/tmpmj9jea9k.swift:32:19: error: cannot find 'day' in scope\n    if day < 1 || day > 31 {\n                  ^~~\n/tmp/tmpmj9jea9k.swift:33:12: error: cannot find 'month' in scope\n        if month == 2 {\n           ^~~~~\n/tmp/tmpmj9jea9k.swift:34:16: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n               ^~~\n/tmp/tmpmj9jea9k.swift:34:27: error: cannot find 'day' in scope\n            if day < 1 || day > 29 {\n                          ^~~\n/tmp/tmpmj9jea9k.swift:42:8: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n       ^~~~~\n/tmp/tmpmj9jea9k.swift:42:22: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                     ^~~~~\n/tmp/tmpmj9jea9k.swift:42:36: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                   ^~~~~\n/tmp/tmpmj9jea9k.swift:42:50: error: cannot find 'month' in scope\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || mont",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[3] > \"2\" {\n        return false\n    }\n    if date[4] > \"5\" {\n        return false\n    }\n    if date[5] > \"9\" {\n        return false\n    }\n    if date[6] > \"9\" {\n        return false\n    }\n    if date[7] > \"9\" {\n        return false\n    }\n    if date[8] > \"9\" {\n        return false\n    }\n    if date[9] > \"9\" {\n        return false\n    }\n    if date[3] > \"1\" {\n        return false\n    }\n    if date[4] > \"1\" {\n        return false\n    }\n    if date[5] > \"1\" {\n        return false\n    }\n    if date[6] > \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmpz4g188dr.swift:86:18: error: unterminated string literal\n    if date[6] > \"\n                 ^\n/tmp/tmpz4g188dr.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpz4g188dr.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpz4g188dr.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpz4g188dr.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpz4g188dr.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpz4g188dr.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpz4g188dr.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[2] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpz4g188dr.swift:32:25: er",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < \"0\" || date[0] > \"9\" {\n        return false\n    }\n    if date[1] < \"0\" || date[1] > \"9\" {\n        return false\n    }\n    if date[2] < \"0\" || date[2] > \"9\" {\n        return false\n    }\n    if date[3] < \"0\" || date[3] > \"9\" {\n        return false\n    }\n    if date[4] < \"0\" || date[4] > \"9\" {\n        return false\n    }\n    if date[5] < \"0\" || date[5] > \"9\" {\n        return false\n    }\n    if date[6] < \"0\" || date[6] > \"9\" {\n        return false\n    }\n    if date[7] < \"0\" || date[7] > \"9\" {\n        return false\n    }\n    if date[8] < \"0\" || date[8] > \"9\" {\n        return false\n    }\n    if date[9] < \"0\" || date[9] > \"9\" {\n        return false\n    }\n    if date[0] == \"0\" && date[1] == \"0\" && date[2] == \"0\" && date[3] == \"0\" && date[4] == \"0\" && date[5] == \"0\" && date[6] == \"0\" && date[7] == \"0\" && date[8] == \"0\" && date[9] == \"0\" {\n        return false\n    }\n    if date[0] == \"1\" && date[1] == \"1\" && date[2] == \"1\" && date[3] == \"1\" && date[4] == \"1\" && date[5] == \"1\" && date[6] == \"1\" && date[7] == \"1\" && date[8] == \"1\" && date[9] == \"1\" {\n        return false\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpuiyeeswa.swift:92:45: error: expected '}' at end of brace statement\nassert(valid_date(date: \"04-2003\") == false)\n                                            ^\n/tmp/tmpuiyeeswa.swift:19:39: note: to match this opening '{'\nfunc valid_date(date: String) -> Bool {\n                                      ^\n/tmp/tmpuiyeeswa.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpuiyeeswa.swift:23:8: error: cannot find 'len' in scope\n    if len(date) != 10 {\n       ^~~\n/tmp/tmpuiyeeswa.swift:26:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:26:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[0] < \"0\" || date[0] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:29:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:29:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[1] < \"0\" || date[1] > \"9\" {\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyeeswa.swift:32:8: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    if date[2] < \"0\" || date[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    month, day, year := date.split(\"-\")\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n    }\n    month_num, _ := strconv.Atoi(month)\n    day_num, _ := strconv.Atoi(day)\n    year_num, _ := strconv.Atoi(year)\n    if month_num < 1 || month_num > 12 {\n        return false\n    }\n    if month_num == 2 {\n        if day_num < 1 || day_num > 29 {\n            return false\n        }\n    } else {\n        if day_num < 1 || day_num > 30 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpth9bg9cg.swift:23:10: error: consecutive statements on a line must be separated by ';'\n    month, day, year := date.split(\"-\")\n         ^\n         ;\n/tmp/tmpth9bg9cg.swift:23:10: error: expected expression\n    month, day, year := date.split(\"-\")\n         ^\n/tmp/tmpth9bg9cg.swift:27:14: error: consecutive statements on a line must be separated by ';'\n    month_num, _ := strconv.Atoi(month)\n             ^\n             ;\n/tmp/tmpth9bg9cg.swift:27:14: error: expected expression\n    month_num, _ := strconv.Atoi(month)\n             ^\n/tmp/tmpth9bg9cg.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpth9bg9cg.swift:23:5: error: cannot find 'month' in scope\n    month, day, year := date.split(\"-\")\n    ^~~~~\n/tmp/tmpth9bg9cg.swift:24:8: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n       ^~~\n/tmp/tmpth9bg9cg.swift:24:12: error: cannot find 'month' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n           ^~~~~\n/tmp/tmpth9bg9cg.swift:24:27: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                          ^~~\n/tmp/tmpth9bg9cg.swift:24:31: error: cannot find 'day' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                              ^~~\n/tmp/tmpth9bg9cg.swift:24:44: error: cannot find 'len' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                           ^~~\n/tmp/tmpth9bg9cg.swift:24:48: error: cannot find 'year' in scope\n    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n                                               ^~~~\n/tmp/tmpth9bg9cg.swift:27:5: error: cannot find 'month_num' in scope\n    month_num, _ := strconv.Atoi(month)\n    ^~~~~~~~~\n/tmp/tmpth9bg9cg.swift:30:8: error: cannot find 'month_num' in scope\n    if month_num < 1 || month_num > 12 {\n       ^~~~~~~~~\n/tmp/tmpth9bg9cg.swift:30:25: error: cannot find 'month_num' in scope\n    if month_num < 1 || month_num > ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    if len(date) != 10 {\n        return false\n    }\n    if date[0] < '0' || date[0] > '9' {\n        return false\n    }\n    if date[1] < '0' || date[1] > '9' {\n        return false\n    }\n    if date[2] < '0' || date[2] > '9' {\n        return false\n    }\n    if date[3] < '0' || date[3] > '9' {\n        return false\n    }\n    if date[4] < '0' || date[4] > '9' {\n        return false\n    }\n    if date[5] < '0' || date[5] > '9' {\n        return false\n    }\n    if date[6] < '0' || date[6] > '9' {\n        return false\n    }\n    if date[7] < '0' || date[7] > '9' {\n        return false\n    }\n    if date[8] < '0' || date[8] > '9' {\n        return false\n    }\n    if date[9] < '0' || date[9] > '9' {\n        return false\n    }\n    if date[3] > '2' {\n        return false\n    }\n    if date[4] > '9' {\n        return false\n    }\n    if date[5] > '9' {\n        return false\n    }\n    if date[6] > '9' {\n        return false\n    }\n    if date[7] > '9' {\n        return false\n    }\n    if date[8] > '9' {\n        return false\n    }\n    if date[9] > '9' {\n        return false\n    }\n    if date[4] > '9' {\n        return false\n    }\n    if date[5] > '9' {\n        return false\n    }\n    if date[6] > '9' {\n        return false\n    }\n    if date[7] > '\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmpd4lcdqx5.swift:26:18: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpd4lcdqx5.swift:26:35: error: single-quoted string literal found, use '\"'\n    if date[0] < '0' || date[0] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpd4lcdqx5.swift:29:18: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpd4lcdqx5.swift:29:35: error: single-quoted string literal found, use '\"'\n    if date[1] < '0' || date[1] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpd4lcdqx5.swift:32:18: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpd4lcdqx5.swift:32:35: error: single-quoted string literal found, use '\"'\n    if date[2] < '0' || date[2] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpd4lcdqx5.swift:35:18: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpd4lcdqx5.swift:35:35: error: single-quoted string literal found, use '\"'\n    if date[3] < '0' || date[3] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpd4lcdqx5.swift:38:18: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpd4lcdqx5.swift:38:35: error: single-quoted string literal found, use '\"'\n    if date[4] < '0' || date[4] > '9' {\n                                  ^~~\n                                  \"9\"\n/tmp/tmpd4lcdqx5.swift:41:18: error: single-quoted string literal found, use '\"'\n    if date[5] < '0' || date[5] > '9' {\n                 ^~~\n                 \"0\"\n/tmp/tmpd4lcdqx5.swift:41:35: error: single-quoted string literal found, use '\"'\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    var month int\n    var day int\n    var year int\n    var err error\n    var valid bool\n    varn}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpkoi0hyll.swift:20:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month int\n              ^\n/tmp/tmpkoi0hyll.swift:20:15: note: join the identifiers together\n    var month int\n        ~~~~~~^~~\n        monthint\n/tmp/tmpkoi0hyll.swift:20:15: note: join the identifiers together with camel-case\n    var month int\n        ~~~~~~^~~\n        monthInt\n/tmp/tmpkoi0hyll.swift:21:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var day int\n            ^\n/tmp/tmpkoi0hyll.swift:21:13: note: join the identifiers together\n    var day int\n        ~~~~^~~\n        dayint\n/tmp/tmpkoi0hyll.swift:21:13: note: join the identifiers together with camel-case\n    var day int\n        ~~~~^~~\n        dayInt\n/tmp/tmpkoi0hyll.swift:22:14: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var year int\n             ^\n/tmp/tmpkoi0hyll.swift:22:14: note: join the identifiers together\n    var year int\n        ~~~~~^~~\n        yearint\n/tmp/tmpkoi0hyll.swift:22:14: note: join the identifiers together with camel-case\n    var year int\n        ~~~~~^~~\n        yearInt\n/tmp/tmpkoi0hyll.swift:23:13: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var err error\n            ^\n/tmp/tmpkoi0hyll.swift:23:13: note: join the identifiers together\n    var err error\n        ~~~~^~~~~\n        errerror\n/tmp/tmpkoi0hyll.swift:23:13: note: join the identifiers together with camel-case\n    var err error\n        ~~~~^~~~~\n        errError\n/tmp/tmpkoi0hyll.swift:24:15: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid bool\n              ^\n/tmp/tmpkoi0hyll.swift:24:15: note: join the identifiers together\n    var valid bool\n        ~~~~~~^~~~\n        validbool\n/tmp/tmpkoi0hyll.swift:24:15: note: join the identifiers together with camel-case\n    var valid bool\n        ~~~~~~",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    var month, day, year int\n    var valid_month, valid_day, valid_year bool\n    var valid_date bool\n    var month_str, day_str, year_str string\n    var month_int, day_int, year_int int\n    var month_int_str, day_int_str, year_int_str string\n    var month_str_int, day_str_int, year_str_int string\n    var month_int_str_int, day_int_str_int, year_int_str_int string\n    var month_int_str_int_int, day_int_str_int_int, year_int_str_int_int string\n    var month_int_str_int_int_int, day_int_str_int_int_int, year_int_str_int_int_int string\n    var month_int_str_int_int_int_int, day_int_str_int_int_int_int, year_int_str_int_int_int_int string\n    var month_int_str_int_int_int_int_int, day_int_str_int_int_int_int_int, year_int_str_int_int_int_int_int string\n    var month_int_str_int_int_int_int_int_int, day_int_str_int_int_int_int_int_int, year_int_str_int_int_int_int_int_int string\n    var month_int_str_int_int_int_int_int_int_int, day_int_str_int_int_int_int_int_int_int, year_int_str_int_int_int_int_int_int_int string\n    var month_int_str_int_int_int_int_int_int_int_int, day_int_str_int_int_int_int_int_int_int_int, year_int_str_int_int_int_int_int_int_int_int string\n    var month_int_str_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpiwz1ep4j.swift:23:26: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month, day, year int\n                         ^\n/tmp/tmpiwz1ep4j.swift:23:26: note: join the identifiers together\n    var month, day, year int\n                    ~~~~~^~~\n                    yearint\n/tmp/tmpiwz1ep4j.swift:23:26: note: join the identifiers together with camel-case\n    var month, day, year int\n                    ~~~~~^~~\n                    yearInt\n/tmp/tmpiwz1ep4j.swift:24:44: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_month, valid_day, valid_year bool\n                                           ^\n/tmp/tmpiwz1ep4j.swift:24:44: note: join the identifiers together\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearbool\n/tmp/tmpiwz1ep4j.swift:24:44: note: join the identifiers together with camel-case\n    var valid_month, valid_day, valid_year bool\n                                ~~~~~~~~~~~^~~~\n                                valid_yearBool\n/tmp/tmpiwz1ep4j.swift:25:20: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var valid_date bool\n                   ^\n/tmp/tmpiwz1ep4j.swift:25:20: note: join the identifiers together\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_datebool\n/tmp/tmpiwz1ep4j.swift:25:20: note: join the identifiers together with camel-case\n    var valid_date bool\n        ~~~~~~~~~~~^~~~\n        valid_dateBool\n/tmp/tmpiwz1ep4j.swift:26:38: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var month_str, day_str, year_str string\n                                     ^\n/tmp/tmpiwz1ep4j.swift:26:38: note: join the identifiers together\n    var month_str, day_str, year_str string\n                            ~~~~~~~~~^~~~~~\n                            year_strstring\n/tmp/tmpiw",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if len(date) == 0 {\n        return false\n    }\n    \n    month, _ := strconv.Atoi(date[0:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:10])\n    \n    if month < 1 || month > 12 {\n        return false\n    }\n    \n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    \n    if year < 1900 || year > 2100 {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpw4gemyq7.swift:24:10: error: consecutive statements on a line must be separated by ';'\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n         ;\n/tmp/tmpw4gemyq7.swift:24:10: error: expected expression\n    month, _ := strconv.Atoi(date[0:2])\n         ^\n/tmp/tmpw4gemyq7.swift:20:8: error: cannot find 'len' in scope\n    if len(date) == 0 {\n       ^~~\n/tmp/tmpw4gemyq7.swift:24:5: error: cannot find 'month' in scope\n    month, _ := strconv.Atoi(date[0:2])\n    ^~~~~\n/tmp/tmpw4gemyq7.swift:28:8: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n       ^~~~~\n/tmp/tmpw4gemyq7.swift:28:21: error: cannot find 'month' in scope\n    if month < 1 || month > 12 {\n                    ^~~~~\n/tmp/tmpw4gemyq7.swift:32:8: error: cannot find 'month' in scope\n    if month == 2 {\n       ^~~~~\n/tmp/tmpw4gemyq7.swift:33:12: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n           ^~~\n/tmp/tmpw4gemyq7.swift:33:23: error: cannot find 'day' in scope\n        if day < 1 || day > 29 {\n                      ^~~\n/tmp/tmpw4gemyq7.swift:36:15: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n              ^~~~~\n/tmp/tmpw4gemyq7.swift:36:29: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                            ^~~~~\n/tmp/tmpw4gemyq7.swift:36:43: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                          ^~~~~\n/tmp/tmpw4gemyq7.swift:36:57: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n                                                        ^~~~~\n/tmp/tmpw4gemyq7.swift:36:71: error: cannot find 'month' in scope\n    } else if month == 1 || month == 3 || month == 5 ||",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}