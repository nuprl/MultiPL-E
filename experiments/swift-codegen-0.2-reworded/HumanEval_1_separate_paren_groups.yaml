name: HumanEval_1_separate_paren_groups
language: swift
prompt: "\n/// Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n/// separate those group into separate strings and\
  \ return the array of those.\n/// Separate groups are balanced (each open brace\
  \ is properly closed) and not nested within each other\n/// Ignore any spaces in\
  \ the input string.\n/// >>> separate_paren_groups(paren_string: \"( ) (( )) ((\
  \ )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
  \ String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()())\
  \ ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\n\
  assert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") == [\"()\"\
  , \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
  \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
  \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
completions: []
stop_tokens:
- "\n}"
