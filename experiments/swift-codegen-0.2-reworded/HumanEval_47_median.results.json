{
  "name": "HumanEval_47_median",
  "language": "swift",
  "prompt": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmp9tf3bnkk.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp9tf3bnkk.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:15:30: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[0] + l[1]) / 2\n               ~~~~~~~~~~~~~~^~~\n               Double(          )\n/tmp/tmp9tf3bnkk.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                  ^~~\n/tmp/tmp9tf3bnkk.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                                  ^~~\n/tmp/tmp9tf3bnkk.swift:18:52: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(                                )\n/tmp/tmp9tf3bnkk.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp9tf3bnkk.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    sort.Ints(l)\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpp7vkq4gc.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpp7vkq4gc.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpp7vkq4gc.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpp7vkq4gc.swift:14:5: error: cannot find 'sort' in scope\n    sort.Ints(l)\n    ^~~~\n/tmp/tmpp7vkq4gc.swift:15:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpp7vkq4gc.swift:15:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        panic(\"median of empty list\")\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmp518xlop2.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmp518xlop2.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmp518xlop2.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp518xlop2.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp518xlop2.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp518xlop2.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp518xlop2.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"median of empty list\")\n        ^~~~~\n/tmp/tmp518xlop2.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp518xlop2.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp518xlop2.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp518xlop2.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmp518xlop2.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmp518xlop2.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) == 3 {\n        return (l[0] + l[1] + l[2]) / 3.0\n    }\n    if len(l) == 4 {\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n    }\n    if len(l) == 5 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n    }\n    if len(l) == 6 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n    }\n    if len(l) == 7 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7.0\n    }\n    if len(l) == 8 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8.0\n    }\n    if len(l) == 9 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9.0\n    }\n    if len(l) == 10 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10.0\n    }\n    if len(l) == 11 {\n        return (l[0] + l[1] +\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293412,
      "stdout": "",
      "stderr": "/tmp/tmpqge__5y4.swift:43:1: error: expected expression after operator\n}\n^\n/tmp/tmpqge__5y4.swift:62:46: error: expected '}' at end of brace statement\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)\n                                             ^\n/tmp/tmpqge__5y4.swift:7:33: note: to match this opening '{'\nfunc median(l: [Int]) -> Double {\n                                ^\n/tmp/tmpqge__5y4.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpqge__5y4.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpqge__5y4.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpqge__5y4.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpqge__5y4.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpqge__5y4.swift:17:8: error: cannot find 'len' in scope\n    if len(l) == 3 {\n       ^~~\n/tmp/tmpqge__5y4.swift:18:29: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1] + l[2]) / 3.0\n                            ^\n               Double(             )\n/tmp/tmpqge__5y4.swift:20:8: error: cannot find 'len' in scope\n    if len(l) == 4 {\n       ^~~\n/tmp/tmpqge__5y4.swift:21:36: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n                                   ^\n               Double(                    )\n/tmp/tmpqge__5y4.swift:23:8: error: cannot find 'len' in scope\n    if len(l) == 5 {\n       ^~~\n/tmp/tmpqge__5y4.swift:24:16: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var m Int\n    var i Int\n    var j Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmp8cf62vw4.swift:8:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var m Int\n          ^\n/tmp/tmp8cf62vw4.swift:8:11: note: join the identifiers together\n    var m Int\n        ~~^~~\n        mInt\n/tmp/tmp8cf62vw4.swift:9:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i Int\n          ^\n/tmp/tmp8cf62vw4.swift:9:11: note: join the identifiers together\n    var i Int\n        ~~^~~\n        iInt\n/tmp/tmp8cf62vw4.swift:10:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var j Int\n          ^\n/tmp/tmp8cf62vw4.swift:10:11: note: join the identifiers together\n    var j Int\n        ~~^~~\n        jInt\n/tmp/tmp8cf62vw4.swift:11:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var n Int\n          ^\n/tmp/tmp8cf62vw4.swift:11:11: note: join the identifiers together\n    var n Int\n        ~~^~~\n        nInt\n/tmp/tmp8cf62vw4.swift:12:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var p Int\n          ^\n/tmp/tmp8cf62vw4.swift:12:11: note: join the identifiers together\n    var p Int\n        ~~^~~\n        pInt\n/tmp/tmp8cf62vw4.swift:13:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var q Int\n          ^\n/tmp/tmp8cf62vw4.swift:13:11: note: join the identifiers together\n    var q Int\n        ~~^~~\n        qInt\n/tmp/tmp8cf62vw4.swift:14:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var r Int\n          ^\n/tmp/tmp8cf62vw4.swift:14:11: note: join the identifiers together\n    var r Int\n        ~~^~~\n        rInt\n/tmp/tmp8cf62vw4.swift:15:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var s Int\n          ^\n/tmp/tmp8cf62vw4.swift:15:11: note: join the identifier",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] < median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmp1j69ex8v.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmp1j69ex8v.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmp1j69ex8v.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp1j69ex8v.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp1j69ex8v.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmp1j69ex8v.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp1j69ex8v.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp1j69ex8v.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp1j69ex8v.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp1j69ex8v.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmp1j69ex8v.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmp1j69ex8v.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmp7p26ii27.swift:9:32: error: cannot find 'a' in scope\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n                               ^\n/tmp/tmp7p26ii27.swift:9:35: error: cannot find 'b' in scope\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n                                  ^\n/tmp/tmp7p26ii27.swift:9:41: error: cannot find 'a' in scope\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n                                        ^\n/tmp/tmp7p26ii27.swift:9:45: error: cannot find 'b' in scope\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n                                            ^\n/tmp/tmp7p26ii27.swift:9:31: error: expected type before '->'\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n                              ^\n/tmp/tmp7p26ii27.swift:9:43: error: expected type after '->'\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n                                          ^\n/tmp/tmp7p26ii27.swift:9:14: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n           ~ ^\n/tmp/tmp7p26ii27.swift:9:21: error: value of tuple type '()' has no member 'reduce'\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n           ~~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpq3b4pmmy.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpq3b4pmmy.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpq3b4pmmy.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpq3b4pmmy.swift:14:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpq3b4pmmy.swift:15:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmpq3b4pmmy.swift:15:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmpq3b4pmmy.swift:15:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmpq3b4pmmy.swift:17:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpq3b4pmmy.swift:17:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median_aux(l, 0, len(l) - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpxq91dy4i.swift:8:12: error: cannot find 'median_aux' in scope\n    return median_aux(l, 0, len(l) - 1)\n           ^~~~~~~~~~\n/tmp/tmpxq91dy4i.swift:8:29: error: cannot find 'len' in scope\n    return median_aux(l, 0, len(l) - 1)\n                            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        panic(\"median of an empty list\")\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] < median {\n            median = l[i]\n        } else if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpbg8jfx54.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpbg8jfx54.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpbg8jfx54.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpbg8jfx54.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpbg8jfx54.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpbg8jfx54.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpbg8jfx54.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"median of an empty list\")\n        ^~~~~\n/tmp/tmpbg8jfx54.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpbg8jfx54.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpbg8jfx54.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpbg8jfx54.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpbg8jfx54.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpbg8jfx54.swift:25:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpfiamdlph.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpfiamdlph.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpfiamdlph.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpfiamdlph.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpfiamdlph.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpfiamdlph.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpfiamdlph.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2.0\n                  ^~~\n/tmp/tmpfiamdlph.swift:18:39: error: cannot find 'len' in scope\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2.0\n                                      ^~~\n/tmp/tmpfiamdlph.swift:18:35: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2.0\n                                  ^\n               Double(                            )\n/tmp/tmpfiamdlph.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpfiamdlph.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: l.sort())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmprbrhrqmq.swift:8:24: error: cannot convert value of type '()' to expected argument type '[Int]'\n    return median(l: l.sort())\n                       ^\n/tmp/tmprbrhrqmq.swift:8:24: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    return median(l: l.sort())\n                     ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmp_2j0rf5k/tmp_2j0rf5k.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b686b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b683a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b683a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b683a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2j0rf5k                        0x000055e311d82321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7b6889e460 __libc_start_main + 245\n6    tmp_2j0rf5k                        0x000055e311d81f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[len(l) / 2]\n    if len(l) % 2 == 0 {\n        median = (median + l[len(l) / 2 - 1]) / 2.0\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmpk7_zw_wx.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[len(l) / 2]\n          ^\n          ;\n/tmp/tmpk7_zw_wx.swift:17:12: error: expected expression\n    median := l[len(l) / 2]\n           ^\n/tmp/tmpk7_zw_wx.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpk7_zw_wx.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpk7_zw_wx.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpk7_zw_wx.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpk7_zw_wx.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpk7_zw_wx.swift:17:5: error: function is unused\n    median := l[len(l) / 2]\n    ^~~~~~\n/tmp/tmpk7_zw_wx.swift:18:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpk7_zw_wx.swift:19:30: error: cannot find 'len' in scope\n        median = (median + l[len(l) / 2 - 1]) / 2.0\n                             ^~~\n/tmp/tmpk7_zw_wx.swift:19:19: error: cannot convert value of type '([Int]) -> Double' to expected argument type 'Int'\n        median = (median + l[len(l) / 2 - 1]) / 2.0\n                  ^\n/tmp/tmpk7_zw_wx.swift:19:47: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n        median = (median + l[len(l) / 2 - 1]) / 2.0\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~\n/tmp/tmpk7_zw_wx.swift:19:47: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n        median = (median + l[len(l) / 2 - 1]) / 2.0\n                                              ^\n/tmp/tmpk7_zw_wx.swift:19:9: error: cannot assign to value: 'median' is a function\n        median = (median + l[len(l) / 2 - 1]) / 2.0\n        ^~",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l = sort(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpqiq29m1f.swift:8:9: error: cannot find 'sort' in scope\n    l = sort(l)\n        ^~~~\n/tmp/tmpqiq29m1f.swift:8:5: error: cannot assign to value: 'l' is a 'let' constant\n    l = sort(l)\n    ^\n/tmp/tmpqiq29m1f.swift:9:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpqiq29m1f.swift:12:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpqiq29m1f.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpqiq29m1f.swift:15:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpqiq29m1f.swift:16:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmpqiq29m1f.swift:16:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmpqiq29m1f.swift:16:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmpqiq29m1f.swift:18:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpqiq29m1f.swift:18:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: toList(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmp45nef2bs.swift:8:22: error: cannot find 'toList' in scope\n    return median(l: toList(l))\n                     ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmp9tf3bnkk.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp9tf3bnkk.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:15:30: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[0] + l[1]) / 2\n               ~~~~~~~~~~~~~~^~~\n               Double(          )\n/tmp/tmp9tf3bnkk.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                  ^~~\n/tmp/tmp9tf3bnkk.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                                  ^~~\n/tmp/tmp9tf3bnkk.swift:18:52: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(                                )\n/tmp/tmp9tf3bnkk.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp9tf3bnkk.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return quickselect(l, 0, len(l) - 1, len(l) / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpiswpg4mr.swift:8:12: error: cannot find 'quickselect' in scope\n    return quickselect(l, 0, len(l) - 1, len(l) / 2)\n           ^~~~~~~~~~~\n/tmp/tmpiswpg4mr.swift:8:30: error: cannot find 'len' in scope\n    return quickselect(l, 0, len(l) - 1, len(l) / 2)\n                             ^~~\n/tmp/tmpiswpg4mr.swift:8:42: error: cannot find 'len' in scope\n    return quickselect(l, 0, len(l) - 1, len(l) / 2)\n                                         ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp4f6kedev.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:11:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp4f6kedev.swift:12:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:13:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmp4f6kedev.swift:13:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmp4f6kedev.swift:13:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmp4f6kedev.swift:15:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp4f6kedev.swift:15:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    m := len(l) / 2\n    return (l[m] + l[m-1]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp6_tjtweo.swift:17:6: error: consecutive statements on a line must be separated by ';'\n    m := len(l) / 2\n     ^\n     ;\n/tmp/tmp6_tjtweo.swift:17:7: error: expected expression\n    m := len(l) / 2\n      ^\n/tmp/tmp6_tjtweo.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp6_tjtweo.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp6_tjtweo.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp6_tjtweo.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp6_tjtweo.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmp6_tjtweo.swift:17:5: error: cannot find 'm' in scope\n    m := len(l) / 2\n    ^\n/tmp/tmp6_tjtweo.swift:18:15: error: cannot find 'm' in scope\n    return (l[m] + l[m-1]) / 2.0\n              ^\n/tmp/tmp6_tjtweo.swift:18:22: error: cannot find 'm' in scope\n    return (l[m] + l[m-1]) / 2.0\n                     ^\n/tmp/tmp6_tjtweo.swift:18:18: error: cannot convert value of type 'Int' to expected argument type 'Double'\n    return (l[m] + l[m-1]) / 2.0\n                 ^\n           Double(        )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmp_2j0rf5k/tmp_2j0rf5k.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b686b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b683a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b683a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b683a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2j0rf5k                        0x000055e311d82321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7b6889e460 __libc_start_main + 245\n6    tmp_2j0rf5k                        0x000055e311d81f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median_int(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpbiok56_6.swift:8:12: error: cannot find 'median_int' in scope\n    return median_int(l)\n           ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpg9eiyrhi.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpg9eiyrhi.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpg9eiyrhi.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpg9eiyrhi.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpg9eiyrhi.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpg9eiyrhi.swift:17:15: error: cannot find 'len' in scope\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n              ^~~\n/tmp/tmpg9eiyrhi.swift:17:31: error: cannot find 'len' in scope\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^~~\n/tmp/tmpg9eiyrhi.swift:17:27: error: cannot convert value of type 'Int' to expected argument type 'Double'\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                          ^\n           Double(                            )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median_helper(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmprh35kggv.swift:8:12: error: cannot find 'median_helper' in scope\n    return median_helper(l)\n           ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpg9eiyrhi.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpg9eiyrhi.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpg9eiyrhi.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpg9eiyrhi.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpg9eiyrhi.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpg9eiyrhi.swift:17:15: error: cannot find 'len' in scope\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n              ^~~\n/tmp/tmpg9eiyrhi.swift:17:31: error: cannot find 'len' in scope\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^~~\n/tmp/tmpg9eiyrhi.swift:17:27: error: cannot convert value of type 'Int' to expected argument type 'Double'\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                          ^\n           Double(                            )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // write your code here\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpm7a7lzaa.swift:9:32: error: cannot find 'a' in scope\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n                               ^\n/tmp/tmpm7a7lzaa.swift:9:35: error: cannot find 'b' in scope\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n                                  ^\n/tmp/tmpm7a7lzaa.swift:9:41: error: cannot find 'a' in scope\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n                                        ^\n/tmp/tmpm7a7lzaa.swift:9:45: error: cannot find 'b' in scope\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n                                            ^\n/tmp/tmpm7a7lzaa.swift:9:31: error: expected type before '->'\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n                              ^\n/tmp/tmpm7a7lzaa.swift:9:43: error: expected type after '->'\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n                                          ^\n/tmp/tmpm7a7lzaa.swift:9:14: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n           ~ ^\n/tmp/tmpm7a7lzaa.swift:9:21: error: value of tuple type '()' has no member 'reduce'\n    return l.sort().reduce(0, (a, b) -> a + b) / 2.0\n           ~~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) == 3 {\n        return (l[0] + l[1] + l[2]) / 3.0\n    }\n    if len(l) == 4 {\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n    }\n    if len(l) == 5 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n    }\n    if len(l) == 6 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n    }\n    if len(l) == 7 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7.0\n    }\n    if len(l) == 8 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8.0\n    }\n    if len(l) == 9 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9.0\n    }\n    if len(l) == 10 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10.0\n    }\n    if len(l) == 11 {\n        return (l[0] + l[1] +\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293412,
      "stdout": "",
      "stderr": "/tmp/tmpqge__5y4.swift:43:1: error: expected expression after operator\n}\n^\n/tmp/tmpqge__5y4.swift:62:46: error: expected '}' at end of brace statement\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)\n                                             ^\n/tmp/tmpqge__5y4.swift:7:33: note: to match this opening '{'\nfunc median(l: [Int]) -> Double {\n                                ^\n/tmp/tmpqge__5y4.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpqge__5y4.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpqge__5y4.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpqge__5y4.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpqge__5y4.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpqge__5y4.swift:17:8: error: cannot find 'len' in scope\n    if len(l) == 3 {\n       ^~~\n/tmp/tmpqge__5y4.swift:18:29: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1] + l[2]) / 3.0\n                            ^\n               Double(             )\n/tmp/tmpqge__5y4.swift:20:8: error: cannot find 'len' in scope\n    if len(l) == 4 {\n       ^~~\n/tmp/tmpqge__5y4.swift:21:36: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n                                   ^\n               Double(                    )\n/tmp/tmpqge__5y4.swift:23:8: error: cannot find 'len' in scope\n    if len(l) == 5 {\n       ^~~\n/tmp/tmpqge__5y4.swift:24:16: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: l.sort())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmprbrhrqmq.swift:8:24: error: cannot convert value of type '()' to expected argument type '[Int]'\n    return median(l: l.sort())\n                       ^\n/tmp/tmprbrhrqmq.swift:8:24: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    return median(l: l.sort())\n                     ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median_helper(l, 0, len(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpfe8x40hh.swift:8:12: error: cannot find 'median_helper' in scope\n    return median_helper(l, 0, len(l))\n           ^~~~~~~~~~~~~\n/tmp/tmpfe8x40hh.swift:8:32: error: cannot find 'len' in scope\n    return median_helper(l, 0, len(l))\n                               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l = sorted(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpq940b55k.swift:8:9: error: cannot find 'sorted' in scope\n    l = sorted(l)\n        ^~~~~~\n/tmp/tmpq940b55k.swift:8:5: error: cannot assign to value: 'l' is a 'let' constant\n    l = sorted(l)\n    ^\n/tmp/tmpq940b55k.swift:9:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpq940b55k.swift:12:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpq940b55k.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpq940b55k.swift:15:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpq940b55k.swift:16:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmpq940b55k.swift:16:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmpq940b55k.swift:16:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmpq940b55k.swift:18:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpq940b55k.swift:18:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    var l_sorted = sort(l)\n    var l_half = l_sorted[l_len/2]\n    if l_len%2 == 0 {\n        return (l_half + l_sorted[l_len/2-1]) / 2.0\n    }\n    return l_half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpnpdrwq5e.swift:8:17: error: cannot find 'len' in scope\n    var l_len = len(l)\n                ^~~\n/tmp/tmpnpdrwq5e.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpnpdrwq5e.swift:15:20: error: cannot find 'sort' in scope\n    var l_sorted = sort(l)\n                   ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmp9tf3bnkk.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp9tf3bnkk.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:15:30: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[0] + l[1]) / 2\n               ~~~~~~~~~~~~~~^~~\n               Double(          )\n/tmp/tmp9tf3bnkk.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                  ^~~\n/tmp/tmp9tf3bnkk.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                                  ^~~\n/tmp/tmp9tf3bnkk.swift:18:52: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(                                )\n/tmp/tmp9tf3bnkk.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp9tf3bnkk.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    if l_len == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if l_len % 2 == 0 {\n        return (l[l_len / 2] + l[l_len / 2 - 1]) / 2.0\n    }\n    return l[l_len / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpcj6z5g36.swift:8:17: error: cannot find 'len' in scope\n    var l_len = len(l)\n                ^~~\n/tmp/tmpcj6z5g36.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpcj6z5g36.swift:16:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpcj6z5g36.swift:19:30: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[l_len / 2] + l[l_len / 2 - 1]) / 2.0\n                             ^\n               Double(                          )\n/tmp/tmpcj6z5g36.swift:21:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[l_len / 2]\n           ~^~~~~~~~~~~\n           Double(     )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[len(l) / 2]\n    for i := 0; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmprjodkmq6.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[len(l) / 2]\n          ^\n          ;\n/tmp/tmprjodkmq6.swift:17:12: error: expected expression\n    median := l[len(l) / 2]\n           ^\n/tmp/tmprjodkmq6.swift:18:12: error: expected type\n    for i := 0; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmprjodkmq6.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmprjodkmq6.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmprjodkmq6.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprjodkmq6.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprjodkmq6.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprjodkmq6.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprjodkmq6.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprjodkmq6.swift:17:5: error: function is unused\n    median := l[len(l) / 2]\n    ^~~~~~\n/tmp/tmprjodkmq6.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmp_2j0rf5k/tmp_2j0rf5k.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b686b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b683a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b683a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b683a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2j0rf5k                        0x000055e311d82321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7b6889e460 __libc_start_main + 245\n6    tmp_2j0rf5k                        0x000055e311d81f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmpggwdg2ny.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpggwdg2ny.swift:11:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpggwdg2ny.swift:12:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpggwdg2ny.swift:13:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                  ^~~\n/tmp/tmpggwdg2ny.swift:13:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                                  ^~~\n/tmp/tmpggwdg2ny.swift:13:52: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(                                )\n/tmp/tmpggwdg2ny.swift:15:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpggwdg2ny.swift:15:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    \n    l.sort()\n    \n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    } else {\n        return l[len(l) / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpl45utnke.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpl45utnke.swift:12:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpl45utnke.swift:14:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpl45utnke.swift:15:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmpl45utnke.swift:15:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmpl45utnke.swift:15:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmpl45utnke.swift:17:18: error: cannot find 'len' in scope\n        return l[len(l) / 2]\n                 ^~~\n/tmp/tmpl45utnke.swift:17:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[len(l) / 2]\n               ~^~~~~~~~~~~~\n               Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var m Int\n    var n Int\n    var i Int\n    var j Int\n    var k Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmp9l300rz8.swift:8:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var m Int\n          ^\n/tmp/tmp9l300rz8.swift:8:11: note: join the identifiers together\n    var m Int\n        ~~^~~\n        mInt\n/tmp/tmp9l300rz8.swift:9:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var n Int\n          ^\n/tmp/tmp9l300rz8.swift:9:11: note: join the identifiers together\n    var n Int\n        ~~^~~\n        nInt\n/tmp/tmp9l300rz8.swift:10:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i Int\n          ^\n/tmp/tmp9l300rz8.swift:10:11: note: join the identifiers together\n    var i Int\n        ~~^~~\n        iInt\n/tmp/tmp9l300rz8.swift:11:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var j Int\n          ^\n/tmp/tmp9l300rz8.swift:11:11: note: join the identifiers together\n    var j Int\n        ~~^~~\n        jInt\n/tmp/tmp9l300rz8.swift:12:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var k Int\n          ^\n/tmp/tmp9l300rz8.swift:12:11: note: join the identifiers together\n    var k Int\n        ~~^~~\n        kInt\n/tmp/tmp9l300rz8.swift:13:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var p Int\n          ^\n/tmp/tmp9l300rz8.swift:13:11: note: join the identifiers together\n    var p Int\n        ~~^~~\n        pInt\n/tmp/tmp9l300rz8.swift:14:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var q Int\n          ^\n/tmp/tmp9l300rz8.swift:14:11: note: join the identifiers together\n    var q Int\n        ~~^~~\n        qInt\n/tmp/tmp9l300rz8.swift:15:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var r Int\n          ^\n/tmp/tmp9l300rz8.swift:15:11: note: join the identifier",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpmdynrxmh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpmdynrxmh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpmdynrxmh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpmdynrxmh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpmdynrxmh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpmdynrxmh.swift:17:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpmdynrxmh.swift:17:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n    }\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp02drfzef.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp02drfzef.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp02drfzef.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp02drfzef.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp02drfzef.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmp02drfzef.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp02drfzef.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n                  ^~~\n/tmp/tmp02drfzef.swift:18:33: error: cannot find 'len' in scope\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n                                ^~~\n/tmp/tmp02drfzef.swift:18:29: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n                            ^\n               Double(                      )\n/tmp/tmp02drfzef.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n/tmp/tmp02drfzef.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n           Double(    )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpmdynrxmh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpmdynrxmh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpmdynrxmh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpmdynrxmh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpmdynrxmh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpmdynrxmh.swift:17:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpmdynrxmh.swift:17:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l = sorted(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpq940b55k.swift:8:9: error: cannot find 'sorted' in scope\n    l = sorted(l)\n        ^~~~~~\n/tmp/tmpq940b55k.swift:8:5: error: cannot assign to value: 'l' is a 'let' constant\n    l = sorted(l)\n    ^\n/tmp/tmpq940b55k.swift:9:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpq940b55k.swift:12:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpq940b55k.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpq940b55k.swift:15:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpq940b55k.swift:16:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmpq940b55k.swift:16:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmpq940b55k.swift:16:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmpq940b55k.swift:18:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpq940b55k.swift:18:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: toList(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmp45nef2bs.swift:8:22: error: cannot find 'toList' in scope\n    return median(l: toList(l))\n                     ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // write your code here\n    return l.sort().reduce(0.0, (a, b) -> a + b) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpgxckow39.swift:9:34: error: cannot find 'a' in scope\n    return l.sort().reduce(0.0, (a, b) -> a + b) / 2.0\n                                 ^\n/tmp/tmpgxckow39.swift:9:37: error: cannot find 'b' in scope\n    return l.sort().reduce(0.0, (a, b) -> a + b) / 2.0\n                                    ^\n/tmp/tmpgxckow39.swift:9:43: error: cannot find 'a' in scope\n    return l.sort().reduce(0.0, (a, b) -> a + b) / 2.0\n                                          ^\n/tmp/tmpgxckow39.swift:9:47: error: cannot find 'b' in scope\n    return l.sort().reduce(0.0, (a, b) -> a + b) / 2.0\n                                              ^\n/tmp/tmpgxckow39.swift:9:33: error: expected type before '->'\n    return l.sort().reduce(0.0, (a, b) -> a + b) / 2.0\n                                ^\n/tmp/tmpgxckow39.swift:9:45: error: expected type after '->'\n    return l.sort().reduce(0.0, (a, b) -> a + b) / 2.0\n                                            ^\n/tmp/tmpgxckow39.swift:9:14: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    return l.sort().reduce(0.0, (a, b) -> a + b) / 2.0\n           ~ ^\n/tmp/tmpgxckow39.swift:9:21: error: value of tuple type '()' has no member 'reduce'\n    return l.sort().reduce(0.0, (a, b) -> a + b) / 2.0\n           ~~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: [Int])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpe3cfwuvg.swift:8:22: error: cannot convert value of type '[Int].Type' to expected argument type '[Int]'\n    return median(l: [Int])\n                     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var m Int\n    var i Int\n    var j Int\n    var n Int\n    var a [Int]\n    var b [Int]\n    var c [Int]\n    var d [Int]\n    var e [Int]\n    var f [Int]\n    var g [Int]\n    var h [Int]\n    var i1 Int\n    var i2 Int\n    var i3 Int\n    var i4 Int\n    var i5 Int\n    var i6 Int\n    var i7 Int\n    var i8 Int\n    var i9 Int\n    var i10 Int\n    var i11 Int\n    var i12 Int\n    var i13 Int\n    var i14 Int\n    var i15 Int\n    var i16 Int\n    var i17 Int\n    var i18 Int\n    var i19 Int\n    var i20 Int\n    var i21 Int\n    var i22 Int\n    var i23 Int\n    var i24 Int\n    var i25 Int\n    var i26 Int\n    var i27 Int\n    var i28 Int\n    var i29 Int\n    var i30 Int\n    var i31 Int\n    var i32 Int\n    var i33 Int\n    var i34 Int\n    var i35 Int\n    var i36 Int\n    var i37 Int\n    var i38 Int\n    var i39 Int\n    var i40 Int\n    var i41 Int\n    var i42 Int\n    var i43 Int\n    var i44 Int\n    var i45 Int\n    var i46 Int\n    var i47 Int\n    var i48 Int\n    var i49 Int\n    var i50 Int\n    var i51 Int\n    var i52 Int\n    var i53 Int\n    var i54 Int\n    var i55 Int\n    var i56 Int\n    var i57 Int\n    var i58 Int\n    var i59 Int\n    var i60 Int\n    var i61 Int\n    var i62 Int\n    var i63 Int\n    var i64 Int\n    var i65 Int\n    var i66 Int\n    var i67 Int\n    var i68 Int\n    var i69 Int\n    var i70 Int\n    var i71 Int\n    var i72 Int\n    var i73\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmpdl7paahj.swift:8:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var m Int\n          ^\n/tmp/tmpdl7paahj.swift:8:11: note: join the identifiers together\n    var m Int\n        ~~^~~\n        mInt\n/tmp/tmpdl7paahj.swift:9:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i Int\n          ^\n/tmp/tmpdl7paahj.swift:9:11: note: join the identifiers together\n    var i Int\n        ~~^~~\n        iInt\n/tmp/tmpdl7paahj.swift:10:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var j Int\n          ^\n/tmp/tmpdl7paahj.swift:10:11: note: join the identifiers together\n    var j Int\n        ~~^~~\n        jInt\n/tmp/tmpdl7paahj.swift:11:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var n Int\n          ^\n/tmp/tmpdl7paahj.swift:11:11: note: join the identifiers together\n    var n Int\n        ~~^~~\n        nInt\n/tmp/tmpdl7paahj.swift:12:10: error: consecutive statements on a line must be separated by ';'\n    var a [Int]\n         ^\n         ;\n/tmp/tmpdl7paahj.swift:13:10: error: consecutive statements on a line must be separated by ';'\n    var b [Int]\n         ^\n         ;\n/tmp/tmpdl7paahj.swift:14:10: error: consecutive statements on a line must be separated by ';'\n    var c [Int]\n         ^\n         ;\n/tmp/tmpdl7paahj.swift:15:10: error: consecutive statements on a line must be separated by ';'\n    var d [Int]\n         ^\n         ;\n/tmp/tmpdl7paahj.swift:16:10: error: consecutive statements on a line must be separated by ';'\n    var e [Int]\n         ^\n         ;\n/tmp/tmpdl7paahj.swift:17:10: error: consecutive statements on a line must be separated by ';'\n    var f [Int]\n         ^\n         ;\n/tmp/tmpdl7paahj.swift:18:10: error: consecutive statements on a line must be separated by ';'\n    var g [Int]\n         ^\n         ;\n/tmp/tmpdl7paahj.swift:19:10: error: consecutive statements on a line",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l = sorted(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpq940b55k.swift:8:9: error: cannot find 'sorted' in scope\n    l = sorted(l)\n        ^~~~~~\n/tmp/tmpq940b55k.swift:8:5: error: cannot assign to value: 'l' is a 'let' constant\n    l = sorted(l)\n    ^\n/tmp/tmpq940b55k.swift:9:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpq940b55k.swift:12:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpq940b55k.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpq940b55k.swift:15:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpq940b55k.swift:16:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmpq940b55k.swift:16:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmpq940b55k.swift:16:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmpq940b55k.swift:18:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpq940b55k.swift:18:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: [Double])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmp6vm275p8.swift:8:22: error: cannot convert value of type '[Double].Type' to expected argument type '[Int]'\n    return median(l: [Double])\n                     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var l_len = len(l)\n    if l_len == 0 {\n        panic(\"median: list is empty\")\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    var l_half = l_len / 2\n    var l_half_1 = l_half - 1\n    var l_half_2 = l_half\n    var l_half_3 = l_half + 1\n    var l_half_4 = l_half + 2\n    var l_half_5 = l_half + 3\n    var l_half_6 = l_half + 4\n    var l_half_7 = l_half + 5\n    var l_half_8 = l_half + 6\n    var l_half_9 = l_half + 7\n    var l_half_10 = l_half + 8\n    var l_half_11 = l_half + 9\n    var l_half_12 = l_half + 10\n    var l_half_13 = l_half + 11\n    var l_half_14 = l_half + 12\n    var l_half_15 = l_half + 13\n    var l_half_16 = l_half + 14\n    var l_half_17 = l_half + 15\n    var l_half_18 = l_half + 16\n    var l_half_19 = l_half + 17\n    var l_half_20 = l_half + 18\n    var l_half_21 = l_half + 19\n    var l_half_22 = l_half + 20\n    var l_half_23 = l_half + 21\n    var l_half_24 = l_half + 22\n    var l_half_25 = l_half + 23\n    var l_half_26 = l_half + 24\n    var l_half_27 = l_half + 25\n    var l_half_28 = l_half + 26\n    var l_half_29 = l_half + 27\n    var l_half_30 = l_half + 28\n    var l_half_31 = l_half + 29\n    var l_half_32 = l_half + 30\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmp39th_516.swift:8:17: error: cannot find 'len' in scope\n    var l_len = len(l)\n                ^~~\n/tmp/tmp39th_516.swift:10:9: error: cannot find 'panic' in scope\n        panic(\"median: list is empty\")\n        ^~~~~\n/tmp/tmp39th_516.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    var l_sorted = sort(l)\n    var middle = l_sorted[l_len/2]\n    if l_len%2 == 0 {\n        return (middle + l_sorted[l_len/2-1]) / 2.0\n    }\n    return middle\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmp3380j8w5.swift:8:17: error: cannot find 'len' in scope\n    var l_len = len(l)\n                ^~~\n/tmp/tmp3380j8w5.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp3380j8w5.swift:15:20: error: cannot find 'sort' in scope\n    var l_sorted = sort(l)\n                   ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    if l_len == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    var l_mid = l_len / 2\n    var l_left = l[:l_mid]\n    var l_right = l[l_mid:]\n    return (median(l_left) + median(l_right)) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmpx0xvec7f.swift:19:20: error: expected expression in list of expressions\n    var l_left = l[:l_mid]\n                   ^\n/tmp/tmpx0xvec7f.swift:20:27: error: expected expression in list of expressions\n    var l_right = l[l_mid:]\n                          ^\n/tmp/tmpx0xvec7f.swift:8:17: error: cannot find 'len' in scope\n    var l_len = len(l)\n                ^~~\n/tmp/tmpx0xvec7f.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpx0xvec7f.swift:16:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpx0xvec7f.swift:19:26: error: missing argument for parameter #1 in call\n    var l_left = l[:l_mid]\n                         ^\n                         <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) -> Element { get set }\n                      ^\n/tmp/tmpx0xvec7f.swift:20:27: error: missing argument for parameter #1 in call\n    var l_right = l[l_mid:]\n                          ^\n                          <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) -> Element { get set }\n                      ^\n/tmp/tmpx0xvec7f.swift:21:20: error: missing argument label 'l:' in call\n    return (median(l_left) + median(l_right)) / 2.0\n                   ^\n                   l: \n/tmp/tmpx0xvec7f.swift:21:37: error: missing argument label 'l:' in call\n    return (median(l_left) + median(l_right)) / 2.0\n                                    ^\n                                    l: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    if l_len == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    var l_mid = l_len / 2\n    var l_left = l[0:l_mid]\n    var l_right = l[l_mid:]\n    return (median(l_left) + median(l_right)) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmpflatwgdt.swift:19:21: error: expected ',' separator\n    var l_left = l[0:l_mid]\n                    ^\n                    ,\n/tmp/tmpflatwgdt.swift:19:21: error: expected expression in list of expressions\n    var l_left = l[0:l_mid]\n                    ^\n/tmp/tmpflatwgdt.swift:20:27: error: expected expression in list of expressions\n    var l_right = l[l_mid:]\n                          ^\n/tmp/tmpflatwgdt.swift:8:17: error: cannot find 'len' in scope\n    var l_len = len(l)\n                ^~~\n/tmp/tmpflatwgdt.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpflatwgdt.swift:16:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpflatwgdt.swift:20:27: error: missing argument for parameter #1 in call\n    var l_right = l[l_mid:]\n                          ^\n                          <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) -> Element { get set }\n                      ^\n/tmp/tmpflatwgdt.swift:21:20: error: missing argument label 'l:' in call\n    return (median(l_left) + median(l_right)) / 2.0\n                   ^\n                   l: \n/tmp/tmpflatwgdt.swift:21:20: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n    return (median(l_left) + median(l_right)) / 2.0\n                   ^\n/tmp/tmpflatwgdt.swift:21:37: error: missing argument label 'l:' in call\n    return (median(l_left) + median(l_right)) / 2.0\n                                    ^\n                                    l: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp4f6kedev.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:11:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp4f6kedev.swift:12:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:13:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmp4f6kedev.swift:13:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmp4f6kedev.swift:13:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmp4f6kedev.swift:15:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp4f6kedev.swift:15:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return (l[mid] + l[mid - 1]) / 2.0\n    }\n    return l[mid]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpc_c6om9k.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    mid := len(l) / 2\n       ^\n       ;\n/tmp/tmpc_c6om9k.swift:17:9: error: expected expression\n    mid := len(l) / 2\n        ^\n/tmp/tmpc_c6om9k.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpc_c6om9k.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpc_c6om9k.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpc_c6om9k.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpc_c6om9k.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpc_c6om9k.swift:17:5: error: cannot find 'mid' in scope\n    mid := len(l) / 2\n    ^~~\n/tmp/tmpc_c6om9k.swift:18:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpc_c6om9k.swift:19:19: error: cannot find 'mid' in scope\n        return (l[mid] + l[mid - 1]) / 2.0\n                  ^~~\n/tmp/tmpc_c6om9k.swift:19:28: error: cannot find 'mid' in scope\n        return (l[mid] + l[mid - 1]) / 2.0\n                           ^~~\n/tmp/tmpc_c6om9k.swift:19:24: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[mid] + l[mid - 1]) / 2.0\n                       ^\n               Double(              )\n/tmp/tmpc_c6om9k.swift:21:14: error: cannot find 'mid' in scope\n    return l[mid]\n             ^~~\n/tmp/tmpc_c6om9k.swift:21:13: error: no 'subscript' candidates produce the expected contextual result type 'Double'\n    return l[mid]\n            ^\nSwift.Array:16:23: note: 'subscript(_:)' produces 'Int', not the expected contextual result type 'Double'\n    @inlinable public subscript(index: Int) -> Element { get set }\n                      ^\nSwift.Array:17:23: note: 'subscript(_:)' produces 'ArraySl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    med := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > med {\n            med = l[i]\n        }\n    }\n    return med\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmpmhiyaog4.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    med := l[0]\n       ^\n       ;\n/tmp/tmpmhiyaog4.swift:17:9: error: expected expression\n    med := l[0]\n        ^\n/tmp/tmpmhiyaog4.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpmhiyaog4.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpmhiyaog4.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpmhiyaog4.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpmhiyaog4.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpmhiyaog4.swift:17:5: error: cannot find 'med' in scope\n    med := l[0]\n    ^~~\n/tmp/tmpmhiyaog4.swift:23:12: error: cannot find 'med' in scope\n    return med\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmp_2j0rf5k/tmp_2j0rf5k.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b686b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b683a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b683a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b683a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2j0rf5k                        0x000055e311d82321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7b6889e460 __libc_start_main + 245\n6    tmp_2j0rf5k                        0x000055e311d81f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return quickselect(l, 0, len(l)-1, len(l)/2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmprq5zfo8e.swift:8:12: error: cannot find 'quickselect' in scope\n    return quickselect(l, 0, len(l)-1, len(l)/2)\n           ^~~~~~~~~~~\n/tmp/tmprq5zfo8e.swift:8:30: error: cannot find 'len' in scope\n    return quickselect(l, 0, len(l)-1, len(l)/2)\n                             ^~~\n/tmp/tmprq5zfo8e.swift:8:40: error: cannot find 'len' in scope\n    return quickselect(l, 0, len(l)-1, len(l)/2)\n                                       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp4f6kedev.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:11:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp4f6kedev.swift:12:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:13:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmp4f6kedev.swift:13:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmp4f6kedev.swift:13:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmp4f6kedev.swift:15:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp4f6kedev.swift:15:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    } else {\n        return l[len(l) / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmppzf1mvut.swift:8:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmppzf1mvut.swift:9:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmppzf1mvut.swift:10:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmppzf1mvut.swift:10:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmppzf1mvut.swift:10:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmppzf1mvut.swift:12:18: error: cannot find 'len' in scope\n        return l[len(l) / 2]\n                 ^~~\n/tmp/tmppzf1mvut.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[len(l) / 2]\n               ~^~~~~~~~~~~~\n               Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median_helper(l, 0, len(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpfe8x40hh.swift:8:12: error: cannot find 'median_helper' in scope\n    return median_helper(l, 0, len(l))\n           ^~~~~~~~~~~~~\n/tmp/tmpfe8x40hh.swift:8:32: error: cannot find 'len' in scope\n    return median_helper(l, 0, len(l))\n                               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var m Int\n    var n Int\n    var i Int\n    var j Int\n    var k Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var l Int\n    var m Int\n    var n Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i Int\n    var j Int\n    var k Int\n    var\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmp9l300rz8.swift:8:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var m Int\n          ^\n/tmp/tmp9l300rz8.swift:8:11: note: join the identifiers together\n    var m Int\n        ~~^~~\n        mInt\n/tmp/tmp9l300rz8.swift:9:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var n Int\n          ^\n/tmp/tmp9l300rz8.swift:9:11: note: join the identifiers together\n    var n Int\n        ~~^~~\n        nInt\n/tmp/tmp9l300rz8.swift:10:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i Int\n          ^\n/tmp/tmp9l300rz8.swift:10:11: note: join the identifiers together\n    var i Int\n        ~~^~~\n        iInt\n/tmp/tmp9l300rz8.swift:11:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var j Int\n          ^\n/tmp/tmp9l300rz8.swift:11:11: note: join the identifiers together\n    var j Int\n        ~~^~~\n        jInt\n/tmp/tmp9l300rz8.swift:12:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var k Int\n          ^\n/tmp/tmp9l300rz8.swift:12:11: note: join the identifiers together\n    var k Int\n        ~~^~~\n        kInt\n/tmp/tmp9l300rz8.swift:13:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var p Int\n          ^\n/tmp/tmp9l300rz8.swift:13:11: note: join the identifiers together\n    var p Int\n        ~~^~~\n        pInt\n/tmp/tmp9l300rz8.swift:14:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var q Int\n          ^\n/tmp/tmp9l300rz8.swift:14:11: note: join the identifiers together\n    var q Int\n        ~~^~~\n        qInt\n/tmp/tmp9l300rz8.swift:15:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var r Int\n          ^\n/tmp/tmp9l300rz8.swift:15:11: note: join the identifier",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: l.sort())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmprbrhrqmq.swift:8:24: error: cannot convert value of type '()' to expected argument type '[Int]'\n    return median(l: l.sort())\n                       ^\n/tmp/tmprbrhrqmq.swift:8:24: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    return median(l: l.sort())\n                     ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    left := l[:mid]\n    right := l[mid:]\n    return (median(left) + median(right)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmpmhbs_lxq.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    mid := len(l) / 2\n       ^\n       ;\n/tmp/tmpmhbs_lxq.swift:17:9: error: expected expression\n    mid := len(l) / 2\n        ^\n/tmp/tmpmhbs_lxq.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpmhbs_lxq.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpmhbs_lxq.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpmhbs_lxq.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpmhbs_lxq.swift:15:30: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[0] + l[1]) / 2\n               ~~~~~~~~~~~~~~^~~\n               Double(          )\n/tmp/tmpmhbs_lxq.swift:17:5: error: cannot find 'mid' in scope\n    mid := len(l) / 2\n    ^~~\n/tmp/tmpmhbs_lxq.swift:20:20: error: cannot find 'left' in scope\n    return (median(left) + median(right)) / 2\n                   ^~~~\n/tmp/tmpmhbs_lxq.swift:20:35: error: cannot find 'right' in scope\n    return (median(left) + median(right)) / 2\n                                  ^~~~~\n/tmp/tmpmhbs_lxq.swift:20:20: error: missing argument label 'l:' in call\n    return (median(left) + median(right)) / 2\n                   ^\n                   l: \n/tmp/tmpmhbs_lxq.swift:20:35: error: missing argument label 'l:' in call\n    return (median(left) + median(right)) / 2\n                                  ^\n                                  l: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: l.sort())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmprbrhrqmq.swift:8:24: error: cannot convert value of type '()' to expected argument type '[Int]'\n    return median(l: l.sort())\n                       ^\n/tmp/tmprbrhrqmq.swift:8:24: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    return median(l: l.sort())\n                     ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp4f6kedev.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:11:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp4f6kedev.swift:12:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:13:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmp4f6kedev.swift:13:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmp4f6kedev.swift:13:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmp4f6kedev.swift:15:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp4f6kedev.swift:15:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpfiamdlph.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpfiamdlph.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpfiamdlph.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpfiamdlph.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpfiamdlph.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpfiamdlph.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpfiamdlph.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2.0\n                  ^~~\n/tmp/tmpfiamdlph.swift:18:39: error: cannot find 'len' in scope\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2.0\n                                      ^~~\n/tmp/tmpfiamdlph.swift:18:35: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2.0\n                                  ^\n               Double(                            )\n/tmp/tmpfiamdlph.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpfiamdlph.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l = sorted(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpq940b55k.swift:8:9: error: cannot find 'sorted' in scope\n    l = sorted(l)\n        ^~~~~~\n/tmp/tmpq940b55k.swift:8:5: error: cannot assign to value: 'l' is a 'let' constant\n    l = sorted(l)\n    ^\n/tmp/tmpq940b55k.swift:9:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpq940b55k.swift:12:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpq940b55k.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpq940b55k.swift:15:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpq940b55k.swift:16:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmpq940b55k.swift:16:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmpq940b55k.swift:16:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmpq940b55k.swift:18:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpq940b55k.swift:18:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    } else {\n        return l[len(l) / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmppzf1mvut.swift:8:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmppzf1mvut.swift:9:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmppzf1mvut.swift:10:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmppzf1mvut.swift:10:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmppzf1mvut.swift:10:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmppzf1mvut.swift:12:18: error: cannot find 'len' in scope\n        return l[len(l) / 2]\n                 ^~~\n/tmp/tmppzf1mvut.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[len(l) / 2]\n               ~^~~~~~~~~~~~\n               Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l = sorted(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpq940b55k.swift:8:9: error: cannot find 'sorted' in scope\n    l = sorted(l)\n        ^~~~~~\n/tmp/tmpq940b55k.swift:8:5: error: cannot assign to value: 'l' is a 'let' constant\n    l = sorted(l)\n    ^\n/tmp/tmpq940b55k.swift:9:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpq940b55k.swift:12:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpq940b55k.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpq940b55k.swift:15:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpq940b55k.swift:16:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmpq940b55k.swift:16:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmpq940b55k.swift:16:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmpq940b55k.swift:18:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpq940b55k.swift:18:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        panic(\"median of an empty list\")\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    mid := len(l) / 2\n    return (l[mid] + l[mid-1]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp7ejadbgo.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    mid := len(l) / 2\n       ^\n       ;\n/tmp/tmp7ejadbgo.swift:17:9: error: expected expression\n    mid := len(l) / 2\n        ^\n/tmp/tmp7ejadbgo.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp7ejadbgo.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"median of an empty list\")\n        ^~~~~\n/tmp/tmp7ejadbgo.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp7ejadbgo.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp7ejadbgo.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp7ejadbgo.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmp7ejadbgo.swift:17:5: error: cannot find 'mid' in scope\n    mid := len(l) / 2\n    ^~~\n/tmp/tmp7ejadbgo.swift:18:15: error: cannot find 'mid' in scope\n    return (l[mid] + l[mid-1]) / 2.0\n              ^~~\n/tmp/tmp7ejadbgo.swift:18:24: error: cannot find 'mid' in scope\n    return (l[mid] + l[mid-1]) / 2.0\n                       ^~~\n/tmp/tmp7ejadbgo.swift:18:20: error: cannot convert value of type 'Int' to expected argument type 'Double'\n    return (l[mid] + l[mid-1]) / 2.0\n                   ^\n           Double(            )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n    }\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp02drfzef.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp02drfzef.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp02drfzef.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp02drfzef.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp02drfzef.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmp02drfzef.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp02drfzef.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n                  ^~~\n/tmp/tmp02drfzef.swift:18:33: error: cannot find 'len' in scope\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n                                ^~~\n/tmp/tmp02drfzef.swift:18:29: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n                            ^\n               Double(                      )\n/tmp/tmp02drfzef.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n/tmp/tmp02drfzef.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n           Double(    )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l = sort(l)\n    n := len(l)\n    if n == 0 {\n        return 0.0\n    }\n    if n%2 == 0 {\n        return (l[n/2] + l[n/2 - 1]) / 2.0\n    }\n    return l[n/2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp2d0x60sd.swift:9:6: error: consecutive statements on a line must be separated by ';'\n    n := len(l)\n     ^\n     ;\n/tmp/tmp2d0x60sd.swift:9:7: error: expected expression\n    n := len(l)\n      ^\n/tmp/tmp2d0x60sd.swift:8:9: error: cannot find 'sort' in scope\n    l = sort(l)\n        ^~~~\n/tmp/tmp2d0x60sd.swift:8:5: error: cannot assign to value: 'l' is a 'let' constant\n    l = sort(l)\n    ^\n/tmp/tmp2d0x60sd.swift:9:5: error: cannot find 'n' in scope\n    n := len(l)\n    ^\n/tmp/tmp2d0x60sd.swift:10:8: error: cannot find 'n' in scope\n    if n == 0 {\n       ^\n/tmp/tmp2d0x60sd.swift:13:8: error: cannot find 'n' in scope\n    if n%2 == 0 {\n       ^\n/tmp/tmp2d0x60sd.swift:14:19: error: cannot find 'n' in scope\n        return (l[n/2] + l[n/2 - 1]) / 2.0\n                  ^\n/tmp/tmp2d0x60sd.swift:14:28: error: cannot find 'n' in scope\n        return (l[n/2] + l[n/2 - 1]) / 2.0\n                           ^\n/tmp/tmp2d0x60sd.swift:14:24: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[n/2] + l[n/2 - 1]) / 2.0\n                       ^\n               Double(              )\n/tmp/tmp2d0x60sd.swift:16:14: error: cannot find 'n' in scope\n    return l[n/2]\n             ^\n/tmp/tmp2d0x60sd.swift:16:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[n/2]\n           ~^~~~~\n           Double( )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0\n    }\n    \n    l.sort()\n    \n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    } else {\n        return l[len(l) / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp3ayu3ajp.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp3ayu3ajp.swift:12:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp3ayu3ajp.swift:14:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp3ayu3ajp.swift:15:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                  ^~~\n/tmp/tmp3ayu3ajp.swift:15:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                                  ^~~\n/tmp/tmp3ayu3ajp.swift:15:52: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(                                )\n/tmp/tmp3ayu3ajp.swift:17:18: error: cannot find 'len' in scope\n        return l[len(l) / 2]\n                 ^~~\n/tmp/tmp3ayu3ajp.swift:17:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[len(l) / 2]\n               ~^~~~~~~~~~~~\n               Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var sorted = sort(l)\n    var middle = len(sorted) / 2\n    if len(sorted) % 2 == 0 {\n        return (sorted[middle] + sorted[middle - 1]) / 2.0\n    } else {\n        return sorted[middle]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmphkgbxlax.swift:8:18: error: cannot find 'sort' in scope\n    var sorted = sort(l)\n                 ^~~~\n/tmp/tmphkgbxlax.swift:9:18: error: cannot find 'len' in scope\n    var middle = len(sorted) / 2\n                 ^~~\n/tmp/tmphkgbxlax.swift:10:8: error: cannot find 'len' in scope\n    if len(sorted) % 2 == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median_helper(l, 0, len(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpfe8x40hh.swift:8:12: error: cannot find 'median_helper' in scope\n    return median_helper(l, 0, len(l))\n           ^~~~~~~~~~~~~\n/tmp/tmpfe8x40hh.swift:8:32: error: cannot find 'len' in scope\n    return median_helper(l, 0, len(l))\n                               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var m Int\n    var n Int\n    var i Int\n    var j Int\n    var k Int\n    var p Int\n    var q Int\n    var r Int\n    var s Int\n    var t Int\n    var u Int\n    var v Int\n    var w Int\n    var x Int\n    var y Int\n    var z Int\n    var a Int\n    var b Int\n    var c Int\n    var d Int\n    var e Int\n    var f Int\n    var g Int\n    var h Int\n    var i1 Int\n    var i2 Int\n    var i3 Int\n    var i4 Int\n    var i5 Int\n    var i6 Int\n    var i7 Int\n    var i8 Int\n    var i9 Int\n    var i10 Int\n    var i11 Int\n    var i12 Int\n    var i13 Int\n    var i14 Int\n    var i15 Int\n    var i16 Int\n    var i17 Int\n    var i18 Int\n    var i19 Int\n    var i20 Int\n    var i21 Int\n    var i22 Int\n    var i23 Int\n    var i24 Int\n    var i25 Int\n    var i26 Int\n    var i27 Int\n    var i28 Int\n    var i29 Int\n    var i30 Int\n    var i31 Int\n    var i32 Int\n    var i33 Int\n    var i34 Int\n    var i35 Int\n    var i36 Int\n    var i37 Int\n    var i38 Int\n    var i39 Int\n    var i40 Int\n    var i41 Int\n    var i42 Int\n    var i43 Int\n    var i44 Int\n    var i45 Int\n    var i46 Int\n    var i47 Int\n    var i48 Int\n    var i49 Int\n    var i50 Int\n    var i51 Int\n    var i52 Int\n    var i53 Int\n    var i54 Int\n    var i55 Int\n    var i56 Int\n    var i57 Int\n    var i58 Int\n    var i59 Int\n    var i60 Int\n    var i61 Int\n    var i62 Int\n    var i63 Int\n    var i64 Int\n    var i65 Int\n    var\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmp2toax2y9.swift:8:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var m Int\n          ^\n/tmp/tmp2toax2y9.swift:8:11: note: join the identifiers together\n    var m Int\n        ~~^~~\n        mInt\n/tmp/tmp2toax2y9.swift:9:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var n Int\n          ^\n/tmp/tmp2toax2y9.swift:9:11: note: join the identifiers together\n    var n Int\n        ~~^~~\n        nInt\n/tmp/tmp2toax2y9.swift:10:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var i Int\n          ^\n/tmp/tmp2toax2y9.swift:10:11: note: join the identifiers together\n    var i Int\n        ~~^~~\n        iInt\n/tmp/tmp2toax2y9.swift:11:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var j Int\n          ^\n/tmp/tmp2toax2y9.swift:11:11: note: join the identifiers together\n    var j Int\n        ~~^~~\n        jInt\n/tmp/tmp2toax2y9.swift:12:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var k Int\n          ^\n/tmp/tmp2toax2y9.swift:12:11: note: join the identifiers together\n    var k Int\n        ~~^~~\n        kInt\n/tmp/tmp2toax2y9.swift:13:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var p Int\n          ^\n/tmp/tmp2toax2y9.swift:13:11: note: join the identifiers together\n    var p Int\n        ~~^~~\n        pInt\n/tmp/tmp2toax2y9.swift:14:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var q Int\n          ^\n/tmp/tmp2toax2y9.swift:14:11: note: join the identifiers together\n    var q Int\n        ~~^~~\n        qInt\n/tmp/tmp2toax2y9.swift:15:11: error: found an unexpected second identifier in variable declaration; is there an accidental break?\n    var r Int\n          ^\n/tmp/tmp2toax2y9.swift:15:11: note: join the identifier",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: toList(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmp45nef2bs.swift:8:22: error: cannot find 'toList' in scope\n    return median(l: toList(l))\n                     ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    sorted := make([]Int, len(l))\n    copy(sorted, l)\n    sort.Ints(sorted)\n    if len(sorted) % 2 == 0 {\n        return (sorted[len(sorted) / 2] + sorted[len(sorted) / 2 - 1]) / 2.0\n    }\n    return sorted[len(sorted) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmps3b4eaum.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    sorted := make([]Int, len(l))\n          ^\n          ;\n/tmp/tmps3b4eaum.swift:17:12: error: expected expression\n    sorted := make([]Int, len(l))\n           ^\n/tmp/tmps3b4eaum.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmps3b4eaum.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmps3b4eaum.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmps3b4eaum.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmps3b4eaum.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmps3b4eaum.swift:17:5: error: cannot find 'sorted' in scope\n    sorted := make([]Int, len(l))\n    ^~~~~~\n/tmp/tmps3b4eaum.swift:20:8: error: cannot find 'len' in scope\n    if len(sorted) % 2 == 0 {\n       ^~~\n/tmp/tmps3b4eaum.swift:20:12: error: cannot find 'sorted' in scope\n    if len(sorted) % 2 == 0 {\n           ^~~~~~\n/tmp/tmps3b4eaum.swift:21:17: error: cannot find 'sorted' in scope\n        return (sorted[len(sorted) / 2] + sorted[len(sorted) / 2 - 1]) / 2.0\n                ^~~~~~\n/tmp/tmps3b4eaum.swift:21:24: error: cannot find 'len' in scope\n        return (sorted[len(sorted) / 2] + sorted[len(sorted) / 2 - 1]) / 2.0\n                       ^~~\n/tmp/tmps3b4eaum.swift:21:28: error: cannot find 'sorted' in scope\n        return (sorted[len(sorted) / 2] + sorted[len(sorted) / 2 - 1]) / 2.0\n                           ^~~~~~\n/tmp/tmps3b4eaum.swift:21:43: error: cannot find 'sorted' in scope\n        return (sorted[len(sorted) / 2] + sorted[len(sorted) / 2 - 1]) / 2.0\n                                          ^~~~~~\n/tmp/tmps3b4eaum.swift:21:50: error: cannot find 'len' in scope\n        return (sorted[len(sorted) / 2]",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    med := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > med {\n            med = l[i]\n        }\n    }\n    return med\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmphxv0q5r0.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    med := l[0]\n       ^\n       ;\n/tmp/tmphxv0q5r0.swift:17:9: error: expected expression\n    med := l[0]\n        ^\n/tmp/tmphxv0q5r0.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmphxv0q5r0.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmphxv0q5r0.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmphxv0q5r0.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmphxv0q5r0.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmphxv0q5r0.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmphxv0q5r0.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmphxv0q5r0.swift:15:30: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[0] + l[1]) / 2\n               ~~~~~~~~~~~~~~^~~\n               Double(          )\n/tmp/tmphxv0q5r0.swift:17:5: error: cannot find 'med' in scope\n    med := l[0]\n    ^~~\n/tmp/tmphxv0q5r0.swift:23:12: error: cannot find 'med' in scope\n    return med\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: l.sort())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmprbrhrqmq.swift:8:24: error: cannot convert value of type '()' to expected argument type '[Int]'\n    return median(l: l.sort())\n                       ^\n/tmp/tmprbrhrqmq.swift:8:24: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    return median(l: l.sort())\n                     ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var n = len(l)\n    if n == 0 {\n        return 0.0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    var m = n / 2\n    var i = 0\n    var j = n - 1\n    var k = 0\n    for k < m {\n        i = i + 1\n        j = j - 1\n        k = i + j\n    }\n    if l[i] > l[j] {\n        i = i + 1\n        j = j - 1\n        k = i + j\n    }\n    return (l[i] + l[j]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpi13phm7b.swift:22:11: error: expected 'in' after for-each pattern\n    for k < m {\n          ^\n/tmp/tmpi13phm7b.swift:22:11: error: unary operator cannot be separated from its operand\n    for k < m {\n          ^~\n           \n/tmp/tmpi13phm7b.swift:8:13: error: cannot find 'len' in scope\n    var n = len(l)\n            ^~~\n/tmp/tmpi13phm7b.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpi13phm7b.swift:16:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpi13phm7b.swift:22:11: error: '<' is not a prefix unary operator\n    for k < m {\n          ^\n/tmp/tmpi13phm7b.swift:32:18: error: cannot convert value of type 'Int' to expected argument type 'Double'\n    return (l[i] + l[j]) / 2.0\n                 ^\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l = sorted(l)\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpq940b55k.swift:8:9: error: cannot find 'sorted' in scope\n    l = sorted(l)\n        ^~~~~~\n/tmp/tmpq940b55k.swift:8:5: error: cannot assign to value: 'l' is a 'let' constant\n    l = sorted(l)\n    ^\n/tmp/tmpq940b55k.swift:9:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpq940b55k.swift:12:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpq940b55k.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpq940b55k.swift:15:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpq940b55k.swift:16:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmpq940b55k.swift:16:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmpq940b55k.swift:16:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmpq940b55k.swift:18:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpq940b55k.swift:18:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) == 3 {\n        return (l[0] + l[1] + l[2]) / 3.0\n    }\n    if len(l) == 4 {\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n    }\n    if len(l) == 5 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n    }\n    if len(l) == 6 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n    }\n    if len(l) == 7 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7.0\n    }\n    if len(l) == 8 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8.0\n    }\n    if len(l) == 9 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9.0\n    }\n    if len(l) == 10 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10.0\n    }\n    if len(l) == 11 {\n        return (l[0] + l[1] +\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293412,
      "stdout": "",
      "stderr": "/tmp/tmpqge__5y4.swift:43:1: error: expected expression after operator\n}\n^\n/tmp/tmpqge__5y4.swift:62:46: error: expected '}' at end of brace statement\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)\n                                             ^\n/tmp/tmpqge__5y4.swift:7:33: note: to match this opening '{'\nfunc median(l: [Int]) -> Double {\n                                ^\n/tmp/tmpqge__5y4.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpqge__5y4.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpqge__5y4.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpqge__5y4.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpqge__5y4.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpqge__5y4.swift:17:8: error: cannot find 'len' in scope\n    if len(l) == 3 {\n       ^~~\n/tmp/tmpqge__5y4.swift:18:29: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1] + l[2]) / 3.0\n                            ^\n               Double(             )\n/tmp/tmpqge__5y4.swift:20:8: error: cannot find 'len' in scope\n    if len(l) == 4 {\n       ^~~\n/tmp/tmpqge__5y4.swift:21:36: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n                                   ^\n               Double(                    )\n/tmp/tmpqge__5y4.swift:23:8: error: cannot find 'len' in scope\n    if len(l) == 5 {\n       ^~~\n/tmp/tmpqge__5y4.swift:24:16: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: [Int])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpe3cfwuvg.swift:8:22: error: cannot convert value of type '[Int].Type' to expected argument type '[Int]'\n    return median(l: [Int])\n                     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmp_2j0rf5k/tmp_2j0rf5k.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b686b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b683a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b683a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b683a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2j0rf5k                        0x000055e311d82321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7b6889e460 __libc_start_main + 245\n6    tmp_2j0rf5k                        0x000055e311d81f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmp9tf3bnkk.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp9tf3bnkk.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:15:30: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[0] + l[1]) / 2\n               ~~~~~~~~~~~~~~^~~\n               Double(          )\n/tmp/tmp9tf3bnkk.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                  ^~~\n/tmp/tmp9tf3bnkk.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                                  ^~~\n/tmp/tmp9tf3bnkk.swift:18:52: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(                                )\n/tmp/tmp9tf3bnkk.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp9tf3bnkk.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        panic(\"median of an empty list\")\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "/tmp/tmp4tw4ro7g.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp4tw4ro7g.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"median of an empty list\")\n        ^~~~~\n/tmp/tmp4tw4ro7g.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp4tw4ro7g.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp4tw4ro7g.swift:14:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp4tw4ro7g.swift:15:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp4tw4ro7g.swift:16:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmp4tw4ro7g.swift:16:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmp4tw4ro7g.swift:16:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmp4tw4ro7g.swift:18:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp4tw4ro7g.swift:18:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: l.sort())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmprbrhrqmq.swift:8:24: error: cannot convert value of type '()' to expected argument type '[Int]'\n    return median(l: l.sort())\n                       ^\n/tmp/tmprbrhrqmq.swift:8:24: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    return median(l: l.sort())\n                     ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median_arr(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmpny1b3gel.swift:8:12: error: cannot find 'median_arr' in scope\n    return median_arr(l)\n           ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l = l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    } else {\n        return l[len(l) / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "/tmp/tmp10kb34fa.swift:8:5: error: cannot assign to value: 'l' is a 'let' constant\n    l = l.sort()\n    ^\n/tmp/tmp10kb34fa.swift:8:11: error: cannot assign value of type '()' to type '[Int]'\n    l = l.sort()\n        ~~^~~~~~\n/tmp/tmp10kb34fa.swift:8:11: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l = l.sort()\n        ~ ^\n/tmp/tmp10kb34fa.swift:9:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp10kb34fa.swift:10:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmp10kb34fa.swift:10:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmp10kb34fa.swift:10:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmp10kb34fa.swift:12:18: error: cannot find 'len' in scope\n        return l[len(l) / 2]\n                 ^~~\n/tmp/tmp10kb34fa.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[len(l) / 2]\n               ~^~~~~~~~~~~~\n               Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    } else {\n        return l[len(l) / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmppzf1mvut.swift:8:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmppzf1mvut.swift:9:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmppzf1mvut.swift:10:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmppzf1mvut.swift:10:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmppzf1mvut.swift:10:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmppzf1mvut.swift:12:18: error: cannot find 'len' in scope\n        return l[len(l) / 2]\n                 ^~~\n/tmp/tmppzf1mvut.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[len(l) / 2]\n               ~^~~~~~~~~~~~\n               Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n    }\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp02drfzef.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp02drfzef.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp02drfzef.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp02drfzef.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp02drfzef.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmp02drfzef.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp02drfzef.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n                  ^~~\n/tmp/tmp02drfzef.swift:18:33: error: cannot find 'len' in scope\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n                                ^~~\n/tmp/tmp02drfzef.swift:18:29: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n                            ^\n               Double(                      )\n/tmp/tmp02drfzef.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n/tmp/tmp02drfzef.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n           Double(    )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    m := len(l) / 2\n    return (l[m] + l[m - 1]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp58b6y9i9.swift:17:6: error: consecutive statements on a line must be separated by ';'\n    m := len(l) / 2\n     ^\n     ;\n/tmp/tmp58b6y9i9.swift:17:7: error: expected expression\n    m := len(l) / 2\n      ^\n/tmp/tmp58b6y9i9.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp58b6y9i9.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp58b6y9i9.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp58b6y9i9.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp58b6y9i9.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmp58b6y9i9.swift:17:5: error: cannot find 'm' in scope\n    m := len(l) / 2\n    ^\n/tmp/tmp58b6y9i9.swift:18:15: error: cannot find 'm' in scope\n    return (l[m] + l[m - 1]) / 2.0\n              ^\n/tmp/tmp58b6y9i9.swift:18:22: error: cannot find 'm' in scope\n    return (l[m] + l[m - 1]) / 2.0\n                     ^\n/tmp/tmp58b6y9i9.swift:18:18: error: cannot convert value of type 'Int' to expected argument type 'Double'\n    return (l[m] + l[m - 1]) / 2.0\n                 ^\n           Double(          )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    med := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > med {\n            med = l[i]\n        }\n    }\n    return med\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmpmhiyaog4.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    med := l[0]\n       ^\n       ;\n/tmp/tmpmhiyaog4.swift:17:9: error: expected expression\n    med := l[0]\n        ^\n/tmp/tmpmhiyaog4.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpmhiyaog4.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpmhiyaog4.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpmhiyaog4.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpmhiyaog4.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpmhiyaog4.swift:17:5: error: cannot find 'med' in scope\n    med := l[0]\n    ^~~\n/tmp/tmpmhiyaog4.swift:23:12: error: cannot find 'med' in scope\n    return med\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        panic(\"median of an empty list\")\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "/tmp/tmpzg0t3dfu.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpzg0t3dfu.swift:9:9: error: cannot find 'panic' in scope\n        panic(\"median of an empty list\")\n        ^~~~~\n/tmp/tmpzg0t3dfu.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpzg0t3dfu.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpzg0t3dfu.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpzg0t3dfu.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpzg0t3dfu.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpzg0t3dfu.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmpzg0t3dfu.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmpzg0t3dfu.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmpzg0t3dfu.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpzg0t3dfu.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    if l_len == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    var l_sorted = sort(l)\n    var l_half = l_sorted[l_len / 2]\n    if l_len % 2 == 0 {\n        return (l_half + l_sorted[l_len / 2 - 1]) / 2.0\n    }\n    return l_half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpf9jaxl_m.swift:8:17: error: cannot find 'len' in scope\n    var l_len = len(l)\n                ^~~\n/tmp/tmpf9jaxl_m.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpf9jaxl_m.swift:16:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpf9jaxl_m.swift:18:20: error: cannot find 'sort' in scope\n    var l_sorted = sort(l)\n                   ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l = sort(l)\n    n := len(l)\n    if n == 0 {\n        return 0.0\n    }\n    if n%2 == 0 {\n        return (l[n/2] + l[n/2 - 1]) / 2.0\n    }\n    return l[n/2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp2d0x60sd.swift:9:6: error: consecutive statements on a line must be separated by ';'\n    n := len(l)\n     ^\n     ;\n/tmp/tmp2d0x60sd.swift:9:7: error: expected expression\n    n := len(l)\n      ^\n/tmp/tmp2d0x60sd.swift:8:9: error: cannot find 'sort' in scope\n    l = sort(l)\n        ^~~~\n/tmp/tmp2d0x60sd.swift:8:5: error: cannot assign to value: 'l' is a 'let' constant\n    l = sort(l)\n    ^\n/tmp/tmp2d0x60sd.swift:9:5: error: cannot find 'n' in scope\n    n := len(l)\n    ^\n/tmp/tmp2d0x60sd.swift:10:8: error: cannot find 'n' in scope\n    if n == 0 {\n       ^\n/tmp/tmp2d0x60sd.swift:13:8: error: cannot find 'n' in scope\n    if n%2 == 0 {\n       ^\n/tmp/tmp2d0x60sd.swift:14:19: error: cannot find 'n' in scope\n        return (l[n/2] + l[n/2 - 1]) / 2.0\n                  ^\n/tmp/tmp2d0x60sd.swift:14:28: error: cannot find 'n' in scope\n        return (l[n/2] + l[n/2 - 1]) / 2.0\n                           ^\n/tmp/tmp2d0x60sd.swift:14:24: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[n/2] + l[n/2 - 1]) / 2.0\n                       ^\n               Double(              )\n/tmp/tmp2d0x60sd.swift:16:14: error: cannot find 'n' in scope\n    return l[n/2]\n             ^\n/tmp/tmp2d0x60sd.swift:16:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[n/2]\n           ~^~~~~\n           Double( )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    med := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > med {\n            med = l[i]\n        }\n    }\n    return med\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmpmhiyaog4.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    med := l[0]\n       ^\n       ;\n/tmp/tmpmhiyaog4.swift:17:9: error: expected expression\n    med := l[0]\n        ^\n/tmp/tmpmhiyaog4.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpmhiyaog4.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpmhiyaog4.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpmhiyaog4.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpmhiyaog4.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpmhiyaog4.swift:17:5: error: cannot find 'med' in scope\n    med := l[0]\n    ^~~\n/tmp/tmpmhiyaog4.swift:23:12: error: cannot find 'med' in scope\n    return med\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n    }\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp02drfzef.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp02drfzef.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp02drfzef.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp02drfzef.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp02drfzef.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmp02drfzef.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp02drfzef.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n                  ^~~\n/tmp/tmp02drfzef.swift:18:33: error: cannot find 'len' in scope\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n                                ^~~\n/tmp/tmp02drfzef.swift:18:29: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n                            ^\n               Double(                      )\n/tmp/tmp02drfzef.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n/tmp/tmp02drfzef.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n           Double(    )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp4f6kedev.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:11:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp4f6kedev.swift:12:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:13:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmp4f6kedev.swift:13:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmp4f6kedev.swift:13:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmp4f6kedev.swift:15:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp4f6kedev.swift:15:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "/tmp/tmpkd3_ekyo.swift:8:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpkd3_ekyo.swift:9:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpkd3_ekyo.swift:10:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmpkd3_ekyo.swift:10:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmpkd3_ekyo.swift:10:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmpkd3_ekyo.swift:12:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmpkd3_ekyo.swift:12:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return (l[mid] + l[mid-1]) / 2.0\n    }\n    return l[mid]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpfbena3w_.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    mid := len(l) / 2\n       ^\n       ;\n/tmp/tmpfbena3w_.swift:17:9: error: expected expression\n    mid := len(l) / 2\n        ^\n/tmp/tmpfbena3w_.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpfbena3w_.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpfbena3w_.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpfbena3w_.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpfbena3w_.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpfbena3w_.swift:17:5: error: cannot find 'mid' in scope\n    mid := len(l) / 2\n    ^~~\n/tmp/tmpfbena3w_.swift:18:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmpfbena3w_.swift:19:19: error: cannot find 'mid' in scope\n        return (l[mid] + l[mid-1]) / 2.0\n                  ^~~\n/tmp/tmpfbena3w_.swift:19:28: error: cannot find 'mid' in scope\n        return (l[mid] + l[mid-1]) / 2.0\n                           ^~~\n/tmp/tmpfbena3w_.swift:19:24: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[mid] + l[mid-1]) / 2.0\n                       ^\n               Double(            )\n/tmp/tmpfbena3w_.swift:21:14: error: cannot find 'mid' in scope\n    return l[mid]\n             ^~~\n/tmp/tmpfbena3w_.swift:21:13: error: no 'subscript' candidates produce the expected contextual result type 'Double'\n    return l[mid]\n            ^\nSwift.Array:16:23: note: 'subscript(_:)' produces 'Int', not the expected contextual result type 'Double'\n    @inlinable public subscript(index: Int) -> Element { get set }\n                      ^\nSwift.Array:17:23: note: 'subscript(_:)' produces 'ArraySlice<Int>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var (\n        n = len(l)\n        m = n/2\n        p = make([]Int, n)\n        q = make([]Int, n)\n    )\n    for i := 0; i < n; i++ {\n        p[i] = l[i]\n    }\n    sort.Ints(p)\n    for i := 0; i < m; i++ {\n        q[i] = p[i]\n    }\n    sort.Ints(q)\n    if n%2 == 0 {\n        return (q[m-1] + q[m]) / 2.0\n    }\n    return q[m]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpyiehl8wq.swift:9:11: error: expected ',' separator\n        n = len(l)\n          ^\n         ,\n/tmp/tmpyiehl8wq.swift:9:11: error: expected pattern\n        n = len(l)\n          ^\n/tmp/tmpyiehl8wq.swift:14:12: error: expected type\n    for i := 0; i < n; i++ {\n           ^\n            <#type#>\n/tmp/tmpyiehl8wq.swift:14:12: error: expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n           ^\n/tmp/tmpyiehl8wq.swift:14:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < n; i++ {\n           ^\n/tmp/tmpyiehl8wq.swift:18:12: error: expected type\n    for i := 0; i < m; i++ {\n           ^\n            <#type#>\n/tmp/tmpyiehl8wq.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 0; i < m; i++ {\n           ^\n/tmp/tmpyiehl8wq.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 0; i < m; i++ {\n           ^\n/tmp/tmpyiehl8wq.swift:9:9: error: type annotation missing in pattern\n        n = len(l)\n        ^\n/tmp/tmpyiehl8wq.swift:23:17: error: cannot find 'q' in scope\n        return (q[m-1] + q[m]) / 2.0\n                ^\n/tmp/tmpyiehl8wq.swift:23:19: error: cannot find 'm' in scope\n        return (q[m-1] + q[m]) / 2.0\n                  ^\n/tmp/tmpyiehl8wq.swift:23:26: error: cannot find 'q' in scope\n        return (q[m-1] + q[m]) / 2.0\n                         ^\n/tmp/tmpyiehl8wq.swift:23:28: error: cannot find 'm' in scope\n        return (q[m-1] + q[m]) / 2.0\n                           ^\n/tmp/tmpyiehl8wq.swift:25:12: error: cannot find 'q' in scope\n    return q[m]\n           ^\n/tmp/tmpyiehl8wq.swift:25:14: error: cannot find 'm' in scope\n    return q[m]\n             ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median_helper(l, 0, len(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpfe8x40hh.swift:8:12: error: cannot find 'median_helper' in scope\n    return median_helper(l, 0, len(l))\n           ^~~~~~~~~~~~~\n/tmp/tmpfe8x40hh.swift:8:32: error: cannot find 'len' in scope\n    return median_helper(l, 0, len(l))\n                               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    \n    if len(l) == 1 {\n        return l[0]\n    }\n    \n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    \n    if len(l) == 3 {\n        return (l[0] + l[1] + l[2]) / 3.0\n    }\n    \n    if len(l) == 4 {\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n    }\n    \n    if len(l) == 5 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n    }\n    \n    if len(l) == 6 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n    }\n    \n    if len(l) == 7 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7.0\n    }\n    \n    if len(l) == 8 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8.0\n    }\n    \n    if len(l) == 9 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9.0\n    }\n    \n    if len(l) == 10 {\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10.0\n    }\n    \n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293414,
      "stdout": "",
      "stderr": "/tmp/tmphuc53t_o.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmphuc53t_o.swift:12:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmphuc53t_o.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmphuc53t_o.swift:16:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmphuc53t_o.swift:17:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmphuc53t_o.swift:20:8: error: cannot find 'len' in scope\n    if len(l) == 3 {\n       ^~~\n/tmp/tmphuc53t_o.swift:21:29: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1] + l[2]) / 3.0\n                            ^\n               Double(             )\n/tmp/tmphuc53t_o.swift:24:8: error: cannot find 'len' in scope\n    if len(l) == 4 {\n       ^~~\n/tmp/tmphuc53t_o.swift:25:36: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1] + l[2] + l[3]) / 4.0\n                                   ^\n               Double(                    )\n/tmp/tmphuc53t_o.swift:28:8: error: cannot find 'len' in scope\n    if len(l) == 5 {\n       ^~~\n/tmp/tmphuc53t_o.swift:29:16: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphuc53t_o.swift:32:8: error: cannot find 'len' in scope\n    if len(l) == 6 {\n       ^~~\n/tmp/tmphuc53t_o.swift:33:16: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmp9tf3bnkk.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp9tf3bnkk.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:15:30: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[0] + l[1]) / 2\n               ~~~~~~~~~~~~~~^~~\n               Double(          )\n/tmp/tmp9tf3bnkk.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp9tf3bnkk.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                  ^~~\n/tmp/tmp9tf3bnkk.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                                  ^~~\n/tmp/tmp9tf3bnkk.swift:18:52: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(                                )\n/tmp/tmp9tf3bnkk.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp9tf3bnkk.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    med := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > med {\n            med = l[i]\n        }\n    }\n    return med\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmpmhiyaog4.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    med := l[0]\n       ^\n       ;\n/tmp/tmpmhiyaog4.swift:17:9: error: expected expression\n    med := l[0]\n        ^\n/tmp/tmpmhiyaog4.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpmhiyaog4.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpmhiyaog4.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpmhiyaog4.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpmhiyaog4.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpmhiyaog4.swift:17:5: error: cannot find 'med' in scope\n    med := l[0]\n    ^~~\n/tmp/tmpmhiyaog4.swift:23:12: error: cannot find 'med' in scope\n    return med\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmp_2j0rf5k/tmp_2j0rf5k.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b686b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b683a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b683a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b683a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2j0rf5k                        0x000055e311d82321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7b6889e460 __libc_start_main + 245\n6    tmp_2j0rf5k                        0x000055e311d81f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median_int(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpbiok56_6.swift:8:12: error: cannot find 'median_int' in scope\n    return median_int(l)\n           ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: l.sort())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmprbrhrqmq.swift:8:24: error: cannot convert value of type '()' to expected argument type '[Int]'\n    return median(l: l.sort())\n                       ^\n/tmp/tmprbrhrqmq.swift:8:24: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    return median(l: l.sort())\n                     ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmpg9eiyrhi.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpg9eiyrhi.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpg9eiyrhi.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpg9eiyrhi.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpg9eiyrhi.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpg9eiyrhi.swift:17:15: error: cannot find 'len' in scope\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n              ^~~\n/tmp/tmpg9eiyrhi.swift:17:31: error: cannot find 'len' in scope\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^~~\n/tmp/tmpg9eiyrhi.swift:17:27: error: cannot convert value of type 'Int' to expected argument type 'Double'\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                          ^\n           Double(                            )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var sorted = sort(l)\n    var mid = len(sorted) / 2\n    if len(sorted) % 2 == 0 {\n        return (sorted[mid] + sorted[mid - 1]) / 2.0\n    } else {\n        return sorted[mid]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpqmonsc0d.swift:8:18: error: cannot find 'sort' in scope\n    var sorted = sort(l)\n                 ^~~~\n/tmp/tmpqmonsc0d.swift:9:15: error: cannot find 'len' in scope\n    var mid = len(sorted) / 2\n              ^~~\n/tmp/tmpqmonsc0d.swift:10:8: error: cannot find 'len' in scope\n    if len(sorted) % 2 == 0 {\n       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp4f6kedev.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:11:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp4f6kedev.swift:12:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:13:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmp4f6kedev.swift:13:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmp4f6kedev.swift:13:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmp4f6kedev.swift:15:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp4f6kedev.swift:15:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    med := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > med {\n            med = l[i]\n        }\n    }\n    return med\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmpmhiyaog4.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    med := l[0]\n       ^\n       ;\n/tmp/tmpmhiyaog4.swift:17:9: error: expected expression\n    med := l[0]\n        ^\n/tmp/tmpmhiyaog4.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpmhiyaog4.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpmhiyaog4.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpmhiyaog4.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpmhiyaog4.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpmhiyaog4.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpmhiyaog4.swift:17:5: error: cannot find 'med' in scope\n    med := l[0]\n    ^~~\n/tmp/tmpmhiyaog4.swift:23:12: error: cannot find 'med' in scope\n    return med\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    mid := len(l) / 2\n    left := l[:mid]\n    right := l[mid:]\n    return (median(left) + median(right)) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp34vqx0p_.swift:17:8: error: consecutive statements on a line must be separated by ';'\n    mid := len(l) / 2\n       ^\n       ;\n/tmp/tmp34vqx0p_.swift:17:9: error: expected expression\n    mid := len(l) / 2\n        ^\n/tmp/tmp34vqx0p_.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp34vqx0p_.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp34vqx0p_.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp34vqx0p_.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmp34vqx0p_.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmp34vqx0p_.swift:17:5: error: cannot find 'mid' in scope\n    mid := len(l) / 2\n    ^~~\n/tmp/tmp34vqx0p_.swift:20:20: error: cannot find 'left' in scope\n    return (median(left) + median(right)) / 2.0\n                   ^~~~\n/tmp/tmp34vqx0p_.swift:20:35: error: cannot find 'right' in scope\n    return (median(left) + median(right)) / 2.0\n                                  ^~~~~\n/tmp/tmp34vqx0p_.swift:20:20: error: missing argument label 'l:' in call\n    return (median(left) + median(right)) / 2.0\n                   ^\n                   l: \n/tmp/tmp34vqx0p_.swift:20:35: error: missing argument label 'l:' in call\n    return (median(left) + median(right)) / 2.0\n                                  ^\n                                  l: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmp_2j0rf5k/tmp_2j0rf5k.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b686b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b683a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b683a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b683a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2j0rf5k                        0x000055e311d82321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7b6889e460 __libc_start_main + 245\n6    tmp_2j0rf5k                        0x000055e311d81f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "tmpl9okuxdc/tmpl9okuxdc.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2f45968c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2f4565fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2f4565f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2f4565e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl9okuxdc                        0x000055a96c50a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b2f45b54460 __libc_start_main + 245\n6    tmpl9okuxdc                        0x000055a96c509f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return quickselect(l, 0, len(l)-1, len(l)/2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "/tmp/tmprq5zfo8e.swift:8:12: error: cannot find 'quickselect' in scope\n    return quickselect(l, 0, len(l)-1, len(l)/2)\n           ^~~~~~~~~~~\n/tmp/tmprq5zfo8e.swift:8:30: error: cannot find 'len' in scope\n    return quickselect(l, 0, len(l)-1, len(l)/2)\n                             ^~~\n/tmp/tmprq5zfo8e.swift:8:40: error: cannot find 'len' in scope\n    return quickselect(l, 0, len(l)-1, len(l)/2)\n                                       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median_helper(l, 0, len(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpfe8x40hh.swift:8:12: error: cannot find 'median_helper' in scope\n    return median_helper(l, 0, len(l))\n           ^~~~~~~~~~~~~\n/tmp/tmpfe8x40hh.swift:8:32: error: cannot find 'len' in scope\n    return median_helper(l, 0, len(l))\n                               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    l = sort(l)\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp10qj312q.swift:8:9: error: cannot find 'sort' in scope\n    l = sort(l)\n        ^~~~\n/tmp/tmp10qj312q.swift:8:5: error: cannot assign to value: 'l' is a 'let' constant\n    l = sort(l)\n    ^\n/tmp/tmp10qj312q.swift:9:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp10qj312q.swift:12:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmp10qj312q.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmp10qj312q.swift:15:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp10qj312q.swift:16:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                  ^~~\n/tmp/tmp10qj312q.swift:16:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n                                  ^~~\n/tmp/tmp10qj312q.swift:16:52: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(                                )\n/tmp/tmp10qj312q.swift:18:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp10qj312q.swift:18:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var l_len = len(l)\n    if l_len == 0 {\n        return 0.0\n    }\n    if l_len == 1 {\n        return l[0]\n    }\n    var l_sorted = make([]Int, l_len)\n    copy(l_sorted, l)\n    sort.Ints(l_sorted)\n    var l_half = l_len / 2\n    if l_len % 2 == 0 {\n        return (l_sorted[l_half] + l_sorted[l_half - 1]) / 2.0\n    } else {\n        return l_sorted[l_half]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmpa_0xirpw.swift:15:27: error: expected ',' separator\n    var l_sorted = make([]Int, l_len)\n                          ^\n                          ,\n/tmp/tmpa_0xirpw.swift:8:17: error: cannot find 'len' in scope\n    var l_len = len(l)\n                ^~~\n/tmp/tmpa_0xirpw.swift:13:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpa_0xirpw.swift:15:20: error: cannot find 'make' in scope\n    var l_sorted = make([]Int, l_len)\n                   ^~~~\n/tmp/tmpa_0xirpw.swift:16:5: error: cannot find 'copy' in scope\n    copy(l_sorted, l)\n    ^~~~\n/tmp/tmpa_0xirpw.swift:17:5: error: cannot find 'sort' in scope\n    sort.Ints(l_sorted)\n    ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median_int(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpbiok56_6.swift:8:12: error: cannot find 'median_int' in scope\n    return median_int(l)\n           ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return medianHelper(l, 0, len(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "/tmp/tmp_154mmky.swift:8:12: error: cannot find 'medianHelper' in scope\n    return medianHelper(l, 0, len(l))\n           ^~~~~~~~~~~~\n/tmp/tmp_154mmky.swift:8:31: error: cannot find 'len' in scope\n    return medianHelper(l, 0, len(l))\n                              ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median_helper(l, 0, len(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpfe8x40hh.swift:8:12: error: cannot find 'median_helper' in scope\n    return median_helper(l, 0, len(l))\n           ^~~~~~~~~~~~~\n/tmp/tmpfe8x40hh.swift:8:32: error: cannot find 'len' in scope\n    return median_helper(l, 0, len(l))\n                               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    return median(l: l.sort())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmprbrhrqmq.swift:8:24: error: cannot convert value of type '()' to expected argument type '[Int]'\n    return median(l: l.sort())\n                       ^\n/tmp/tmprbrhrqmq.swift:8:24: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    return median(l: l.sort())\n                     ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    median := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "/tmp/tmpyj__viwh.swift:17:11: error: consecutive statements on a line must be separated by ';'\n    median := l[0]\n          ^\n          ;\n/tmp/tmpyj__viwh.swift:17:12: error: expected expression\n    median := l[0]\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected type\n    for i := 1; i < len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpyj__viwh.swift:18:12: error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:18:12: error: expected Sequence expression for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmpyj__viwh.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmpyj__viwh.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmpyj__viwh.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmpyj__viwh.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmpyj__viwh.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmpyj__viwh.swift:17:5: error: function is unused\n    median := l[0]\n    ^~~~~~\n/tmp/tmpyj__viwh.swift:23:12: error: cannot convert return expression of type '([Int]) -> Double' to return type 'Double'\n    return median\n           ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmp4f6kedev.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:11:7: error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp4f6kedev.swift:12:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmp4f6kedev.swift:13:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmp4f6kedev.swift:13:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmp4f6kedev.swift:13:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmp4f6kedev.swift:15:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmp4f6kedev.swift:15:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    // Write your code here\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "tmpff2nk19n/tmpff2nk19n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d93e33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d93b2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d93b2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d93b297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpff2nk19n                        0x000055d8c062a321 <unavailable> + 4897\n5    libc.so.6                          0x00002b7d9401f460 __libc_start_main + 245\n6    tmpff2nk19n                        0x000055d8c0629f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "/tmp/tmprozzlimz.swift:8:8: error: cannot find 'len' in scope\n    if len(l) == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:11:8: error: cannot find 'len' in scope\n    if len(l) == 1 {\n       ^~~\n/tmp/tmprozzlimz.swift:12:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n               Double( )\n/tmp/tmprozzlimz.swift:14:8: error: cannot find 'len' in scope\n    if len(l) == 2 {\n       ^~~\n/tmp/tmprozzlimz.swift:15:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[0] + l[1]) / 2.0\n                     ^\n               Double(      )\n/tmp/tmprozzlimz.swift:17:8: error: cannot find 'len' in scope\n    if len(l) % 2 == 0 {\n       ^~~\n/tmp/tmprozzlimz.swift:18:19: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                  ^~~\n/tmp/tmprozzlimz.swift:18:35: error: cannot find 'len' in scope\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                                  ^~~\n/tmp/tmprozzlimz.swift:18:31: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n                              ^\n               Double(                            )\n/tmp/tmprozzlimz.swift:20:14: error: cannot find 'len' in scope\n    return l[len(l) / 2]\n             ^~~\n/tmp/tmprozzlimz.swift:20:13: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return l[len(l) / 2]\n           ~^~~~~~~~~~~~\n           Double(      )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}