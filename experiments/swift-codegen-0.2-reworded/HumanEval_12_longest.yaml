name: HumanEval_12_longest
language: swift
prompt: "\n/// Out of array of strings, return the longest one. Return the first one\
  \ in case of multiple\n/// strings of the same length. Return nil in case the input\
  \ array is empty.\n/// >>> longest(strings: [] as [String])\n/// nil\n/// >>> longest(strings:\
  \ [\"a\", \"b\", \"c\"])\n/// \"a\"\n/// >>> longest(strings: [\"a\", \"bb\", \"\
  ccc\"])\n/// \"ccc\"\nfunc longest(strings: [String]) -> String? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(longest(strings: [] as [String]) == nil)\n\
  assert(longest(strings: [\"x\", \"y\", \"z\"]) == \"x\")\nassert(longest(strings:\
  \ [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")"
completions: ["  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "    if strings == nil {\n        return\
    \ nil\n    }\n    var max = strings[0]\n    for _, s := range strings {\n    \
    \    if len(s) > len(max) {\n            max = s\n        }\n    }\n    return\
    \ max", "    if strings == nil {\n        return nil\n    }\n    var maxLength:\
    \ Int = 0\n    var maxString: String = \"\"\n    for _, string := range strings\
    \ {\n        if len(string) > maxLength {\n            maxLength = len(string)\n\
    \            maxString = string\n        }\n    }\n    return maxString", "  if\
    \ strings == nil {\n    return nil\n  }\n  var max = strings[0]\n  for _, s :=\
    \ range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return\
    \ max", "  if strings == nil {\n    return nil\n  }\n  max := strings[0]\n  for\
    \ _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n\
    \  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max :=\
    \ strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n    \
    \  max = s\n    }\n  }\n  return max", "  if strings == nil {\n    return nil\n\
    \  }\n  if strings.length == 0 {\n    return nil\n  }\n  var max = strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  var\
    \ maxLen = 0\n  var maxStr = \"\"\n  for _, str := range strings {\n    if len(str)\
    \ > maxLen {\n      maxLen = len(str)\n      maxStr = str\n    }\n  }\n  return\
    \ maxStr", "    if len(strings) == 0 {\n        return nil\n    }\n    max :=\
    \ strings[0]\n    for _, s := range strings {\n        if len(s) > len(max) {\n\
    \            max = s\n        }\n    }\n    return max", "  if len(strings) ==\
    \ 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "    if len(strings) == 0 {\n        return nil\n    }\n    max\
    \ := strings[0]\n    for _, s := range strings {\n        if len(s) > len(max)\
    \ {\n            max = s\n        }\n    }\n    return max", "  if strings ==\
    \ nil {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if strings == nil {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "    if len(strings) == 0 {\n        return nil\n  \
    \  }\n    max := strings[0]\n    for _, s := range strings {\n        if len(s)\
    \ > len(max) {\n            max = s\n        }\n    }\n    return max", "  if\
    \ len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s :=\
    \ range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return\
    \ max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings) ==\
    \ 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if strings\
    \ == nil {\n    return nil\n  }\n  if len(strings) == 0 {\n    return nil\n  }\n\
    \  max := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max)\
    \ {\n      max = s\n    }\n  }\n  return max", "  if strings == nil {\n    return\
    \ nil\n  }\n  max := 0\n  maxStr := \"\"\n  for _, str := range strings {\n  \
    \  if len(str) > max {\n      max = len(str)\n      maxStr = str\n    }\n  }\n\
    \  return maxStr", "  if strings == nil {\n    return nil\n  }\n  if strings.length\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for i := 1; i < strings.length;\
    \ i += 1 {\n    if strings[i].length > max.length {\n      max = strings[i]\n\
    \    }\n  }\n  return max", "  if strings == nil {\n    return nil\n  }\n  if\
    \ strings.length == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if strings == nil {\n    return nil\n  }\n  if strings.length\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if strings.length == 0 {\n    return nil\n  }\n \
    \ max := strings[0]\n  for i := 1; i < strings.length; i++ {\n    if strings[i].length\
    \ > max.length {\n      max = strings[i]\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \   if strings == nil {\n        return nil\n    }\n    if strings.length == 0\
    \ {\n        return nil\n    }\n    max := strings[0]\n    for _, s := range strings\
    \ {\n        if len(s) > len(max) {\n            max = s\n        }\n    }\n \
    \   return max", "  if strings == nil {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if strings.length == 0 {\n    return nil\n  }\n \
    \ max := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n\
    \      max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings) ==\
    \ 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "    if strings.length == 0 {\n        return nil\n\
    \    }\n    max := strings[0]\n    for _, s := range strings {\n        if len(s)\
    \ > len(max) {\n            max = s\n        }\n    }\n    return max", "  if\
    \ len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s :=\
    \ range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return\
    \ max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings) ==\
    \ 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if strings.length\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "    if len(strings)\
    \ == 0 {\n        return nil\n    }\n    max := strings[0]\n    for _, s := range\
    \ strings {\n        if len(s) > len(max) {\n            max = s\n        }\n\
    \    }\n    return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if strings == nil {\n    return nil\n\
    \  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max)\
    \ {\n      max = s\n    }\n  }\n  return max", "    if len(strings) == 0 {\n \
    \       return nil\n    }\n    max := strings[0]\n    for _, s := range strings\
    \ {\n        if len(s) > len(max) {\n            max = s\n        }\n    }\n \
    \   return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings) ==\
    \ 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if strings\
    \ == nil {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "    if strings.length == 0 {\n        return nil\n\
    \    }\n    max := strings[0]\n    for _, s := range strings {\n        if len(s)\
    \ > len(max) {\n            max = s\n        }\n    }\n    return max", "  if\
    \ len(strings) == 0 {\n    return nil\n  }\n  var max = strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "    if strings == nil {\n        return nil\n    }\n    max :=\
    \ strings[0]\n    for _, s := range strings {\n        if len(s) > len(max) {\n\
    \            max = s\n        }\n    }\n    return max", "  if len(strings) ==\
    \ 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "    if\
    \ strings == nil {\n        return nil\n    }\n    max := strings[0]\n    for\
    \ _, s := range strings {\n        if len(s) > len(max) {\n            max = s\n\
    \        }\n    }\n    return max", "  if len(strings) == 0 {\n    return nil\n\
    \  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max)\
    \ {\n      max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n   \
    \ return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if\
    \ len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "    if strings.length == 0 {\n        return nil\n\
    \    }\n    max := strings[0]\n    for _, s := range strings {\n        if len(s)\
    \ > len(max) {\n            max = s\n        }\n    }\n    return max", "  if\
    \ strings.length == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if strings.length == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if strings == nil\
    \ {\n    return nil\n  }\n  if strings.length == 0 {\n    return nil\n  }\n  var\
    \ maxString = strings[0]\n  for i := 1; i < strings.length; i++ {\n    if strings[i].length\
    \ > maxString.length {\n      maxString = strings[i]\n    }\n  }\n  return maxString",
  "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "    if len(strings) == 0 {\n        return nil\n    }\n    max\
    \ := strings[0]\n    for _, s := range strings {\n        if len(s) > len(max)\
    \ {\n            max = s\n        }\n    }\n    return max", "  if strings ==\
    \ nil {\n    return nil\n  }\n  max := 0\n  maxStr := \"\"\n  for _, str := range\
    \ strings {\n    if len(str) > max {\n      max = len(str)\n      maxStr = str\n\
    \    }\n  }\n  return maxStr", "  if len(strings) == 0 {\n    return nil\n  }\n\
    \  var max = strings[0]\n  for _, s := range strings {\n    if len(s) > len(max)\
    \ {\n      max = s\n    }\n  }\n  return max", "  if strings.length == 0 {\n \
    \   return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if\
    \ len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "    if strings\
    \ == nil {\n        return nil\n    }\n    max := strings[0]\n    for _, s :=\
    \ range strings {\n        if len(s) > len(max) {\n            max = s\n     \
    \   }\n    }\n    return max", "  if len(strings) == 0 {\n    return nil\n  }\n\
    \  max := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max)\
    \ {\n      max = s\n    }\n  }\n  return max", "    if strings == nil {\n    \
    \    return nil\n    }\n    var max = strings[0]\n    for _, s := range strings\
    \ {\n        if len(s) > len(max) {\n            max = s\n        }\n    }\n \
    \   return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if strings.length == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings) ==\
    \ 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if strings.length == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _,\
    \ s := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  var max = strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  var\
    \ max = strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n\
    \      max = s\n    }\n  }\n  return max", "    if len(strings) == 0 {\n     \
    \   return nil\n    }\n    max := strings[0]\n    for _, s := range strings {\n\
    \        if len(s) > len(max) {\n            max = s\n        }\n    }\n    return\
    \ max", "  if len(strings) == 0 {\n    return nil\n  }\n  var maxLength = 0\n\
    \  var maxString = \"\"\n  for _, string := range strings {\n    if len(string)\
    \ > maxLength {\n      maxLength = len(string)\n      maxString = string\n   \
    \ }\n  }\n  return maxString", "  if len(strings) == 0 {\n    return nil\n  }\n\
    \  max := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max)\
    \ {\n      max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n   \
    \ return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if\
    \ len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if strings == nil {\n    return nil\n  }\n  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings) ==\
    \ 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "    if strings.length == 0 {\n        return nil\n\
    \    }\n    max := strings[0]\n    for _, s := range strings {\n        if len(s)\
    \ > len(max) {\n            max = s\n        }\n    }\n    return max", "  if\
    \ strings == nil {\n    return nil\n  }\n  max := 0\n  maxStr := \"\"\n  for _,\
    \ str := range strings {\n    if len(str) > max {\n      max = len(str)\n    \
    \  maxStr = str\n    }\n  }\n  return maxStr", "  if len(strings) == 0 {\n   \
    \ return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if\
    \ len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "    if len(strings)\
    \ == 0 {\n        return nil\n    }\n    max := strings[0]\n    for _, s := range\
    \ strings {\n        if len(s) > len(max) {\n            max = s\n        }\n\
    \    }\n    return max", "  if strings == nil {\n    return nil\n  }\n  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if strings == nil {\n    return nil\n  }\n  if strings.length\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for i := 1; i < strings.length;\
    \ i += 1 {\n    if strings[i].length > max.length {\n      max = strings[i]\n\
    \    }\n  }\n  return max", "  if strings == nil {\n    return nil\n  }\n  max\
    \ := 0\n  maxStr := \"\"\n  for _, str := range strings {\n    if len(str) > max\
    \ {\n      max = len(str)\n      maxStr = str\n    }\n  }\n  return maxStr", " \
    \   if strings.length == 0 {\n        return nil\n    }\n    max := strings[0]\n\
    \    for _, s := range strings {\n        if len(s) > len(max) {\n           \
    \ max = s\n        }\n    }\n    return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings) ==\
    \ 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if strings == nil {\n    return nil\n  }\n  if strings.length\
    \ == 0 {\n    return nil\n  }\n  var max = strings[0]\n  for i := 1; i < strings.length;\
    \ i += 1 {\n    if strings[i].length > max.length {\n      max = strings[i]\n\
    \    }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n \
    \ max := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n\
    \      max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if strings == nil\
    \ {\n    return nil\n  }\n  var max = strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if strings == nil {\n    return nil\n  }\n  if strings.length == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for i := 1; i < strings.length; i++ {\n   \
    \ if strings[i].length > max.length {\n      max = strings[i]\n    }\n  }\n  return\
    \ max", "  if strings == nil {\n    return nil\n  }\n  max := strings[0]\n  for\
    \ _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n\
    \  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max :=\
    \ strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n    \
    \  max = s\n    }\n  }\n  return max", "  if strings == nil {\n    return nil\n\
    \  }\n  var max = strings[0]\n  for _, s := range strings {\n    if len(s) > len(max)\
    \ {\n      max = s\n    }\n  }\n  return max", "  if strings.length == 0 {\n \
    \   return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if\
    \ len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if strings\
    \ == nil {\n    return nil\n  }\n  if strings.length == 0 {\n    return nil\n\
    \  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max)\
    \ {\n      max = s\n    }\n  }\n  return max", "  if strings.length == 0 {\n \
    \   return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if\
    \ len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if strings\
    \ == nil {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "    if strings == nil {\n        return nil\n    }\n\
    \    max := strings[0]\n    for _, s := range strings {\n        if len(s) > len(max)\
    \ {\n            max = s\n        }\n    }\n    return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "    if len(strings) == 0 {\n      \
    \  return nil\n    }\n    max := strings[0]\n    for _, s := range strings {\n\
    \        if len(s) > len(max) {\n            max = s\n        }\n    }\n    return\
    \ max", "    if len(strings) == 0 {\n        return nil\n    }\n    max := strings[0]\n\
    \    for _, s := range strings {\n        if len(s) > len(max) {\n           \
    \ max = s\n        }\n    }\n    return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  var max = strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if strings == nil\
    \ {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if strings == nil {\n    return nil\n  }\n  max :=\
    \ strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n    \
    \  max = s\n    }\n  }\n  return max", "    if strings == nil {\n        return\
    \ nil\n    }\n    var max = strings[0]\n    for _, s := range strings {\n    \
    \    if len(s) > len(max) {\n            max = s\n        }\n    }\n    return\
    \ max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if strings == nil {\n    return nil\n  }\n  max :=\
    \ strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n    \
    \  max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n\
    \  }\n  var max = strings[0]\n  for _, s := range strings {\n    if len(s) > len(max)\
    \ {\n      max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n   \
    \ return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if\
    \ len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if strings.length == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _,\
    \ s := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "    if len(strings)\
    \ == 0 {\n        return nil\n    }\n    var max = strings[0]\n    for i := 1;\
    \ i < len(strings); i++ {\n        if strings[i].length > max.length {\n     \
    \       max = strings[i]\n        }\n    }\n    return max", "    if strings ==\
    \ nil {\n        return nil\n    }\n    var max = strings[0]\n    for _, s :=\
    \ range strings {\n        if len(s) > len(max) {\n            max = s\n     \
    \   }\n    }\n    return max", "  if len(strings) == 0 {\n    return nil\n  }\n\
    \  var max = strings[0]\n  for _, s := range strings {\n    if len(s) > len(max)\
    \ {\n      max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n   \
    \ return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if\
    \ len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if strings == nil {\n    return nil\n\
    \  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max)\
    \ {\n      max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n   \
    \ return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if\
    \ len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if strings == nil {\n    return nil\n  }\n  var max = strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings) ==\
    \ 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if strings.length\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if strings == nil {\n    return nil\n  }\n  if strings.length\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "    if len(strings) == 0 {\n        return nil\n    }\n    var\
    \ max = strings[0]\n    for _, s := range strings {\n        if len(s) > len(max)\
    \ {\n            max = s\n        }\n    }\n    return max", "  if strings ==\
    \ nil {\n    return nil\n  }\n  var max = strings[0]\n  for i := 1; i < len(strings);\
    \ i++ {\n    if strings[i].length > max.length {\n      max = strings[i]\n   \
    \ }\n  }\n  return max", "    if len(strings) == 0 {\n        return nil\n   \
    \ }\n    max := strings[0]\n    for _, s := range strings {\n        if len(s)\
    \ > len(max) {\n            max = s\n        }\n    }\n    return max", "    if\
    \ len(strings) == 0 {\n        return nil\n    }\n    max := strings[0]\n    for\
    \ _, s := range strings {\n        if len(s) > len(max) {\n            max = s\n\
    \        }\n    }\n    return max", "  if len(strings) == 0 {\n    return nil\n\
    \  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max)\
    \ {\n      max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n   \
    \ return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if\
    \ len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n\
    \  for _, s := range strings {\n    if len(s) > len(max) {\n      max = s\n  \
    \  }\n  }\n  return max", "  if len(strings) == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if len(strings) == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings) ==\
    \ 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if strings.length\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", " \
    \ if len(strings) == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s\
    \ := range strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\
    \  return max", "    if strings == nil {\n        return nil\n    }\n    if strings.length\
    \ == 0 {\n        return nil\n    }\n    var maxString: String\n    var maxLength:\
    \ Int\n    for _, string := range strings {\n        if string == nil {\n    \
    \        continue\n        }\n        if len(string) > maxLength {\n         \
    \   maxString = string\n            maxLength = len(string)\n        }\n    }\n\
    \    return maxString", "  if strings.length == 0 {\n    return nil\n  }\n  max\
    \ := strings[0]\n  for _, s := range strings {\n    if len(s) > len(max) {\n \
    \     max = s\n    }\n  }\n  return max", "  if strings.length == 0 {\n    return\
    \ nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n    if len(s)\
    \ > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings) ==\
    \ 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings {\n\
    \    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max", "  if len(strings)\
    \ == 0 {\n    return nil\n  }\n  max := strings[0]\n  for _, s := range strings\
    \ {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return max"]
stop_tokens:
- "\n}"
