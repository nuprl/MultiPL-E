name: HumanEval_31_is_prime
language: swift
prompt: "\n/// Return true if a given number is prime, and false otherwise.\n/// >>>\
  \ is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
  \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
  /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
  func is_prime(n: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n:\
  \ 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
  assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
  \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
  assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
  \ 77) == false)\nassert(is_prime(n: 255379) == false)"
completions: []
stop_tokens:
- "\n}"
