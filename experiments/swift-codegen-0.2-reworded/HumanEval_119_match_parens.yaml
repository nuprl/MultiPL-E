name: HumanEval_119_match_parens
language: swift
prompt: "\n/// You are given an array of two strings, both strings consist of open\n\
  /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
  \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
  \ string will be good.\n/// A string S is considered to be good if and only if all\
  \ parentheses in S\n/// are balanced. For example: the string '(())()' is good,\
  \ while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way to make\
  \ a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(lst:\
  \ [\"()(\", \")\"])\n/// \"Yes\"\n/// >>> match_parens(lst: [\")\", \")\"])\n///\
  \ \"No\"\nfunc match_parens(lst: [String]) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(match_parens(lst: [\"()(\", \")\"]) == \"\
  Yes\")\nassert(match_parens(lst: [\")\", \")\"]) == \"No\")\nassert(match_parens(lst:\
  \ [\"(()(())\", \"())())\"]) == \"No\")\nassert(match_parens(lst: [\")())\", \"\
  (()()(\"]) == \"Yes\")\nassert(match_parens(lst: [\"(())))\", \"(()())((\"]) ==\
  \ \"Yes\")\nassert(match_parens(lst: [\"()\", \"())\"]) == \"No\")\nassert(match_parens(lst:\
  \ [\"(()(\", \"()))()\"]) == \"Yes\")\nassert(match_parens(lst: [\"((((\", \"((())\"\
  ]) == \"No\")\nassert(match_parens(lst: [\")(()\", \"(()(\"]) == \"No\")\nassert(match_parens(lst:\
  \ [\")(\", \")(\"]) == \"No\")\nassert(match_parens(lst: [\"(\", \")\"]) == \"Yes\"\
  )\nassert(match_parens(lst: [\")\", \"(\"]) == \"Yes\")"
completions: ["    var i int\n    var j int\n    var parens int\n    var balance int\n\
    \    var result string\n    for i = 0; i < len(lst); i++ {\n        if lst[i]\
    \ == \"(\" {\n            parens++\n        } else if lst[i] == \")\" {\n    \
    \        parens--\n        }\n    }\n    if parens == 0 {\n        return \"Yes\"\
    \n    }\n    for i = 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n  \
    \          balance++\n        } else if lst[i] == \")\" {\n            balance--\n\
    \        }\n    }\n    if balance == 0 {\n        return \"Yes\"\n    }\n    for\
    \ i = 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            balance++\n\
    \        } else if lst[i] == \")\" {\n            balance--\n        }\n    }\n\
    \    if balance == 0 {\n        return \"Yes\"\n    }\n    for i = 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            balance++\n        } else if\
    \ lst[i] == \")\" {\n            balance--\n        }\n    }\n    if balance ==\
    \ 0 {\n        return \"Yes\"\n    }\n    return \"No\"", "    var i, j int\n\
    \    var res = make([]bool, len(lst))\n    for i = 0; i < len(lst); i++ {\n  \
    \      if lst[i] == \"(\" {\n            res[i] = true\n        } else if lst[i]\
    \ == \")\" {\n            res[i] = false\n        }\n    }\n    for i = 0; i <\
    \ len(lst); i++ {\n        if res[i] {\n            for j = i + 1; j < len(lst);\
    \ j++ {\n                if lst[j] == \"(\" {\n                    res[j] = true\n\
    \                } else if lst[j] == \")\" {\n                    res[j] = false\n\
    \                }\n            }\n        }\n    }\n    for i = 0; i < len(lst);\
    \ i++ {\n        if res[i] {\n            return \"Yes\"\n        }\n    }\n \
    \   return \"No\"", "    var res String\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] == \"(\" {\n            res += \"(\"\n        } else {\n  \
    \          res += \")\"\n        }\n    }\n    return res", "    var res String\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n         \
    \   res += \"(\"\n        } else if lst[i] == \")\" {\n            if res == \"\
    \" {\n                return \"No\"\n            }\n            res = res[:len(res)-1]\n\
    \        }\n    }\n    if res == \"\" {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    var result = \"\"\n    var stack = []int{0}\n    for i := 0; i\
    \ < len(lst); i++ {\n        if lst[i] == \"(\" {\n            stack = append(stack,\
    \ 0)\n        } else {\n            stack = stack[:len(stack) - 1]\n        }\n\
    \        if len(stack) == 0 {\n            result += lst[i]\n        }\n    }\n\
    \    return result", "    var stack = []int{0}\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            stack = append(stack, 0)\n\
    \        } else {\n            stack = stack[:len(stack)-1]\n        }\n    }\n\
    \    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == \")\" {\n    \
    \        stack = append(stack, 0)\n        } else {\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n \
    \   return \"No\"", "    var parens = 0\n    for _, s := range lst {\n       \
    \ if s == \"(\" {\n            parens++\n        } else if s == \")\" {\n    \
    \        parens--\n        }\n    }\n    if parens == 0 {\n        return \"Yes\"\
    \n    }\n    return \"No\"", "    var stack = []int{0}\n    var result = \"\"\n\
    \    for _, s := range lst {\n        if s == \"(\" {\n            stack = append(stack,\
    \ 0)\n        } else {\n            stack = stack[:len(stack) - 1]\n        }\n\
    \        if len(stack) == 0 {\n            result += s\n        }\n    }\n   \
    \ return result", "    if len(lst) == 0 {\n        return \"Yes\"\n    }\n   \
    \ if len(lst) == 1 {\n        return \"No\"\n    }\n    if lst[0] == \")\" {\n\
    \        return \"No\"\n    }\n    if lst[len(lst)-1] == \"(\" {\n        return\
    \ \"No\"\n    }\n    for i := 1; i < len(lst)-1; i++ {\n        if lst[i] == \"\
    (\" && lst[i-1] == \")\" {\n            return \"No\"\n        }\n        if lst[i]\
    \ == \"(\" && lst[i+1] == \")\" {\n            return \"No\"\n        }\n    \
    \    if lst[i] == \")\" && lst[i-1] == \"(\" {\n            return \"No\"\n  \
    \      }\n        if lst[i] == \")\" && lst[i+1] == \"(\" {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"", "    var stack = []int{0}\n \
    \   var result = \"\"\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == \"(\" {\n            stack = append(stack, 0)\n        } else {\n       \
    \     stack = stack[:len(stack) - 1]\n        }\n        if len(stack) == 0 {\n\
    \            result += lst[i]\n        }\n    }\n    return result", "    var\
    \ parens = 0\n    var i = 0\n    var j = 0\n    var res = \"\"\n    for i < len(lst)\
    \ {\n        if lst[i] == '(' {\n            parens += 1\n        } else if lst[i]\
    \ == ')' {\n            parens -= 1\n        }\n        if parens == 0 {\n   \
    \         res += lst[i]\n            i += 1\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return res", "    var stack = []int{0}\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            stack = append(stack,\
    \ 0)\n        } else {\n            stack = stack[:len(stack) - 1]\n        }\n\
    \        if len(stack) == 0 {\n            return \"Yes\"\n        }\n    }\n\
    \    return \"No\"", "    var stack = []int{0}\n    for _, s := range lst {\n\
    \        if s == \"(\" {\n            stack = append(stack, 1)\n        } else\
    \ {\n            stack = stack[:len(stack) - 1]\n        }\n        if len(stack)\
    \ == 0 {\n            return \"No\"\n        }\n    }\n    return \"Yes\"", " \
    \   var stack []int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ '(' {\n            stack = append(stack, 0)\n        } else {\n            if\
    \ len(stack) == 0 {\n                return \"No\"\n            }\n          \
    \  stack = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack) == 0 {\n\
    \        return \"Yes\"\n    }\n    return \"No\"", "    var stack = []int{0}\n\
    \    var result = \"\"\n    for _, s := range lst {\n        if s == \"(\" {\n\
    \            stack = append(stack, 0)\n        } else if s == \")\" {\n      \
    \      stack = stack[:len(stack) - 1]\n        } else {\n            stack = append(stack,\
    \ len(stack) - 1)\n        }\n        if len(stack) == 0 {\n            result\
    \ += s\n        }\n    }\n    return result", "    var result String\n    var\
    \ i int\n    for i = 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n  \
    \          result += \"(\"\n        } else if lst[i] == \")\" {\n            if\
    \ result == \"\" {\n                return \"No\"\n            } else {\n    \
    \            result = result[:len(result) - 1]\n            }\n        }\n   \
    \ }\n    if result == \"\" {\n        return \"Yes\"\n    } else {\n        return\
    \ \"No\"\n    }", "    var i int\n    var j int\n    var parens int\n    var str\
    \ string\n    var res string\n    for i = 0; i < len(lst); i++ {\n        str\
    \ = lst[i]\n        if str[0] == '(' {\n            parens++\n        } else {\n\
    \            parens--\n        }\n        if parens < 0 {\n            return\
    \ \"No\"\n        }\n    }\n    for j = 0; j < len(lst); j++ {\n        str =\
    \ lst[j]\n        if str[0] == '(' {\n            parens++\n        } else {\n\
    \            parens--\n        }\n        if parens < 0 {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"", "    var res String\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            res +=\
    \ \"(\"\n        } else if lst[i] == \")\" {\n            if res == \"\" {\n \
    \               return \"No\"\n            } else {\n                res = res[:len(res)-1]\n\
    \            }\n        }\n    }\n    if res == \"\" {\n        return \"Yes\"\
    \n    } else {\n        return \"No\"\n    }", "    var result String\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            result\
    \ += \"(\"\n        } else {\n            result += \")\"\n        }\n    }\n\
    \    return result", "    var res String\n    var left, right int\n    for _,\
    \ s := range lst {\n        if s == \"(\" {\n            left++\n        } else\
    \ {\n            right++\n        }\n        if left > right {\n            res\
    \ += \"No\"\n            return res\n        }\n    }\n    res += \"Yes\"\n  \
    \  return res", "    var res String\n    for _, s := range lst {\n        if s\
    \ == \"(\" {\n            res += \"(\"\n        } else if s == \")\" {\n     \
    \       res += \")\"\n        } else {\n            return \"No\"\n        }\n\
    \    }\n    return res", "    var res = \"\"\n    var stack = []int{0}\n    for\
    \ _, s := range lst {\n        if s == \"(\" {\n            stack.push(0)\n  \
    \      } else if s == \")\" {\n            stack.pop()\n        } else {\n   \
    \         stack[len(stack) - 1]++\n        }\n        if len(stack) == 0 {\n \
    \           res += \"Yes\"\n            break\n        }\n    }\n    if len(stack)\
    \ != 0 {\n        res += \"No\"\n    }\n    return res", "    var result String\n\
    \    var count int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ \"(\" {\n            count++\n        } else if lst[i] == \")\" {\n        \
    \    count--\n        }\n        if count < 0 {\n            return \"No\"\n \
    \       }\n        result += lst[i]\n    }\n    return \"Yes\"", "    var stack\
    \ = []int{0}\n    for _, s := range lst {\n        if s == \"(\" {\n         \
    \   stack = append(stack, 0)\n        } else if s == \")\" {\n            stack\
    \ = stack[:len(stack) - 1]\n        } else {\n            stack[len(stack) - 1]++\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n \
    \   return \"No\"", "    var parens = 0\n    var i = 0\n    for i < len(lst) {\n\
    \        if lst[i] == '(' {\n            parens++\n        } else if lst[i] ==\
    \ ')' {\n            parens--\n        }\n        if parens < 0 {\n          \
    \  return \"No\"\n        }\n        i++\n    }\n    return \"Yes\"", "    if\
    \ len(lst) == 0 {\n        return \"Yes\"\n    }\n    if len(lst) == 1 {\n   \
    \     return \"No\"\n    }\n    if lst[0] == \")\" {\n        return \"No\"\n\
    \    }\n    if lst[len(lst) - 1] == \"(\" {\n        return \"No\"\n    }\n  \
    \  for i := 1; i < len(lst) - 1; i++ {\n        if lst[i] == \")\" {\n       \
    \     if lst[i - 1] == \"(\" {\n                return \"No\"\n            }\n\
    \        }\n    }\n    return \"Yes\"", "    var parens = 0\n    var str = \"\"\
    \n    for _, s := range lst {\n        if s == \"(\" {\n            parens +=\
    \ 1\n        } else if s == \")\" {\n            parens -= 1\n        }\n    \
    \    str += s\n    }\n    return parens == 0 ? \"Yes\" : \"No\"", "    var result\
    \ String\n    var left, right int\n    for i := 0; i < len(lst); i++ {\n     \
    \   if lst[i] == \"(\" {\n            left++\n        } else {\n            right++\n\
    \        }\n        if left == right {\n            result += lst[i]\n       \
    \ }\n    }\n    if left == right {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    var i, j int\n    var result = make([]bool, len(lst))\n    for\
    \ i = 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            j = i\n\
    \            for j < len(lst) {\n                if lst[j] == \")\" {\n      \
    \              result[j] = true\n                    break\n                }\n\
    \                j++\n            }\n            if j == len(lst) {\n        \
    \        return \"No\"\n            }\n        }\n    }\n    for i = 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \")\" {\n            j = i\n            for j <\
    \ len(lst) {\n                if lst[j] == \"(\" {\n                    result[j]\
    \ = true\n                    break\n                }\n                j++\n\
    \            }\n            if j == len(lst) {\n                return \"No\"\n\
    \            }\n        }\n    }\n    for i = 0; i < len(lst); i++ {\n       \
    \ if result[i] == false {\n            return \"No\"\n        }\n    }\n    return\
    \ \"Yes\"", "    var res String\n    for _, s := range lst {\n        if s ==\
    \ \"(\" {\n            res += \"(\"\n        } else if s == \")\" {\n        \
    \    if res == \"\" {\n                return \"No\"\n            }\n        \
    \    res = res[:len(res)-1]\n        }\n    }\n    if res == \"\" {\n        return\
    \ \"Yes\"\n    }\n    return \"No\"", "    var stack = []int{0}\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            stack = append(stack,\
    \ 1)\n        } else if lst[i] == \")\" {\n            stack = stack[:len(stack)-1]\n\
    \            if len(stack) == 0 {\n                return \"Yes\"\n          \
    \  }\n        }\n    }\n    return \"No\"", "    var res String\n    for _, s\
    \ := range lst {\n        if s == \"(\" {\n            res += \"(\"\n        }\
    \ else {\n            res += \")\"\n        }\n    }\n    if res == \"\" {\n \
    \       return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    var\
    \ stack = []int{0}\n    for i := 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ '(' {\n            stack = append(stack, 0)\n        } else {\n            stack\
    \ = stack[:len(stack)-1]\n            if len(stack) == 0 {\n                return\
    \ \"Yes\"\n            }\n        }\n    }\n    return \"No\"", "    var i int\n\
    \    var j int\n    var count int\n    var result string\n    var left string\n\
    \    var right string\n    var left_count int\n    var right_count int\n    var\
    \ left_balanced bool\n    var right_balanced bool\n    var left_balanced_count\
    \ int\n    var right_balanced_count int\n    var left_balanced_count_2 int\n \
    \   var right_balanced_count_2 int\n    var left_balanced_count_3 int\n    var\
    \ right_balanced_count_3 int\n    var left_balanced_count_4 int\n    var right_balanced_count_4\
    \ int\n    var left_balanced_count_5 int\n    var right_balanced_count_5 int\n\
    \    var left_balanced_count_6 int\n    var right_balanced_count_6 int\n    var\
    \ left_balanced_count_7 int\n    var right_balanced_count_7 int\n    var left_balanced_count_8\
    \ int\n    var right_balanced_count_8 int\n    var left_balanced_count_9 int\n\
    \    var right_balanced_count_9 int\n    var left_balanced_count_10 int\n    var\
    \ right_balanced_count_10 int\n    var left_balanced_count_11 int\n    var right_balanced_count_11\
    \ int\n    var left_balanced_count_12 int\n    var right_balanced_count_12 int\n\
    \    var left_balanced_count_13 int\n    var right_balanced_count_13 int\n   \
    \ var left_balanced_count_14 int\n    var right_balanced_count_14 int\n    var\
    \ left_balanced_count_15 int\n    var right_balanced_count_15 int\n    var left_balanced_count_16\
    \ int\n    var right_balanced_count_16 int\n    var left_balanced_count_17 int\n\
    \    var right_balanced_count_17 int\n    var left_balanced_count_18 int\n   \
    \ var right_balanced_count_18 int\n    var left_balanced_count_19 int\n    var\
    \ right_balanced_count_19 int\n    var left_balanced_count_20 int\n    var right_balanced_count_20\
    \ int\n    var left_balanced_count_21 int\n    var right_balanced_count", "  \
    \  var stack = []int{0}\n    var result = \"\"\n    for _, s := range lst {\n\
    \        if s == \"(\" {\n            stack = append(stack, 0)\n        } else\
    \ if s == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n\
    \            stack = append(stack, len(stack))\n        }\n        if len(stack)\
    \ == 0 {\n            result += s\n        }\n    }\n    return result", "   \
    \ var res String\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"\
    (\" {\n            res += \"(\"\n        } else if lst[i] == \")\" {\n       \
    \     if res == \"\" {\n                return \"No\"\n            } else {\n\
    \                res = res[:len(res)-1]\n            }\n        }\n    }\n   \
    \ return \"Yes\"", "    var parens = 0\n    var i = 0\n    var j = 0\n    for\
    \ i < len(lst) {\n        if lst[i] == '(' {\n            parens++\n        }\
    \ else if lst[i] == ')' {\n            parens--\n        }\n        if parens\
    \ == 0 {\n            j = i\n            break\n        }\n        i++\n    }\n\
    \    if parens == 0 {\n        return \"Yes\"\n    }\n    return \"No\"", "  \
    \  var stack = []int{0}\n    for _, s := range lst {\n        if s == \"(\" {\n\
    \            stack = append(stack, 1)\n        } else if s == \")\" {\n      \
    \      stack = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack) ==\
    \ 0 {\n        return \"Yes\"\n    }\n    return \"No\"", "    var res String\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n         \
    \   res += \"(\"\n        } else {\n            res += \")\"\n        }\n    }\n\
    \    if res == \"\" {\n        return \"Yes\"\n    } else {\n        return \"\
    No\"\n    }", "    var res String\n    for i := 0; i < len(lst); i++ {\n     \
    \   if lst[i] == \"(\" {\n            res += \"(\"\n        } else if lst[i] ==\
    \ \")\" {\n            if res == \"\" {\n                return \"No\"\n     \
    \       } else {\n                res = res[:len(res)-1]\n            }\n    \
    \    }\n    }\n    if res == \"\" {\n        return \"Yes\"\n    } else {\n  \
    \      return \"No\"\n    }", "    if len(lst) == 0 {\n        return \"Yes\"\n\
    \    }\n    if len(lst) == 1 {\n        return \"No\"\n    }\n    if lst[0] ==\
    \ \"(\" && lst[len(lst) - 1] == \")\" {\n        return \"Yes\"\n    }\n    if\
    \ lst[0] == \")\" && lst[len(lst) - 1] == \"(\" {\n        return \"No\"\n   \
    \ }\n    if lst[0] == \"(\" && lst[len(lst) - 1] == \"(\" {\n        return match_parens(lst[1:])\n\
    \    }\n    if lst[0] == \")\" && lst[len(lst) - 1] == \")\" {\n        return\
    \ match_parens(lst[1:])\n    }\n    return \"No\"", "    var res String\n    for\
    \ _, s := range lst {\n        if s == \"(\" {\n            res += \"(\"\n   \
    \     } else if s == \")\" {\n            res += \")\"\n        } else {\n   \
    \         return \"No\"\n        }\n    }\n    return res", "    var stack = []int{0}\n\
    \    for _, s := range lst {\n        if s == \"(\" {\n            stack = append(stack,\
    \ 1)\n        } else if s == \")\" {\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n \
    \   return \"No\"", "    var stack = []int{0}\n    for _, s := range lst {\n \
    \       if s == \"(\" {\n            stack = append(stack, 0)\n        } else\
    \ if s == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n\
    \            stack = append(stack, len(stack))\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return \"Yes\"\n    }\n    return \"No\"", "    var res String\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n         \
    \   res += \"(\"\n        } else if lst[i] == \")\" {\n            if res == \"\
    \" {\n                return \"No\"\n            } else {\n                res\
    \ = res[:len(res)-1]\n            }\n        }\n    }\n    if res == \"\" {\n\
    \        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    var\
    \ res = \"\"\n    for _, s := range lst {\n        if s == \"(\" {\n         \
    \   res += \"(\"\n        } else if s == \")\" {\n            res += \")\"\n \
    \       } else {\n            return \"No\"\n        }\n    }\n    return \"Yes\"",
  "    var res String\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"\
    (\" {\n            res += \"(\"\n        } else if lst[i] == \")\" {\n       \
    \     if res == \"\" {\n                return \"No\"\n            } else {\n\
    \                res = res[:len(res)-1]\n            }\n        }\n    }\n   \
    \ if res == \"\" {\n        return \"Yes\"\n    }\n    return \"No\"", "    var\
    \ res String\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\"\
    \ {\n            res += \"(\"\n        } else if lst[i] == \")\" {\n         \
    \   if res == \"\" {\n                return \"No\"\n            }\n         \
    \   res = res[:len(res)-1]\n        }\n    }\n    if res == \"\" {\n        return\
    \ \"Yes\"\n    }\n    return \"No\"", "    var i, j int\n    var res string\n\
    \    for i = 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n          \
    \  j = i\n            for j < len(lst) && lst[j] != \")\" {\n                j++\n\
    \            }\n            if j == len(lst) {\n                return \"No\"\n\
    \            }\n            res += lst[i:j+1]\n            i = j + 1\n       \
    \ }\n    }\n    return \"Yes\"", "    var stack = []int{}\n    for i := 0; i <\
    \ len(lst); i++ {\n        if lst[i] == \"(\" {\n            stack = append(stack,\
    \ 0)\n        } else if lst[i] == \")\" {\n            if len(stack) == 0 {\n\
    \                return \"No\"\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n \
    \   return \"No\"", "    var res String\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] == \"(\" {\n            res += \"(\"\n        } else if lst[i]\
    \ == \")\" {\n            if res == \"\" {\n                return \"No\"\n  \
    \          } else {\n                res = res[:len(res)-1]\n            }\n \
    \       }\n    }\n    return \"Yes\"", "    var res String\n    var left, right\
    \ int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n   \
    \         left++\n        } else {\n            right++\n        }\n        if\
    \ left == right {\n            res += lst[i]\n        }\n    }\n    if left ==\
    \ right {\n        return \"Yes\"\n    }\n    return \"No\"", "    var res String\n\
    \    for _, s := range lst {\n        if s == \")\" {\n            res += \"(\"\
    \n        } else if s == \"(\" {\n            res += \")\"\n        } else {\n\
    \            return \"No\"\n        }\n    }\n    return res", "    var res String\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n         \
    \   res += \"(\"\n        } else if lst[i] == \")\" {\n            if res == \"\
    \" {\n                return \"No\"\n            }\n            res = res[:len(res)-1]\n\
    \        }\n    }\n    if res == \"\" {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    var parens = 0\n    var i = 0\n    for i < len(lst) {\n      \
    \  if lst[i] == \"(\" {\n            parens++\n        } else if lst[i] == \"\
    )\" {\n            parens--\n        }\n        i++\n    }\n    if parens == 0\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    var res String\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n         \
    \   res += \"(\"\n        } else if lst[i] == \")\" {\n            if res == \"\
    \" {\n                return \"No\"\n            } else {\n                res\
    \ = res[:len(res)-1]\n            }\n        }\n    }\n    if res == \"\" {\n\
    \        return \"Yes\"\n    }\n    return \"No\"", "    var stack = []int{0}\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n         \
    \   stack = append(stack, 0)\n        } else if lst[i] == \")\" {\n          \
    \  stack = stack[:len(stack)-1]\n        } else {\n            stack[len(stack)-1]++\n\
    \        }\n        if len(stack) == 0 {\n            return \"No\"\n        }\n\
    \    }\n    return \"Yes\"", "    var res String\n    var parens []int\n    for\
    \ _, s := range lst {\n        if s == \"(\" {\n            parens = append(parens,\
    \ len(res))\n        } else {\n            if len(parens) == 0 {\n           \
    \     return \"No\"\n            }\n            if parens[len(parens)-1] == len(res)\
    \ {\n                res += s\n            } else {\n                return \"\
    No\"\n            }\n            parens = parens[0:len(parens)-1]\n        }\n\
    \    }\n    if len(parens) == 0 {\n        return \"Yes\"\n    }\n    return \"\
    No\"", "    var res String\n    var left, right int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            left++\n        } else {\n\
    \            right++\n        }\n        if left == right {\n            res +=\
    \ lst[i]\n        }\n    }\n    if left == right {\n        return \"Yes\"\n \
    \   } else {\n        return \"No\"\n    }", "    var stack = []int{0}\n    var\
    \ result = \"\"\n    for _, s := range lst {\n        if s == \"(\" {\n      \
    \      stack = append(stack, 0)\n        } else if s == \")\" {\n            stack\
    \ = stack[:len(stack) - 1]\n        } else {\n            stack[len(stack) - 1]++\n\
    \        }\n        result += s\n    }\n    if len(stack) == 0 {\n        return\
    \ \"Yes\"\n    }\n    return \"No\"", "    var res String\n    for i := 0; i <\
    \ len(lst); i++ {\n        if lst[i] == \"(\" {\n            res += \"(\"\n  \
    \      } else if lst[i] == \")\" {\n            if res == \"\" {\n           \
    \     return \"No\"\n            } else {\n                res = res[:len(res)-1]\n\
    \            }\n        }\n    }\n    return \"Yes\"", "    var stack = []int{0}\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n         \
    \   stack = append(stack, 0)\n        } else {\n            stack = stack[:len(stack)\
    \ - 1]\n        }\n        if len(stack) == 0 {\n            return \"Yes\"\n\
    \        }\n    }\n    return \"No\"", "    var stack = []int{}\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if lst[i] == '(' {\n            stack = append(stack,\
    \ 0)\n        } else {\n            stack = stack[:len(stack)-1]\n        }\n\
    \        if len(stack) == 0 {\n            return \"Yes\"\n        }\n    }\n\
    \    return \"No\"", "    var res String\n    for _, s := range lst {\n      \
    \  if s == \"(\" {\n            res += \"(\"\n        } else if s == \")\" {\n\
    \            res += \")\"\n        } else {\n            return \"No\"\n     \
    \   }\n    }\n    return res", "    var i int\n    var j int\n    var count int\n\
    \    var result bool\n    for i = 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ \"(\" {\n            count++\n        } else {\n            count--\n      \
    \  }\n        if count < 0 {\n            return \"No\"\n        }\n    }\n  \
    \  for j = 0; j < len(lst); j++ {\n        if lst[j] == \")\" {\n            count--\n\
    \        } else {\n            count++\n        }\n        if count < 0 {\n  \
    \          return \"No\"\n        }\n    }\n    return \"Yes\"", "    if len(lst)\
    \ == 0 {\n        return \"Yes\"\n    }\n    if len(lst) == 1 {\n        return\
    \ \"No\"\n    }\n    if lst[0] == \")\" {\n        return \"No\"\n    }\n    if\
    \ lst[len(lst) - 1] == \"(\" {\n        return \"No\"\n    }\n    if lst[0] ==\
    \ \"(\" {\n        return \"Yes\"\n    }\n    if lst[len(lst) - 1] == \"(\" {\n\
    \        return \"Yes\"\n    }\n    if lst[0] == \"(\" {\n        return \"Yes\"\
    \n    }\n    if lst[len(lst) - 1] == \"(\" {\n        return \"Yes\"\n    }\n\
    \    return \"No\"", "    var stack = []int{0}\n    for _, s := range lst {\n\
    \        if s == \"(\" {\n            stack = append(stack, 1)\n        } else\
    \ if s == \")\" {\n            stack = stack[:len(stack)-1]\n        }\n    }\n\
    \    if len(stack) == 0 {\n        return \"Yes\"\n    }\n    return \"No\"",
  "    var stack = []int{0}\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == '(' {\n            stack = append(stack, 0)\n        } else {\n         \
    \   stack = stack[:len(stack) - 1]\n            if len(stack) == 0 {\n       \
    \         return \"No\"\n            }\n        }\n    }\n    return \"Yes\"",
  "    var res String\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"\
    (\" {\n            res += \"(\"\n        } else if lst[i] == \")\" {\n       \
    \     if res == \"\" {\n                return \"No\"\n            } else {\n\
    \                res = res[:len(res)-1]\n            }\n        }\n    }\n   \
    \ if res == \"\" {\n        return \"Yes\"\n    } else {\n        return \"No\"\
    \n    }", "    var stack = []int{0}\n    for i := 0; i < len(lst); i++ {\n   \
    \     if lst[i] == \"(\" {\n            stack = append(stack, 0)\n        } else\
    \ {\n            stack = stack[:len(stack)-1]\n            if len(stack) == 0\
    \ {\n                return \"Yes\"\n            }\n        }\n    }\n    return\
    \ \"No\"", "    var res = \"\"\n    for _, s := range lst {\n        if s == \"\
    (\" {\n            res += \"(\"\n        } else if s == \")\" {\n            res\
    \ += \")\"\n        } else {\n            return \"No\"\n        }\n    }\n  \
    \  return \"Yes\"", "    var result String\n    var i int\n    var j int\n   \
    \ var p int\n    var q int\n    var parens int\n    var balance int\n    var parens_stack\
    \ []int\n    var balance_stack []int\n    for i = 0; i < len(lst); i++ {\n   \
    \     if lst[i] == \"(\" {\n            parens_stack = append(parens_stack, parens)\n\
    \            balance_stack = append(balance_stack, balance)\n            parens\
    \ = 0\n            balance = 0\n        } else if lst[i] == \")\" {\n        \
    \    balance = balance_stack[len(balance_stack) - 1]\n            balance_stack\
    \ = balance_stack[:len(balance_stack) - 1]\n            parens = parens_stack[len(parens_stack)\
    \ - 1]\n            parens_stack = parens_stack[:len(parens_stack) - 1]\n    \
    \        if balance == 0 {\n                result = result + lst[i]\n       \
    \     }\n        } else {\n            balance = balance + 1\n        }\n    }\n\
    \    if balance == 0 {\n        return \"Yes\"\n    }\n    return \"No\"", " \
    \   var res String\n    for _, s := range lst {\n        if s == \"(\" {\n   \
    \         res += \"(\"\n        } else if s == \")\" {\n            if res ==\
    \ \"\" {\n                return \"No\"\n            }\n            res = res[:len(res)-1]\n\
    \        }\n    }\n    if res == \"\" {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    var result = \"\"\n    var stack = []int{0}\n    for i := 0; i\
    \ < len(lst); i++ {\n        if lst[i] == \"(\" {\n            stack.append(1)\n\
    \        } else if lst[i] == \")\" {\n            stack.pop()\n        }\n   \
    \     if len(stack) == 0 {\n            result += lst[i]\n        }\n    }\n \
    \   return result", "    var stack = []int{0}\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == \"(\" {\n            stack = append(stack, 0)\n    \
    \    } else {\n            stack = stack[:len(stack)-1]\n        }\n        if\
    \ len(stack) == 0 {\n            return \"Yes\"\n        }\n    }\n    return\
    \ \"No\"", "    var res String\n    for _, s := range lst {\n        if s == \"\
    (\" {\n            res += \"(\"\n        } else if s == \")\" {\n            if\
    \ res == \"\" {\n                return \"No\"\n            } else {\n       \
    \         res = res[:len(res)-1]\n            }\n        }\n    }\n    if res\
    \ == \"\" {\n        return \"Yes\"\n    }\n    return \"No\"", "    var stack\
    \ = []int{}\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n\
    \            stack = append(stack, 0)\n        } else {\n            stack = stack[:len(stack)-1]\n\
    \        }\n        if len(stack) == 0 {\n            return \"Yes\"\n       \
    \ }\n    }\n    return \"No\"", "    var res String\n    for _, s := range lst\
    \ {\n        if s == \"(\" {\n            res += \"(\"\n        } else if s ==\
    \ \")\" {\n            if res == \"\" {\n                return \"No\"\n     \
    \       }\n            res = res[:len(res)-1]\n        }\n    }\n    if res ==\
    \ \"\" {\n        return \"Yes\"\n    }\n    return \"No\"", "    var i, j int\n\
    \    for i = 0; i < len(lst); i++ {\n        if lst[i] == '(' {\n            j\
    \ = i\n            for j < len(lst) {\n                if lst[j] == ')' {\n  \
    \                  break\n                }\n                j++\n           \
    \ }\n            if j == len(lst) {\n                return \"No\"\n         \
    \   }\n            lst[i] = ')'\n            lst[j] = '('\n            i = j\n\
    \        }\n    }\n    return \"Yes\"", "    var result String\n    var stack\
    \ []int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n \
    \           stack = append(stack, 0)\n        } else {\n            stack = stack[:len(stack)-1]\n\
    \        }\n        if len(stack) == 0 {\n            result += lst[i]\n     \
    \   }\n    }\n    return result", "    var res String\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            res += \"(\"\n        } else\
    \ if lst[i] == \")\" {\n            if res == \"\" {\n                return \"\
    No\"\n            } else {\n                res = res[:len(res)-1]\n         \
    \   }\n        }\n    }\n    if res == \"\" {\n        return \"Yes\"\n    }\n\
    \    return \"No\"", "    var parens = 0\n    var i = 0\n    for i < len(lst)\
    \ {\n        if lst[i] == \"(\" {\n            parens++\n        } else if lst[i]\
    \ == \")\" {\n            parens--\n        }\n        if parens < 0 {\n     \
    \       return \"No\"\n        }\n        i++\n    }\n    return \"Yes\"", " \
    \   var stack = []int{0}\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == \"(\" {\n            stack = append(stack, 0)\n        } else {\n       \
    \     stack = stack[:len(stack)-1]\n        }\n        if len(stack) == 0 {\n\
    \            return \"Yes\"\n        }\n    }\n    return \"No\"", "    var i\
    \ int\n    var j int\n    var count int\n    var result string\n    for i = 0;\
    \ i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            count++\n   \
    \     } else if lst[i] == \")\" {\n            count--\n        }\n        if\
    \ count < 0 {\n            return \"No\"\n        }\n    }\n    for i = 0; i <\
    \ len(lst); i++ {\n        if lst[i] == \"(\" {\n            result += \"(\"\n\
    \        } else if lst[i] == \")\" {\n            result += \")\"\n        }\n\
    \    }\n    return result", "    var res String\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            res += \"(\"\n        } else\
    \ if lst[i] == \")\" {\n            if res == \"\" {\n                return \"\
    No\"\n            }\n            res = res[:len(res)-1]\n        }\n    }\n  \
    \  if res == \"\" {\n        return \"Yes\"\n    }\n    return \"No\"", "    var\
    \ stack = []int{0}\n    for _, s := range lst {\n        if s == \"(\" {\n   \
    \         stack = append(stack, 1)\n        } else if s == \")\" {\n         \
    \   stack = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack) == 0 {\n\
    \        return \"Yes\"\n    }\n    return \"No\"", "    var i, j int\n    var\
    \ res bool\n    for i = 0; i < len(lst); i++ {\n        if lst[i] == '(' {\n \
    \           j = i\n            res = true\n        } else if lst[i] == ')' {\n\
    \            if !res {\n                return \"No\"\n            }\n       \
    \     res = false\n        }\n    }\n    if res {\n        return \"Yes\"\n  \
    \  }\n    return \"No\"", "    var result String\n    var stack []int\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            stack\
    \ = append(stack, 0)\n        } else {\n            stack = stack[:len(stack)-1]\n\
    \        }\n        if len(stack) == 0 {\n            result += lst[i]\n     \
    \   }\n    }\n    return result", "    var res String\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            res += \"(\"\n        } else\
    \ if lst[i] == \")\" {\n            if res == \"\" {\n                return \"\
    No\"\n            }\n            res = res[:len(res)-1]\n        }\n    }\n  \
    \  if res == \"\" {\n        return \"Yes\"\n    }\n    return \"No\"", "    var\
    \ stack []int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == '(' {\n\
    \            stack = append(stack, 0)\n        } else {\n            stack = stack[:len(stack)\
    \ - 1]\n        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n \
    \   }\n    return \"No\"", "    var stack = []int{0}\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == '(' {\n            stack = append(stack, 0)\n  \
    \      } else {\n            stack = stack[:len(stack)-1]\n            if len(stack)\
    \ == 0 {\n                return \"No\"\n            }\n        }\n    }\n   \
    \ return \"Yes\"", "    var res String\n    for _, s := range lst {\n        if\
    \ s == \"(\" {\n            res += \"(\"\n        } else if s == \")\" {\n   \
    \         if res == \"\" {\n                return \"No\"\n            } else\
    \ {\n                res = res[:len(res)-1]\n            }\n        }\n    }\n\
    \    if res == \"\" {\n        return \"Yes\"\n    }\n    return \"No\"", "  \
    \  var i, j int\n    var res String\n    for i = 0; i < len(lst); i++ {\n    \
    \    if lst[i] == \"(\" {\n            j = i\n            for j < len(lst) {\n\
    \                if lst[j] == \")\" {\n                    break\n           \
    \     }\n                j++\n            }\n            if j == len(lst) {\n\
    \                return \"No\"\n            }\n            res += lst[i:j+1]\n\
    \            i = j + 1\n        }\n    }\n    return \"Yes\"", "    var result\
    \ = \"\"\n    var left = 0\n    var right = 0\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == \"(\" {\n            left++\n        } else if lst[i]\
    \ == \")\" {\n            right++\n        }\n        if left == right {\n   \
    \         result += lst[i]\n        }\n    }\n    if left == right {\n       \
    \ return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    var stack\
    \ = []int{0}\n    for _, s := range lst {\n        if s == \"(\" {\n         \
    \   stack = append(stack, 1)\n        } else if s == \")\" {\n            stack\
    \ = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack) == 0 {\n     \
    \   return \"Yes\"\n    }\n    return \"No\"", "    var res String\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            res +=\
    \ \"(\"\n        } else if lst[i] == \")\" {\n            if res == \"\" {\n \
    \               return \"No\"\n            } else {\n                res = res[:len(res)-1]\n\
    \            }\n        }\n    }\n    if res == \"\" {\n        return \"Yes\"\
    \n    }\n    return \"No\"", "    var res String\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            res += \"(\"\n        } else\
    \ if lst[i] == \")\" {\n            if res == \"\" {\n                return \"\
    No\"\n            }\n            res = res[:len(res)-1]\n        }\n    }\n  \
    \  if res == \"\" {\n        return \"Yes\"\n    }\n    return \"No\"", "    var\
    \ res String\n    for _, s := range lst {\n        if s == \"(\" {\n         \
    \   res += \"(\"\n        } else if s == \")\" {\n            res += \")\"\n \
    \       } else {\n            return \"No\"\n        }\n    }\n    return res",
  "    var i = 0\n    var j = 0\n    var p = 0\n    var q = 0\n    var r = 0\n   \
    \ var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var\
    \ x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c\
    \ = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h =\
    \ 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n\
    \    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n \
    \   var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n  \
    \  var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n   \
    \ var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var\
    \ h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m\
    \ = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r =\
    \ 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n\
    \    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n \
    \   var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n  \
    \  var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n   \
    \ var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var\
    \ r = 0\n    var s = 0\n    var t = 0\n    var", "    var left, right int\n  \
    \  for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n           \
    \ left++\n        } else {\n            right++\n        }\n    }\n    if left\
    \ == right {\n        return \"Yes\"\n    } else {\n        return \"No\"\n  \
    \  }", "    var i int\n    var j int\n    var k int\n    var l int\n    var m\
    \ int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n\
    \    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n \
    \   var x int\n    var y int\n    var z int\n    var a int\n    var b int\n  \
    \  var c int\n    var d int\n    var e int\n    var f int\n    var g int\n   \
    \ var h int\n    var i int\n    var j int\n    var k int\n    var l int\n    var\
    \ m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r\
    \ int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n\
    \    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n \
    \   var c int\n    var d int\n    var e int\n    var f int\n    var g int\n  \
    \  var h int\n    var i int\n    var j int\n    var k int\n    var l int\n   \
    \ var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var\
    \ r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w\
    \ int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n\
    \    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n \
    \   var h int\n    var i int\n    var j int\n    var k int\n    var l int\n  \
    \  var m int\n    var n int\n    var o int\n    var p int\n    var q int\n   \
    \ var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var\
    \ w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b\
    \ int\n    var c int\n    var d int\n    var e int\n    var f int\n    var", " \
    \   var stack = []int{0}\n    var result = \"\"\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            stack = append(stack, 0)\n\
    \        } else {\n            stack = stack[:len(stack)-1]\n        }\n     \
    \   if len(stack) == 0 {\n            result += lst[i]\n        }\n    }\n   \
    \ return result", "    var stack = []int{0}\n    var result = \"\"\n    for _,\
    \ s := range lst {\n        if s == \"(\" {\n            stack.push(0)\n     \
    \   } else if s == \")\" {\n            if stack.pop() == 0 {\n              \
    \  result += \"No\"\n                break\n            }\n        } else {\n\
    \            stack[len(stack) - 1]++\n        }\n    }\n    return result", " \
    \   var stack []int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ '(' {\n            stack = append(stack, 0)\n        } else {\n            stack\
    \ = stack[:len(stack) - 1]\n        }\n        if len(stack) == 0 {\n        \
    \    return \"Yes\"\n        }\n    }\n    return \"No\"", "    var stack = []int{}\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == '(' {\n           \
    \ stack = append(stack, 0)\n        } else {\n            stack = stack[:len(stack)\
    \ - 1]\n        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n \
    \   }\n    return \"No\"", "    var res String\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            res += \"(\"\n        } else\
    \ {\n            res += \")\"\n        }\n    }\n    return res", "    var res\
    \ String\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n\
    \            res += \"(\"\n        } else if lst[i] == \")\" {\n            if\
    \ res == \"\" {\n                return \"No\"\n            }\n            res\
    \ = res[:len(res)-1]\n        }\n    }\n    return \"Yes\"", "    var stack =\
    \ []int{0}\n    for _, s := range lst {\n        if s == \"(\" {\n           \
    \ stack = append(stack, 0)\n        } else if s == \")\" {\n            stack\
    \ = stack[:len(stack) - 1]\n        } else {\n            stack[len(stack) - 1]++\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n \
    \   return \"No\"", "    var stack = []int{0}\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == \"(\" {\n            stack = append(stack, 0)\n    \
    \    } else if lst[i] == \")\" {\n            stack = stack[:len(stack)-1]\n \
    \       } else {\n            stack[len(stack)-1]++\n        }\n    }\n    if\
    \ len(stack) == 0 {\n        return \"Yes\"\n    }\n    return \"No\"", "    var\
    \ stack = []int{}\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == '('\
    \ {\n            stack = append(stack, 0)\n        } else {\n            stack\
    \ = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack) == 0 {\n     \
    \   return \"Yes\"\n    }\n    return \"No\"", "    var parens = 0\n    var i\
    \ = 0\n    for i < len(lst) {\n        if lst[i] == \"(\" {\n            parens++\n\
    \        } else if lst[i] == \")\" {\n            parens--\n        }\n      \
    \  if parens < 0 {\n            return \"No\"\n        }\n        i++\n    }\n\
    \    return \"Yes\"", "    var left, right int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            left++\n        } else if lst[i]\
    \ == \")\" {\n            right++\n        }\n    }\n    if left == right {\n\
    \        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    var\
    \ res String\n    for _, s := range lst {\n        if s == \"(\" {\n         \
    \   res += \"(\"\n        } else if s == \")\" {\n            if res == \"\" {\n\
    \                return \"No\"\n            }\n            res = res[:len(res)-1]\n\
    \        }\n    }\n    if res == \"\" {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    var res String\n    for i := 0; i < len(lst); i++ {\n        if\
    \ lst[i] == \"(\" {\n            res += \"(\"\n        } else if lst[i] == \"\
    )\" {\n            res += \")\"\n        } else {\n            return \"No\"\n\
    \        }\n    }\n    return \"Yes\"", "    var res String\n    for _, s := range\
    \ lst {\n        if s == \"(\" {\n            res += \"(\"\n        } else if\
    \ s == \")\" {\n            res += \")\"\n        } else {\n            return\
    \ \"No\"\n        }\n    }\n    return res", "    var result String\n    var stack\
    \ Stack\n    for _, s := range lst {\n        if s == \"(\" {\n            stack.Push(s)\n\
    \        } else if s == \")\" {\n            if stack.IsEmpty() {\n          \
    \      return \"No\"\n            }\n            result += stack.Pop()\n     \
    \   }\n    }\n    if stack.IsEmpty() {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    var res String\n    var left, right int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            left++\n        } else {\n\
    \            right++\n        }\n        if left == right {\n            res +=\
    \ lst[i]\n        }\n    }\n    if left == right {\n        return \"Yes\"\n \
    \   } else {\n        return \"No\"\n    }", "    var res String\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            res += \"\
    (\"\n        } else if lst[i] == \")\" {\n            if res == \"\" {\n     \
    \           return \"No\"\n            }\n            res = res[:len(res)-1]\n\
    \        }\n    }\n    if res == \"\" {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    var res String\n    var i int\n    for i = 0; i < len(lst); i++\
    \ {\n        if lst[i] == \"(\" {\n            res += \"(\"\n        } else if\
    \ lst[i] == \")\" {\n            if res == \"\" {\n                return \"No\"\
    \n            }\n            res = res[:len(res)-1]\n        }\n    }\n    if\
    \ res == \"\" {\n        return \"Yes\"\n    }\n    return \"No\"", "    var stack\
    \ []int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == '(' {\n   \
    \         stack = append(stack, 0)\n        } else {\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n \
    \   return \"No\"", "    var i, j int\n    var result string\n    for i < len(lst)\
    \ {\n        if lst[i] == '(' {\n            j = i\n            for j < len(lst)\
    \ {\n                if lst[j] == ')' {\n                    break\n         \
    \       }\n                j++\n            }\n            if j == len(lst) {\n\
    \                return \"No\"\n            }\n            result += lst[i:j+1]\n\
    \            i = j + 1\n        } else {\n            i++\n        }\n    }\n\
    \    return \"Yes\"", "    var res String\n    for _, s := range lst {\n     \
    \   if s == \")\" {\n            res += \"(\"\n        } else {\n            res\
    \ += s\n        }\n    }\n    if res == \"\" {\n        return \"Yes\"\n    }\n\
    \    return \"No\"", "    var i, j int\n    var result string\n    for i < len(lst)\
    \ {\n        if lst[i] == \"(\" {\n            j = i\n            for j < len(lst)\
    \ {\n                if lst[j] == \")\" {\n                    break\n       \
    \         }\n                j += 1\n            }\n            if j == len(lst)\
    \ {\n                return \"No\"\n            }\n            result += lst[i]\
    \ + lst[j]\n            i = j + 1\n        } else {\n            result += lst[i]\n\
    \            i += 1\n        }\n    }\n    return \"Yes\"", "    var res String\n\
    \    for _, s := range lst {\n        if s == \")\" {\n            res += \"(\"\
    \n        } else {\n            res += \")\"\n        }\n    }\n    if res ==\
    \ \"\" {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }",
  "    var result = \"\"\n    var stack = []int{0}\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == '(' {\n            stack.append(1)\n        } else\
    \ if lst[i] == ')' {\n            stack.pop()\n        }\n        if len(stack)\
    \ == 0 {\n            result += lst[i]\n        }\n    }\n    if len(stack) ==\
    \ 0 {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }", " \
    \   var res String\n    var left, right int\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == \"(\" {\n            left++\n        } else {\n    \
    \        right++\n        }\n        if left == right {\n            res += lst[i]\n\
    \        }\n    }\n    if left == right {\n        return \"Yes\"\n    }\n   \
    \ return \"No\"", "    var stack = []int{0}\n    var res = \"\"\n    for _, s\
    \ := range lst {\n        if s == \"(\" {\n            stack = append(stack, 0)\n\
    \        } else if s == \")\" {\n            stack = stack[:len(stack)-1]\n  \
    \      } else {\n            stack[len(stack)-1] += 1\n        }\n        if len(stack)\
    \ == 0 {\n            res += \"Yes\"\n            break\n        }\n    }\n  \
    \  if len(stack) > 0 {\n        res += \"No\"\n    }\n    return res", "    var\
    \ stack = []int{0}\n    for i := 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ \"(\" {\n            stack = append(stack, 0)\n        } else {\n          \
    \  stack = stack[:len(stack)-1]\n            if len(stack) == 0 {\n          \
    \      return \"No\"\n            }\n        }\n    }\n    return \"Yes\"", " \
    \   var result String\n    var count int\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] == \"(\" {\n            count++\n        } else if lst[i] ==\
    \ \")\" {\n            count--\n        }\n        if count < 0 {\n          \
    \  return \"No\"\n        }\n        result += lst[i]\n    }\n    return \"Yes\"",
  "    var res String\n    var stack = []int{0}\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == \"(\" {\n            stack = append(stack, 0)\n    \
    \    } else {\n            stack = stack[:len(stack) - 1]\n            if len(stack)\
    \ == 0 {\n                res += \"Yes\"\n                break\n            }\n\
    \        }\n    }\n    return res", "    var res String\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            res += \"(\"\n        } else\
    \ if lst[i] == \")\" {\n            if res == \"\" {\n                return \"\
    No\"\n            }\n            res = res[:len(res)-1]\n        }\n    }\n  \
    \  if res == \"\" {\n        return \"Yes\"\n    }\n    return \"No\"", "    var\
    \ res String\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\"\
    \ {\n            res += \"(\"\n        } else if lst[i] == \")\" {\n         \
    \   if res == \"\" {\n                return \"No\"\n            } else {\n  \
    \              res = res[:len(res)-1]\n            }\n        }\n    }\n    if\
    \ res == \"\" {\n        return \"Yes\"\n    } else {\n        return \"No\"\n\
    \    }", "    var stack = []int{}\n    for i := 0; i < len(lst); i++ {\n     \
    \   if lst[i] == '(' {\n            stack = append(stack, 0)\n        } else {\n\
    \            stack = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return \"Yes\"\n    }\n    return \"No\"", "    var res String\n\
    \    for _, s := range lst {\n        if s == \"(\" {\n            res += \"(\"\
    \n        } else if s == \")\" {\n            res += \")\"\n        } else {\n\
    \            return \"No\"\n        }\n    }\n    return \"Yes\"", "    var res\
    \ String\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n\
    \            res += \"(\"\n        } else if lst[i] == \")\" {\n            if\
    \ res == \"\" {\n                return \"No\"\n            } else {\n       \
    \         res = res[:len(res)-1]\n            }\n        }\n    }\n    if res\
    \ == \"\" {\n        return \"Yes\"\n    }\n    return \"No\"", "    var left,\
    \ right int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n\
    \            left++\n        } else {\n            right++\n        }\n    }\n\
    \    if left == right {\n        return \"Yes\"\n    } else {\n        return\
    \ \"No\"\n    }", "    var res String\n    for i := 0; i < len(lst); i++ {\n \
    \       if lst[i] == \"(\" {\n            res += \"(\"\n        } else if lst[i]\
    \ == \")\" {\n            res += \")\"\n        } else {\n            return \"\
    No\"\n        }\n    }\n    return \"Yes\"", "    var res String\n    var i int\n\
    \    for i = 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n          \
    \  res += \"(\"\n        } else if lst[i] == \")\" {\n            if res == \"\
    \" {\n                return \"No\"\n            } else {\n                res\
    \ = res[:len(res)-1]\n            }\n        }\n    }\n    return \"Yes\"", " \
    \   var stack = []int{0}\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == \"(\" {\n            stack = append(stack, 0)\n        } else if lst[i] ==\
    \ \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n      \
    \      stack[len(stack)-1]++\n        }\n    }\n    if len(stack) == 0 {\n   \
    \     return \"Yes\"\n    }\n    return \"No\"", "    var res String\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            res +=\
    \ \"(\"\n        } else if lst[i] == \")\" {\n            if res == \"\" {\n \
    \               return \"No\"\n            } else {\n                res = res[:len(res)-1]\n\
    \            }\n        }\n    }\n    if res == \"\" {\n        return \"Yes\"\
    \n    }\n    return \"No\"", "    if len(lst) == 0 {\n        return \"Yes\"\n\
    \    }\n    if len(lst) == 1 {\n        return \"No\"\n    }\n    if lst[0] ==\
    \ \"()\" {\n        return \"Yes\"\n    }\n    if lst[1] == \"()\" {\n       \
    \ return \"No\"\n    }\n    if lst[0] == \"()\" {\n        return \"No\"\n   \
    \ }\n    if lst[1] == \"()\" {\n        return \"Yes\"\n    }\n    if lst[0] ==\
    \ \"()\" {\n        return \"No\"\n    }\n    if lst[1] == \"()\" {\n        return\
    \ \"Yes\"\n    }\n    return \"No\"", "    if len(lst) == 0 {\n        return\
    \ \"Yes\"\n    }\n    if len(lst) == 1 {\n        return \"No\"\n    }\n    if\
    \ lst[0] == \")\" {\n        return \"No\"\n    }\n    if lst[len(lst)-1] == \"\
    (\" {\n        return \"No\"\n    }\n    if lst[0] == \"(\" && lst[len(lst)-1]\
    \ == \")\" {\n        return \"Yes\"\n    }\n    if lst[0] == \"(\" {\n      \
    \  return \"No\"\n    }\n    if lst[len(lst)-1] == \"(\" {\n        return \"\
    No\"\n    }\n    if lst[0] == \"(\" && lst[len(lst)-1] == \")\" {\n        return\
    \ \"Yes\"\n    }\n    if lst[0] == \"(\" {\n        return \"No\"\n    }\n   \
    \ if lst[len(lst)-1] == \"(\" {\n        return \"No\"\n    }\n    if lst[0] ==\
    \ \"(\" && lst[len(lst)-1] == \"(\" {\n        return \"Yes\"\n    }\n    if lst[0]\
    \ == \"(\" {\n        return \"No\"\n    }\n    if lst[len(lst)-1] == \"(\" {\n\
    \        return \"No\"\n    }\n    if lst[0] == \"(\" && lst[len(lst)-1] == \"\
    (\" {\n        return \"Yes\"\n    }\n    if lst[0] == \"(\" {\n        return\
    \ \"No\"\n    }\n    if lst[len(lst)-1] == \"(\" {\n        return \"No\"\n  \
    \  }\n    if lst[0] == \"(\" && lst[len(lst)-1] == \"(\" {\n        return \"\
    Yes\"\n    }\n    if lst[0] == \"(\" {\n        return \"No\"\n    }\n    if lst[len(lst)-1]\
    \ == \"(\" {\n        return \"No\"\n    }\n    if lst[0] == \"(\" && lst[len",
  "    if len(lst) == 0 {\n        return \"Yes\"\n    }\n    if len(lst) == 1 {\n\
    \        return \"No\"\n    }\n    if lst[0] == \")\" {\n        return \"No\"\
    \n    }\n    if lst[1] == \"(\" {\n        return \"No\"\n    }\n    if lst[0]\
    \ == \"(\" && lst[1] == \"(\" {\n        return \"Yes\"\n    }\n    if lst[0]\
    \ == \"(\" && lst[1] == \")\" {\n        return \"Yes\"\n    }\n    if lst[0]\
    \ == \"(\" && lst[1] == \")\" {\n        return \"Yes\"\n    }\n    if lst[0]\
    \ == \"(\" && lst[1] == \"(\" {\n        return \"Yes\"\n    }\n    return \"\
    No\"", "    var parens = 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == \"(\" {\n            parens++\n        } else if lst[i] == \")\" {\n    \
    \        parens--\n        }\n    }\n    if parens == 0 {\n        return \"Yes\"\
    \n    }\n    return \"No\"", "    var res = \"\"\n    var stack = []int{0}\n \
    \   for i := 0; i < len(lst); i++ {\n        if lst[i] == '(' {\n            stack.append(1)\n\
    \        } else {\n            stack.pop()\n            if stack.len() == 0 {\n\
    \                res += \"Yes\"\n                break\n            }\n      \
    \  }\n    }\n    return res", "    if len(lst) == 0 {\n        return \"Yes\"\n\
    \    }\n    \n    var res = \"\"\n    for _, s := range lst {\n        if s ==\
    \ \"(\" {\n            res += \"(\"\n        } else if s == \")\" {\n        \
    \    res += \")\"\n        } else {\n            return \"No\"\n        }\n  \
    \  }\n    return res", "    var stack = []int{0}\n    for _, s := range lst {\n\
    \        if s == \"(\" {\n            stack = append(stack, 0)\n        } else\
    \ {\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return \"Yes\"\n    }\n    return \"No\"", "    var res String\n\
    \    for _, s := range lst {\n        if s == \"(\" {\n            res += \"(\"\
    \n        } else if s == \")\" {\n            res += \")\"\n        } else {\n\
    \            return \"No\"\n        }\n    }\n    return res", "    var stack\
    \ = []int{0}\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\"\
    \ {\n            stack = append(stack, 0)\n        } else {\n            stack\
    \ = stack[:len(stack)-1]\n        }\n        if len(stack) == 0 {\n          \
    \  return \"Yes\"\n        }\n    }\n    return \"No\"", "    var stack = []int{0}\n\
    \    for _, s := range lst {\n        if s == \"(\" {\n            stack = append(stack,\
    \ 0)\n        } else if s == \")\" {\n            stack = stack[:len(stack) -\
    \ 1]\n        } else {\n            stack = append(stack, len(stack) - 1)\n  \
    \      }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n   \
    \ return \"No\"", "    var res String\n    for i := 0; i < len(lst); i++ {\n \
    \       if lst[i] == \"(\" {\n            res += \"(\"\n        } else {\n   \
    \         res += \")\"\n        }\n    }\n    if res == \"\" {\n        return\
    \ \"Yes\"\n    }\n    return \"No\"", "    var stack = []int{0}\n    var result\
    \ = \"\"\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n\
    \            stack.append(1)\n        } else if lst[i] == \")\" {\n          \
    \  stack.pop()\n        }\n        if len(stack) == 0 {\n            result +=\
    \ lst[i]\n        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n\
    \    }\n    return \"No\"", "    var i int\n    var j int\n    var count int\n\
    \    var result string\n    for i = 0; i < len(lst); i++ {\n        if lst[i]\
    \ == \"(\" {\n            count++\n        } else if lst[i] == \")\" {\n     \
    \       count--\n        }\n    }\n    if count == 0 {\n        return \"Yes\"\
    \n    }\n    for i = 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n  \
    \          for j = i + 1; j < len(lst); j++ {\n                if lst[j] == \"\
    )\" {\n                    break\n                }\n            }\n         \
    \   if j == len(lst) {\n                return \"No\"\n            }\n       \
    \     result += lst[i]\n            result += lst[j]\n            i = j\n    \
    \    }\n    }\n    return result", "    var result String\n    for i := 0; i <\
    \ len(lst); i++ {\n        if lst[i] == \"(\" {\n            result += \"(\"\n\
    \        } else if lst[i] == \")\" {\n            if result == \"\" {\n      \
    \          return \"No\"\n            } else {\n                result = result[:len(result)-1]\n\
    \            }\n        }\n    }\n    if result == \"\" {\n        return \"Yes\"\
    \n    } else {\n        return \"No\"\n    }", "    var stack = []int{}\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == '(' {\n            stack =\
    \ append(stack, 0)\n        } else {\n            stack = stack[:len(stack) -\
    \ 1]\n        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n   \
    \ }\n    return \"No\"", "    if len(lst) == 0 {\n        return \"Yes\"\n   \
    \ }\n    if len(lst) == 1 {\n        return \"No\"\n    }\n    if lst[0] == \"\
    )\" {\n        return \"No\"\n    }\n    if lst[1] == \"(\" {\n        return\
    \ \"No\"\n    }\n    if lst[0] == \"(\" && lst[1] == \"(\" {\n        return \"\
    Yes\"\n    }\n    if lst[0] == \")\" && lst[1] == \"(\" {\n        return \"Yes\"\
    \n    }\n    if lst[0] == \"(\" && lst[1] == \")\" {\n        return \"Yes\"\n\
    \    }\n    if lst[0] == \"(\" && lst[1] == \")\" {\n        return \"Yes\"\n\
    \    }\n    return \"No\"", "    var res String\n    var i int\n    for i = 0;\
    \ i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            res += \"(\"\n\
    \        } else {\n            res += \")\"\n        }\n    }\n    if res == \"\
    \" {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }", " \
    \   var stack = []int{}\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == '(' {\n            stack = append(stack, i)\n        } else {\n         \
    \   if len(stack) == 0 {\n                return \"No\"\n            }\n     \
    \       if lst[i] == ')' {\n                if stack[len(stack) - 1] == i {\n\
    \                    stack = stack[:len(stack) - 1]\n                } else {\n\
    \                    return \"No\"\n                }\n            }\n       \
    \ }\n    }\n    return \"Yes\"", "    var i = 0\n    var j = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n   \
    \ var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p\
    \ = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u =\
    \ 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n\
    \    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n \
    \   var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n   \
    \ var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var\
    \ u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z\
    \ = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e =\
    \ 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var", "    var res String\n    for _, s := range lst {\n        if s == \"\
    (\" {\n            res += \"(\"\n        } else if s == \")\" {\n            res\
    \ += \")\"\n        } else {\n            return \"No\"\n        }\n    }\n  \
    \  return res", "    var stack = []int{0}\n    var result = \"\"\n    for _, s\
    \ := range lst {\n        if s == \"(\" {\n            stack = append(stack, 0)\n\
    \        } else {\n            stack = stack[:len(stack) - 1]\n        }\n   \
    \     if len(stack) == 0 {\n            result += s\n        }\n    }\n    return\
    \ result", "    if len(lst) == 0 {\n        return \"Yes\"\n    }\n    if len(lst)\
    \ == 1 {\n        return \"No\"\n    }\n    if lst[0] == \")\" {\n        return\
    \ \"No\"\n    }\n    if lst[len(lst)-1] == \"(\" {\n        return \"No\"\n  \
    \  }\n    for i := 1; i < len(lst)-1; i++ {\n        if lst[i] == \"(\" && lst[i+1]\
    \ == \")\" {\n            lst[i] = \")\"\n            lst[i+1] = \"(\"\n     \
    \   }\n    }\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] == \"(\"\
    \ && lst[i+1] == \")\" {\n            return \"No\"\n        }\n    }\n    return\
    \ \"Yes\"", "    var res String\n    for _, s := range lst {\n        if s ==\
    \ \"(\" {\n            res += \"(\"\n        } else if s == \")\" {\n        \
    \    res += \")\"\n        } else {\n            return \"No\"\n        }\n  \
    \  }\n    return res", "    var i, j int\n    var parens = make([]int, len(lst))\n\
    \    for i = 0; i < len(lst); i++ {\n        if lst[i] == '(' {\n            parens[i]\
    \ = 1\n        } else {\n            parens[i] = -1\n        }\n    }\n    for\
    \ i = 0; i < len(lst); i++ {\n        if parens[i] == 1 {\n            for j =\
    \ i + 1; j < len(lst); j++ {\n                if lst[j] == '(' {\n           \
    \         parens[j] = 1\n                } else {\n                    parens[j]\
    \ = -1\n                }\n            }\n        }\n    }\n    for i = 0; i <\
    \ len(lst); i++ {\n        if parens[i] == -1 {\n            return \"No\"\n \
    \       }\n    }\n    return \"Yes\"", "    var i = 0\n    var j = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n  \
    \  var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n   \
    \ var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var\
    \ z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e\
    \ = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n   \
    \ var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var", "    var res String\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == \"(\" {\n            res += \"(\"\n        } else if lst[i]\
    \ == \")\" {\n            if res == \"\" {\n                return \"No\"\n  \
    \          } else {\n                res = res[:len(res)-1]\n            }\n \
    \       }\n    }\n    if res == \"\" {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    var stack = []int{}\n    for i, c := range lst {\n        if c\
    \ == '(' {\n            stack = append(stack, i)\n        } else if c == ')' {\n\
    \            if len(stack) == 0 {\n                return \"No\"\n           \
    \ }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return \"Yes\"\n    }\n    return \"No\"", "    var result String\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n         \
    \   result += \"(\"\n        } else {\n            result += \")\"\n        }\n\
    \    }\n    return result", "    var res String\n    for _, s := range lst {\n\
    \        if s == \")\" {\n            res += \"(\"\n        } else {\n       \
    \     res += s\n        }\n    }\n    if res == \"\" {\n        return \"Yes\"\
    \n    } else {\n        return \"No\"\n    }", "    var stack = []int{0}\n   \
    \ for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            stack\
    \ = append(stack, 0)\n        } else if lst[i] == \")\" {\n            stack =\
    \ stack[:len(stack)-1]\n        } else {\n            stack[len(stack)-1]++\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n \
    \   return \"No\"", '    return "Yes"', "    if len(lst) == 0 {\n        return\
    \ \"Yes\"\n    }\n    \n    var result = \"\"\n    var stack = []int{0}\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            stack\
    \ = append(stack, 0)\n        } else {\n            stack = stack[:len(stack)-1]\n\
    \        }\n        \n        if len(stack) == 0 {\n            result += \"Yes\"\
    \n            break\n        }\n        \n        if lst[i] == \")\" {\n     \
    \       stack[len(stack)-1]++\n        } else {\n            stack[len(stack)-1]--\n\
    \        }\n    }\n    \n    return result", "    var stack = []int{0}\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            stack\
    \ = append(stack, 0)\n        } else {\n            stack = stack[:len(stack)\
    \ - 1]\n        }\n        if len(stack) == 0 {\n            return \"Yes\"\n\
    \        }\n    }\n    return \"No\"", "    var i int\n    var j int\n    var\
    \ parens int\n    var s string\n    for i = 0; i < len(lst); i++ {\n        if\
    \ lst[i] == \"(\" {\n            parens++\n        } else if lst[i] == \")\" {\n\
    \            parens--\n        }\n    }\n    if parens == 0 {\n        return\
    \ \"Yes\"\n    }\n    for j = 0; j < len(lst); j++ {\n        if lst[j] == \"\
    (\" {\n            parens++\n        } else if lst[j] == \")\" {\n           \
    \ parens--\n        }\n        if parens == 0 {\n            s += lst[j]\n   \
    \         break\n        }\n    }\n    return \"No\"", "    var parens = 0\n \
    \   var result = \"\"\n    for _, s := range lst {\n        if s == \"(\" {\n\
    \            parens++\n        } else if s == \")\" {\n            parens--\n\
    \        }\n        result += s\n    }\n    return parens == 0 ? \"Yes\" : \"\
    No\"", "    var stack = []int{0}\n    for _, s := range lst {\n        if s ==\
    \ \"(\" {\n            stack = append(stack, 0)\n        } else {\n          \
    \  stack = stack[:len(stack)-1]\n        }\n    }\n    return \"Yes\" if len(stack)\
    \ == 0 else \"No\"", "    var stack = []int{}\n    for _, s := range lst {\n \
    \       if s == \"(\" {\n            stack = append(stack, 1)\n        } else\
    \ if s == \")\" {\n            stack = stack[:len(stack) - 1]\n        }\n   \
    \ }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n    return \"No\"",
  "    if len(lst) == 0 {\n        return \"Yes\"\n    }\n    if len(lst) == 1 {\n\
    \        return \"No\"\n    }\n    if lst[0] == \")\" {\n        return \"No\"\
    \n    }\n    if lst[len(lst) - 1] == \"(\" {\n        return \"No\"\n    }\n \
    \   if lst[0] == \"(\" {\n        return \"Yes\"\n    }\n    if lst[len(lst) -\
    \ 1] == \"(\" {\n        return \"Yes\"\n    }\n    for i := 1; i < len(lst) -\
    \ 1; i++ {\n        if lst[i] == \"(\" {\n            if lst[i + 1] == \")\" {\n\
    \                lst[i] = \")\"\n                lst[i + 1] = \"(\"\n        \
    \        return match_parens(lst)\n            }\n        }\n    }\n    return\
    \ \"No\"", "    var stack = []int{0}\n    var result = \"\"\n    for _, s := range\
    \ lst {\n        if s == \"(\" {\n            stack = append(stack, 0)\n     \
    \   } else {\n            stack = stack[:len(stack)-1]\n        }\n        if\
    \ len(stack) == 0 {\n            result += s\n        }\n    }\n    return result",
  "    var stack = []int{0}\n    var res = \"\"\n    for _, s := range lst {\n   \
    \     if s == \"(\" {\n            stack = append(stack, 0)\n        } else if\
    \ s == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n \
    \           stack[len(stack)-1]++\n        }\n        if len(stack) == 0 {\n \
    \           res += \"Yes\"\n            break\n        }\n    }\n    return res",
  "    var result String\n    for _, s := range lst {\n        if s == \"(\" {\n \
    \           result += \"(\"\n        } else if s == \")\" {\n            result\
    \ += \")\"\n        } else {\n            return \"No\"\n        }\n    }\n  \
    \  return result", "    var stack = []int{0}\n    for _, s := range lst {\n  \
    \      if s == \"(\" {\n            stack = append(stack, 1)\n        } else if\
    \ s == \")\" {\n            stack = stack[:len(stack) - 1]\n        }\n    }\n\
    \    if len(stack) == 0 {\n        return \"Yes\"\n    }\n    return \"No\"",
  "    var stack = []int{0}\n    var result = \"\"\n    for _, s := range lst {\n\
    \        if s == \"(\" {\n            stack = append(stack, 0)\n        } else\
    \ if s == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n\
    \            stack[len(stack)-1]++\n        }\n        if len(stack) == 0 {\n\
    \            result += s\n        }\n    }\n    return result", "    if len(lst)\
    \ == 0 {\n        return \"Yes\"\n    }\n    if len(lst) == 1 {\n        return\
    \ \"No\"\n    }\n    if lst[0] == \")\" {\n        return \"No\"\n    }\n    if\
    \ lst[len(lst) - 1] == \"(\" {\n        return \"No\"\n    }\n    for i := 1;\
    \ i < len(lst) - 1; i++ {\n        if lst[i] == \")\" && lst[i - 1] == \"(\" {\n\
    \            return \"No\"\n        }\n    }\n    return \"Yes\"", "    var i,\
    \ j int\n    var res bool\n    for i = 0; i < len(lst); i++ {\n        if lst[i]\
    \ == '(' {\n            j = i\n            res = true\n        } else {\n    \
    \        if res {\n                res = false\n                for j < len(lst)\
    \ {\n                    if lst[j] == '(' {\n                        break\n \
    \                   }\n                    j++\n                }\n          \
    \      if j == len(lst) {\n                    return \"Yes\"\n              \
    \  }\n            }\n        }\n    }\n    return \"No\"", "    var res String\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n         \
    \   res += \"(\"\n        } else if lst[i] == \")\" {\n            if res == \"\
    \" {\n                return \"No\"\n            } else {\n                res\
    \ = res[:len(res)-1]\n            }\n        }\n    }\n    if res == \"\" {\n\
    \        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    var\
    \ stack = []int{}\n    for _, s := range lst {\n        if s == \"(\" {\n    \
    \        stack = append(stack, 1)\n        } else if s == \")\" {\n          \
    \  stack = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack) == 0 {\n\
    \        return \"Yes\"\n    }\n    return \"No\"", "    var stack = []int{0}\n\
    \    var result = \"\"\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == \"(\" {\n            stack = append(stack, 0)\n        } else if lst[i] ==\
    \ \")\" {\n            stack = stack[:len(stack) - 1]\n        } else {\n    \
    \        stack[len(stack) - 1]++\n        }\n        if len(stack) == 0 {\n  \
    \          result += \"Yes\"\n            break\n        }\n    }\n    return\
    \ result", "    var res = \"\"\n    var left = 0\n    var right = 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            left++\n\
    \        } else if lst[i] == \")\" {\n            right++\n        }\n    }\n\
    \    if left == right {\n        res = \"Yes\"\n    } else {\n        res = \"\
    No\"\n    }\n    return res", "    var stack = []int{0}\n    var result = \"\"\
    \n    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n        \
    \    stack = append(stack, 0)\n        } else {\n            stack = stack[:len(stack)-1]\n\
    \            if len(stack) == 0 {\n                result += \"Yes\"\n       \
    \         break\n            }\n        }\n    }\n    return result", "    var\
    \ stack = []int{0}\n    for _, s := range lst {\n        if s == \"(\" {\n   \
    \         stack = append(stack, 1)\n        } else if s == \")\" {\n         \
    \   stack = stack[:len(stack) - 1]\n        }\n    }\n    if len(stack) == 0 {\n\
    \        return \"Yes\"\n    }\n    return \"No\"", "    var stack = []int{0}\n\
    \    for _, s := range lst {\n        if s == \"(\" {\n            stack = append(stack,\
    \ 0)\n        } else if s == \")\" {\n            stack = stack[:len(stack)-1]\n\
    \        } else {\n            stack[len(stack)-1] += 1\n        }\n    }\n  \
    \  if len(stack) == 0 {\n        return \"Yes\"\n    }\n    return \"No\"", " \
    \   var stack = []int{0}\n    for _, s := range lst {\n        if s == \"(\" {\n\
    \            stack = append(stack, 0)\n        } else if s == \")\" {\n      \
    \      stack = stack[:len(stack)-1]\n        } else {\n            stack = append(stack,\
    \ len(stack))\n        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\
    \n    }\n    return \"No\"", "    var stack = []int{0}\n    var result = \"\"\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n         \
    \   stack = append(stack, 0)\n        } else {\n            stack = stack[:len(stack)-1]\n\
    \            if len(stack) == 0 {\n                result += \"Yes\"\n       \
    \         break\n            }\n        }\n    }\n    return result", "    var\
    \ i int\n    var j int\n    var count int\n    var result string\n    for i =\
    \ 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            count++\n\
    \        } else if lst[i] == \")\" {\n            count--\n        }\n    }\n\
    \    if count == 0 {\n        return \"Yes\"\n    }\n    for i = 0; i < len(lst);\
    \ i++ {\n        if lst[i] == \"(\" {\n            for j = i + 1; j < len(lst);\
    \ j++ {\n                if lst[j] == \")\" {\n                    break\n   \
    \             }\n            }\n            if j == len(lst) {\n             \
    \   return \"No\"\n            }\n            result += lst[i] + lst[j]\n    \
    \        i = j\n        }\n    }\n    return result", "    var i, j int\n    var\
    \ res string\n    for i = 0; i < len(lst); i++ {\n        if lst[i] == \"(\" {\n\
    \            j = i\n            for j < len(lst) {\n                if lst[j]\
    \ == \")\" {\n                    break\n                }\n                j++\n\
    \            }\n            if j == len(lst) {\n                return \"No\"\n\
    \            }\n            res += match_parens(lst[i+1:j])\n            i = j\n\
    \        }\n    }\n    return res", "    var stack = []int{0}\n    for _, s :=\
    \ range lst {\n        if s == \"(\" {\n            stack = append(stack, 1)\n\
    \        } else if s == \")\" {\n            stack = stack[:len(stack) - 1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n \
    \   return \"No\"", "    var parens = 0\n    var result = \"\"\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] == \"(\" {\n            parens++\n  \
    \      } else if lst[i] == \")\" {\n            parens--\n        }\n        if\
    \ parens < 0 {\n            return \"No\"\n        }\n        result += lst[i]\n\
    \    }\n    return \"Yes\"", "    if len(lst) == 0 {\n        return \"Yes\"\n\
    \    }\n    \n    var left = 0\n    var right = 0\n    var result = \"\"\n   \
    \ for i := 0; i < len(lst); i++ {\n        if lst[i] == \"(\") {\n           \
    \ left++\n        } else if lst[i] == \")\" {\n            right++\n        }\
    \ else {\n            result += lst[i]\n        }\n        \n        if left ==\
    \ right {\n            left = 0\n            right = 0\n        }\n    }\n   \
    \ \n    if left == right {\n        return \"Yes\"\n    } else {\n        return\
    \ \"No\"\n    }", "    var res = \"\"\n    var parens = 0\n    for _, s := range\
    \ lst {\n        if s == \"(\" {\n            parens++\n        } else if s ==\
    \ \")\" {\n            parens--\n        }\n        if parens < 0 {\n        \
    \    return \"No\"\n        }\n        res += s\n    }\n    return \"Yes\""]
stop_tokens:
- "\n}"
