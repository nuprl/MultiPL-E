{
  "name": "HumanEval_66_digitSum",
  "language": "swift",
  "prompt": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum: Int = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmphpwvcw15.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmphpwvcw15.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmphpwvcw15.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmphpwvcw15.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    return sum(s, func(c: Char) -> Int {\n        return c.toUpper().ascii()\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp_b5wbkxu.swift:19:19: error: expected expression in list of expressions\n    return sum(s, func(c: Char) -> Int {\n                  ^\n/tmp/tmp_b5wbkxu.swift:19:23: error: expected identifier in function declaration\n    return sum(s, func(c: Char) -> Int {\n                      ^\n/tmp/tmp_b5wbkxu.swift:19:12: error: cannot find 'sum' in scope\n    return sum(s, func(c: Char) -> Int {\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum: Int = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp1136_mkn.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp1136_mkn.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp1136_mkn.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp1136_mkn.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    return sum(s, func(c: Char) -> Int {\n        return c.toUpperCase().asciiValue()\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpsab68pzl.swift:19:19: error: expected expression in list of expressions\n    return sum(s, func(c: Char) -> Int {\n                  ^\n/tmp/tmpsab68pzl.swift:19:23: error: expected identifier in function declaration\n    return sum(s, func(c: Char) -> Int {\n                      ^\n/tmp/tmpsab68pzl.swift:19:12: error: cannot find 'sum' in scope\n    return sum(s, func(c: Char) -> Int {\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum: Int = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpxv4hdph_.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpxv4hdph_.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpxv4hdph_.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpxv4hdph_.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpxv4hdph_.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum: Int = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmphpwvcw15.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmphpwvcw15.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmphpwvcw15.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmphpwvcw15.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    return sum(s, func(c: Char) -> Int {\n        return c.toUpper().ascii()\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp_b5wbkxu.swift:19:19: error: expected expression in list of expressions\n    return sum(s, func(c: Char) -> Int {\n                  ^\n/tmp/tmp_b5wbkxu.swift:19:23: error: expected identifier in function declaration\n    return sum(s, func(c: Char) -> Int {\n                      ^\n/tmp/tmp_b5wbkxu.swift:19:12: error: cannot find 'sum' in scope\n    return sum(s, func(c: Char) -> Int {\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    return sum(s, func(c: Char) -> Int {\n        return c.toUpper().asciiValue()\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpsafi5tsc.swift:19:19: error: expected expression in list of expressions\n    return sum(s, func(c: Char) -> Int {\n                  ^\n/tmp/tmpsafi5tsc.swift:19:23: error: expected identifier in function declaration\n    return sum(s, func(c: Char) -> Int {\n                      ^\n/tmp/tmpsafi5tsc.swift:19:12: error: cannot find 'sum' in scope\n    return sum(s, func(c: Char) -> Int {\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum: Int = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp1136_mkn.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp1136_mkn.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp1136_mkn.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp1136_mkn.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum: Int = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmphpwvcw15.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmphpwvcw15.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmphpwvcw15.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmphpwvcw15.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "tmpak36h3ov/tmpak36h3ov.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b682a179c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6829e70b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6829e70988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6829e6f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpak36h3ov                        0x000055baab04130c <unavailable> + 4876\n5    libc.so.6                          0x00002b682a365460 __libc_start_main + 245\n6    tmpak36h3ov                        0x000055baab040ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    return sum(s, func(c: Char) -> Int {\n        return c.to_i()\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp6vz_hv4a.swift:19:19: error: expected expression in list of expressions\n    return sum(s, func(c: Char) -> Int {\n                  ^\n/tmp/tmp6vz_hv4a.swift:19:23: error: expected identifier in function declaration\n    return sum(s, func(c: Char) -> Int {\n                      ^\n/tmp/tmp6vz_hv4a.swift:19:12: error: cannot find 'sum' in scope\n    return sum(s, func(c: Char) -> Int {\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum: Int = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpxv4hdph_.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpxv4hdph_.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpxv4hdph_.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpxv4hdph_.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpxv4hdph_.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    return sum(s, func(c: Char) -> Int {\n        return c.isUpper() ? c.codePoint() : 0\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpx427f2c8.swift:19:19: error: expected expression in list of expressions\n    return sum(s, func(c: Char) -> Int {\n                  ^\n/tmp/tmpx427f2c8.swift:19:23: error: expected identifier in function declaration\n    return sum(s, func(c: Char) -> Int {\n                      ^\n/tmp/tmpx427f2c8.swift:19:12: error: cannot find 'sum' in scope\n    return sum(s, func(c: Char) -> Int {\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    return sum(s, func(c: Char) -> Int {\n        return c.toUpper().ascii()\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp_b5wbkxu.swift:19:19: error: expected expression in list of expressions\n    return sum(s, func(c: Char) -> Int {\n                  ^\n/tmp/tmp_b5wbkxu.swift:19:23: error: expected identifier in function declaration\n    return sum(s, func(c: Char) -> Int {\n                      ^\n/tmp/tmp_b5wbkxu.swift:19:12: error: cannot find 'sum' in scope\n    return sum(s, func(c: Char) -> Int {\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum: Int = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpxv4hdph_.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpxv4hdph_.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpxv4hdph_.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpxv4hdph_.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpxv4hdph_.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum: Int = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpxv4hdph_.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpxv4hdph_.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpxv4hdph_.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpxv4hdph_.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpxv4hdph_.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpwuds5jnp.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpwuds5jnp.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpwuds5jnp.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpwuds5jnp.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpwuds5jnp.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 10\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    return sum(s, func(c: Char) -> Int {\n        return c.isUpper() ? c.codePointAscii() : 0\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpkk_653a3.swift:19:19: error: expected expression in list of expressions\n    return sum(s, func(c: Char) -> Int {\n                  ^\n/tmp/tmpkk_653a3.swift:19:23: error: expected identifier in function declaration\n    return sum(s, func(c: Char) -> Int {\n                      ^\n/tmp/tmpkk_653a3.swift:19:12: error: cannot find 'sum' in scope\n    return sum(s, func(c: Char) -> Int {\n           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum: Int = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpxv4hdph_.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpxv4hdph_.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpxv4hdph_.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpxv4hdph_.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpxv4hdph_.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum: Int = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmphpwvcw15.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmphpwvcw15.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmphpwvcw15.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmphpwvcw15.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 'A' + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp4eu_c3jg.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp4eu_c3jg.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp4eu_c3jg.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmp4eu_c3jg.swift:22:29: error: single-quoted string literal found, use '\"'\n            sum += int(c) - 'A' + 1\n                            ^~~\n                            \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmptc8jn2li.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmptc8jn2li.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmptc8jn2li.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - int('A')\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmpdcs15ib8.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmpdcs15ib8.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmpdcs15ib8.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n/tmp/tmpdcs15ib8.swift:22:33: error: single-quoted string literal found, use '\"'\n            sum += int(c) - int('A')\n                                ^~~\n                                \"A\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c) - 64\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)",
      "timestamp": 1664292535,
      "stdout": "",
      "stderr": "/tmp/tmp2e8a_sk1.swift:20:10: error: expected 'in' after for-each pattern\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:20:10: error: expected Sequence expression for for-each loop\n    for _, c := range s {\n         ^\n/tmp/tmp2e8a_sk1.swift:21:17: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                ^~~\n                \"A\"\n/tmp/tmp2e8a_sk1.swift:21:29: error: single-quoted string literal found, use '\"'\n        if c >= 'A' && c <= 'Z' {\n                            ^~~\n                            \"Z\"\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}